[{"authorTime":"2018-07-14 06:24:37","codes":[{"authorDate":"2018-08-03 05:33:39","commitOrder":12,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            \n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getInputs() == null) {\n                functionConfig.setInputs(new LinkedList<>());\n            }\n            if (functionConfig.getCustomSerdeInputs() == null) {\n                functionConfig.setCustomSerdeInputs(new HashMap<>());\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-08-03 05:33:39","endLine":461,"groupId":"5051","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/23/a6cb868e3549f35dfcafde5be87394c7a3e80a.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            \n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getInputs() == null) {\n                functionConfig.setInputs(new LinkedList<>());\n            }\n            if (functionConfig.getCustomSerdeInputs() == null) {\n                functionConfig.setCustomSerdeInputs(new HashMap<>());\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"B"},{"authorDate":"2018-07-14 06:24:37","commitOrder":12,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-07-14 06:24:37","endLine":303,"groupId":"1425","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d0/50ab515c4363be4bcf25ddca1ae54b1c75b397.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"NB"}],"commitId":"794b0391f47e5eaa1e1a83dd1a6451ab84fa6d76","commitMessage":"@@@rename args in CmdFunctions to be consistent with existing CLI arg naming conventions in pulsar (#2273)\n\n\n Motivation\n\nCurrently the CLI arg naming conventions is not consistent with that of the rest of Pulsar cli args\n\n\n Modifications\n\nRename args to use dashes to separate words instead of camel case.  Kept existing cli args for backwards compatibility purposes and hid them\n\nWill also do this for CmdSink and CmdSource when everyone is on board with is change","date":"2018-08-03 05:33:39","modifiedFileCount":"1","status":"M","submitter":"Boyang Jerry Peng"},{"authorTime":"2018-07-14 06:24:37","codes":[{"authorDate":"2018-08-07 16:06:13","commitOrder":13,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            \n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getInputs() == null) {\n                functionConfig.setInputs(new LinkedList<>());\n            }\n            if (functionConfig.getCustomSerdeInputs() == null) {\n                functionConfig.setCustomSerdeInputs(new HashMap<>());\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-08-07 16:06:13","endLine":464,"groupId":"5051","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a4/152a458874377894a64657eb2407b47df8e213.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            \n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getInputs() == null) {\n                functionConfig.setInputs(new LinkedList<>());\n            }\n            if (functionConfig.getCustomSerdeInputs() == null) {\n                functionConfig.setCustomSerdeInputs(new HashMap<>());\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2018-07-14 06:24:37","commitOrder":13,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-07-14 06:24:37","endLine":303,"groupId":"1425","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d0/50ab515c4363be4bcf25ddca1ae54b1c75b397.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"N"}],"commitId":"14765b2c4b452dcc3a0d1a4fd488142fd5111a93","commitMessage":"@@@Avoid creating output topic on tenant namespace if output-topic not provided (#2261)\n\n* Avoid creating output topic on tenant namespace if output-topic not provided\n\nfix test\n\nadd flag to skip output topic\n\nrename skip-output cmd\n\n* fix test\n","date":"2018-08-07 16:06:13","modifiedFileCount":"4","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-08-22 02:00:12","codes":[{"authorDate":"2018-08-22 02:00:12","commitOrder":14,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-08-22 02:00:12","endLine":474,"groupId":"15110","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/10/19853c9aa245bbc2ae13cb846ea12217b0541f.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            \n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getInputs() == null) {\n                functionConfig.setInputs(new LinkedList<>());\n            }\n            if (functionConfig.getCustomSerdeInputs() == null) {\n                functionConfig.setCustomSerdeInputs(new HashMap<>());\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"},{"authorDate":"2018-08-22 02:00:12","commitOrder":14,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-08-22 02:00:12","endLine":309,"groupId":"10003","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/8f/2aa5110abd68e5cd1ad116affc4d380278b4ed.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"7bff81e385b11469b8d0e76d311af5c314fa16e5","commitMessage":"@@@Integrate Functions with Schema (#2397)\n\n* Integrate functions and io with schema registry\n\n* Added missing license headers\n\n* Renamed topicSchema to inputSpecs\n\n* Fixed comments\n\n* Fixed cli arg docs\n\n* Fixed schema arguments\n\n* Fixed errors after merge\n\n* Fixed instance parameters\n\n* Fixed tests and addressed comments\n\n* Fixed PulsarSourceTest after merge\n\n* Took feedback and made changes backwards compatible\n\n* Fixed compilation issues\n\n* Fixed bug\n\n* fixed test compilation\n\n* Fixed bug\n\n* Fixed bug\n\n* Fix pythn instance\n\n* Fixed the way cmdsink populates sinkconfig\n\n* Addressed feedback\n","date":"2018-08-22 02:00:12","modifiedFileCount":"41","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-08-24 07:28:21","codes":[{"authorDate":"2018-08-22 02:00:12","commitOrder":15,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-08-22 02:00:12","endLine":474,"groupId":"15110","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/10/19853c9aa245bbc2ae13cb846ea12217b0541f.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"N"},{"authorDate":"2018-08-24 07:28:21","commitOrder":15,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-08-24 07:28:21","endLine":360,"groupId":"10003","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/db/00b9fd97e9614b7ae52824e29e55a0c974f935.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"225eeb70ed6e2f88783997a891fec642d1b7baac","commitMessage":"@@@Make all cli arguments follow consistent - notation instead of camelcase (#2432)\n\n","date":"2018-08-24 07:28:21","modifiedFileCount":"3","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-08-24 07:28:21","codes":[{"authorDate":"2018-08-31 13:39:59","commitOrder":16,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-08-31 13:39:59","endLine":483,"groupId":"15110","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/1b/a7751cfaed4415a7e714cadd74a59162ff8347.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2018-08-24 07:28:21","commitOrder":16,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-08-24 07:28:21","endLine":360,"groupId":"10003","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/db/00b9fd97e9614b7ae52824e29e55a0c974f935.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"N"}],"commitId":"03742b73b3ec0f391840f849041875621b47140f","commitMessage":"@@@Added the --custom-schema-inputs cli arg to allow custom schema input to functions (#2486)\n\n* Added the --custom-schema-inputs cli arg to allow custom schema input to functions\n\n* Update documentation regarding the same\n","date":"2018-08-31 13:39:59","modifiedFileCount":"1","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-08-24 07:28:21","codes":[{"authorDate":"2018-09-01 01:32:44","commitOrder":17,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-09-01 01:32:44","endLine":479,"groupId":"15110","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/39/96349b7ae04d87752aa8e159c94f69c9ad401f.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if  (null != autoAck) {\n                functionConfig.setAutoAck(autoAck);\n            } else {\n                functionConfig.setAutoAck(true);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2018-08-24 07:28:21","commitOrder":17,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-08-24 07:28:21","endLine":360,"groupId":"10003","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/db/00b9fd97e9614b7ae52824e29e55a0c974f935.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"N"}],"commitId":"5fb58d23eb9bf9298b368fac255f428da8209d59","commitMessage":"@@@Fix: auto-ack flag always set true (#2496)\n\nmake ato-ack default true","date":"2018-09-01 01:32:44","modifiedFileCount":"2","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-08-24 07:28:21","codes":[{"authorDate":"2018-09-01 05:56:06","commitOrder":18,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-09-01 05:56:06","endLine":476,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e5/678145aa1a5fd2898065684478d481a46e3190.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            functionConfig.setSkipOutput(skipOutput);\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2018-08-24 07:28:21","commitOrder":18,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-08-24 07:28:21","endLine":360,"groupId":"10003","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/db/00b9fd97e9614b7ae52824e29e55a0c974f935.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"N"}],"commitId":"581acc67ec68a0b1eaeba6d959d94ca2a55f077f","commitMessage":"@@@Fix semantics of skip output (#2468)\n\n* Fix semantics of skip output\n\n* Remove skip Output altogether\n\n* Remove doc about skip-output since we have removed it\n\n* Fixed unittest\n\n* Fixed test\n","date":"2018-09-01 05:56:06","modifiedFileCount":"3","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-08-24 07:28:21","codes":[{"authorDate":"2018-09-01 06:09:18","commitOrder":19,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-09-01 06:09:18","endLine":483,"groupId":"7332","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/7f/2f52122ed75fec197831a4734355039c840b50.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"},{"authorDate":"2018-08-24 07:28:21","commitOrder":19,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-08-24 07:28:21","endLine":360,"groupId":"10003","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/db/00b9fd97e9614b7ae52824e29e55a0c974f935.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"N"}],"commitId":"630fc0db6d4fb0af43675c8d9f6f8c93fb209552","commitMessage":"@@@add sub-name option to function cli (#2492)\n\n* add sub-name option to function cli\n\n* add docs\n","date":"2018-09-01 06:09:18","modifiedFileCount":"2","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-08-24 07:28:21","codes":[{"authorDate":"2018-09-20 01:01:21","commitOrder":20,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","date":"2018-09-20 01:01:21","endLine":493,"groupId":"7332","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/52/84b59f5ba4ba609de8842cdbe4ea11265111b0.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"M"},{"authorDate":"2018-08-24 07:28:21","commitOrder":20,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","date":"2018-08-24 07:28:21","endLine":360,"groupId":"10003","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/db/00b9fd97e9614b7ae52824e29e55a0c974f935.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"N"}],"commitId":"82aa2b83359c31f71eae40bb8f068ce703f08b59","commitMessage":"@@@Add support for dead letter topics for java functions (#2606)\n\n* Added ability to specify dead letter topic to functions\n\n* Fix bug\n\n* Added an example function that fails on a particular message consistently\n\n* Revert change\n","date":"2018-09-20 01:01:21","modifiedFileCount":"6","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-10-04 08:33:55","codes":[{"authorDate":"2018-10-04 08:33:55","commitOrder":21,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2018-10-04 08:33:55","endLine":494,"groupId":"7332","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c7/71e7b5d455b84678f48746212f127ac9a8b186.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n            \n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>(){}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2018-10-04 08:33:55","commitOrder":21,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-10-04 08:33:55","endLine":356,"groupId":"10003","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5d/0c84c90d810494b1101d2bd8f8b63aa4923115.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"9ccaf2c4b8409ae37960cfb9ed16fb60d3924a7f","commitMessage":"@@@Function Serverside Validation (#2701)\n\n* First cut of the serverside valiation\n\n* Revert unneeded changes\n\n* Do the easier checks first\n\n* Check for null\n\n* Simplify\n\n* Do the actual validation\n\n* Check for null runtime\n\n* Update Test\n\n* Fix build\n\n* Fix build\n\n* misc fixes\n\n* Add explicit check for serde\n\n* Changed for a better condition\n\n* Better serde check\n\n* Fixed some unittests\n\n* Fixed more tests\n\n* Fixed unittest\n\n* Fixed unittests\n\n* Fixed unittest\n\n* Stricter checks\n","date":"2018-10-04 08:33:55","modifiedFileCount":"16","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-10-24 00:20:33","codes":[{"authorDate":"2018-10-24 00:20:33","commitOrder":22,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2018-10-24 00:20:33","endLine":480,"groupId":"0","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/75/64d32aa8ed486e8ddfec55cdee1fffd477a4a1.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new org.apache.pulsar.functions.utils.Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2018-10-24 00:20:33","commitOrder":22,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-10-24 00:20:33","endLine":378,"groupId":"11657","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ba/eb5e0b095ae60c3598f5cb9e45a2a89db81905.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            org.apache.pulsar.functions.utils.Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new org.apache.pulsar.functions.utils.Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"aad9a001f03fe2206a276030953dfc3bd55a81ad","commitMessage":"@@@Moved FunctionConfig/SourceConfig/SinkConfig to a more common location (#2818)\n\n","date":"2018-10-24 00:20:33","modifiedFileCount":"39","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-10-24 00:20:33","codes":[{"authorDate":"2018-10-26 04:43:04","commitOrder":23,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            functionConfig.setResources(resources);\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2018-10-26 04:43:04","endLine":495,"groupId":"14944","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a7/5092c796dce82d1d25c0bdc07e114700b7be61.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            functionConfig.setResources(new Resources(cpu, ram, disk));\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2018-10-24 00:20:33","commitOrder":23,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-10-24 00:20:33","endLine":378,"groupId":"11657","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ba/eb5e0b095ae60c3598f5cb9e45a2a89db81905.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"}],"commitId":"a9a7f30f0e8887a43b283b4aa22670b8f61ee00a","commitMessage":"@@@Set function resources properly (#2841)\n\n* Set function resources properly\n\n* Added unittests\n","date":"2018-10-26 04:43:04","modifiedFileCount":"2","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-10-24 00:20:33","codes":[{"authorDate":"2018-11-02 03:01:02","commitOrder":24,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            functionConfig.setResources(resources);\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            FunctionConfigUtils.inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2018-11-02 03:01:02","endLine":484,"groupId":"14944","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2e/c5affca8b743770d8f9f9886f766aca77f212e.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            functionConfig.setResources(resources);\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"},{"authorDate":"2018-10-24 00:20:33","commitOrder":24,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-10-24 00:20:33","endLine":378,"groupId":"11657","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ba/eb5e0b095ae60c3598f5cb9e45a2a89db81905.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"}],"commitId":"42c2b0affa32dec1632e7b03e7dd52565f86692b","commitMessage":"@@@Consolidate all inferMissing logic inside ConfigUtils. (#2904)\n\n* Consolidate all inferMissing logic inside ConfigUtils.\n\n* Removed tests that are already covered in windowconfigutils\n\n* Reverted unneeded change\n","date":"2018-11-02 03:01:02","modifiedFileCount":"10","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-03 05:44:12","codes":[{"authorDate":"2018-11-03 05:44:12","commitOrder":25,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            functionConfig.setResources(resources);\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2018-11-03 05:44:12","endLine":477,"groupId":"14944","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/24/597eb2028e13eafe0a11de12f339ca6e849445.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            functionConfig.setResources(resources);\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            FunctionConfigUtils.inferMissingArguments(functionConfig);\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2018-11-03 05:44:12","commitOrder":25,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-11-03 05:44:12","endLine":378,"groupId":"11657","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/32/ebfc996b3f86b71acce5ade4095605fedaf155.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            inferMissingArguments(sourceConfig);\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"f36c43f3592ce451176a45076db2487260aaabe2","commitMessage":"@@@Move all validation/inferring missing args to serverside (#2907)\n\n* Move all validation/inferring missing args to serverside\n\n* Moved tests to serverside\n\n* Fixed all tests\n\n* Moved tests from admin to backend\n\n* remove unused var\n\n* Make it explicitly narclassloader\n\n* Dont copy nar files\n\n* Copy nar files\n\n* Some tests worjing\n\n* Do not mock ConnectorIo\n\n* Fix build\n\n* Some more enhancements to the tests\n\n* Ignore io packages in powermock\n\n* Fixed unittests\n\n* Remove unused stuff\n\n* Move changes from client side to serverside\n\n* More serverside tests\n\n* cleanup\n\n* Fixed unittests\n","date":"2018-11-03 05:44:12","modifiedFileCount":"13","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-21 11:09:34","codes":[{"authorDate":"2018-11-21 11:09:34","commitOrder":26,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2018-11-21 11:09:34","endLine":490,"groupId":"14944","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/0d1e191f6fae62638bb4aa794027c54b4d8c93.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            functionConfig.setResources(resources);\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            functionConfig.setAutoAck(autoAck);\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-11-21 11:09:34","commitOrder":26,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-11-21 11:09:34","endLine":374,"groupId":"11657","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3e/1b6ab22164d810ef96f1a5bf1dbe5773096b85.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (resources == null) {\n                resources = new Resources();\n            }\n            if (cpu != null) {\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                resources.setDisk(disk);\n            }\n            sourceConfig.setResources(resources);\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"1b0589bbe47211fc52430d757fa32a0cb784bcf5","commitMessage":"@@@Update Function Semantics (#2985)\n\n* Make update functions better\n\n* Compiled\n\n* more checks\n\n* bug fix\n\n* Added tests\n\n* Tests pass\n\n* Fixed tests\n\n* Fixed tests\n\n* Added tests\n\n* Added unittests\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Timeout fix\n\n* Fixed unittest\n\n* Fix unittest\n\n* Addressed feedback\n","date":"2018-11-21 11:09:34","modifiedFileCount":"25","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-21 11:09:34","codes":[{"authorDate":"2019-04-08 14:54:23","commitOrder":27,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (retainOrdering != null) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2019-04-08 14:54:23","endLine":479,"groupId":"6749","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/fe/ca138e185f16a78b16250a241acc9071376c02.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            functionConfig.setRetainOrdering(retainOrdering);\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2018-11-21 11:09:34","commitOrder":27,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-11-21 11:09:34","endLine":374,"groupId":"11657","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3e/1b6ab22164d810ef96f1a5bf1dbe5773096b85.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"5a7b1779e41a07b7e8a03d70aceb07b17f4bcfae","commitMessage":"@@@fix bug when updating function running in effectively-once (#3994)\n\n","date":"2019-04-08 14:54:23","modifiedFileCount":"1","status":"M","submitter":"Boyang Jerry Peng"},{"authorTime":"2018-11-21 11:09:34","codes":[{"authorDate":"2019-05-06 09:13:18","commitOrder":28,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (retainOrdering != null) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2019-05-06 09:13:18","endLine":498,"groupId":"6749","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/9b/72c3b2c4c72efdde4354093393dea5220fbbec.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (retainOrdering != null) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-11-21 11:09:34","commitOrder":28,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2018-11-21 11:09:34","endLine":374,"groupId":"11657","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3e/1b6ab22164d810ef96f1a5bf1dbe5773096b85.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"42c3bf94920f1d177a2403e06650500509f94aaa","commitMessage":"@@@[go function] support localrun and cluster mode for go function (#4174)\n\n\n Motivation\n\nMaster Issue: #3767 \n\nsupport  local-run and cluster mode for go function.\n\nin go function.  we can use:\n\n```\n./bin/pulsar-admin functions localrun/create  \n--go /Users/wolf4j/github.com/apache/pulsar/pulsar-function-go/examples/outputFunc.go \n--inputs persistent://public/default/my-topic \n--output persistent://public/default/test \n--tenant public \n--namespace default \n--name pulsarfunction \n--classname hellopulsar \n--log-topic logtopic\n```\n\nDifferent from `--jar` or `--py`.  `--go` uploads a complete executable file(including: instance file + user code file)\n\n","date":"2019-05-06 09:13:18","modifiedFileCount":"12","status":"M","submitter":"???"},{"authorTime":"2019-11-14 22:13:24","codes":[{"authorDate":"2019-11-14 22:13:24","commitOrder":29,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (retainOrdering != null) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2019-11-14 22:13:24","endLine":508,"groupId":"11239","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d3/05301fd6f4df2dc74ae279f58897f8396167c3.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (retainOrdering != null) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2019-11-14 22:13:24","commitOrder":29,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2019-11-14 22:13:24","endLine":402,"groupId":"11657","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d8/283d2aedf8e3e657ffa66e9e23bbab58296b3b.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"}],"commitId":"320cebe09f80116a2df81a5df1bcfd518ecf8c08","commitMessage":"@@@[functions] Allow functions to pass runtime specific options (#5400)\n\n\n Motivation\n\nThis commit adds a new argument for functions.  customRuntimeOptions.  which is passed to\nfuncions (as well as sources/sinks) that enables the ability to\ncustomize the runtime.\n\nThis is added primarily to support the `KubernetesManifestCustomizer`\ninterface. This interface is intended.  as the name indicates.  allows for\ncustomizing how the kubernetes manifests are generated before they\nare sent off to the k8s cluster. \n\nThis interface has a default implementation.  which allows for\nchanging the namespace.  labels.  nodeSelector labels.  and toleratations per function.\n\nThis interface is also pluggable.  allowing for more customized\nimplementations. For example.  the functions for a given tenant could be\nmapped to different pools of compute for isolation.\n\n\n Modifications\n\nFor the CLI and protobufs.  the modifications just involve plumbing through the new option.  `customRuntimeOptions` through the relevant code. \n\nFor kubernetes runtime.  the modifications are fairly straight forward.  adding a new configuration option.  `kubernetesManifestCustomizerClassName` and `kubernetesManifestCustomizerConfig` which are options under the kubernetes runtime.","date":"2019-11-14 22:13:24","modifiedFileCount":"32","status":"M","submitter":"Addison Higham"},{"authorTime":"2019-11-14 22:13:24","codes":[{"authorDate":"2020-02-14 05:33:20","commitOrder":30,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-02-14 05:33:20","endLine":514,"groupId":"11239","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/bd/063d2e54e95e32cbb9574e657768f169ae490d.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (retainOrdering != null) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2019-11-14 22:13:24","commitOrder":30,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2019-11-14 22:13:24","endLine":402,"groupId":"11657","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d8/283d2aedf8e3e657ffa66e9e23bbab58296b3b.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"N"}],"commitId":"bce14edd617300605c1212bf0ec27425c1dab2e7","commitMessage":"@@@add passSourceMessageProperty switch to pulsar functions (#6318)\n\nFixes #5116 \n\n\n Motivation\nBased on the request in #5116.  adding this flag can help reduce ambiguity and increase flexibility. By default.  the function passes source message properties.\n\n\n Modifications\n- add flags in pulsar admin client tools\n- update functions proto and functionConfig to contain the flag\n- update the pulsar sink to pass source message property if the flag is set","date":"2020-02-14 05:33:20","modifiedFileCount":"9","status":"M","submitter":"Neng Lu"},{"authorTime":"2019-11-14 22:13:24","codes":[{"authorDate":"2020-06-09 16:11:26","commitOrder":31,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-06-09 16:11:26","endLine":521,"groupId":"11239","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d9/41dfa6de6fece1a8a0be256d851ae5235a388d.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2019-11-14 22:13:24","commitOrder":31,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2019-11-14 22:13:24","endLine":402,"groupId":"11657","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d8/283d2aedf8e3e657ffa66e9e23bbab58296b3b.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"N"}],"commitId":"2aff473e598fe5e8ba9f8ed0860de35a67718725","commitMessage":"@@@[issue #6765]  Expose definition flags to function  (#6868)\n\n1?\nChange the value of the CLI tool parameter \"--custom-schema-input\" from\n\"TopicName-> schemaType\" \n to\n\"topicName-> {\" schemaType \":\" type\". \" jsr310ConversionEnabled \": true. \" alwaysAllowNull \": true}\"\n\n2?\nModify Function.proto.  add properties \"jsr310ConversionEnabled\".  \"alwaysAllowNull\"?So that we can receive the above 2 parameters\n\n3?\nModify the \"FunctionConfigUtils#convert\" method ? put the two parameters in \"CustomSchemaInputs\" into ConsumerSpec\n\n4?\nIn ?JavaInstanceRunnable#setupInput? method.  put the above 2 parameters into \"ConsumerConfig\" and pass it to \"PulsarSource\".  let it set the parameters into \"schema\" when creating the consumer of Source?\nSo that?The ?function? can get these 2 parameters from the message of \n?currentRecord?\n","date":"2020-06-09 16:11:26","modifiedFileCount":"13","status":"M","submitter":"feynmanlin"},{"authorTime":"2019-11-14 22:13:24","codes":[{"authorDate":"2020-07-02 15:14:30","commitOrder":32,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-07-02 15:14:30","endLine":528,"groupId":"11239","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5b/7f9c1df0ada8eddadcfc415cf71076649ebdd9.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2019-11-14 22:13:24","commitOrder":32,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2019-11-14 22:13:24","endLine":402,"groupId":"11657","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d8/283d2aedf8e3e657ffa66e9e23bbab58296b3b.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"N"}],"commitId":"7a80ca98c87a611b36713c82cc1901a81ab0014c","commitMessage":"@@@function to read compacted topics (#7193)\n\n\nFixes #5538\n\n\n Motivation\n\n\n\n\n Modifications\nIn function mode and sink mode.  PulsarSource can read compacted topic?\nBy `inputSpecs` parameter.  each topic can independently decide whether to read compacted\n\n\n Verifying this change\nunit test:\norg.apache.pulsar.io.PulsarFunctionE2ETest#testReadCompactedFunction\norg.apache.pulsar.io.PulsarFunctionE2ETest#testReadCompactedSink\n","date":"2020-07-02 15:14:30","modifiedFileCount":"8","status":"M","submitter":"feynmanlin"},{"authorTime":"2019-11-14 22:13:24","codes":[{"authorDate":"2020-09-11 12:47:22","commitOrder":33,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-09-11 12:47:22","endLine":535,"groupId":"4232","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d2/8bd69416585599c024f6829d44ef33ba8a085a.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2019-11-14 22:13:24","commitOrder":33,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2019-11-14 22:13:24","endLine":402,"groupId":"11657","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d8/283d2aedf8e3e657ffa66e9e23bbab58296b3b.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"N"}],"commitId":"809b249f832ae97eaa2c1a081f9760f4fa98f119","commitMessage":"@@@Allow ability to specify sub position in functions (#7891)\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\nFixes #5552\nFixes #6531\n\n\n Motivation\n\nAllowability to specify sub position in Pulsar Functions\n\n\n Modifications\n\n- add `retainEarliestPosition ` params\n- add test case\n\n","date":"2020-09-11 12:47:22","modifiedFileCount":"4","status":"M","submitter":"???"},{"authorTime":"2020-11-08 16:45:12","codes":[{"authorDate":"2020-11-08 16:45:12","commitOrder":34,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-11-08 16:45:12","endLine":542,"groupId":"0","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/da/cc8394c499f341bdf3304cf869303cfbdc071d.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-11-08 16:45:12","commitOrder":34,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2020-11-08 16:45:12","endLine":416,"groupId":"0","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/fc/c580ad68ba106c5283265d5197ceaa9106da54.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"2c9fe27038768b0b2747a712646c5a6556b6f7e6","commitMessage":"@@@[Issue 8382][Pulsar Function] Enable e2e encryption for Pulsar Function (#8432)\n\nFixes #8382 \n\n\n\n Motivation\n\nAdd the e2e encryption support for Pulsar Functions\n\n\n Modifications\n\n- Add `CryptoConfig` the encapsulate all the crypto related configs set by user\n- Add `CryptoSpec` to `Function` protobuf to container crypto information internally\n- Add `CryptoUtils` to help create instance.  convert between `CryptoConfig` and `CryptoSpec`\n- Add crypto validation method in `ValidatorUtils` to ensure the provided `CryptoKeyReader` Class has a ctor with `Map` arg\n- Updated the cli to allow user set crypto for consumer/producer when submitting the function\n- Update `PulsarSource`.  `PulsarSink` to use the crypto config if provided\n\n\n Verifying this change\n\n- [x] Make sure that the change passes the CI checks.","date":"2020-11-08 16:45:12","modifiedFileCount":"14","status":"M","submitter":"Neng Lu"},{"authorTime":"2020-11-17 02:20:06","codes":[{"authorDate":"2020-11-17 02:20:06","commitOrder":35,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-11-17 02:20:06","endLine":548,"groupId":"0","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f9/670e0bfb6ad01c2bd2d869a4ba6751a548778c.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"},{"authorDate":"2020-11-17 02:20:06","commitOrder":35,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2020-11-17 02:20:06","endLine":423,"groupId":"7545","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/52/1924b4bc821e9ea9f95b4c18eb95a45a2b9bf8.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"8da9422e822888cb198f62b4c7cd6ab3d400a87e","commitMessage":"@@@Support key_based batch builder for functions and sources (#8523)\n\n\n Motivation\n\nCurrently.  we support the Key_Shared subscription mode in Pulsar Function. In order to ensure that when batch is turned on.  we can also ensure that messages are distributed to different consumers in the correct order.  so we need to support the batch builder of `KEY_BASED` in Pulsar Functions.\n\n\n Modifications\n\n- Add `--batch-builder` for Pulsar Functions\n- Add `--batch-builder` for Pulsar Sources\n- Add test case","date":"2020-11-17 02:20:06","modifiedFileCount":"11","status":"M","submitter":"xiaolong ran"},{"authorTime":"2020-11-17 02:20:06","codes":[{"authorDate":"2020-11-21 10:05:25","commitOrder":36,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-11-21 10:05:25","endLine":556,"groupId":"1702","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/8d/f1fe40f6da364c5b7b6fd0b04776771813fbfa.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2020-11-17 02:20:06","commitOrder":36,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2020-11-17 02:20:06","endLine":423,"groupId":"7545","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/52/1924b4bc821e9ea9f95b4c18eb95a45a2b9bf8.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"66231e313502bfe74fd28976560d4391c5cdefa5","commitMessage":"@@@Enable pulsar function to send message to external pulsar cluster (#8434)\n\n\n Motivation\n\nEnable pulsar function to send message to external pulsar cluster\n\n\n Modifications\n\n*Describe the modifications you've done.*","date":"2020-11-21 10:05:25","modifiedFileCount":"25","status":"M","submitter":"Neng Lu"},{"authorTime":"2020-11-17 02:20:06","codes":[{"authorDate":"2020-12-11 12:57:25","commitOrder":37,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-12-11 12:57:25","endLine":562,"groupId":"4232","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2d/15a7c874b2259b340ac32a34ed09c4452adafb.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2020-11-17 02:20:06","commitOrder":37,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2020-11-17 02:20:06","endLine":423,"groupId":"7545","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/52/1924b4bc821e9ea9f95b4c18eb95a45a2b9bf8.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"8150da8e8ff69e8b549f4a1225ae75484950b17e","commitMessage":"@@@Add cmd flag of retain key ordering (#8886)\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\nFixes #6527 \n\n\n Motivation\n\nWe already support `key_shared` mode on Pulsar Functions in #7647.  However.  this option is not exposed in the command line parameters.  so users currently cannot use this function.\n\n\n Modifications\n\nIn this pull request.  we expose this cmd flag of `--retain-key-ordering` and add the docs for this.\n\n\n Verifying this change\n\nThe original test can cover this option.  so.  in this change.  no relevant code is added\n","date":"2020-12-11 12:57:25","modifiedFileCount":"1","status":"M","submitter":"xiaolong ran"},{"authorTime":"2021-03-16 12:12:58","codes":[{"authorDate":"2020-12-11 12:57:25","commitOrder":38,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-12-11 12:57:25","endLine":562,"groupId":"4232","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2d/15a7c874b2259b340ac32a34ed09c4452adafb.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"N"},{"authorDate":"2021-03-16 12:12:58","commitOrder":38,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                sourceConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2021-03-16 12:12:58","endLine":430,"groupId":"7545","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a6/daf264c86d69649d8bd073c1eddc41bac8725d.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"d0249e5695c75d8d65a4180fd599b17971368f33","commitMessage":"@@@[fix #9851] Add forwardSourceMessageProperty to SourceConfig (#9907)\n\nFixes #9851\n\n\n Motivation\n\nPulsar IO Source connector cannot pass message properties to destination topic.  as #9851 discussed.  it is a bug that `forwardSourceMessageProperty` is not applied to Source connector properly. \n\n\n Modifications\n\n- add `forwardSourceMessageProperty` to `SourceConfig`\n- add set `forwardSourceMessageProperty` from pulsar admin client\n- add related logic in `SourceConfigUtils`\n- add integration test","date":"2021-03-16 12:12:58","modifiedFileCount":"5","status":"M","submitter":"Rui Fu"},{"authorTime":"2021-03-19 06:13:58","codes":[{"authorDate":"2020-12-11 12:57:25","commitOrder":39,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-12-11 12:57:25","endLine":562,"groupId":"4232","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2d/15a7c874b2259b340ac32a34ed09c4452adafb.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"N"},{"authorDate":"2021-03-19 06:13:58","commitOrder":39,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2021-03-19 06:13:58","endLine":424,"groupId":"7545","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/7f/580f99e7f284cf154806e83996124ae0efd203.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                sourceConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"a4ca8f4b4b5fdd034f4bba2c17a0e40a6c33394b","commitMessage":"@@@Revert \"[fix #9851] Add forwardSourceMessageProperty to SourceConfig (#9907)\" (#9945)\n\nThis reverts commit d0249e5695c75d8d65a4180fd599b17971368f33.\n\nCo-authored-by: Jerry Peng <jerryp@splunk.com>","date":"2021-03-19 06:13:58","modifiedFileCount":"5","status":"M","submitter":"Boyang Jerry Peng"},{"authorTime":"2021-05-26 02:39:10","codes":[{"authorDate":"2020-12-11 12:57:25","commitOrder":40,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2020-12-11 12:57:25","endLine":562,"groupId":"4232","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2d/15a7c874b2259b340ac32a34ed09c4452adafb.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"N"},{"authorDate":"2021-05-26 02:39:10","commitOrder":40,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n            \n            if (null != batchSourceConfigString) {\n            \tsourceConfig.setBatchSourceConfig(parseBatchSourceConfigs(batchSourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2021-05-26 02:39:10","endLine":433,"groupId":"7545","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/9f/318c220de569a14143c9162e175b4992b8751b.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"85effc4048199e30bd70edac17bf2d86b49f003b","commitMessage":"@@@[Issue-10109] [admin client] Add --batch-source-config switch to the Pulsar Admin Source API (#10593)\n\nCo-authored-by: David Kjerrumgaard <dkjerrumgaard@splunk.com>","date":"2021-05-26 02:39:10","modifiedFileCount":"2","status":"M","submitter":"David Kjerrumgaard"},{"authorTime":"2021-05-26 02:39:10","codes":[{"authorDate":"2021-06-07 14:05:41","commitOrder":41,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2021-06-07 14:05:41","endLine":555,"groupId":"10484","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/72/2aa6b1d821facc90ad991e08b4790e5f62c0c8.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != externalPulsars) {\n                Type type = new TypeToken<Map<String, ExternalPulsarConfig>>() {\n                }.getType();\n                functionConfig.setExternalPulsars(new Gson().fromJson(externalPulsars, type));\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2021-05-26 02:39:10","commitOrder":41,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n            \n            if (null != batchSourceConfigString) {\n            \tsourceConfig.setBatchSourceConfig(parseBatchSourceConfigs(batchSourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2021-05-26 02:39:10","endLine":433,"groupId":"7545","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/9f/318c220de569a14143c9162e175b4992b8751b.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n            \n            if (null != batchSourceConfigString) {\n            \tsourceConfig.setBatchSourceConfig(parseBatchSourceConfigs(batchSourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"N"}],"commitId":"ed10d82dfe7645ddf3faa45df6a6597029fab4cd","commitMessage":"@@@Revert \"Enable pulsar function to send message to external pulsar clu? (#10843)\n\nThis reverts commit 66231e313502bfe74fd28976560d4391c5cdefa5.\n\n\n Motivation\n\nReverting since the external cluster configuration was not not needed as there are better ways to interact with external pulsar clusters.  A user can simply instantiate a Pulsar client.  producer.  or consumer in a function to interact with another pulsar cluster.  This feature is also a security risk as it does not security handle authentication data and it will be written as plain text in the internal function's metadata topic.","date":"2021-06-07 14:05:41","modifiedFileCount":"48","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-06-10 14:56:44","codes":[{"authorDate":"2021-06-07 14:05:41","commitOrder":42,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2021-06-07 14:05:41","endLine":555,"groupId":"10484","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/72/2aa6b1d821facc90ad991e08b4790e5f62c0c8.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"},{"authorDate":"2021-06-10 14:56:44","commitOrder":42,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            try {\n                if (null != sourceConfigString) {\n                    sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n                }\n            } catch (Exception ex) {\n                throw new ParameterException(\"Cannot parse source-config\", ex);\n            }\n            \n            if (null != batchSourceConfigString) {\n            \tsourceConfig.setBatchSourceConfig(parseBatchSourceConfigs(batchSourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2021-06-10 14:56:44","endLine":442,"groupId":"7545","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/33/7847e975a128c5fde9945ea5e9aeae54792e00.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            if (null != sourceConfigString) {\n                sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n            }\n            \n            if (null != batchSourceConfigString) {\n            \tsourceConfig.setBatchSourceConfig(parseBatchSourceConfigs(batchSourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"2c9ea8113cbe0d2cc97e4e308f5ed0487fd13c1e","commitMessage":"@@@#10882 use ObjectMapper to parse Sink/Source configs (#10883)\n\nFixes #10882\n\n\n Motivation\n\nCmdSink and CmdSource uses `gson` to parse the JSON configs from pulsar-admin. But most of connectors are using ObjectMapper to serde the config into actual class. `gson` will also convert int/long value into float by default.  which will lead ObjectMapper cannot parse float string into int/long correctlly.\n \n\n Modifications\n\nuse ObjectMapper to parse sink/source config.","date":"2021-06-10 14:56:44","modifiedFileCount":"4","status":"M","submitter":"Rui Fu"},{"authorTime":"2021-06-10 14:56:44","codes":[{"authorDate":"2021-07-14 15:04:46","commitOrder":43,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                if (userConfigMap == null) {\n                    userConfigMap = new HashMap<>();\n                }\n                functionConfig.setUserConfig(userConfigMap);\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","date":"2021-07-14 15:04:46","endLine":555,"groupId":"12363","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/49/7bfeb300fdf238be71bc36ddb306c88123429d.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            \r\n            if (null != fnConfigFile) {\n                functionConfig = CmdUtils.loadConfig(fnConfigFile, FunctionConfig.class);\n            } else {\n                functionConfig = new FunctionConfig();\n            }\n\n            if (null != fqfn) {\n                parseFullyQualifiedFunctionName(fqfn, functionConfig);\n            } else {\n                if (null != tenant) {\n                    functionConfig.setTenant(tenant);\n                }\n                if (null != namespace) {\n                    functionConfig.setNamespace(namespace);\n                }\n                if (null != functionName) {\n                    functionConfig.setName(functionName);\n                }\n            }\n\n            if (null != inputs) {\n                List<String> inputTopics = Arrays.asList(inputs.split(\",\"));\n                functionConfig.setInputs(inputTopics);\n            }\n            if (null != customSerdeInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSerdeInputMap = new Gson().fromJson(customSerdeInputString, type);\n                functionConfig.setCustomSerdeInputs(customSerdeInputMap);\n            }\n            if (null != customSchemaInputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customschemaInputMap = new Gson().fromJson(customSchemaInputString, type);\n                functionConfig.setCustomSchemaInputs(customschemaInputMap);\n            }\n            if (null != customSchemaOutputString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, String> customSchemaOutputMap = new Gson().fromJson(customSchemaOutputString, type);\n                functionConfig.setCustomSchemaOutputs(customSchemaOutputMap);\n            }\n            if (null != inputSpecs) {\n                Type type = new TypeToken<Map<String, ConsumerConfig>>() {}.getType();\n                functionConfig.setInputSpecs(new Gson().fromJson(inputSpecs, type));\n            }\n            if (null != topicsPattern) {\n                functionConfig.setTopicsPattern(topicsPattern);\n            }\n            if (null != output) {\n                functionConfig.setOutput(output);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                functionConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != logTopic) {\n                functionConfig.setLogTopic(logTopic);\n            }\n            if (null != className) {\n                functionConfig.setClassName(className);\n            }\n            if (null != outputSerdeClassName) {\n                functionConfig.setOutputSerdeClassName(outputSerdeClassName);\n            }\n\n            if (null != schemaType) {\n                functionConfig.setOutputSchemaType(schemaType);\n            }\n            if (null != processingGuarantees) {\n                functionConfig.setProcessingGuarantees(processingGuarantees);\n            }\n\n            if (null != retainOrdering) {\n                functionConfig.setRetainOrdering(retainOrdering);\n            }\n\n            if (null != retainKeyOrdering) {\n                functionConfig.setRetainKeyOrdering(retainKeyOrdering);\n            }\n\n            if (isNotBlank(batchBuilder)) {\n                functionConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != forwardSourceMessageProperty) {\n                functionConfig.setForwardSourceMessageProperty(forwardSourceMessageProperty);\n            }\n\n            if (isNotBlank(subsName)) {\n                functionConfig.setSubName(subsName);\n            }\n\n            if (null != subsPosition) {\n                functionConfig.setSubscriptionPosition(subsPosition);\n            }\n\n            if (null != userConfigString) {\n                Type type = new TypeToken<Map<String, String>>() {}.getType();\n                Map<String, Object> userConfigMap = new Gson().fromJson(userConfigString, type);\n                functionConfig.setUserConfig(userConfigMap);\n            }\n            if (functionConfig.getUserConfig() == null) {\n                functionConfig.setUserConfig(new HashMap<>());\n            }\n\n            if (parallelism != null) {\n                functionConfig.setParallelism(parallelism);\n            }\n\n            Resources resources = functionConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                functionConfig.setResources(resources);\n            }\n\n            if (timeoutMs != null) {\n                functionConfig.setTimeoutMs(timeoutMs);\n            }\n\n            if (customRuntimeOptions != null) {\n                functionConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n\n            \r\n            WindowConfig windowConfig = functionConfig.getWindowConfig();\n            if (null != windowLengthCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthCount(windowLengthCount);\n            }\n            if (null != windowLengthDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setWindowLengthDurationMs(windowLengthDurationMs);\n            }\n            if (null != slidingIntervalCount) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalCount(slidingIntervalCount);\n            }\n            if (null != slidingIntervalDurationMs) {\n                if (windowConfig == null) {\n                    windowConfig = new WindowConfig();\n                }\n                windowConfig.setSlidingIntervalDurationMs(slidingIntervalDurationMs);\n            }\n\n            functionConfig.setWindowConfig(windowConfig);\n\n            if (autoAck != null) {\n                functionConfig.setAutoAck(autoAck);\n            }\n\n            if (null != maxMessageRetries) {\n                functionConfig.setMaxMessageRetries(maxMessageRetries);\n            }\n            if (null != deadLetterTopic) {\n                functionConfig.setDeadLetterTopic(deadLetterTopic);\n            }\n\n            if (null != jarFile) {\n                functionConfig.setJar(jarFile);\n            }\n\n            if (null != pyFile) {\n                functionConfig.setPy(pyFile);\n            }\n\n            if (null != goFile) {\n                functionConfig.setGo(goFile);\n            }\n\n            if (functionConfig.getJar() != null) {\n                userCodeFile = functionConfig.getJar();\n            } else if (functionConfig.getPy() != null) {\n                userCodeFile = functionConfig.getPy();\n            } else if (functionConfig.getGo() != null) {\n                userCodeFile = functionConfig.getGo();\n            }\n\n            \r\n            validateFunctionConfigs(functionConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2021-06-10 14:56:44","commitOrder":43,"curCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            try {\n                if (null != sourceConfigString) {\n                    sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n                }\n            } catch (Exception ex) {\n                throw new ParameterException(\"Cannot parse source-config\", ex);\n            }\n            \n            if (null != batchSourceConfigString) {\n            \tsourceConfig.setBatchSourceConfig(parseBatchSourceConfigs(batchSourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","date":"2021-06-10 14:56:44","endLine":442,"groupId":"12363","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"processArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/33/7847e975a128c5fde9945ea5e9aeae54792e00.src","preCode":"        void processArguments() throws Exception {\n            super.processArguments();\n            \r\n            mergeArgs();\n\n            if (null != sourceConfigFile) {\n                this.sourceConfig = CmdUtils.loadConfig(sourceConfigFile, SourceConfig.class);\n            } else {\n                this.sourceConfig = new SourceConfig();\n            }\n            if (null != tenant) {\n                sourceConfig.setTenant(tenant);\n            }\n            if (null != namespace) {\n                sourceConfig.setNamespace(namespace);\n            }\n            if (null != name) {\n                sourceConfig.setName(name);\n            }\n            if (null != className) {\n                this.sourceConfig.setClassName(className);\n            }\n            if (null != destinationTopicName) {\n                sourceConfig.setTopicName(destinationTopicName);\n            }\n            if (null != producerConfig) {\n                Type type = new TypeToken<ProducerConfig>() {}.getType();\n                sourceConfig.setProducerConfig(new Gson().fromJson(producerConfig, type));\n            }\n            if (null != deserializationClassName) {\n                sourceConfig.setSerdeClassName(deserializationClassName);\n            }\n            if (null != schemaType) {\n                sourceConfig.setSchemaType(schemaType);\n            }\n\n            if (null != batchBuilder) {\n                sourceConfig.setBatchBuilder(batchBuilder);\n            }\n\n            if (null != processingGuarantees) {\n                sourceConfig.setProcessingGuarantees(processingGuarantees);\n            }\n            if (parallelism != null) {\n                sourceConfig.setParallelism(parallelism);\n            }\n\n            if (archive != null && sourceType != null) {\n                throw new ParameterException(\"Cannot specify both archive and source-type\");\n            }\n\n            if (archive != null) {\n                sourceConfig.setArchive(archive);\n            }\n\n            if (sourceType != null) {\n                sourceConfig.setArchive(validateSourceType(sourceType));\n            }\n\n            Resources resources = sourceConfig.getResources();\n            if (cpu != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setCpu(cpu);\n            }\n\n            if (ram != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setRam(ram);\n            }\n\n            if (disk != null) {\n                if (resources == null) {\n                    resources = new Resources();\n                }\n                resources.setDisk(disk);\n            }\n            if (resources != null) {\n                sourceConfig.setResources(resources);\n            }\n\n            try {\n                if (null != sourceConfigString) {\n                    sourceConfig.setConfigs(parseConfigs(sourceConfigString));\n                }\n            } catch (Exception ex) {\n                throw new ParameterException(\"Cannot parse source-config\", ex);\n            }\n            \n            if (null != batchSourceConfigString) {\n            \tsourceConfig.setBatchSourceConfig(parseBatchSourceConfigs(batchSourceConfigString));\n            }\n\n            if (customRuntimeOptions != null) {\n                sourceConfig.setCustomRuntimeOptions(customRuntimeOptions);\n            }\n            \r\n            validateSourceConfigs(sourceConfig);\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"N"}],"commitId":"791c0ac5b4ac23f31c37adf7d26eb87998ccd0ef","commitMessage":"@@@[function] fix update user config (#10731)\n\nFixes #10720\n\n\n Motivation\nfix update user config","date":"2021-07-14 15:04:46","modifiedFileCount":"2","status":"M","submitter":"linlinnn"}]
