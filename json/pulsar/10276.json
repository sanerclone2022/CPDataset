[{"authorTime":"2020-09-23 15:24:51","codes":[{"authorDate":"2020-09-23 15:24:51","commitOrder":1,"curCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 0) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n    }\n","date":"2020-09-23 15:24:51","endLine":107,"groupId":"10178","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWebSocketNonDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ca/2eba117708ce4628b0acd8e23d5b3983df71ef.src","preCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 0) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2020-09-23 15:24:51","commitOrder":1,"curCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","date":"2020-09-23 15:24:51","endLine":158,"groupId":"10178","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWebSocketDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ca/2eba117708ce4628b0acd8e23d5b3983df71ef.src","preCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"fa3407b9dd5125c7d3c932eac4ad147cc7d1f3e7","commitMessage":"@@@[Issue #6709] Support non-durable subscription for pulsar-client cli (#8100)\n\nFixes #6709\n\n\n Motivation\nAfter running pulsar-client consume the subscription is kept active and it is not possible to unsubscribe without using the admin interface.\n\n\n Modifications\nAdd subscriptionMode option for cli\n\n\n Verifying this change\nunit tests:\nPulsarClientToolTest\nPulsarClientToolWsTest","date":"2020-09-23 15:24:51","modifiedFileCount":"4","status":"B","submitter":"feynmanlin"},{"authorTime":"2021-02-22 20:42:40","codes":[{"authorDate":"2021-02-22 20:42:40","commitOrder":2,"curCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception ignored) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 0) {\n                    break;\n                }\n            } catch (Exception ignored) {\n            }\n            Thread.sleep(200);\n        }\n    }\n","date":"2021-02-22 20:42:40","endLine":105,"groupId":"10178","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWebSocketNonDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b9/0f74d276a002a57cfa55ef1e588e3737e7a48a.src","preCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 0) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-02-22 20:42:40","commitOrder":2,"curCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception ignored) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","date":"2021-02-22 20:42:40","endLine":156,"groupId":"10178","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWebSocketDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b9/0f74d276a002a57cfa55ef1e588e3737e7a48a.src","preCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception e) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"22207baf95f21a4f5e983d0b6a93ac2166d3af86","commitMessage":"@@@Clean up in pulsar-broker unit tests (#9654)\n\nCollection of minor cleanup in pulsar-broker unit test cases.\n\n* Fixing Usage of assert statements.\n* Removing unused exceptions.\n* Remove Unnecessary String creations.\n","date":"2021-02-22 20:42:40","modifiedFileCount":"14","status":"M","submitter":"Ali Ahmed"},{"authorTime":"2021-03-09 01:40:03","codes":[{"authorDate":"2021-03-09 01:40:03","commitOrder":3,"curCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        Awaitility.await()\n                .pollInterval(Duration.ofMillis(200))\n                .ignoreExceptions().untilAsserted(() -> {\n            Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 1);\n        });\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        future.get();\n        Assert.assertFalse(future.isCompletedExceptionally());\n        executor.shutdown();\n\n        Awaitility.await()\n                .ignoreExceptions().untilAsserted(() -> {\n            Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 0);\n        });\n    }\n","date":"2021-03-09 01:40:03","endLine":98,"groupId":"6411","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWebSocketNonDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f7/3aa0f3642bd6425952a4b18888c82e602b0c7c.src","preCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception ignored) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 0) {\n                    break;\n                }\n            } catch (Exception ignored) {\n            }\n            Thread.sleep(200);\n        }\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-03-09 01:40:03","commitOrder":3,"curCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        Awaitility.await()\n                .pollInterval(Duration.ofMillis(200))\n                .ignoreExceptions().untilAsserted(() -> {\n            Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 1);\n        });\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        future.get();\n        Assert.assertFalse(future.isCompletedExceptionally());\n        executor.shutdown();\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","date":"2021-03-09 01:40:03","endLine":144,"groupId":"6411","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWebSocketDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f7/3aa0f3642bd6425952a4b18888c82e602b0c7c.src","preCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        while (true) {\n            try {\n                List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n                if (subscriptions.size() == 1) {\n                    break;\n                }\n            } catch (Exception ignored) {\n            }\n            Thread.sleep(200);\n        }\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        Assert.assertFalse(future.isCompletedExceptionally());\n        future.get();\n        executor.shutdown();\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"dde59b36261ec395020c4bc602016feeba5780de","commitMessage":"@@@[Testing] Fix Maven Surefire default exclude (#9836)\n\n* [Testing] Fix Maven Surefire default exclude\n\n- Problem introduced in PR #9823\n- In the shell script \"**/*$*\" gets replaced with \"**/*\" when using double quotes.\n- Fix: use single quotes for the exclude parameter\n\n* Attempt to fix flaky test that failed the build\n\n* Fix ReplicatorTest retries\n\n- must reset configuration before retrying","date":"2021-03-09 01:40:03","modifiedFileCount":"3","status":"M","submitter":"Lari Hotari"},{"authorTime":"2021-04-15 01:04:21","codes":[{"authorDate":"2021-04-15 01:04:21","commitOrder":4,"curCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        {\n            @Cleanup(\"shutdown\")\n            ExecutorService executor = Executors.newSingleThreadExecutor();\n            CompletableFuture<Void> future = new CompletableFuture<>();\n            executor.execute(() -> {\n                try {\n                    PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                    String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                            Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                    Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                    future.complete(null);\n                } catch (Throwable t) {\n                    future.completeExceptionally(t);\n                }\n            });\n\n            \r\n            Awaitility.await()\n                    .pollInterval(Duration.ofMillis(200))\n                    .ignoreExceptions().untilAsserted(() -> {\n                Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 1);\n            });\n\n            PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n            String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                    \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n            Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n            future.get();\n            Assert.assertFalse(future.isCompletedExceptionally());\n        }\n\n        Awaitility.await()\n                .ignoreExceptions().untilAsserted(() -> {\n            Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 0);\n        });\n    }\n","date":"2021-04-15 01:04:21","endLine":101,"groupId":"10276","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testWebSocketNonDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c5/e65ba0c30f3673ef345b8584bd82f21eccb96a.src","preCode":"    public void testWebSocketNonDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"NonDurable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        Awaitility.await()\n                .pollInterval(Duration.ofMillis(200))\n                .ignoreExceptions().untilAsserted(() -> {\n            Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 1);\n        });\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        future.get();\n        Assert.assertFalse(future.isCompletedExceptionally());\n        executor.shutdown();\n\n        Awaitility.await()\n                .ignoreExceptions().untilAsserted(() -> {\n            Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 0);\n        });\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-04-15 01:04:21","commitOrder":4,"curCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        {\n            @Cleanup(\"shutdown\")\n            ExecutorService executor = Executors.newSingleThreadExecutor();\n            CompletableFuture<Void> future = new CompletableFuture<>();\n            executor.execute(() -> {\n                try {\n                    PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                    String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                            Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                    Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                    future.complete(null);\n                } catch (Throwable t) {\n                    future.completeExceptionally(t);\n                }\n            });\n\n            \r\n            Awaitility.await()\n                    .pollInterval(Duration.ofMillis(200))\n                    .ignoreExceptions().untilAsserted(() -> {\n                Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 1);\n            });\n\n            PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n            String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                    \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n            Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n            future.get();\n            Assert.assertFalse(future.isCompletedExceptionally());\n        }\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","date":"2021-04-15 01:04:21","endLine":149,"groupId":"10276","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testWebSocketDurableSubscriptionMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c5/e65ba0c30f3673ef345b8584bd82f21eccb96a.src","preCode":"    public void testWebSocketDurableSubscriptionMode() throws Exception {\n        Properties properties = new Properties();\n        properties.setProperty(\"serviceUrl\", brokerUrl.toString());\n        properties.setProperty(\"useTls\", \"false\");\n\n        final String topicName = \"persistent://my-property/my-ns/test/topic-\" + UUID.randomUUID();\n\n        int numberOfMessages = 10;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        executor.execute(() -> {\n            try {\n                PulsarClientTool pulsarClientToolConsumer = new PulsarClientTool(properties);\n                String[] args = {\"consume\", \"-t\", \"Exclusive\", \"-s\", \"sub-name\", \"-n\",\n                        Integer.toString(numberOfMessages), \"--hex\", \"-m\", \"Durable\", \"-r\", \"30\", topicName};\n                Assert.assertEquals(pulsarClientToolConsumer.run(args), 0);\n                future.complete(null);\n            } catch (Throwable t) {\n                future.completeExceptionally(t);\n            }\n        });\n\n        \r\n        Awaitility.await()\n                .pollInterval(Duration.ofMillis(200))\n                .ignoreExceptions().untilAsserted(() -> {\n            Assert.assertEquals(admin.topics().getSubscriptions(topicName).size(), 1);\n        });\n\n        PulsarClientTool pulsarClientToolProducer = new PulsarClientTool(properties);\n\n        String[] args = {\"produce\", \"--messages\", \"Have a nice day\", \"-n\", Integer.toString(numberOfMessages), \"-r\",\n                \"20\", \"-p\", \"key1=value1\", \"-p\", \"key2=value2\", \"-k\", \"partition_key\", topicName};\n        Assert.assertEquals(pulsarClientToolProducer.run(args), 0);\n        future.get();\n        Assert.assertFalse(future.isCompletedExceptionally());\n        executor.shutdown();\n\n        \r\n        Thread.sleep(2000);\n        List<String> subscriptions = admin.topics().getSubscriptions(topicName);\n        Assert.assertNotNull(subscriptions);\n        Assert.assertEquals(subscriptions.size(), 1);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/client/cli/PulsarClientToolWsTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"41814a7bc82392865a54e01a2908fd5ee7f8f403","commitMessage":"@@@Fix some ExecutorService leaks and use @Cleanup(\"shutdownNow\") for cleanup (#10198)\n\n- use ExecutorService.shutdownNow() instead of ExecutorService.shutdown() in tests","date":"2021-04-15 01:04:21","modifiedFileCount":"62","status":"M","submitter":"Lari Hotari"}]
