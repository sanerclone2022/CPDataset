[{"authorTime":"2019-07-09 00:16:05","codes":[{"authorDate":"2019-07-09 00:16:05","commitOrder":2,"curCode":"    public void testPublishTimePredicatePushdown() throws Exception {\n\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP_WITH_TIME_ZONE, packDateTimeWithZone\n                (currentTimeMs + 1L, TimeZoneKey.UTC_KEY), true, packDateTimeWithZone(currentTimeMs + 50L,\n                TimeZoneKey.UTC_KEY), true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(), any(), any(), any\n                (), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","date":"2019-07-09 00:16:05","endLine":230,"groupId":"8835","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b8/6a7a53b645f9722b264778d5a21a17b07b2c83.src","preCode":"    public void testPublishTimePredicatePushdown() throws Exception {\n\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP_WITH_TIME_ZONE, packDateTimeWithZone\n                (currentTimeMs + 1L, TimeZoneKey.UTC_KEY), true, packDateTimeWithZone(currentTimeMs + 50L,\n                TimeZoneKey.UTC_KEY), true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(), any(), any(), any\n                (), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"MB"},{"authorDate":"2019-07-09 00:16:05","commitOrder":2,"curCode":"    public void testPublishTimePredicatePushdownPartitionedTopic() throws Exception {\n\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP_WITH_TIME_ZONE, packDateTimeWithZone\n                (currentTimeMs + 1L, TimeZoneKey.UTC_KEY), true, packDateTimeWithZone(currentTimeMs + 50L,\n                TimeZoneKey.UTC_KEY), true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","date":"2019-07-09 00:16:05","endLine":292,"groupId":"8835","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdownPartitionedTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b8/6a7a53b645f9722b264778d5a21a17b07b2c83.src","preCode":"    public void testPublishTimePredicatePushdownPartitionedTopic() throws Exception {\n\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP_WITH_TIME_ZONE, packDateTimeWithZone\n                (currentTimeMs + 1L, TimeZoneKey.UTC_KEY), true, packDateTimeWithZone(currentTimeMs + 50L,\n                TimeZoneKey.UTC_KEY), true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"MB"}],"commitId":"c421ca6e5b0c99f7728c8651ad9a81005bfd176e","commitMessage":"@@@Cleanup tests in the presto module (#4683)\n\n* Add static import statements for Assert to simplify the test in the presto module\n\n* Use the preferred way of the schema's creation. The predicates and functions were converted to lambda\n","date":"2019-07-09 00:16:05","modifiedFileCount":"4","status":"M","submitter":"vzhikserg"},{"authorTime":"2019-07-19 09:13:14","codes":[{"authorDate":"2019-07-19 09:13:14","commitOrder":3,"curCode":"    public void testPublishTimePredicatePushdown() throws Exception {\n\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(), any(), any(), any\n                (), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","date":"2019-07-19 09:13:14","endLine":227,"groupId":"8835","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/25/3803dd23a5b9d2d99db280d76a9dbdba2733b9.src","preCode":"    public void testPublishTimePredicatePushdown() throws Exception {\n\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP_WITH_TIME_ZONE, packDateTimeWithZone\n                (currentTimeMs + 1L, TimeZoneKey.UTC_KEY), true, packDateTimeWithZone(currentTimeMs + 50L,\n                TimeZoneKey.UTC_KEY), true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(), any(), any(), any\n                (), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2019-07-19 09:13:14","commitOrder":3,"curCode":"    public void testPublishTimePredicatePushdownPartitionedTopic() throws Exception {\n\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","date":"2019-07-19 09:13:14","endLine":288,"groupId":"8835","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdownPartitionedTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/25/3803dd23a5b9d2d99db280d76a9dbdba2733b9.src","preCode":"    public void testPublishTimePredicatePushdownPartitionedTopic() throws Exception {\n\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP_WITH_TIME_ZONE, packDateTimeWithZone\n                (currentTimeMs + 1L, TimeZoneKey.UTC_KEY), true, packDateTimeWithZone(currentTimeMs + 50L,\n                TimeZoneKey.UTC_KEY), true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"6f5416eea0e7010c26091d9cbe72122b1fd94268","commitMessage":"@@@Change type of publish_time to timestamp (#4757)\n\nFixes #4734\n\n\n Motivation\n\n\"publish_time\" is Pulsar SQL internal column.  as Pulsar only stores timestamps.  it doesn?t store the timezone information. Use timestamp as \"publish_time\" type is more correct way in Pulsar SQL.\n\n\n Modifications\n\nChange type of publish_time to timestamp.\n\n\n Verifying this change\n\npredicate of publish_time is pushdown\n\nUse `__publish_time__` to trim messages:\n```\nSELECT COUNT(*)\nFROM \"sql-test-1\" \nWHERE \"__publish_time__\" >= TIMESTAMP '2019-07-18 17:26:50.119' \nAND  \"__publish_time__\" < TIMESTAMP '2019-07-18 17:26:51.119';\n```\n![image](https://user-images.githubusercontent.com/12592133/61447301-43835080-a983-11e9-814b-bc2b378f02b9.png)\n\nWithout `__publish_time__` predicate:\n```\nSELECT COUNT(*)\nFROM \"sql-test-1\";\n```\n![image](https://user-images.githubusercontent.com/12592133/61447427-82190b00-a983-11e9-8d3f-3bf2a4798047.png)\n","date":"2019-07-19 09:13:14","modifiedFileCount":"3","status":"M","submitter":"lipenghui"},{"authorTime":"2019-07-22 22:59:43","codes":[{"authorDate":"2019-07-22 22:59:43","commitOrder":4,"curCode":"    public void testPublishTimePredicatePushdown(String delimiter) throws Exception {\n        updateRewriteNamespaceDelimiterIfNeeded(delimiter);\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(), any(), any(), any\n                (), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","date":"2019-07-22 22:59:43","endLine":228,"groupId":"8835","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdown","params":"(Stringdelimiter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ad/eaf909d20f591cc5dd4dd4fc350e30c0546479.src","preCode":"    public void testPublishTimePredicatePushdown() throws Exception {\n\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(), any(), any(), any\n                (), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2019-07-22 22:59:43","commitOrder":4,"curCode":"    public void testPublishTimePredicatePushdownPartitionedTopic(String delimiter) throws Exception {\n        updateRewriteNamespaceDelimiterIfNeeded(delimiter);\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","date":"2019-07-22 22:59:43","endLine":289,"groupId":"8835","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdownPartitionedTopic","params":"(Stringdelimiter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ad/eaf909d20f591cc5dd4dd4fc350e30c0546479.src","preCode":"    public void testPublishTimePredicatePushdownPartitionedTopic() throws Exception {\n\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"6ddd51ff45999bd7daa238073e9bcfd87d1df16a","commitMessage":"@@@Add options to rewrite namespace delimiter for pulsar sql. (#4749)\n\n\n Motivation\n\nFix #4732 \n\n\n Modifications\n\nAdd options to rewrite the namespace delimiter.  disable by default\n\nEnable rewrite namespace delimiter can work well with superset:\n<img width=\"1279\" alt=\"superset\" src=\"https://user-images.githubusercontent.com/12592133/61385412-f0f35700-a8e4-11e9-87b2-a31b62128b58.png\">\n\n\n\n Does this pull request potentially affect one of the following parts:\n\n*If `yes` was chosen.  please highlight the changes*\n\n  - Dependencies (does it add or upgrade a dependency): (no)\n  - The public API: (no)\n  - The schema: (no)\n  - The default values of configurations: (no)\n  - The wire protocol: (no)\n  - The rest endpoints: (no)\n  - The admin cli options: (no)\n  - Anything that affects deployment: (no)\n\n\n Documentation\n\n  - Does this pull request introduce a new feature? (no)\n","date":"2019-07-22 22:59:43","modifiedFileCount":"9","status":"M","submitter":"lipenghui"},{"authorTime":"2020-02-10 20:46:43","codes":[{"authorDate":"2020-02-10 20:46:43","commitOrder":5,"curCode":"    public void testPublishTimePredicatePushdown(String delimiter) throws Exception {\n        updateRewriteNamespaceDelimiterIfNeeded(delimiter);\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","date":"2020-02-10 20:46:43","endLine":236,"groupId":"10509","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdown","params":"(Stringdelimiter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5e/cbffc3077640d3cf0bc381c099483e6683131e.src","preCode":"    public void testPublishTimePredicatePushdown(String delimiter) throws Exception {\n        updateRewriteNamespaceDelimiterIfNeeded(delimiter);\n        TopicName topicName = TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(), any(), any(), any\n                (), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsNonPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        int totalSize = 0;\n        int initalStart = 1;\n        for (PulsarSplit pulsarSplit : resultCaptor.getResult()) {\n            assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n            assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n            assertEquals(pulsarSplit.getTableName(), topicName.getLocalName());\n            assertEquals(pulsarSplit.getSchema(),\n                    new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n            assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n            assertEquals(pulsarSplit.getStartPositionEntryId(), initalStart);\n            assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initalStart));\n            assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n            assertEquals(pulsarSplit.getEndPositionEntryId(), initalStart + pulsarSplit.getSplitSize());\n            assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initalStart + pulsarSplit\n                    .getSplitSize()));\n\n            initalStart += pulsarSplit.getSplitSize();\n            totalSize += pulsarSplit.getSplitSize();\n        }\n        assertEquals(totalSize, 49);\n\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2020-02-10 20:46:43","commitOrder":5,"curCode":"    public void testPublishTimePredicatePushdownPartitionedTopic(String delimiter) throws Exception {\n        updateRewriteNamespaceDelimiterIfNeeded(delimiter);\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","date":"2020-02-10 20:46:43","endLine":297,"groupId":"10509","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPublishTimePredicatePushdownPartitionedTopic","params":"(Stringdelimiter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5e/cbffc3077640d3cf0bc381c099483e6683131e.src","preCode":"    public void testPublishTimePredicatePushdownPartitionedTopic(String delimiter) throws Exception {\n        updateRewriteNamespaceDelimiterIfNeeded(delimiter);\n        TopicName topicName = PARTITIONED_TOPIC_1;\n\n        setup();\n        log.info(\"!----- topic: %s -----!\", topicName);\n        PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),\n                topicName.getNamespace(),\n                topicName.getLocalName(),\n                topicName.getLocalName());\n\n\n        Map<ColumnHandle, Domain> domainMap = new HashMap<>();\n        Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP, currentTimeMs + 1L, true,\n                currentTimeMs + 50L, true)), false);\n        domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(), false), domain);\n        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap);\n\n        PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle, tupleDomain);\n\n        final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>();\n        doAnswer(resultCaptor).when(this.pulsarSplitManager)\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n        ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(\n                mock(ConnectorTransactionHandle.class), mock(ConnectorSession.class),\n                pulsarTableLayoutHandle, null);\n\n\n        verify(this.pulsarSplitManager, times(1))\n                .getSplitsPartitionedTopic(anyInt(), any(), any(), any(), any());\n\n\n        int partitions = partitionedTopicsToPartitions.get(topicName.toString());\n        for (int i = 0; i < partitions; i++) {\n            List<PulsarSplit> splits = getSplitsForPartition(topicName.getPartition(i), resultCaptor.getResult());\n            int totalSize = 0;\n            int initialStart = 1;\n            for (PulsarSplit pulsarSplit : splits) {\n                assertEquals(pulsarSplit.getConnectorId(), pulsarConnectorId.toString());\n                assertEquals(pulsarSplit.getSchemaName(), topicName.getNamespace());\n                assertEquals(pulsarSplit.getTableName(), topicName.getPartition(i).getLocalName());\n                assertEquals(pulsarSplit.getSchema(),\n                        new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()));\n                assertEquals(pulsarSplit.getSchemaType(), topicsToSchemas.get(topicName.getSchemaName()).getType());\n                assertEquals(pulsarSplit.getStartPositionEntryId(), initialStart);\n                assertEquals(pulsarSplit.getStartPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getStartPosition(), PositionImpl.get(0, initialStart));\n                assertEquals(pulsarSplit.getEndPositionLedgerId(), 0);\n                assertEquals(pulsarSplit.getEndPositionEntryId(), initialStart + pulsarSplit.getSplitSize());\n                assertEquals(pulsarSplit.getEndPosition(), PositionImpl.get(0, initialStart + pulsarSplit.getSplitSize()));\n\n                initialStart += pulsarSplit.getSplitSize();\n                totalSize += pulsarSplit.getSplitSize();\n            }\n\n            assertEquals(totalSize, 49);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarSplitManager.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"fd03be595505433fc12f94b63f3d713610ccb2f7","commitMessage":"@@@Namespace level offloader (#6183)\n\n\n Motivation\n\nCurrently.  the offload operation only have the cluster level configuration.  can't set the offload configuration at the namespace level.  it's inflexible. \n\n\n Modifications\n\nAdd the namespace offload policies.","date":"2020-02-10 20:46:43","modifiedFileCount":"30","status":"M","submitter":"ran"}]
