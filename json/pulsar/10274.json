[{"authorTime":"2019-05-21 08:00:01","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":2,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        decompressor.decompress(encodedNio, encodedNio.position(), uncompressedNio, uncompressedNio.position(),\n                uncompressedNio.remaining());\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2017-06-24 04:41:32","endLine":65,"groupId":"13938","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/6e/b0185165aeef9bdcfea8222009d90bbad5feda.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        decompressor.decompress(encodedNio, encodedNio.position(), uncompressedNio, uncompressedNio.position(),\n                uncompressedNio.remaining());\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"NB"},{"authorDate":"2019-05-21 08:00:01","commitOrder":2,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        Snappy.uncompress(encodedNio, uncompressedNio);\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2019-05-21 08:00:01","endLine":65,"groupId":"13938","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/15/98d5ee247890a5fea6bfd7a7d0cfb908b892fe.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        Snappy.uncompress(encodedNio, uncompressedNio);\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"}],"commitId":"706a18e56b52468b1b48832115959983a3fffbe0","commitMessage":"@@@[pulsar-common] Support Snappy compression for Java (#4259)\n\n* Support Snappy compression for java.\n\n* Some minor fix to pass unit tests\n\n* Format the cpp code\n\n* Added support for c++ client\n\n* Format the cpp code\n","date":"2019-05-21 08:00:01","modifiedFileCount":"5","status":"M","submitter":"Fangbin Sun"},{"authorTime":"2019-05-21 08:00:01","codes":[{"authorDate":"2019-05-29 23:31:47","commitOrder":3,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        decompressor.decompress(encodedNio, encodedNio.position(), uncompressedNio, uncompressedNio.position(),\n                uncompressedNio.remaining());\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2019-05-29 23:31:47","endLine":79,"groupId":"13938","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/41/7a1b3597672ba873e1caac4b81058cb9704e43.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        decompressor.decompress(encodedNio, encodedNio.position(), uncompressedNio, uncompressedNio.position(),\n                uncompressedNio.remaining());\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-05-21 08:00:01","commitOrder":3,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        Snappy.uncompress(encodedNio, uncompressedNio);\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2019-05-21 08:00:01","endLine":65,"groupId":"13938","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/15/98d5ee247890a5fea6bfd7a7d0cfb908b892fe.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        Snappy.uncompress(encodedNio, uncompressedNio);\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"3b33c668e194421aed23873c26e9b7e8bcbd9d9f","commitMessage":"@@@Configure static PulsarByteBufAllocator to handle OOM errors (#4196)\n\n* Configure static PulsarByteBufAllocator to handle OOM errors\n\n* Always specify `pulsar.allocator.exit_on_oom` when starting pulsar services\n\n* Reverted metrics back\n\n* Fixed compression tests\n\n* Explicitely set the underlying allocator to netty default\n\n* Fixed shading\n","date":"2019-05-29 23:31:47","modifiedFileCount":"29","status":"M","submitter":"Matteo Merli"},{"authorTime":"2020-06-04 14:23:49","codes":[{"authorDate":"2020-06-04 14:23:49","commitOrder":4,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            Lz4RawDecompressor.decompress(null, encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(), null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n\n            LZ4_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2020-06-04 14:23:49","endLine":105,"groupId":"5730","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/24/93af4ca39f83956892c5fd3069d2efc9b206bb.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        decompressor.decompress(encodedNio, encodedNio.position(), uncompressedNio, uncompressedNio.position(),\n                uncompressedNio.remaining());\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-06-04 14:23:49","commitOrder":4,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            SnappyRawDecompressor.decompress(\n                    null,\n                    encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(),\n                    null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n\n            SNAPPY_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2020-06-04 14:23:49","endLine":111,"groupId":"5730","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/51/7f1ca7ccede5fced560cbd14b2a368e04a495c.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PooledByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n        ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n\n        ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n        Snappy.uncompress(encodedNio, uncompressedNio);\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"b22b32313d95d3ad2518d49352d985a149ebaf31","commitMessage":"@@@Use pure-java Air-Compressor instead of JNI based libraries (#5390)\n\n* Use pure-java Air-Compressor instead of JNI based libraries\n\n* Fixed license files\n\n* Fixed non-needed exclusion\n\n* Added compat tests with JNI implementations\n\n* Ensure direct buffer is used in the test\n\n* Ensure direct bytebuf for both compression and decompression test\n\nCo-authored-by: penghui <penghui@apache.org>","date":"2020-06-04 14:23:49","modifiedFileCount":"4","status":"M","submitter":"Matteo Merli"},{"authorTime":"2020-12-23 01:53:27","codes":[{"authorDate":"2020-12-23 01:53:27","commitOrder":5,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            Lz4RawDecompressor.decompress(null, encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(), null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n            encodedNio = AirliftUtils.ensureAirliftSupported(encodedNio, uncompressedLength);\n            LZ4_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2020-12-23 01:53:27","endLine":103,"groupId":"5730","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a2/cf16dcd7cbd0ebce9539206154036c37552a6a.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            Lz4RawDecompressor.decompress(null, encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(), null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n\n            LZ4_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-12-23 01:53:27","commitOrder":5,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            SnappyRawDecompressor.decompress(\n                    null,\n                    encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(),\n                    null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n\n            encodedNio = AirliftUtils.ensureAirliftSupported(encodedNio, uncompressedLength);\n            SNAPPY_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2020-12-23 01:53:27","endLine":110,"groupId":"5730","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/94/649926e594463f229206d23d54334d6492efdf.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            SnappyRawDecompressor.decompress(\n                    null,\n                    encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(),\n                    null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n\n            SNAPPY_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"cbc606b0b0e836c1238ea1ba92400b3f14e5b349","commitMessage":"@@@Issue 8974: Peeking at compressed messages throws an exception (Readonly buffers not supported by Airlift) (#8990)\n\nFixes #8974 \n\n\n Motivation\nIn certain cases peeking messages on compresses topics return an error.  see #8974 because Airlift does not support readonly ByteBuffers.  because they do not give access to the underlying array)\n\n\n Modifications\n\nCopy the ByteByffer in case of unsupported buffer type\n\n\n Verifying this change\n\nThis change adds new tests that reproduce the error and demonstrate that the problem is fixed.","date":"2020-12-23 01:53:27","modifiedFileCount":"4","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2021-02-22 20:40:10","codes":[{"authorDate":"2021-02-22 20:40:10","commitOrder":6,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            Lz4RawDecompressor.decompress(null, encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(), null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n            encodedNio = AirliftUtils.ensureAirliftSupported(encodedNio);\n            LZ4_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2021-02-22 20:40:10","endLine":103,"groupId":"10274","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ef/c497f02014ce7680f881a2aa0d2d6ec2f65209.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            Lz4RawDecompressor.decompress(null, encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(), null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n            encodedNio = AirliftUtils.ensureAirliftSupported(encodedNio, uncompressedLength);\n            LZ4_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2021-02-22 20:40:10","commitOrder":6,"curCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            SnappyRawDecompressor.decompress(\n                    null,\n                    encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(),\n                    null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n\n            encodedNio = AirliftUtils.ensureAirliftSupported(encodedNio);\n            SNAPPY_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","date":"2021-02-22 20:40:10","endLine":110,"groupId":"10274","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"decode","params":"(ByteBufencoded@intuncompressedLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4b/d95e361b06413a3381ac53baa2ce9ba732353d.src","preCode":"    public ByteBuf decode(ByteBuf encoded, int uncompressedLength) throws IOException {\n        ByteBuf uncompressed = PulsarByteBufAllocator.DEFAULT.buffer(uncompressedLength, uncompressedLength);\n\n        if (encoded.hasMemoryAddress() && uncompressed.hasMemoryAddress()) {\n            SnappyRawDecompressor.decompress(\n                    null,\n                    encoded.memoryAddress() + encoded.readerIndex(),\n                    encoded.memoryAddress() + encoded.writerIndex(),\n                    null, uncompressed.memoryAddress(),\n                    uncompressed.memoryAddress() + uncompressedLength);\n        } else {\n            ByteBuffer uncompressedNio = uncompressed.nioBuffer(0, uncompressedLength);\n            ByteBuffer encodedNio = encoded.nioBuffer(encoded.readerIndex(), encoded.readableBytes());\n\n            encodedNio = AirliftUtils.ensureAirliftSupported(encodedNio, uncompressedLength);\n            SNAPPY_DECOMPRESSOR.get().decompress(encodedNio, uncompressedNio);\n        }\n\n        uncompressed.writerIndex(uncompressedLength);\n        return uncompressed;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"aa65220fa496add95b04971c29400446157c43b4","commitMessage":"@@@[Compression] Fix ByteBuffer allocate error in the AirliftUtils (#9667)\n\nFixes #9666\n\n\n Motivation\n\nThe compressed data length may be bigger than the original data length (e.g. the source text is not repeated.  such as \"abcde\").  so we can't use the uncompressed length as the allocated length to initial the ByteBuffer.\n\n\n Modifications\n\nUse the capacity of the ByteBuffer instead of the uncompressed length as the allocated length.\n\n\n Verifying this change\n\nUpdate the existing tests.","date":"2021-02-22 20:40:10","modifiedFileCount":"5","status":"M","submitter":"ran"}]
