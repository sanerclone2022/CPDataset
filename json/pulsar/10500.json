[{"authorTime":"2020-12-01 09:47:06","codes":[{"authorDate":"2020-12-01 09:47:06","commitOrder":1,"curCode":"    public CompletableFuture<Void> updateMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        checkMetadataNotExistsAndThrowException(packageName)\n            .whenComplete((ignore, throwable) -> {\n                if (throwable != null) {\n                    future.completeExceptionally(throwable);\n                    return;\n                }\n                try (ByteArrayInputStream inputStream = new ByteArrayInputStream(metadata.toBytes())) {\n                    storage.deleteAsync(metadataPath)\n                        .thenCompose(aVoid -> storage.writeAsync(metadataPath, inputStream))\n                        .whenComplete((aVoid, t) -> {\n                            if (t != null) {\n                                future.completeExceptionally(new PackagesManagementException(\n                                    String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                            } else {\n                                future.complete(null);\n                            }\n                        });\n                } catch (IOException e) {\n                    future.completeExceptionally(new PackagesManagementException(\n                        String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n                }\n            });\n        return future;\n    }\n","date":"2020-12-01 09:47:06","endLine":103,"groupId":"11609","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateMeta","params":"(PackageNamepackageName@PackageMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c6/68fb45c81518095abee93f16d7a5dee9151e4e.src","preCode":"    public CompletableFuture<Void> updateMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        checkMetadataNotExistsAndThrowException(packageName)\n            .whenComplete((ignore, throwable) -> {\n                if (throwable != null) {\n                    future.completeExceptionally(throwable);\n                    return;\n                }\n                try (ByteArrayInputStream inputStream = new ByteArrayInputStream(metadata.toBytes())) {\n                    storage.deleteAsync(metadataPath)\n                        .thenCompose(aVoid -> storage.writeAsync(metadataPath, inputStream))\n                        .whenComplete((aVoid, t) -> {\n                            if (t != null) {\n                                future.completeExceptionally(new PackagesManagementException(\n                                    String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                            } else {\n                                future.complete(null);\n                            }\n                        });\n                } catch (IOException e) {\n                    future.completeExceptionally(new PackagesManagementException(\n                        String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n                }\n            });\n        return future;\n    }\n","realPath":"pulsar-package-management/core/src/main/java/org/apache/pulsar/packages/management/core/impl/PackagesManagementImpl.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2020-12-01 09:47:06","commitOrder":1,"curCode":"    private CompletableFuture<Void> writeMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(metadata.toBytes())) {\n            storage.writeAsync(metadataPath, inputStream)\n                .whenComplete((aVoid, t) -> {\n                    if (t != null) {\n                        future.completeExceptionally(new PackagesManagementException(\n                            String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                    } else {\n                        future.complete(null);\n                    }\n                });\n        } catch (IOException e) {\n            future.completeExceptionally(new PackagesManagementException(\n                String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n        }\n        return future;\n    }\n","date":"2020-12-01 09:47:06","endLine":123,"groupId":"11609","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeMeta","params":"(PackageNamepackageName@PackageMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c6/68fb45c81518095abee93f16d7a5dee9151e4e.src","preCode":"    private CompletableFuture<Void> writeMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(metadata.toBytes())) {\n            storage.writeAsync(metadataPath, inputStream)\n                .whenComplete((aVoid, t) -> {\n                    if (t != null) {\n                        future.completeExceptionally(new PackagesManagementException(\n                            String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                    } else {\n                        future.complete(null);\n                    }\n                });\n        } catch (IOException e) {\n            future.completeExceptionally(new PackagesManagementException(\n                String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n        }\n        return future;\n    }\n","realPath":"pulsar-package-management/core/src/main/java/org/apache/pulsar/packages/management/core/impl/PackagesManagementImpl.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"bbbe9e1cf281c523594fbfdc7922ff02efa794c7","commitMessage":"@@@Implementation of the packages management (#8680)\n\n---\nMaster Issue: #8676\n    \n*Motivation*\n    \nThe implementation of the packages management service.\nI add a memory storage for testing the service.\n    \n*Modifications*\n    \n- Implement the package management service.\n- Add a mocked memory storage for testing.\n- Add tests for the packages management service.\n","date":"2020-12-01 09:47:06","modifiedFileCount":"2","status":"B","submitter":"Yong Zhang"},{"authorTime":"2021-06-03 05:17:04","codes":[{"authorDate":"2021-06-03 05:17:04","commitOrder":2,"curCode":"    public CompletableFuture<Void> updateMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        checkMetadataNotExistsAndThrowException(packageName)\n            .whenComplete((ignore, throwable) -> {\n                if (throwable != null) {\n                    future.completeExceptionally(throwable);\n                    return;\n                }\n                try (ByteArrayInputStream inputStream = new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))) {\n                    storage.deleteAsync(metadataPath)\n                        .thenCompose(aVoid -> storage.writeAsync(metadataPath, inputStream))\n                        .whenComplete((aVoid, t) -> {\n                            if (t != null) {\n                                future.completeExceptionally(new PackagesManagementException(\n                                    String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                            } else {\n                                future.complete(null);\n                            }\n                        });\n                } catch (IOException e) {\n                    future.completeExceptionally(new PackagesManagementException(\n                        String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n                }\n            });\n        return future;\n    }\n","date":"2021-06-03 05:17:04","endLine":104,"groupId":"10500","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"updateMeta","params":"(PackageNamepackageName@PackageMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/be/6d356434b19cbd62770dd63dcb0255095b4e1d.src","preCode":"    public CompletableFuture<Void> updateMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        checkMetadataNotExistsAndThrowException(packageName)\n            .whenComplete((ignore, throwable) -> {\n                if (throwable != null) {\n                    future.completeExceptionally(throwable);\n                    return;\n                }\n                try (ByteArrayInputStream inputStream = new ByteArrayInputStream(metadata.toBytes())) {\n                    storage.deleteAsync(metadataPath)\n                        .thenCompose(aVoid -> storage.writeAsync(metadataPath, inputStream))\n                        .whenComplete((aVoid, t) -> {\n                            if (t != null) {\n                                future.completeExceptionally(new PackagesManagementException(\n                                    String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                            } else {\n                                future.complete(null);\n                            }\n                        });\n                } catch (IOException e) {\n                    future.completeExceptionally(new PackagesManagementException(\n                        String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n                }\n            });\n        return future;\n    }\n","realPath":"pulsar-package-management/core/src/main/java/org/apache/pulsar/packages/management/core/impl/PackagesManagementImpl.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-06-03 05:17:04","commitOrder":2,"curCode":"    private CompletableFuture<Void> writeMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))) {\n            storage.writeAsync(metadataPath, inputStream)\n                .whenComplete((aVoid, t) -> {\n                    if (t != null) {\n                        future.completeExceptionally(new PackagesManagementException(\n                            String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                    } else {\n                        future.complete(null);\n                    }\n                });\n        } catch (IOException e) {\n            future.completeExceptionally(new PackagesManagementException(\n                String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n        }\n        return future;\n    }\n","date":"2021-06-03 05:17:04","endLine":124,"groupId":"10500","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"writeMeta","params":"(PackageNamepackageName@PackageMetadatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/be/6d356434b19cbd62770dd63dcb0255095b4e1d.src","preCode":"    private CompletableFuture<Void> writeMeta(PackageName packageName, PackageMetadata metadata) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        String metadataPath = metadataPath(packageName);\n        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(metadata.toBytes())) {\n            storage.writeAsync(metadataPath, inputStream)\n                .whenComplete((aVoid, t) -> {\n                    if (t != null) {\n                        future.completeExceptionally(new PackagesManagementException(\n                            String.format(\"Update package '%s' metadata failed\", packageName.toString()), t));\n                    } else {\n                        future.complete(null);\n                    }\n                });\n        } catch (IOException e) {\n            future.completeExceptionally(new PackagesManagementException(\n                String.format(\"Read package '%s' metadata failed\", packageName.toString()), e));\n        }\n        return future;\n    }\n","realPath":"pulsar-package-management/core/src/main/java/org/apache/pulsar/packages/management/core/impl/PackagesManagementImpl.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"301a76435ce918520f1b70b95b7ebed9bf1b08b5","commitMessage":"@@@Remove pulsar-client-admin-api dependency : pulsar-common (#10774)\n\n* remove gson from admin api Topics.java\n\n* Bookies.java\n\n* Brokers.java\n\n* BrokerStats.java\n\n* fix PulsarAdminException\n\n* Clusters.java\n\n* Tenants.java\n\n* minor fix on ResourceGroups\n\n* Namespaces.java & OffloadPolicies\n\n* temp remove JsonProperty in OffloadPolicies\n\n* Topics & NonPersistentTopics\n\n* ResourceQuotas with MixIn class\n\n* Functions\n\n* Sources.java\n\n* Sinks.java\n\n* Schemas.java\n\n* resolve checkstyle\n\n* minor fix\n\n* Transactions.java\n\n* fix stylecheck\n\n* set ObjectMapper module\n\n* fix ci\n\n* fix PulsarAdminException\n\n* remove gson\n\n* remove swagger\n\n* merge master\n\n* remove swagger\n\n* remove io.swagger\n\n* remove commons-lang3\n\n* use Objects.requireNonNull\n\n* remove commons-lang3\n\n* fix interface mapping\n\n* fix ci\n\n* extract OffloadPoliciesInterface\n\n* extract FunctionStats interfaces\n\n* fix unit test\n\n* fix shaded class\n\n* add object mapper mixin tests\n\n* fix ci\n\n* fix admin exception ci error\n\n* UpdateOptions\n\n* AutoFailoverPolicyData\n\n* BrokerNamespaceIsolationData\n\n* ClusterData\n\n* FailureDomain\n\n* FunctionInstanceStats\n\n* NamespaceIsolationData\n\n* OffloadPolicies\n\n* TenantInfo\n\n* FunctionStats\n\n* fix stylecheck\n\n* Fixed interface\n\n* Fixed ClusterData equals method\n\n* Fixed merge issue\n\n* Fixed another merge issue\n\n* Fixed test issue after merge\n\nCo-authored-by: Rui Fu <freelz@gmail.com>","date":"2021-06-03 05:17:04","modifiedFileCount":"266","status":"M","submitter":"Matteo Merli"}]
