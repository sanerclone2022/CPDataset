[{"authorTime":"2018-06-04 05:37:00","codes":[{"authorDate":"2018-06-04 05:37:00","commitOrder":1,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-06-04 05:37:00","endLine":235,"groupId":"5677","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/97/d5fd93b4e48a9c168293623a01e925557a3307.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"},{"authorDate":"2018-06-04 05:37:00","commitOrder":1,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-06-04 05:37:00","endLine":252,"groupId":"5677","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/fd/be291850cb4c43279538b0c1ccfcf61c0f6146.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"}],"commitId":"6be584f6a35e727377f0bc0968de57c50478164d","commitMessage":"@@@ improving source and sink validation (#1897)\n\n* add source config validation\n\n* improving source and sink validation\n\n* cleaning up code\n\n* refactor sink infer config code\n","date":"2018-06-04 05:37:00","modifiedFileCount":"8","status":"B","submitter":"Boyang Jerry Peng"},{"authorTime":"2018-06-05 03:55:17","codes":[{"authorDate":"2018-06-05 03:55:17","commitOrder":2,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (null == sourceConfig.getJar()) {\n                throw new ParameterException(\"Source jar not specfied\");\n            }\n\n            if (!fileExists(sourceConfig.getJar())) {\n                throw new ParameterException(\"Jar file \" + sourceConfig.getJar() + \" does not exist\");\n            }\n\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-06-05 03:55:17","endLine":244,"groupId":"5677","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ff/c48917c4f88d0d0d1050a773623fb512afe2a6.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2018-06-05 03:55:17","commitOrder":2,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n            if (null == sinkConfig.getJar()) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n\n            if (!fileExists(sinkConfig.getJar())) {\n                throw new ParameterException(\"Jar file \" + sinkConfig.getJar() + \" does not exist\");\n            }\n\n            File file = new File(sinkConfig.getJar());\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-06-05 03:55:17","endLine":261,"groupId":"5677","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/60/7a4d239e195cc6289f41363456a6bc8d0ac4aa.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"7c0fd11542a5a87d62628b12918af03065f9bef0","commitMessage":"@@@allowing users to specify function jar in yml file (#1899)\n\n* allowing users to specify function jar in yml file\n\n* fixing unit tests\n","date":"2018-06-05 03:55:17","modifiedFileCount":"10","status":"M","submitter":"Boyang Jerry Peng"},{"authorTime":"2018-06-20 14:09:39","codes":[{"authorDate":"2018-06-20 14:09:39","commitOrder":3,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getJar())) {\n                throw new ParameterException(\"Source jar not specfied\");\n            }\n\n            boolean isJarPathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getJar());\n            \n            String jarFilePath = null;\n            if (isJarPathUrl) {\n                \r\n                if(sourceConfig.getJar().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getJar(), new FileOutputStream(tempPkgFile));\n                        jarFilePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download jar from \" + sourceConfig.getJar()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                jarFilePath = sourceConfig.getJar();\n            }\n            \n            \n            \r\n            if (jarFilePath != null) {\n                if (!fileExists(jarFilePath)) {\n                    throw new ParameterException(\"Jar file \" + jarFilePath + \" does not exist\");\n                }\n\n                File file = new File(jarFilePath);\n                ClassLoader userJarLoader;\n                try {\n                    userJarLoader = Reflections.loadJar(file);\n                } catch (MalformedURLException e) {\n                    throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n                }\n                \r\n                Thread.currentThread().setContextClassLoader(userJarLoader);\n\n                \r\n                (new ImplementsClassValidator(Source.class)).validateField(\"className\", sourceConfig.getClassName());\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-06-20 14:09:39","endLine":306,"groupId":"6762","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/32/d9a6ca4c7f493331821feece840d010ef68fc5.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (null == sourceConfig.getJar()) {\n                throw new ParameterException(\"Source jar not specfied\");\n            }\n\n            if (!fileExists(sourceConfig.getJar())) {\n                throw new ParameterException(\"Jar file \" + sourceConfig.getJar() + \" does not exist\");\n            }\n\n            File file = new File(jarFile);\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2018-06-20 14:09:39","commitOrder":3,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n            \n            if (isBlank(sinkConfig.getJar())) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n            \n            boolean isJarPathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getJar());\n\n            String jarFilePath = null;\n            if (isJarPathUrl) {\n                \r\n                if(sinkConfig.getJar().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getJar(), new FileOutputStream(tempPkgFile));\n                        jarFilePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download jar from \" + sinkConfig.getJar()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                jarFilePath = sinkConfig.getJar();\n            }\n            \n            \r\n            if (jarFilePath != null) {\n                if (!fileExists(jarFilePath)) {\n                    throw new ParameterException(\"Jar file \" + jarFilePath + \" does not exist\");\n                }\n\n                File file = new File(jarFilePath);\n                ClassLoader userJarLoader;\n                try {\n                    userJarLoader = Reflections.loadJar(file);\n                } catch (MalformedURLException e) {\n                    throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n                }\n                \r\n                Thread.currentThread().setContextClassLoader(userJarLoader);\n\n                \r\n                (new ImplementsClassValidator(Sink.class)).validateField(\"className\", sinkConfig.getClassName());\n            }\n            \n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-06-20 14:09:39","endLine":331,"groupId":"6762","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/83/eb7f577fd4464f8e886a0aa5f0407caa7e8a2a.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n            if (null == sinkConfig.getJar()) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n\n            if (!fileExists(sinkConfig.getJar())) {\n                throw new ParameterException(\"Jar file \" + sinkConfig.getJar() + \" does not exist\");\n            }\n\n            File file = new File(sinkConfig.getJar());\n            ClassLoader userJarLoader;\n            try {\n                userJarLoader = Reflections.loadJar(file);\n            } catch (MalformedURLException e) {\n                throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n            }\n            \r\n            Thread.currentThread().setContextClassLoader(userJarLoader);\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"52c77d57c528f2dc4b7022ed8e1082245e1a9729","commitMessage":"@@@Add function-package-url support in function cli add url support to function cli (#1956)\n\n* Add function-package-url support in function cli\n\nadd url support to function cli\n\n* file-url comment\n\n* add server-side validation for source/sink class and arg-type\n\nremove cmd-line args\n","date":"2018-06-20 14:09:39","modifiedFileCount":"14","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-07-08 06:49:59","codes":[{"authorDate":"2018-07-08 06:49:59","commitOrder":4,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new ParameterException(e);\n            }\n        }\n","date":"2018-07-08 06:49:59","endLine":308,"groupId":"3489","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ca/de1e1b43161261a42dfc1c245c04da2b61516c.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getJar())) {\n                throw new ParameterException(\"Source jar not specfied\");\n            }\n\n            boolean isJarPathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getJar());\n            \n            String jarFilePath = null;\n            if (isJarPathUrl) {\n                \r\n                if(sourceConfig.getJar().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getJar(), new FileOutputStream(tempPkgFile));\n                        jarFilePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download jar from \" + sourceConfig.getJar()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                jarFilePath = sourceConfig.getJar();\n            }\n            \n            \n            \r\n            if (jarFilePath != null) {\n                if (!fileExists(jarFilePath)) {\n                    throw new ParameterException(\"Jar file \" + jarFilePath + \" does not exist\");\n                }\n\n                File file = new File(jarFilePath);\n                ClassLoader userJarLoader;\n                try {\n                    userJarLoader = Reflections.loadJar(file);\n                } catch (MalformedURLException e) {\n                    throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n                }\n                \r\n                Thread.currentThread().setContextClassLoader(userJarLoader);\n\n                \r\n                (new ImplementsClassValidator(Source.class)).validateField(\"className\", sourceConfig.getClassName());\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2018-07-08 06:49:59","commitOrder":4,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-07-08 06:49:59","endLine":328,"groupId":"12856","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ec/3d15ce1db5419efc0ecb46a029310601b8bd28.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n            \n            if (isBlank(sinkConfig.getJar())) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n            \n            boolean isJarPathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getJar());\n\n            String jarFilePath = null;\n            if (isJarPathUrl) {\n                \r\n                if(sinkConfig.getJar().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getJar(), new FileOutputStream(tempPkgFile));\n                        jarFilePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download jar from \" + sinkConfig.getJar()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                jarFilePath = sinkConfig.getJar();\n            }\n            \n            \r\n            if (jarFilePath != null) {\n                if (!fileExists(jarFilePath)) {\n                    throw new ParameterException(\"Jar file \" + jarFilePath + \" does not exist\");\n                }\n\n                File file = new File(jarFilePath);\n                ClassLoader userJarLoader;\n                try {\n                    userJarLoader = Reflections.loadJar(file);\n                } catch (MalformedURLException e) {\n                    throw new ParameterException(\"Failed to load user jar \" + file + \" with error \" + e.getMessage());\n                }\n                \r\n                Thread.currentThread().setContextClassLoader(userJarLoader);\n\n                \r\n                (new ImplementsClassValidator(Sink.class)).validateField(\"className\", sinkConfig.getClassName());\n            }\n            \n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"2bf2568eec66a61a62cb2a5bc752ca425d2a97e1","commitMessage":"@@@Load connectors from NAR archives (#2102)\n\n* Load connectors from NAR archives\n\n* Fixed exception type\n\n* Fixed ProcessRuntimeTest\n\n* Fixed CmdFunctionsTest\n","date":"2018-07-08 06:49:59","modifiedFileCount":"21","status":"M","submitter":"Matteo Merli"},{"authorTime":"2018-07-10 08:08:08","codes":[{"authorDate":"2018-07-08 06:49:59","commitOrder":5,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new ParameterException(e);\n            }\n        }\n","date":"2018-07-08 06:49:59","endLine":308,"groupId":"3489","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ca/de1e1b43161261a42dfc1c245c04da2b61516c.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new ParameterException(e);\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"N"},{"authorDate":"2018-07-10 08:08:08","commitOrder":5,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-07-10 08:08:08","endLine":355,"groupId":"12856","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2d/dd09f46c3e86182a05a1b5012fe58ca076a2ad.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"8b206c3431525882fb4bbf68869e779fab4a5e34","commitMessage":"@@@patching CmdSink and adding extensive unit tests (#2107)\n\n* patching CmdSink and add extensive unit tests\n","date":"2018-07-10 08:08:08","modifiedFileCount":"4","status":"M","submitter":"Boyang Jerry Peng"},{"authorTime":"2018-07-11 13:22:14","codes":[{"authorDate":"2018-07-11 13:22:14","commitOrder":6,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-07-11 13:22:14","endLine":326,"groupId":"3489","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/53/609d0c0b7ec21410b44c7eef4bdf806ba21e60.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new ParameterException(e);\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2018-07-11 13:22:14","commitOrder":6,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-07-11 13:22:14","endLine":355,"groupId":"12856","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2c/91588f05c1a37e2679cab637dc5c97a22e5f2c.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink jar not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Failed to validate connector from \" + archivePath, e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"6391b847d45d38ab30e4bdf4e8eb87590c098f38","commitMessage":"@@@patching CmdSources and adding unit tests (#2124)\n\nPatching some bugs in the source CLI and also adding extensive unit tests","date":"2018-07-11 13:22:14","modifiedFileCount":"4","status":"M","submitter":"Boyang Jerry Peng"},{"authorTime":"2018-07-12 08:12:14","codes":[{"authorDate":"2018-07-12 08:12:14","commitOrder":7,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-07-12 08:12:14","endLine":371,"groupId":"7312","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/7c/147e5f1de553971447fc8c166131aca854e0fa.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2018-07-12 08:12:14","commitOrder":7,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-07-12 08:12:14","endLine":406,"groupId":"14898","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c2/7b40aa8d19bf6837bf4374a10ae2b6f0764831.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"21472010db047398612ba94824ac56434f1ac38a","commitMessage":"@@@Submit and run locally builtin connectors (#2114)\n\n* Submit and run locally builtin connectors\n\n* Fixed test class constructor\n\n* Fixed null check\n\n* Fixed function package update\n\n* Fixed sourceClassName when submiting custom archive\n","date":"2018-07-12 08:12:14","modifiedFileCount":"13","status":"M","submitter":"Matteo Merli"},{"authorTime":"2018-09-06 01:37:52","codes":[{"authorDate":"2018-09-06 01:37:52","commitOrder":8,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-09-06 01:37:52","endLine":432,"groupId":"300","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/fb/32a6a02e2189b8ba77ab5e556f93659cfc255e.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sourceConfig.getName(), \"source\");\n                        downloadFromHttpUrl(sourceConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"},{"authorDate":"2018-09-06 01:37:52","commitOrder":8,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-09-06 01:37:52","endLine":474,"groupId":"300","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/38/a55bf47c8d219a27fdde9c7a73c0869dc3ed3a.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = File.createTempFile(sinkConfig.getName(), \"sink\");\n                        downloadFromHttpUrl(sinkConfig.getArchive(), new FileOutputStream(tempPkgFile));\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"ec9dfa8e2ec0af29f6a29d1ce5817d245164c533","commitMessage":"@@@Delete temp file after submitting function (#2519)\n\n","date":"2018-09-06 01:37:52","modifiedFileCount":"4","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-10-04 08:33:55","codes":[{"authorDate":"2018-10-04 08:33:55","commitOrder":9,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            ClassLoader classLoader = null;\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath),\n                            Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-04 08:33:55","endLine":433,"groupId":"11114","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5d/0c84c90d810494b1101d2bd8f8b63aa4923115.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSourceClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"},{"authorDate":"2018-10-04 08:33:55","commitOrder":9,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            ClassLoader classLoader = null;\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath), Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-04 08:33:55","endLine":478,"groupId":"11114","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/bd/5af791a8a2019d9497da92b83872c8f94eccd3.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n\n                    \r\n                    ConnectorUtils.getIOSinkClass(archivePath);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name());\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"9ccaf2c4b8409ae37960cfb9ed16fb60d3924a7f","commitMessage":"@@@Function Serverside Validation (#2701)\n\n* First cut of the serverside valiation\n\n* Revert unneeded changes\n\n* Do the easier checks first\n\n* Check for null\n\n* Simplify\n\n* Do the actual validation\n\n* Check for null runtime\n\n* Update Test\n\n* Fix build\n\n* Fix build\n\n* misc fixes\n\n* Add explicit check for serde\n\n* Changed for a better condition\n\n* Better serde check\n\n* Fixed some unittests\n\n* Fixed more tests\n\n* Fixed unittest\n\n* Fixed unittests\n\n* Fixed unittest\n\n* Stricter checks\n","date":"2018-10-04 08:33:55","modifiedFileCount":"16","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-10-18 02:41:33","codes":[{"authorDate":"2018-10-18 02:41:33","commitOrder":10,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath),\n                            Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-18 02:41:33","endLine":435,"groupId":"300","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f2/d768199e5ac31eace5539069c07885e9841740.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            ClassLoader classLoader = null;\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath),\n                            Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"},{"authorDate":"2018-10-18 02:41:33","commitOrder":10,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath), Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-18 02:41:33","endLine":480,"groupId":"300","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e5/6a34384e12b019c6b528a57cbef9eaaf010e03.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            ClassLoader classLoader = null;\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath), Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"a7310ee7e62f9d70d41ebc21bd196cbba259eeb0","commitMessage":"@@@Function Serverside validation Part 2 (#2752)\n\n* First cut of adding new endpoints for source/sink\n\n* More better check\n\n* Plugged in source/sink\n\n* Made pulsar admin to use Source/Sink endpoints\n\n* Switched cli to use functionConfig instead of function details\n\n* Fix unittests\n\n* Fixed unittest\n\n* Logic correction\n\n* Fix bugs after mergin\n\n* More compile fixes\n\n* Fixed path for sink\n\n* Added source unittests\n\n* Added sink tests\n\n* Fixed unittest\n\n* Have default value for maxRetries\n\n* Fixed unittest\n\n* Added example jar\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Updated license\n\n* Correct the links for sources/sinks\n\n* Strip the builtin://\n\n* Removed unused imports\n\n* Disabling presto integration test for now until we figure out the whole refactor\n\n* Revert accidental yaml file change\n\n* Dont expose to v1 endpoints\n","date":"2018-10-18 02:41:33","modifiedFileCount":"25","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-10-18 02:41:33","codes":[{"authorDate":"2018-10-20 01:00:25","commitOrder":11,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath),\n                            Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-20 01:00:25","endLine":455,"groupId":"300","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5a/1e9b38175f81a9a7ea39f9e11c1c40f18554d4.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (StringUtils.isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath),\n                            Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2018-10-18 02:41:33","commitOrder":11,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath), Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-18 02:41:33","endLine":480,"groupId":"300","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e5/6a34384e12b019c6b528a57cbef9eaaf010e03.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath), Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"N"}],"commitId":"f3a027b45f8244d19ac24709edc7f762abb5ce6f","commitMessage":"@@@Added stop/restart functionality in sources/sinks (#2810)\n\n* Added Get and List source/sink functionality\n\n* Fixed compile\n\n* Removed test that doesnt make sense any more\n\n* Fixed build\n\n* Fixed logic\n\n* Return error response\n\n* Return response on error\n\n* Fix unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Added get/list sinks tests\n\n* Added get/list tests\n\n* Add more unittests\n\n* Added more unittests\n\n* Added TODO\n\n* Took feedback\n\n* Fix unittest\n\n* Fix unittest\n\n* Fix unittest\n\n* Fixed integration tests\n\n* Fixed integration test\n\n* Added restart/stop functionality to the sources/sinks\n\n* Added getstatus method to sources/sink\n\n* Fix integration tests\n","date":"2018-10-20 01:00:25","modifiedFileCount":"10","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-10-23 02:12:40","codes":[{"authorDate":"2018-10-23 02:12:40","commitOrder":12,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n\n            try {\n             \r\n                String sourcePkgUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) ? sourceConfig.getArchive() : null;\n                Path archivePath = (Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) || sourceConfig.getArchive().startsWith(BUILTIN)) ? null : new File(sourceConfig.getArchive()).toPath();\n                classLoader = SourceConfigUtils.validate(sourceConfig, archivePath, sourcePkgUrl, null);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-23 02:12:40","endLine":413,"groupId":"8776","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f2/95030fe841f537ddbf42d4dc7f9153b05e98b4.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sourceConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sourceConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sourceConfig.getArchive(), sourceConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sourceConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sourceConfig.getArchive();\n            }\n\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath),\n                            Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n             \r\n                ConfigValidation.validateConfig(sourceConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2018-10-23 02:12:40","commitOrder":12,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n\n            try {\n                \r\n                String sourcePkgUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) ? sinkConfig.getArchive() : null;\n                Path archivePath = (Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) || sinkConfig.getArchive().startsWith(BUILTIN)) ? null : new File(sinkConfig.getArchive()).toPath();\n                classLoader = SinkConfigUtils.validate(sinkConfig, archivePath, sourcePkgUrl, null);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","date":"2018-10-23 02:12:40","endLine":456,"groupId":"8776","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b8/ba510574af6dde449b9390e6e3a169c7187e29.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            boolean isConnectorBuiltin = sinkConfig.getArchive().startsWith(Utils.BUILTIN);\n            boolean isArchivePathUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive());\n\n            String archivePath = null;\n            if (isArchivePathUrl) {\n                \r\n                if(sinkConfig.getArchive().startsWith(Utils.HTTP)) {\n                    File tempPkgFile = null;\n                    try {\n                        tempPkgFile = downloadFromHttpUrl(sinkConfig.getArchive(), sinkConfig.getName());\n                        archivePath = tempPkgFile.getAbsolutePath();\n                    } catch(Exception e) {\n                        if(tempPkgFile!=null ) {\n                            tempPkgFile.deleteOnExit();\n                        }\n                        throw new ParameterException(\"Failed to download archive from \" + sinkConfig.getArchive()\n                                + \", due to =\" + e.getMessage());\n                    }\n                }\n            } else if (isConnectorBuiltin) {\n                \r\n                archivePath = null;\n            } else {\n                archivePath = sinkConfig.getArchive();\n            }\n\n            \r\n            if (archivePath != null) {\n                if (!fileExists(archivePath)) {\n                    throw new ParameterException(\"Archive file \" + archivePath + \" does not exist\");\n                }\n\n                try {\n                    ConnectorDefinition connector = ConnectorUtils.getConnectorDefinition(archivePath);\n                    log.info(\"Connector: {}\", connector);\n                } catch (IOException e) {\n                    throw new ParameterException(\"Connector from \" + archivePath + \" has error: \" + e.getMessage());\n                }\n\n                try {\n                    classLoader = NarClassLoader.getFromArchive(new File(archivePath), Collections.emptySet());\n                } catch (IOException e) {\n                    throw new IllegalArgumentException(e);\n                }\n            }\n\n            try {\n                \r\n                ConfigValidation.validateConfig(sinkConfig, FunctionConfig.Runtime.JAVA.name(), classLoader);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"32d1dafdb4f77bf241c8786d067734a4bebdd4cf","commitMessage":"@@@Removed Validation Annotations and do manual Validation (#2813)\n\n* Added Get and List source/sink functionality\n\n* Fixed compile\n\n* Removed test that doesnt make sense any more\n\n* Fixed build\n\n* Fixed logic\n\n* Return error response\n\n* Return response on error\n\n* Fix unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Added get/list sinks tests\n\n* Added get/list tests\n\n* Add more unittests\n\n* Added more unittests\n\n* Added TODO\n\n* Took feedback\n\n* Fix unittest\n\n* Fix unittest\n\n* Fix unittest\n\n* Fixed integration tests\n\n* Fixed integration test\n\n* Added restart/stop functionality to the sources/sinks\n\n* Added getstatus method to sources/sink\n\n* Fix integration tests\n\n* Do Explicit Validation of Configs instead of annotations\n\n* Remove all annotations from config files\n\n* Removed validator related classes\n\n* Removed unused imports\n\n* Fix check logic\n\n* fix compilation\n\n* Fix unittest\n\n* Fixed unittest\n\n* Fixed unittest\n\n* Validator tests should be done elsewhere\n\n* Added unittest\n\n* Fixed unittest\n","date":"2018-10-23 02:12:40","modifiedFileCount":"23","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-03 05:44:12","codes":[{"authorDate":"2018-11-03 05:44:12","commitOrder":13,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-03 05:44:12","endLine":396,"groupId":"8776","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/32/ebfc996b3f86b71acce5ade4095605fedaf155.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n\n            try {\n             \r\n                String sourcePkgUrl = Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) ? sourceConfig.getArchive() : null;\n                Path archivePath = (Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) || sourceConfig.getArchive().startsWith(BUILTIN)) ? null : new File(sourceConfig.getArchive()).toPath();\n                classLoader = SourceConfigUtils.validate(sourceConfig, archivePath, sourcePkgUrl, null);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2018-11-03 05:44:12","commitOrder":13,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-03 05:44:12","endLine":440,"groupId":"8776","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d1/4c0534b0bd87e358cb112eff4265c7c090e3a2.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n\n            try {\n                \r\n                String sourcePkgUrl = Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) ? sinkConfig.getArchive() : null;\n                Path archivePath = (Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) || sinkConfig.getArchive().startsWith(BUILTIN)) ? null : new File(sinkConfig.getArchive()).toPath();\n                classLoader = SinkConfigUtils.validate(sinkConfig, archivePath, sourcePkgUrl, null);\n            } catch (Exception e) {\n                throw new ParameterException(e.getMessage());\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"}],"commitId":"f36c43f3592ce451176a45076db2487260aaabe2","commitMessage":"@@@Move all validation/inferring missing args to serverside (#2907)\n\n* Move all validation/inferring missing args to serverside\n\n* Moved tests to serverside\n\n* Fixed all tests\n\n* Moved tests from admin to backend\n\n* remove unused var\n\n* Make it explicitly narclassloader\n\n* Dont copy nar files\n\n* Copy nar files\n\n* Some tests worjing\n\n* Do not mock ConnectorIo\n\n* Fix build\n\n* Some more enhancements to the tests\n\n* Ignore io packages in powermock\n\n* Fixed unittests\n\n* Remove unused stuff\n\n* Move changes from client side to serverside\n\n* More serverside tests\n\n* cleanup\n\n* Fixed unittests\n","date":"2018-11-03 05:44:12","modifiedFileCount":"13","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-03 15:24:43","codes":[{"authorDate":"2018-11-03 15:24:43","commitOrder":14,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-03 15:24:43","endLine":379,"groupId":"12080","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/06/9f2f80ba2ffcf9db9b6eae79aa7cb3a0ca0be0.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"},{"authorDate":"2018-11-03 15:24:43","commitOrder":14,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-03 15:24:43","endLine":423,"groupId":"12080","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/27/0a3bd636ba61c0800d561a2bb2273afedb594a.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"8f294c9ff67c36deee1d84d1dbc2dab8aa612bb4","commitMessage":"@@@Remove functions-util dependency from pulsar-client-admin (#2917)\n\n* Remove functions-util dependency from pulsar-client-admin\n\n* Simplified\n\n* reverted accidental change\n\n* fixed unittest\n\n* Updated license\n","date":"2018-11-03 15:24:43","modifiedFileCount":"18","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-05 04:06:13","codes":[{"authorDate":"2018-11-05 04:06:13","commitOrder":15,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sourceConfig);\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-05 04:06:13","endLine":380,"groupId":"12080","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f3/ac0b35348db1499c3e6224f0c6acc769453589.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"},{"authorDate":"2018-11-05 04:06:13","commitOrder":15,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sinkConfig);\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-05 04:06:13","endLine":425,"groupId":"12080","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/69/9ba7e3a4a121667ed64938fd51509a3bb79fab.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"6617b3218ce6003dc423f3985bda49964d0826a7","commitMessage":"@@@Added some basic checks for function/source/sink in cli as well (#2924)\n\n\n Motivation\n\nWe recently moved all config validation from client side to server side.\nHowever in order for the cli to submit its function to the server.  users should supply some basic information(like tenant/namespace/name) because the submission path involves them.\nThis pr adds back some basic checks back in the client so that we do basic checks for these fields.\n","date":"2018-11-05 04:06:13","modifiedFileCount":"9","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-05 04:06:13","codes":[{"authorDate":"2018-12-07 04:27:38","commitOrder":16,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sourceConfig);\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n            if (isBlank(sourceConfig.getName())) {\n                throw new IllegalArgumentException(\"Source name not specified\");\n            }\n        }\n","date":"2018-12-07 04:27:38","endLine":397,"groupId":"12080","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/9e/c950a446fcc6d59ed381506a5a653a0f2c1122.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sourceConfig);\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"},{"authorDate":"2018-11-05 04:06:13","commitOrder":16,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sinkConfig);\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-05 04:06:13","endLine":425,"groupId":"12080","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/69/9ba7e3a4a121667ed64938fd51509a3bb79fab.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sinkConfig);\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"}],"commitId":"d76dfe2e42a196f8d306982ff33bf627caff8245","commitMessage":"@@@Cleanup Exception thrown during error (#3133)\n\n* Cleanup Exception thrown during error\n\n* Added more validation\n","date":"2018-12-07 04:27:38","modifiedFileCount":"6","status":"M","submitter":"Sanjeev Kulkarni"},{"authorTime":"2018-11-05 04:06:13","codes":[{"authorDate":"2018-12-13 22:15:34","commitOrder":17,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specified\");\n            }\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sourceConfig);\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n            if (isBlank(sourceConfig.getName())) {\n                throw new IllegalArgumentException(\"Source name not specified\");\n            }\n        }\n","date":"2018-12-13 22:15:34","endLine":397,"groupId":"12080","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/7a/cd85b8f02d8fa4dec5f55fe310a7ebc6cbb560.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specfied\");\n            }\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sourceConfig);\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n            if (isBlank(sourceConfig.getName())) {\n                throw new IllegalArgumentException(\"Source name not specified\");\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"},{"authorDate":"2018-11-05 04:06:13","commitOrder":17,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sinkConfig);\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-05 04:06:13","endLine":425,"groupId":"12080","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/69/9ba7e3a4a121667ed64938fd51509a3bb79fab.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sinkConfig);\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"}],"commitId":"6df595a341a884404242b8d6dcf0d686e71907ee","commitMessage":"@@@Fix Spellings and Code Cleanup (#3181)\n\n* Fix Spellings and Code Cleanup\n\n* Fix Code comments\n\n* Remove Tenant check\n\n* Fix test cases\n","date":"2018-12-13 22:15:34","modifiedFileCount":"14","status":"M","submitter":"Ali Ahmed"},{"authorTime":"2018-11-05 04:06:13","codes":[{"authorDate":"2021-05-26 02:39:10","commitOrder":18,"curCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specified\");\n            }\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sourceConfig);\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n            if (isBlank(sourceConfig.getName())) {\n                throw new IllegalArgumentException(\"Source name not specified\");\n            }\n            \n            if (sourceConfig.getBatchSourceConfig() != null) {\n            \tvalidateBatchSourceConfigs(sourceConfig.getBatchSourceConfig());\n            }\n        }\n","date":"2021-05-26 02:39:10","endLine":462,"groupId":"10400","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"validateSourceConfigs","params":"(SourceConfigsourceConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/9f/318c220de569a14143c9162e175b4992b8751b.src","preCode":"        protected void validateSourceConfigs(SourceConfig sourceConfig) {\n            if (isBlank(sourceConfig.getArchive())) {\n                throw new ParameterException(\"Source archive not specified\");\n            }\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sourceConfig);\n            if (!Utils.isFunctionPackageUrlSupported(sourceConfig.getArchive()) &&\n                !sourceConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sourceConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Source Archive %s does not exist\", sourceConfig.getArchive()));\n                }\n            }\n            if (isBlank(sourceConfig.getName())) {\n                throw new IllegalArgumentException(\"Source name not specified\");\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSources.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"},{"authorDate":"2018-11-05 04:06:13","commitOrder":18,"curCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sinkConfig);\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","date":"2018-11-05 04:06:13","endLine":425,"groupId":"10400","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"validateSinkConfigs","params":"(SinkConfigsinkConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/69/9ba7e3a4a121667ed64938fd51509a3bb79fab.src","preCode":"        protected void validateSinkConfigs(SinkConfig sinkConfig) {\n\n            if (isBlank(sinkConfig.getArchive())) {\n                throw new ParameterException(\"Sink archive not specfied\");\n            }\n\n            org.apache.pulsar.common.functions.Utils.inferMissingArguments(sinkConfig);\n\n            if (!Utils.isFunctionPackageUrlSupported(sinkConfig.getArchive()) &&\n                    !sinkConfig.getArchive().startsWith(Utils.BUILTIN)) {\n                if (!new File(sinkConfig.getArchive()).exists()) {\n                    throw new IllegalArgumentException(String.format(\"Sink Archive file %s does not exist\", sinkConfig.getArchive()));\n                }\n            }\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdSinks.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"}],"commitId":"85effc4048199e30bd70edac17bf2d86b49f003b","commitMessage":"@@@[Issue-10109] [admin client] Add --batch-source-config switch to the Pulsar Admin Source API (#10593)\n\nCo-authored-by: David Kjerrumgaard <dkjerrumgaard@splunk.com>","date":"2021-05-26 02:39:10","modifiedFileCount":"2","status":"M","submitter":"David Kjerrumgaard"}]
