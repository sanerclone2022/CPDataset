[{"authorTime":"2019-05-21 08:00:01","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":2,"curCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = compressor.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = compressor.compress(sourceNio, 0, uncompressedLength, targetNio, 0, maxLength);\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","date":"2017-06-24 04:41:32","endLine":52,"groupId":"7634","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"encode","params":"(ByteBufsource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/6e/b0185165aeef9bdcfea8222009d90bbad5feda.src","preCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = compressor.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = compressor.compress(sourceNio, 0, uncompressedLength, targetNio, 0, maxLength);\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"NB"},{"authorDate":"2019-05-21 08:00:01","commitOrder":2,"curCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = Snappy.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = 0;\n        try {\n            compressedLength = Snappy.compress(sourceNio, targetNio);\n        } catch (IOException e) {\n            log.error(\"Failed to compress to Snappy: {}\", e.getMessage());\n        }\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","date":"2019-05-21 08:00:01","endLine":53,"groupId":"13053","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"encode","params":"(ByteBufsource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/15/98d5ee247890a5fea6bfd7a7d0cfb908b892fe.src","preCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = Snappy.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = 0;\n        try {\n            compressedLength = Snappy.compress(sourceNio, targetNio);\n        } catch (IOException e) {\n            log.error(\"Failed to compress to Snappy: {}\", e.getMessage());\n        }\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"706a18e56b52468b1b48832115959983a3fffbe0","commitMessage":"@@@[pulsar-common] Support Snappy compression for Java (#4259)\n\n* Support Snappy compression for java.\n\n* Some minor fix to pass unit tests\n\n* Format the cpp code\n\n* Added support for c++ client\n\n* Format the cpp code\n","date":"2019-05-21 08:00:01","modifiedFileCount":"5","status":"M","submitter":"Fangbin Sun"},{"authorTime":"2019-05-21 08:00:01","codes":[{"authorDate":"2019-05-29 23:31:47","commitOrder":3,"curCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = compressor.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PulsarByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = compressor.compress(sourceNio, 0, uncompressedLength, targetNio, 0, maxLength);\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","date":"2019-05-29 23:31:47","endLine":66,"groupId":"7634","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"encode","params":"(ByteBufsource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/41/7a1b3597672ba873e1caac4b81058cb9704e43.src","preCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = compressor.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = compressor.compress(sourceNio, 0, uncompressedLength, targetNio, 0, maxLength);\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-05-21 08:00:01","commitOrder":3,"curCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = Snappy.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = 0;\n        try {\n            compressedLength = Snappy.compress(sourceNio, targetNio);\n        } catch (IOException e) {\n            log.error(\"Failed to compress to Snappy: {}\", e.getMessage());\n        }\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","date":"2019-05-21 08:00:01","endLine":53,"groupId":"13053","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"encode","params":"(ByteBufsource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/15/98d5ee247890a5fea6bfd7a7d0cfb908b892fe.src","preCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = Snappy.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = 0;\n        try {\n            compressedLength = Snappy.compress(sourceNio, targetNio);\n        } catch (IOException e) {\n            log.error(\"Failed to compress to Snappy: {}\", e.getMessage());\n        }\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"}],"commitId":"3b33c668e194421aed23873c26e9b7e8bcbd9d9f","commitMessage":"@@@Configure static PulsarByteBufAllocator to handle OOM errors (#4196)\n\n* Configure static PulsarByteBufAllocator to handle OOM errors\n\n* Always specify `pulsar.allocator.exit_on_oom` when starting pulsar services\n\n* Reverted metrics back\n\n* Fixed compression tests\n\n* Explicitely set the underlying allocator to netty default\n\n* Fixed shading\n","date":"2019-05-29 23:31:47","modifiedFileCount":"29","status":"M","submitter":"Matteo Merli"},{"authorTime":"2020-06-04 14:23:49","codes":[{"authorDate":"2020-06-04 14:23:49","commitOrder":4,"curCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = Lz4RawCompressor.maxCompressedLength(uncompressedLength);\n\n        ByteBuf target = PulsarByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n\n        int compressedLength;\n        if (source.hasMemoryAddress() && target.hasMemoryAddress()) {\n            compressedLength = Lz4RawCompressor.compress(\n                    null,\n                    source.memoryAddress() + source.readerIndex(),\n                    source.readableBytes(),\n                    null,\n                    target.memoryAddress(),\n                    maxLength,\n                    LZ4_TABLE.get());\n        } else {\n            ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n            ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n            LZ4_COMPRESSOR.get().compress(sourceNio, targetNio);\n            compressedLength = targetNio.position();\n        }\n\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","date":"2020-06-04 14:23:49","endLine":86,"groupId":"10275","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"encode","params":"(ByteBufsource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/24/93af4ca39f83956892c5fd3069d2efc9b206bb.src","preCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = compressor.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PulsarByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = compressor.compress(sourceNio, 0, uncompressedLength, targetNio, 0, maxLength);\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecLZ4.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-06-04 14:23:49","commitOrder":4,"curCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = SnappyRawCompressor.maxCompressedLength(uncompressedLength);\n\n        ByteBuf target = PulsarByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        int compressedLength;\n\n        if (source.hasMemoryAddress() && target.hasMemoryAddress()) {\n            compressedLength = SnappyRawCompressor.compress(\n                    null,\n                    source.memoryAddress() + source.readerIndex(),\n                    source.memoryAddress() + source.writerIndex(),\n                    null,\n                    target.memoryAddress(),\n                    target.memoryAddress() + maxLength,\n                    SNAPPY_TABLE.get());\n        } else {\n            ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n            ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n            SNAPPY_COMPRESSOR.get().compress(sourceNio, targetNio);\n            compressedLength = targetNio.position();\n        }\n\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","date":"2020-06-04 14:23:49","endLine":89,"groupId":"10275","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"encode","params":"(ByteBufsource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/51/7f1ca7ccede5fced560cbd14b2a368e04a495c.src","preCode":"    public ByteBuf encode(ByteBuf source) {\n        int uncompressedLength = source.readableBytes();\n        int maxLength = Snappy.maxCompressedLength(uncompressedLength);\n\n        ByteBuffer sourceNio = source.nioBuffer(source.readerIndex(), source.readableBytes());\n\n        ByteBuf target = PooledByteBufAllocator.DEFAULT.buffer(maxLength, maxLength);\n        ByteBuffer targetNio = target.nioBuffer(0, maxLength);\n\n        int compressedLength = 0;\n        try {\n            compressedLength = Snappy.compress(sourceNio, targetNio);\n        } catch (IOException e) {\n            log.error(\"Failed to compress to Snappy: {}\", e.getMessage());\n        }\n        target.writerIndex(compressedLength);\n        return target;\n    }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecSnappy.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"b22b32313d95d3ad2518d49352d985a149ebaf31","commitMessage":"@@@Use pure-java Air-Compressor instead of JNI based libraries (#5390)\n\n* Use pure-java Air-Compressor instead of JNI based libraries\n\n* Fixed license files\n\n* Fixed non-needed exclusion\n\n* Added compat tests with JNI implementations\n\n* Ensure direct buffer is used in the test\n\n* Ensure direct bytebuf for both compression and decompression test\n\nCo-authored-by: penghui <penghui@apache.org>","date":"2020-06-04 14:23:49","modifiedFileCount":"4","status":"M","submitter":"Matteo Merli"}]
