[{"authorTime":"2021-02-01 22:55:41","codes":[{"authorDate":"2021-02-01 22:55:41","commitOrder":15,"curCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[1];\n                        Object ctx = args[2];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","date":"2021-02-01 22:55:41","endLine":687,"groupId":"10768","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5d/c2afb619dafcf5d0027b0fd5775398909570c0.src","preCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[1];\n                        Object ctx = args[2];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"MB"},{"authorDate":"2021-02-01 22:55:41","commitOrder":15,"curCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[1];\n                        Object ctx = args[2];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","date":"2021-02-01 22:55:41","endLine":399,"groupId":"8652","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mockKeyValueSchemaPulsarRecordCursor","params":"(finalLongentriesNum@finalTopicNametopicName@finalKeyValueSchemaschema@KeyValuemessage@List<PulsarColumnHandle>ColumnHandles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/aa/df0dcc9f89d1c3063e76d986de2da480a1a7e6.src","preCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[1];\n                        Object ctx = args[2];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarRecordCursor.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"B"}],"commitId":"a1107ad9e008ef2f1f028feb95a893e74face08e","commitMessage":"@@@[PIP-71][SQL]Pulsar SQL migrate SchemaHandle to presto decoder (#8422)\n\nFixes #4747 \nFixes #7652 \n\n\n Motivation\n\nPIP-71: https://github.com/apache/pulsar/wiki/PIP-71:-Pulsar-SQL-migrate-SchemaHandle-to-presto-decoder\n\n**Pip-Doc** : [[PIP-71][SQL]Migrate SchemaHandle to Presto-decoder](https://docs.google.com/document/d/1KwG0GoHccju4-QNPfvT6tOwhp5Fvs6-iZlfLooPxTDM/edit?usp=sharing)\n\nIn current version .  pulsar-presto deserialize fields  rely on SchemaHandler .  but this causes the following restrictions :\n\n- **Metadata**: current nested field is dissociate with presto ParameterizedType .  It treated nested field as a separated field .  so  presto compiler can?t understand the type hierarchy . nested field should be Row type in presto (e.g.  Hive struct type support) . In the same way?array \\ map type also shoud associate with presto ParameterizedTypes.\n- **Decoder** : SchemaHandler is hard to work with  `RecordCursor.getObject()` to support ROW. MAP. ARRAY .etc\n\nThe **motivations** of this pull request :\n-  ` PulsarMetadata` take advantage of `ParameterizedType`  to describe `row/array/map` Type instead of resolve nested columns in pulsar-presto connecter.\n- Customize `RowDecoder | RowDecoderFactory | ColumnDecoder` to work with pulsar interface.  and with some our own extensions  compare to presto original version .  we can support more type for backward compatible (e.g. \n ` TIMESTAMP\\DATE\\TIME\\Real\\ARRAY\\MAP\\ROW ` support).\n- Decouple avro or schema type with `pulsar-presto main module` (RecordSet. ConnectorMetadata .etc ).  aim to friendly with other schema type ( [ProtobufNative](https://github.com/apache/pulsar/pull/8372)  ?thrift etc..).\n\n\n Modifications\n\nDescribe in [PIP-71: Pulsar SQL migrate SchemaHandle to presto decoder](https://docs.google.com/document/d/1KwG0GoHccju4-QNPfvT6tOwhp5Fvs6-iZlfLooPxTDM/edit?usp=sharing) \n\n----\n\n\n Does this pull request potentially affect one of the following parts:\n\n*If `yes` was chosen.  please highlight the changes*\n\n  - Dependencies (does it add or upgrade a dependency): (**yes** )\n  - The public API: (no)\n  - The schema: ( no)\n  - The default values of configurations: (no)\n  - The wire protocol: (no)\n  - The rest endpoints: (no)\n  - The admin cli options: (no)\n  - Anything that affects deployment: (no)\n\n\n Documentation\n\n  - Does this pull request introduce a new feature? (yes)\n  [[PIP][SQL]Migrate SchemaHandle to Presto-decoder](https://docs.google.com/document/d/1KwG0GoHccju4-QNPfvT6tOwhp5Fvs6-iZlfLooPxTDM/edit?usp=sharing)\n\n* codeStyle fix\n\n* Update pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java\n\nCo-authored-by: ran <gaoran_10@126.com>\n\n* Update pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java\n\nCo-authored-by: ran <gaoran_10@126.com>\n\n* Update pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java\n\nCo-authored-by: ran <gaoran_10@126.com>\n\n* add keyValue\\Primitive schema test && add schema cyclic definition detect\n\n* merge master\n\n* merge master\n\nCo-authored-by: wangguowei <wangguowei@zhihu.com>\nCo-authored-by: ran <gaoran_10@126.com>","date":"2021-02-01 22:55:41","modifiedFileCount":"14","status":"M","submitter":"hnail"},{"authorTime":"2021-03-14 10:26:01","codes":[{"authorDate":"2021-03-14 10:26:01","commitOrder":16,"curCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","date":"2021-03-14 10:26:01","endLine":688,"groupId":"10768","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4b/c0c3b2a0ac776cc04b5e3832fe2893ceb3605c.src","preCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[1];\n                        Object ctx = args[2];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2021-03-14 10:26:01","commitOrder":16,"curCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","date":"2021-03-14 10:26:01","endLine":400,"groupId":"8652","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mockKeyValueSchemaPulsarRecordCursor","params":"(finalLongentriesNum@finalTopicNametopicName@finalKeyValueSchemaschema@KeyValuemessage@List<PulsarColumnHandle>ColumnHandles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a1/eb2a3fd4944548aedfabe6f5824503281b35ed.src","preCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[1];\n                        Object ctx = args[2];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarRecordCursor.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"1f6ce7a64e05707a1655738bc00191102411710a","commitMessage":"@@@[Pulsar SQL] Add max split entry queue size bytes limitation (#9628)\n\n\n Motivation\n\nIn Pulsar SQL.  there are two configurations `pulsar.max-split-entry-queue-size` and `pulsar.max-split-message-queue-size` to control the entry queue and message queue capacity.  but some entries are so big some are small.  it's hard to control the queue size bytes and the message queue size bytes.\n\n\n Modifications\n\nAdd a new configuration `pulsar.max-split-queue-cache-size` to control the entry queue size bytes and the message queue size bytes. Half of this configuration will assign to entry queue size bytes and the left quota assign to message queue size bytes.","date":"2021-03-14 10:26:01","modifiedFileCount":"6","status":"M","submitter":"ran"},{"authorTime":"2021-03-14 10:26:01","codes":[{"authorDate":"2021-04-26 16:13:06","commitOrder":17,"curCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString(), any())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","date":"2021-04-26 16:13:06","endLine":688,"groupId":"10768","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d1/701d929d571a189fd6ecbb10e7258ee06a5212.src","preCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2021-03-14 10:26:01","commitOrder":17,"curCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","date":"2021-03-14 10:26:01","endLine":400,"groupId":"8652","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mockKeyValueSchemaPulsarRecordCursor","params":"(finalLongentriesNum@finalTopicNametopicName@finalKeyValueSchemaschema@KeyValuemessage@List<PulsarColumnHandle>ColumnHandles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a1/eb2a3fd4944548aedfabe6f5824503281b35ed.src","preCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarRecordCursor.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"N"}],"commitId":"5f72699487929a80fd41a258192eb1578e52c2bc","commitMessage":"@@@Don't return non-persistent topic when list tables by Pulsar SQL (#10368)\n\n\n Motivation\n\nDon't return non-persistent topic when list tables by Pulsar SQL\n\n\n Verifying this change\n\nNew integration test added.","date":"2021-04-26 16:13:06","modifiedFileCount":"4","status":"M","submitter":"lipenghui"},{"authorTime":"2021-03-14 10:26:01","codes":[{"authorDate":"2021-06-03 05:17:04","commitOrder":18,"curCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString(), any())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","date":"2021-06-03 05:17:04","endLine":692,"groupId":"10768","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ac/05a91d54ebb254364012c3e4b21f5af1999787.src","preCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString(), any())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    throw new PulsarAdminException(new ClientErrorException(Response.status(404).build()));\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2021-03-14 10:26:01","commitOrder":18,"curCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","date":"2021-03-14 10:26:01","endLine":400,"groupId":"8652","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"mockKeyValueSchemaPulsarRecordCursor","params":"(finalLongentriesNum@finalTopicNametopicName@finalKeyValueSchemaschema@KeyValuemessage@List<PulsarColumnHandle>ColumnHandles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a1/eb2a3fd4944548aedfabe6f5824503281b35ed.src","preCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarRecordCursor.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"N"}],"commitId":"301a76435ce918520f1b70b95b7ebed9bf1b08b5","commitMessage":"@@@Remove pulsar-client-admin-api dependency : pulsar-common (#10774)\n\n* remove gson from admin api Topics.java\n\n* Bookies.java\n\n* Brokers.java\n\n* BrokerStats.java\n\n* fix PulsarAdminException\n\n* Clusters.java\n\n* Tenants.java\n\n* minor fix on ResourceGroups\n\n* Namespaces.java & OffloadPolicies\n\n* temp remove JsonProperty in OffloadPolicies\n\n* Topics & NonPersistentTopics\n\n* ResourceQuotas with MixIn class\n\n* Functions\n\n* Sources.java\n\n* Sinks.java\n\n* Schemas.java\n\n* resolve checkstyle\n\n* minor fix\n\n* Transactions.java\n\n* fix stylecheck\n\n* set ObjectMapper module\n\n* fix ci\n\n* fix PulsarAdminException\n\n* remove gson\n\n* remove swagger\n\n* merge master\n\n* remove swagger\n\n* remove io.swagger\n\n* remove commons-lang3\n\n* use Objects.requireNonNull\n\n* remove commons-lang3\n\n* fix interface mapping\n\n* fix ci\n\n* extract OffloadPoliciesInterface\n\n* extract FunctionStats interfaces\n\n* fix unit test\n\n* fix shaded class\n\n* add object mapper mixin tests\n\n* fix ci\n\n* fix admin exception ci error\n\n* UpdateOptions\n\n* AutoFailoverPolicyData\n\n* BrokerNamespaceIsolationData\n\n* ClusterData\n\n* FailureDomain\n\n* FunctionInstanceStats\n\n* NamespaceIsolationData\n\n* OffloadPolicies\n\n* TenantInfo\n\n* FunctionStats\n\n* fix stylecheck\n\n* Fixed interface\n\n* Fixed ClusterData equals method\n\n* Fixed merge issue\n\n* Fixed another merge issue\n\n* Fixed test issue after merge\n\nCo-authored-by: Rui Fu <freelz@gmail.com>","date":"2021-06-03 05:17:04","modifiedFileCount":"266","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-06-10 17:56:38","codes":[{"authorDate":"2021-06-03 05:17:04","commitOrder":19,"curCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString(), any())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","date":"2021-06-03 05:17:04","endLine":692,"groupId":"10513","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ac/05a91d54ebb254364012c3e4b21f5af1999787.src","preCode":"    public void setup() throws Exception {\n        this.pulsarConnectorConfig = spy(new PulsarConnectorConfig());\n        this.pulsarConnectorConfig.setMaxEntryReadBatchSize(1);\n        this.pulsarConnectorConfig.setMaxSplitEntryQueueSize(10);\n        this.pulsarConnectorConfig.setMaxSplitMessageQueueSize(100);\n\n        Tenants tenants = mock(Tenants.class);\n        doReturn(new LinkedList<>(topicNames.stream()\n            .map(TopicName::getTenant)\n            .collect(Collectors.toSet()))).when(tenants).getTenants();\n\n        Namespaces namespaces = mock(Namespaces.class);\n\n        when(namespaces.getNamespaces(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n                String tenant = (String) args[0];\n                List<String> ns = getNamespace(tenant);\n                if (ns.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return ns;\n            }\n        });\n\n        Topics topics = mock(Topics.class);\n        when(topics.getList(anyString(), any())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getTopics(ns);\n                if (topics.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicList(anyString())).thenAnswer(new Answer<List<String>>() {\n            @Override\n            public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String ns = (String) args[0];\n                List<String> topics = getPartitionedTopics(ns);\n                if (topics.isEmpty()) {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n                return topics;\n            }\n        });\n\n        when(topics.getPartitionedTopicMetadata(anyString())).thenAnswer(new Answer<PartitionedTopicMetadata>() {\n            @Override\n            public PartitionedTopicMetadata answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                int partitions = partitionedTopicsToPartitions.get(topic) == null\n                        ? 0 : partitionedTopicsToPartitions.get(topic);\n                return new PartitionedTopicMetadata(partitions);\n            }\n        });\n\n        schemas = mock(Schemas.class);\n        when(schemas.getSchemaInfo(anyString())).thenAnswer(new Answer<SchemaInfo>() {\n            @Override\n            public SchemaInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                if (topicsToSchemas.get(topic) != null) {\n                    return topicsToSchemas.get(topic);\n                } else {\n                    ClientErrorException cee = new ClientErrorException(Response.status(404).build());\n                    throw new PulsarAdminException(cee, cee.getMessage(), cee.getResponse().getStatus());\n                }\n            }\n        });\n\n        pulsarAdmin = mock(PulsarAdmin.class);\n        doReturn(tenants).when(pulsarAdmin).tenants();\n        doReturn(namespaces).when(pulsarAdmin).namespaces();\n        doReturn(topics).when(pulsarAdmin).topics();\n        doReturn(schemas).when(pulsarAdmin).schemas();\n        doReturn(pulsarAdmin).when(this.pulsarConnectorConfig).getPulsarAdmin();\n\n        this.pulsarMetadata = new PulsarMetadata(pulsarConnectorId, this.pulsarConnectorConfig, dispatchingRowDecoderFactory);\n        this.pulsarSplitManager = Mockito.spy(new PulsarSplitManager(pulsarConnectorId, this.pulsarConnectorConfig));\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            private int count = 0;\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                String schemaName = TopicName.get(\n                        TopicName.get(\n                                topic.replaceAll(\"/persistent\", \"\"))\n                                .getPartitionedTopicName()).getSchemaName();\n                long entries = topicsToNumEntries.get(schemaName);\n\n\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entries).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List <Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    TestPulsarConnector.Bar bar = new TestPulsarConnector.Bar();\n                                    bar.field1 = fooFunctions.get(\"bar.field1\").apply(count) == null ? null : (int) fooFunctions.get(\"bar.field1\").apply(count);\n                                    bar.field2 = fooFunctions.get(\"bar.field2\").apply(count) == null ? null : (String) fooFunctions.get(\"bar.field2\").apply(count);\n                                    bar.field3 = (float) fooFunctions.get(\"bar.field3\").apply(count);\n\n\n                                    Foo foo = new Foo();\n                                    foo.field1 = (int) fooFunctions.get(\"field1\").apply(count);\n                                    foo.field2 = (String) fooFunctions.get(\"field2\").apply(count);\n                                    foo.field3 = (float) fooFunctions.get(\"field3\").apply(count);\n                                    foo.field4 = (double) fooFunctions.get(\"field4\").apply(count);\n                                    foo.field5 = (boolean) fooFunctions.get(\"field5\").apply(count);\n                                    foo.field6 = (long) fooFunctions.get(\"field6\").apply(count);\n                                    foo.timestamp = (long) fooFunctions.get(\"timestamp\").apply(count);\n                                    foo.time = (int) fooFunctions.get(\"time\").apply(count);\n                                    foo.date = (int) fooFunctions.get(\"date\").apply(count);\n                                    foo.bar = bar;\n                                    foo.field7 = (Foo.TestEnum) fooFunctions.get(\"field7\").apply(count);\n\n                                    MessageMetadata messageMetadata = new MessageMetadata()\n                                            .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                            .setPublishTime(System.currentTimeMillis());\n\n                                    Schema schema = topicsToSchemas.get(schemaName).getType() == SchemaType.AVRO ? AvroSchema.of(Foo.class) : JSONSchema.of(Foo.class);\n\n                                    ByteBuf payload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(foo));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, payload);\n\n                                    completedBytes += byteBuf.readableBytes();\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                    count++;\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entries;\n                    }\n                });\n\n                when(readOnlyCursor.findNewestMatching(any(), any())).then(new Answer<Position>() {\n                    @Override\n                    public Position answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.base.Predicate<Entry> predicate\n                                = (com.google.common.base.Predicate<Entry>) args[1];\n\n                        String schemaName = TopicName.get(\n                                TopicName.get(\n                                        topic.replaceAll(\"/persistent\", \"\"))\n                                        .getPartitionedTopicName()).getSchemaName();\n                        List<Entry> entries = getTopicEntries(schemaName);\n\n                        Integer target = null;\n                        for (int i=entries.size() - 1; i >= 0; i--) {\n                            Entry entry = entries.get(i);\n                            if (predicate.apply(entry)) {\n                                target = i;\n                                break;\n                            }\n                        }\n\n                        return target == null ? null : new PositionImpl(0, target);\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl>  range\n                                = (com.google.common.collect.Range<PositionImpl> ) args[0];\n\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        PulsarConnectorCache.instance = mock(PulsarConnectorCache.class);\n        when(PulsarConnectorCache.instance.getManagedLedgerFactory()).thenReturn(managedLedgerFactory);\n\n        for (Map.Entry<TopicName, PulsarSplit> split : splits.entrySet()) {\n            PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                    topicsToColumnHandles.get(split.getKey()), split.getValue(),\n                    pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                    new PulsarConnectorMetricsTracker(new NullStatsProvider()),dispatchingRowDecoderFactory));\n            this.pulsarRecordCursors.put(split.getKey(), pulsarRecordCursor);\n        }\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"N"},{"authorDate":"2021-06-10 17:56:38","commitOrder":19,"curCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchemaImpl schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","date":"2021-06-10 17:56:38","endLine":400,"groupId":"10513","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"mockKeyValueSchemaPulsarRecordCursor","params":"(finalLongentriesNum@finalTopicNametopicName@finalKeyValueSchemaImplschema@KeyValuemessage@List<PulsarColumnHandle>ColumnHandles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/8d/521834c6a5c4d1d93ce61f06a9037af1352765.src","preCode":"    private PulsarRecordCursor mockKeyValueSchemaPulsarRecordCursor(final Long entriesNum, final TopicName topicName,\n                                                                    final KeyValueSchema schema, KeyValue message, List<PulsarColumnHandle> ColumnHandles) throws Exception {\n\n        ManagedLedgerFactory managedLedgerFactory = mock(ManagedLedgerFactory.class);\n\n        when(managedLedgerFactory.openReadOnlyCursor(any(), any(), any())).then(new Answer<ReadOnlyCursor>() {\n\n            private Map<String, Integer> positions = new HashMap<>();\n\n            @Override\n            public ReadOnlyCursor answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object[] args = invocationOnMock.getArguments();\n                String topic = (String) args[0];\n                PositionImpl positionImpl = (PositionImpl) args[1];\n                int position = positionImpl.getEntryId() == -1 ? 0 : (int) positionImpl.getEntryId();\n\n                positions.put(topic, position);\n                ReadOnlyCursorImpl readOnlyCursor = mock(ReadOnlyCursorImpl.class);\n                doReturn(entriesNum).when(readOnlyCursor).getNumberOfEntries();\n\n                doAnswer(new Answer<Void>() {\n                    @Override\n                    public Void answer(InvocationOnMock invocation) throws Throwable {\n                        Object[] args = invocation.getArguments();\n                        Integer skipEntries = (Integer) args[0];\n                        positions.put(topic, positions.get(topic) + skipEntries);\n                        return null;\n                    }\n                }).when(readOnlyCursor).skipEntries(anyInt());\n\n                when(readOnlyCursor.getReadPosition()).thenAnswer(new Answer<PositionImpl>() {\n                    @Override\n                    public PositionImpl answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return PositionImpl.get(0, positions.get(topic));\n                    }\n                });\n\n                doAnswer(new Answer() {\n                    @Override\n                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        Integer readEntries = (Integer) args[0];\n                        AsyncCallbacks.ReadEntriesCallback callback = (AsyncCallbacks.ReadEntriesCallback) args[2];\n                        Object ctx = args[3];\n\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                List<Entry> entries = new LinkedList<>();\n                                for (int i = 0; i < readEntries; i++) {\n\n                                    MessageMetadata messageMetadata =\n                                            new MessageMetadata()\n                                                    .setProducerName(\"test-producer\").setSequenceId(positions.get(topic))\n                                                    .setPublishTime(System.currentTimeMillis());\n\n                                    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n                                        messageMetadata\n                                                .setPartitionKey(new String(schema\n                                                        .getKeySchema().encode(message.getKey()), Charset.forName(\n                                                        \"UTF-8\")))\n                                                .setPartitionKeyB64Encoded(false);\n                                    }\n\n                                    ByteBuf dataPayload = io.netty.buffer.Unpooled\n                                            .copiedBuffer(schema.encode(message));\n\n                                    ByteBuf byteBuf = serializeMetadataAndPayload(\n                                            Commands.ChecksumType.Crc32c, messageMetadata, dataPayload);\n\n                                    entries.add(EntryImpl.create(0, positions.get(topic), byteBuf));\n                                    positions.put(topic, positions.get(topic) + 1);\n                                }\n\n                                callback.readEntriesComplete(entries, ctx);\n                            }\n                        }).start();\n\n                        return null;\n                    }\n                }).when(readOnlyCursor).asyncReadEntries(anyInt(), anyLong(), any(), any(), any());\n\n                when(readOnlyCursor.hasMoreEntries()).thenAnswer(new Answer<Boolean>() {\n                    @Override\n                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        return positions.get(topic) < entriesNum;\n                    }\n                });\n\n                when(readOnlyCursor.getNumberOfEntries(any())).then(new Answer<Long>() {\n                    @Override\n                    public Long answer(InvocationOnMock invocationOnMock) throws Throwable {\n                        Object[] args = invocationOnMock.getArguments();\n                        com.google.common.collect.Range<PositionImpl> range\n                                = (com.google.common.collect.Range<PositionImpl>) args[0];\n                        return (range.upperEndpoint().getEntryId() + 1) - range.lowerEndpoint().getEntryId();\n                    }\n                });\n\n                when(readOnlyCursor.getCurrentLedgerInfo()).thenReturn(MLDataFormats.ManagedLedgerInfo.LedgerInfo.newBuilder().setLedgerId(0).build());\n\n                return readOnlyCursor;\n            }\n        });\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        PulsarSplit split = new PulsarSplit(0, pulsarConnectorId.toString(),\n                topicName.getNamespace(), topicName.getLocalName(), topicName.getLocalName(),\n                entriesNum,\n                new String(schema.getSchemaInfo().getSchema()),\n                schema.getSchemaInfo().getType(),\n                0, entriesNum,\n                0, 0, TupleDomain.all(),\n                objectMapper.writeValueAsString(\n                        schema.getSchemaInfo().getProperties()), null);\n\n        PulsarRecordCursor pulsarRecordCursor = spy(new PulsarRecordCursor(\n                ColumnHandles, split,\n                pulsarConnectorConfig, managedLedgerFactory, new ManagedLedgerConfig(),\n                new PulsarConnectorMetricsTracker(new NullStatsProvider()), dispatchingRowDecoderFactory));\n\n        PulsarSqlSchemaInfoProvider pulsarSqlSchemaInfoProvider = mock(PulsarSqlSchemaInfoProvider.class);\n        when(pulsarSqlSchemaInfoProvider.getSchemaByVersion(any())).thenReturn(completedFuture(schema.getSchemaInfo()));\n        pulsarRecordCursor.setPulsarSqlSchemaInfoProvider(pulsarSqlSchemaInfoProvider);\n\n        return pulsarRecordCursor;\n    }\n","realPath":"pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarRecordCursor.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"18f2f4a9c1dab7eec5c7c9590b76aca17ee1ead8","commitMessage":"@@@Make KeyValueSchema an interface visible in the public Schema API (#10888)\n\n* Make KeyValueSchema an interface visible in the public Schema API\n- allow users of pulsar-client-api to use KeyValueSchema\n- move KeyValueSchema implementation to KeyValueSchemaImpl\n- introduce a new interface KeyValueSchema","date":"2021-06-10 17:56:38","modifiedFileCount":"21","status":"M","submitter":"Enrico Olivelli"}]
