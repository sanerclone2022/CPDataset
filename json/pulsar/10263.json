[{"authorTime":"2017-06-24 02:22:49","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"        private boolean remove(V value, int keyHash) {\n            int bucket = keyHash;\n            long stamp = writeLock();\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    V storedValue = values[bucket];\n                    if (value.equals(storedValue)) {\n                        --size;\n                        cleanBucket(bucket);\n                        return true;\n                    } else if (storedValue == EmptyValue) {\n                        \r\n                        return false;\n                    }\n\n                    ++bucket;\n                }\n\n            } finally {\n                unlockWrite(stamp);\n            }\n        }\n","date":"2017-06-24 04:41:32","endLine":323,"groupId":"10354","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"remove","params":"(Vvalue@intkeyHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/93/ca6e8ac5cb0d0463805d80878857da5aa8d107.src","preCode":"        private boolean remove(V value, int keyHash) {\n            int bucket = keyHash;\n            long stamp = writeLock();\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    V storedValue = values[bucket];\n                    if (value.equals(storedValue)) {\n                        --size;\n                        cleanBucket(bucket);\n                        return true;\n                    } else if (storedValue == EmptyValue) {\n                        \r\n                        return false;\n                    }\n\n                    ++bucket;\n                }\n\n            } finally {\n                unlockWrite(stamp);\n            }\n        }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/collections/ConcurrentOpenHashSet.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"},{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"        V get(long key, int keyHash) {\n            int bucket = keyHash;\n\n            long stamp = tryOptimisticRead();\n            boolean acquiredLock = false;\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    \r\n                    long storedKey = keys[bucket];\n                    V storedValue = values[bucket];\n\n                    if (!acquiredLock && validate(stamp)) {\n                        \r\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    } else {\n                        \r\n                        if (!acquiredLock) {\n                            stamp = readLock();\n                            acquiredLock = true;\n                            storedKey = keys[bucket];\n                            storedValue = values[bucket];\n                        }\n\n                        if (capacity != this.capacity) {\n                            \r\n                            bucket = keyHash;\n                            continue;\n                        }\n\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    }\n\n                    ++bucket;\n                }\n            } finally {\n                if (acquiredLock) {\n                    unlockRead(stamp);\n                }\n            }\n        }\n","date":"2017-06-24 04:41:32","endLine":260,"groupId":"4880","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"get","params":"(longkey@intkeyHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/fc/b0c10dce62e349d71f2519cad809b3bafe2975.src","preCode":"        V get(long key, int keyHash) {\n            int bucket = keyHash;\n\n            long stamp = tryOptimisticRead();\n            boolean acquiredLock = false;\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    \r\n                    long storedKey = keys[bucket];\n                    V storedValue = values[bucket];\n\n                    if (!acquiredLock && validate(stamp)) {\n                        \r\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    } else {\n                        \r\n                        if (!acquiredLock) {\n                            stamp = readLock();\n                            acquiredLock = true;\n                            storedKey = keys[bucket];\n                            storedValue = values[bucket];\n                        }\n\n                        if (capacity != this.capacity) {\n                            \r\n                            bucket = keyHash;\n                            continue;\n                        }\n\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    }\n\n                    ++bucket;\n                }\n            } finally {\n                if (acquiredLock) {\n                    unlockRead(stamp);\n                }\n            }\n        }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/collections/ConcurrentLongHashMap.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"}],"commitId":"70da31b082ea0ff7466cdf740fc0d6b443d21861","commitMessage":"@@@Renamed Java packages from com.yahoo.pulsar to org.apache.pulsar (#524)\n","date":"2017-06-24 04:41:32","modifiedFileCount":"5","status":"B","submitter":"Matteo Merli"},{"authorTime":"2017-06-24 02:22:49","codes":[{"authorDate":"2020-03-27 02:17:41","commitOrder":2,"curCode":"        private boolean remove(V value, int keyHash) {\n            int bucket = keyHash;\n            long stamp = writeLock();\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    V storedValue = values[bucket];\n                    if (value.equals(storedValue)) {\n                        SIZE_UPDATER.decrementAndGet(this);\n                        cleanBucket(bucket);\n                        return true;\n                    } else if (storedValue == EmptyValue) {\n                        \r\n                        return false;\n                    }\n\n                    ++bucket;\n                }\n\n            } finally {\n                unlockWrite(stamp);\n            }\n        }\n","date":"2020-03-27 02:17:41","endLine":325,"groupId":"10263","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"remove","params":"(Vvalue@intkeyHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/35/87d8bf3a26f72e5af029247a5794dbc0d5cc4f.src","preCode":"        private boolean remove(V value, int keyHash) {\n            int bucket = keyHash;\n            long stamp = writeLock();\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    V storedValue = values[bucket];\n                    if (value.equals(storedValue)) {\n                        --size;\n                        cleanBucket(bucket);\n                        return true;\n                    } else if (storedValue == EmptyValue) {\n                        \r\n                        return false;\n                    }\n\n                    ++bucket;\n                }\n\n            } finally {\n                unlockWrite(stamp);\n            }\n        }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/collections/ConcurrentOpenHashSet.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2017-06-24 02:22:49","commitOrder":2,"curCode":"        V get(long key, int keyHash) {\n            int bucket = keyHash;\n\n            long stamp = tryOptimisticRead();\n            boolean acquiredLock = false;\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    \r\n                    long storedKey = keys[bucket];\n                    V storedValue = values[bucket];\n\n                    if (!acquiredLock && validate(stamp)) {\n                        \r\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    } else {\n                        \r\n                        if (!acquiredLock) {\n                            stamp = readLock();\n                            acquiredLock = true;\n                            storedKey = keys[bucket];\n                            storedValue = values[bucket];\n                        }\n\n                        if (capacity != this.capacity) {\n                            \r\n                            bucket = keyHash;\n                            continue;\n                        }\n\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    }\n\n                    ++bucket;\n                }\n            } finally {\n                if (acquiredLock) {\n                    unlockRead(stamp);\n                }\n            }\n        }\n","date":"2017-06-24 04:41:32","endLine":260,"groupId":"10263","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"get","params":"(longkey@intkeyHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/fc/b0c10dce62e349d71f2519cad809b3bafe2975.src","preCode":"        V get(long key, int keyHash) {\n            int bucket = keyHash;\n\n            long stamp = tryOptimisticRead();\n            boolean acquiredLock = false;\n\n            try {\n                while (true) {\n                    int capacity = this.capacity;\n                    bucket = signSafeMod(bucket, capacity);\n\n                    \r\n                    long storedKey = keys[bucket];\n                    V storedValue = values[bucket];\n\n                    if (!acquiredLock && validate(stamp)) {\n                        \r\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    } else {\n                        \r\n                        if (!acquiredLock) {\n                            stamp = readLock();\n                            acquiredLock = true;\n                            storedKey = keys[bucket];\n                            storedValue = values[bucket];\n                        }\n\n                        if (capacity != this.capacity) {\n                            \r\n                            bucket = keyHash;\n                            continue;\n                        }\n\n                        if (storedKey == key) {\n                            return storedValue != DeletedValue ? storedValue : null;\n                        } else if (storedValue == EmptyValue) {\n                            \r\n                            return null;\n                        }\n                    }\n\n                    ++bucket;\n                }\n            } finally {\n                if (acquiredLock) {\n                    unlockRead(stamp);\n                }\n            }\n        }\n","realPath":"pulsar-common/src/main/java/org/apache/pulsar/common/util/collections/ConcurrentLongHashMap.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"}],"commitId":"d298c8b3bfe42643d2e6b5f0ba0b606bf4a1294d","commitMessage":"@@@Fix non-atomic volatile update (#6606)\n\n","date":"2020-03-27 02:17:41","modifiedFileCount":"14","status":"M","submitter":"Yijie Shen"}]
