[{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2018-04-05 04:50:38","commitOrder":3,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n    }\n","date":"2018-04-05 04:50:38","endLine":389,"groupId":"1972","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e7/0f20b8d18388c14e74f9a6752732a46d21ba6f.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"NB"},{"authorDate":"2018-04-19 05:31:39","commitOrder":3,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"B"}],"commitId":"488942e71f1bc4cde9f2b8c35e57d98c5b6efef4","commitMessage":"@@@Added option to create namespace on CLI passing list of clusters (#1579)\n\n* Added option to create namespace on CLI passing list of clusters\n\n* Fixed NamespaceCreateBundlesTest.testCreateNamespaceWithDefaultBundles\n\n* Fixed expected value in test\n\n* Use List instead of Set otherwise jcommander would get all param in a single string\n\n* Added mocked test\n","date":"2018-04-19 05:31:39","modifiedFileCount":"8","status":"M","submitter":"Matteo Merli"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2019-02-22 02:20:14","commitOrder":4,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","date":"2019-02-22 02:20:14","endLine":449,"groupId":"1972","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d4/c2cd3f60831f30b2e1b8b2ea6177f7ae81973f.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":4,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"411d88d232060c3d4c8093d94ce5fdcfb34476d6","commitMessage":"@@@Expose Get/SetSubscriptionDispatchRate subcommands in CmdNamespaces. (#3646)\n\n","date":"2019-02-22 02:20:14","modifiedFileCount":"2","status":"M","submitter":"Fangbin Sun"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2019-06-01 14:34:54","commitOrder":5,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-bookie-affinity-group myprop/clust/ns1 --group test\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\", \"test\");\n        \n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","date":"2019-06-01 14:34:54","endLine":466,"groupId":"1972","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/47/219290fd970d74d50ee930ca1df54c7c570edb.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":5,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"5ac44fe06852aa6dc445725efd5abffd81aa6d75","commitMessage":"@@@[pulsar-broker] tenant based bookie isolation (#3933)\n\nfix tests\n\nadd admin cli\n\nfix test","date":"2019-06-01 14:34:54","modifiedFileCount":"23","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2019-06-07 06:27:47","commitOrder":6,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n        \n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","date":"2019-06-07 06:27:47","endLine":469,"groupId":"1972","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/96/d47419b96b09abda41a4c42ca2f6baa774478e.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-bookie-affinity-group myprop/clust/ns1 --group test\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\", \"test\");\n        \n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":6,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"ed836e284bba8bc584a5f90366c81bad58f82f69","commitMessage":"@@@[pulsar-broker] support secondary bookie isolation group at namespace (#4458)\n\n* [pulsar-broker] support secondary bookie isolation group at namespace\n\n* Fix: get correct available-primary bookie count | cli optional\n\n* fix test\n","date":"2019-06-07 06:27:47","modifiedFileCount":"14","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2019-06-14 18:50:38","commitOrder":7,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n        \n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","date":"2019-06-14 18:50:38","endLine":472,"groupId":"1972","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e3/b35f37881baaf6062156d1316d5d6702bf851e.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n        \n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":7,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"6636c7927b7601dae78bc6253d423bbcb7128f7d","commitMessage":"@@@[pulsar-broker] add cli/admin api to delete bookie-affinity group (#4471)\n\n\n Motivation\n\nThis PR is on top of #4458. It adds support to delete bookie-affinity group using cli/admin api.","date":"2019-06-14 18:50:38","modifiedFileCount":"8","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2019-10-25 15:06:23","commitOrder":8,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","date":"2019-10-25 15:06:23","endLine":483,"groupId":"1972","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b6/2e4f473ffdecce9b778bb32dd7f8a1153db7fd.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":8,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"76865425b3d02e62593cdf156d07c749911f8c84","commitMessage":"@@@[pulsar-broker] Introduce publish rate-limiting on topic (#3986)\n\n* [pulsar-broker] Introduce publish rate-limiting on topic\n\ndisable auto-read on cnx for publish throttling\n\nClean up\n\n* fix documentation\n\n* clean up conflict class\n","date":"2019-10-25 15:06:23","modifiedFileCount":"17","status":"M","submitter":"Rajan Dhabalia"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-01-21 22:57:07","commitOrder":9,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","date":"2020-01-21 22:57:07","endLine":490,"groupId":"1972","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/30/c52cd7b2aed6343548a5247a4c95e08a78167f.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":9,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"f0d339e67b551a63224c537cfe9518dc5b99574b","commitMessage":"@@@Allow to enable/disable delayed delivery for messages on namespace (#5915)\n\n* Allow to enable/disable delyed delivery for messages on namespace\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* add isDelayedDeliveryEnabled function\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* add delayed_delivery_time process logic\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* add test case\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* update admin cli docs\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* update import lib\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* avoid import *\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* remove unuse code\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* add test case for delayed delivery messages\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n","date":"2020-01-21 22:57:07","modifiedFileCount":"12","status":"M","submitter":"???"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-02-03 22:10:13","commitOrder":10,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","date":"2020-02-03 22:10:13","endLine":502,"groupId":"1972","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2b/be32281ec5926754505dfe9940ceabbee79cdc.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":10,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"4ea02a354206dfd80e32c3e5fb671c7c842c35d1","commitMessage":"@@@Add maxUnackedMessagesPerSubscription and maxUnackedMessagesPerConsumer on namespaces policies (#5936)\n\n* Add maxUnackedMessagesPerSubscription and maxUnackedMessagesPerConsumer on namespaces policies\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* update admin cli docs\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* add test case\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* add test case for max unacked messages\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n\n* fix no space issue\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>\n","date":"2020-02-03 22:10:13","modifiedFileCount":"13","status":"M","submitter":"???"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-02-10 20:46:43","commitOrder":11,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-02-10 20:46:43","endLine":511,"groupId":"1972","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/45/3f543b1803dd2215706049dd61d7980d27565d.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":11,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"fd03be595505433fc12f94b63f3d713610ccb2f7","commitMessage":"@@@Namespace level offloader (#6183)\n\n\n Motivation\n\nCurrently.  the offload operation only have the cluster level configuration.  can't set the offload configuration at the namespace level.  it's inflexible. \n\n\n Modifications\n\nAdd the namespace offload policies.","date":"2020-02-10 20:46:43","modifiedFileCount":"30","status":"M","submitter":"ran"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-02-14 05:55:55","commitOrder":12,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-02-14 05:55:55","endLine":511,"groupId":"1972","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/37/1f752138a3edb16c295ccbd136d9efa60de8e7.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":12,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"1c099da5445e4b40fd1b0e6bca52b11fbdeb2e6e","commitMessage":"@@@Supports evenly distribute topics count when splits bundle (#6241)\n\n\n Motivation\n\nCurrently.  bundle split splits the bundle into two parts of the same size. When there are fewer topics.  bundle split does not work well. The topic assigned to the broker according to the topic name hash value.  hashing is not effective in a small number of topics bundle split.\n\nSo.  this PR introduces an option(-balance-topic-count) for bundle split.  When setting it to true.  the given bundle splits to 2 parts.  each part has the same amount of topics.\n\nAnd introduce a new Load Manager implementation named `org.apache.pulsar.broker.loadbalance.impl.BalanceTopicCountModularLoadManager`.  The new Load Manager implementation splits bundle with balance topics count.  others are not different from ModularLoadManagerImpl.","date":"2020-02-14 05:55:55","modifiedFileCount":"22","status":"M","submitter":"lipenghui"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-03-26 14:59:43","commitOrder":13,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-03-26 14:59:43","endLine":520,"groupId":"4820","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c6/7f60adbf1477b90c9a341fdc5cabf2fd2135f4.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":13,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"fdc3a9bc8f04c4e424fec90a636a4aa25b35dcd8","commitMessage":"@@@[Issue #5395][broker] Implement AutoTopicCreation by namespace override (#6471)\n\nFixes #5395 \n\n\n Motivation\n\nThis change introduces a new namespace policy `autoTopicCreationOverride`.  which will enable an override of broker `autoTopicCreation` settings on the namespace level. You may keep `autoTopicCreation` disabled for the broker and allow it on a specific namespace using this feature.\n\n\n Modifications\n\n- Add new namespace policy: `autoTopicCreationOverride` and associated API / CLI interface for setting and removing. Defaults to non-partitioned type.  but also allows partitioned topics.\n- Modifies BrokerService: when checking `autoTopicCreation` configuration.  the broker first retrieves namespace policies from zookeeper. If the `autoTopicCreationOverride` policy exists for that namespace then it uses those settings. If not.  falls back to broker configuration.\n- Slight refactor to move `TopicType` enum to pulsar-common and add `autoTopicCreationOverride` to pulsar-common.","date":"2020-03-26 14:59:43","modifiedFileCount":"12","status":"M","submitter":"Kai"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-03-28 18:35:53","commitOrder":14,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-03-28 18:35:53","endLine":521,"groupId":"4820","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4f/1c2f531178815568fdb76869b34f6b965d82de.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":14,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"347d3851b6e62be99b0953a21d8c1a6d502ae111","commitMessage":"@@@[Issue 6283][tiered-storage] Offload policies per namespace (#6422)\n\nFixes #6283 \n\n\n Modifications\n\nDefine and use custom deletionLag and threshold for offloadpolicies per ns.\nAll is stuff is required for https://github.com/apache/pulsar/pull/6354.\n","date":"2020-03-28 18:35:53","modifiedFileCount":"11","status":"M","submitter":"Alexandre DUVAL"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-04-14 12:12:46","commitOrder":15,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-04-14 12:12:46","endLine":529,"groupId":"13394","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/99/f8aad76bbd621b8c5cf50ac834b4636b90eb4e.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":15,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"d8be7c5b56199d89eee921adf99b983f7861cf61","commitMessage":"@@@[pulsar-broker] Implement AutoSubscriptionCreation by namespace override (#6637)\n\n\n Motivation\n\nAdd a new namespace policy `autoSubscriptionCreationOverride` which will enable an override of broker `autoSubscriptionCreation` settings on the namespace level. Users can keep `autoSubscriptionCreation` disabled for the broker and allow it on a specific namespace using this feature.\n\n\n Modifications\n\n* Add a new namespace policy: `autoSubscriptionCreationOverride` and associated API / CLI interface for setting and removing.\n* When checking `autoSubscriptionCreation` configuration.  the broker first retrieves namespace policies from zookeeper. If not set.  it falls back to broker configuration. \n* Some minor improvement on `autoTopicCreationOverride` (e.g. v1 Namespaces API & cli md)","date":"2020-04-14 12:12:46","modifiedFileCount":"11","status":"M","submitter":"Fangbin Sun"},{"authorTime":"2018-04-19 05:31:39","codes":[{"authorDate":"2020-05-01 23:35:01","commitOrder":16,"curCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-05-01 23:35:01","endLine":536,"groupId":"1972","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/7b/5d01d3090181376db3cc9cd717e41e7a5db5d8.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2018-04-19 05:31:39","commitOrder":16,"curCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2018-04-19 05:31:39","endLine":443,"groupId":"2818","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3b/ebaae8b7aed3d7ebdd670af2908a0b08626304.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"N"}],"commitId":"549994b4e0a85ac203fe6944636abe5681281296","commitMessage":"@@@Enable users to set subscription expiration time for each namespace (#6851)\n\n## Motivation\n\nWe can automatically delete inactive subscriptions by setting `subscriptionExpirationTimeMinutes` in broker.conf to a value greater than 0.\n```sh\n# How long to delete inactive subscriptions from last consuming\n# When it is 0.  inactive subscriptions are not deleted automatically\nsubscriptionExpirationTimeMinutes=0\n```\n\nHowever.  since this setting value applies to all topics.  we have to set it to 0 if there is even one topic whose subscriptions should not be deleted.\n\n\n Modifications\n\nEnable users to set a subscription expiration time for each namespace. This value overrides `subscriptionExpirationTimeMinutes` in broker.conf.\n```sh\n$ ./bin/pulsar-admin namespaces set-subscription-expiration-time --time 60 tenant1/ns1\n$ ./bin/pulsar-admin namespaces get-subscription-expiration-time tenant1/ns1\n\n60\n```","date":"2020-05-01 23:35:01","modifiedFileCount":"12","status":"M","submitter":"Masahiro Sakamoto"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-05-29 16:47:16","commitOrder":17,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-05-29 16:47:16","endLine":535,"groupId":"1972","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":17,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"5cb32e9e3dbb9721bdd1a6e7776ace80954dfa8a","commitMessage":"@@@Remove double @Test annotations (#7063)\n\nSome tests had @Test at the class level and also at the method\nlevel. This resulted in these tests running twice.\n\nCo-authored-by: Ivan Kelly <ikelly@splunk.com>","date":"2020-05-29 16:47:16","modifiedFileCount":"40","status":"M","submitter":"Matteo Merli"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-07-28 14:25:58","commitOrder":18,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-07-28 14:25:58","endLine":547,"groupId":"10255","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/18/f0d39cc2947555bf59349149e5ab0149d53d46.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n        \n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":18,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"00e30895b22129d5189db1592851bdb62e8c498b","commitMessage":"@@@Support configuring DeleteInactiveTopic setting in namespace policy (#7598)\n\n\n Motivation\n\nSupport configuring DeleteInactiveTopic setting in namespace policy\n\n\n Modifications\n\nOnly the two parameters `brokerDeleteInactiveTopicsMode` and `brokerDeleteInactiveTopicsMaxInactiveDurationSeconds` support namespace policy. The parameters are changed to Map structure.  the key is the namespace.  and the value is the parameter value.\nSuch as: namespace1=delete_when_no_subscriptions.  namespace2=delete_when_no_subscriptions.\n\nIn addition.  there is a key name called `default`. If it is set.  other namespaces that do not specify parameters will use this parameter.\nSuch as: default=delete_when_no_subscriptions\n","date":"2020-07-28 14:25:58","modifiedFileCount":"17","status":"M","submitter":"feynmanlin"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-09-22 07:12:38","commitOrder":19,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","date":"2020-09-22 07:12:38","endLine":547,"groupId":"10255","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/1f/18e836f2edc7d181fc54c27d23754b0dc903b2.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":19,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"7505dacf2f731d69d42ca02eb3ce6a2159816995","commitMessage":"@@@Added support to force deleting namespace (#7993)\n\n\n Motivation\n\nFixes #7959\n\n\n Modifications\n\nAdd a optional field to force the deletion of all stuffs related to namespace.","date":"2020-09-22 07:12:38","modifiedFileCount":"9","status":"M","submitter":"Fangbin Sun"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-10-03 05:36:24","commitOrder":20,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","date":"2020-10-03 05:36:24","endLine":550,"groupId":"10255","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/a5/d65c95d18e0b00050b32d1d2c161335cf9e21b.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":20,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"aa7383ebc3dd332412bc55f5bc320ff2b57402cc","commitMessage":"@@@[ISSUE 8159]Add a new state for namespace-level TTL (#8178)\n\nFixes #8159 \n\n\n Motivation\nWhen the namespace-level TTL is set to 0.  it means 2 states:\n1) TTL check is disabled \n2) The namespace-level setting does not exist.  return to the broker-level setting\nThese two states are in conflict. We don't know if it is disabled or using broker-level configuration.\n\n\n Modifications\nWe should set a state separately for the case where the namespace-level configuration does not exist.\nThe TTL of the namespace-level can be set to null.  which means it does not exist. It is consistent with topic-level TTL.\n\n\n Verifying this change\n\n\n","date":"2020-10-03 05:36:24","modifiedFileCount":"14","status":"M","submitter":"feynmanlin"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-10-14 09:02:52","commitOrder":21,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","date":"2020-10-14 09:02:52","endLine":553,"groupId":"10255","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/36/d42ccd9fa15235b4a04781c2188524c599a7ea.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":21,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"c144e048d033a2bb9325f8e5deb60d71b1ae48ff","commitMessage":"@@@Support limit topic publish rate at the broker level (#8235)\n\nFixes #8222 \n\n\n Motivation\nCurrently.  we can set up the publish rate limitation of the topic by user pulsar-admin. It's better to introduce a broker level setting as the default setting. The namespace level setting can rewrite the broker level setting.\n\n\n Modifications\n1)Add `maxPublishRatePerTopicInMessages` and `maxPublishRatePerTopicInBytes` in the broker.conf\n2)Add `RemovePublishRate` API for namespace\n3)The priority of the policies is modified to topic-level > namespace-level > broker-level\n\n\n Verifying this change\nTopicPoliciesTest#testPublishRateInDifferentLevelPolicy","date":"2020-10-14 09:02:52","modifiedFileCount":"11","status":"M","submitter":"feynmanlin"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-10-28 16:53:31","commitOrder":22,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10L * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","date":"2020-10-28 16:53:31","endLine":554,"groupId":"10255","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/cf/35d0b66a30d4cd186232cab1a0b72a05dc3531.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":22,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"a8eaeb5eb6ddabcbc59030ea14207b43ca76237a","commitMessage":"@@@[Offload] Make the field name in `OffloadPolicies` match with config file (#8310)\n\nFixes #8220 \n\n\n Motivation\n\nCurrently.  the fields' values couldn't be set properly by the Pulsar broker config file(`broker.conf` or `standalone.conf`). \n\n\n Modifications\n\nchanged fields in `OffloadPolicies`\n\n1. managedLedgerOffloadAutoTriggerSizeThresholdBytes\n2. managedLedgerOffloadDeletionLagMs\n","date":"2020-10-28 16:53:31","modifiedFileCount":"13","status":"M","submitter":"ran"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-11-06 08:43:32","commitOrder":23,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10L * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","date":"2020-11-06 08:43:32","endLine":557,"groupId":"10255","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d4/cff2b5e0af238fb9d557112f2c4d1a97dab27d.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10L * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":23,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"24cd557fd77a8084d6cf775afaa9d393d3359972","commitMessage":"@@@Add support for remove offload policy in the namespace level (#8446)\n\n","date":"2020-11-06 08:43:32","modifiedFileCount":"7","status":"M","submitter":"Renkai"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-11-06 13:01:28","commitOrder":24,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","date":"2020-11-06 13:01:28","endLine":557,"groupId":"10255","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4e/45b903c331069673970519be93932ae0433581.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10L * 1024 * 1024, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":24,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"2530177dac83124ea06194e0de788c53c34cf3e6","commitMessage":"@@@[Issue 7949][Tiered Storage] support aws creds per offload policies (#7950)\n\nFixes #7949 \n\n\n Motivation\n\nProvide different s3 credentials per offloadpolicies on each ns.\n\n\n Modifications\n\nAdd awsId/awsSecret in OffloadPolicies.\n\n\n Does this pull request potentially affect one of the following parts:\n\n  - The rest endpoints: yes it adds options\n  - The admin cli options: yes it adds options\n\n\n Documentation\n\n  - Does this pull request introduce a new feature? yes\n  - If yes.  how is the feature documented? docs\n","date":"2020-11-06 13:01:28","modifiedFileCount":"8","status":"M","submitter":"Alexandre DUVAL"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-11-11 21:33:29","commitOrder":25,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2020-11-11 21:33:29","endLine":565,"groupId":"10255","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/01/a912195733bc9878264e6c55a61210269becf5.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":25,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"14c145e3d371c3ceab979277f4b2717d7046b4a5","commitMessage":"@@@Support namespace-level duplication snapshot (#8506)\n\nMaster Issue: #8237\n\n\n Motivation\nCurrently we take de-duplication snapshots based on size. If the topic has relatively low traffic.  the de-duplication cursor will not move. This can cause messages that are not able to be deleted based on the retention policy. We should add a policy to take de-duplication snapshots based on time.\n\n\n Modifications\nadd api to get/set/remove namespace-level policies\n\n\n Verifying this change\nTopicDuplicationTest.java \n","date":"2020-11-11 21:33:29","modifiedFileCount":"10","status":"M","submitter":"feynmanlin"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2020-12-12 13:10:49","commitOrder":26,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2020-12-12 13:10:49","endLine":569,"groupId":"11164","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/5c/10268b59f7297b7a60a06efeaa2d4f9549bcdc.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":26,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"b63e288e09b12b293446ce46573ac6bcb8249e87","commitMessage":"@@@Support configure max subscriptions per topic on the namespace level policy (#8924)\n\nMaster Issue: #8866\n\n\n Motivation\n\nCurrently.  #8289 introduced max subscriptions per topic at the broker level but does not support overwrite on the namespace level\n\n\n Modifications\nAdd api for namespace-level policy\n\n\n Verifying this change\nAdminApiTest2.java\n\n1) Verify that the basic API is correct\n2) Verify that the restriction is in effect\n3) Verify the priority of namespace level and broker level\n","date":"2020-12-12 13:10:49","modifiedFileCount":"11","status":"M","submitter":"feynmanlin"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2021-01-08 13:01:17","commitOrder":27,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-01-08 13:01:17","endLine":570,"groupId":"11164","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d7/4184f09566be848f2e3c3d35630af390329805.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":27,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"7c09f5ce649edcca0be792198d97573197c5a272","commitMessage":"@@@Configurable data source for offloaded messages (#8717)\n\nFix issue: https://github.com/apache/pulsar/issues/8591\n\nThis PR include:\n* API change in command tools \n* Related implementation with tests\n* Related docs in cookbook\n\nBy the way  log4j dependency is removed for module `managed-ledger` because now the whole project use log4j2 as the default logger framework.","date":"2021-01-08 13:01:17","modifiedFileCount":"12","status":"M","submitter":"Renkai Ge"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2021-01-11 11:55:07","commitOrder":28,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-01-11 11:55:07","endLine":585,"groupId":"5736","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/21/0d9d73729e5d86ffd0bdd6a6f663645d33f351.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":28,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"ab8802b51975ed525bda7a80f0af81665e2e7a29","commitMessage":"@@@Fix that maxProducersPerTopic cannot be disabled at the namespace level (#9157)\n\nMaster Issue: #9146\n\n\n Motivation\n`maxProducersPerTopic` cannot be disabled at the namespace-level\n\n\n Modifications\nLet `maxProducersPerTopic` can be null and no longer uses broker-level policy as the default value\n\n\n Verifying this change\nAdminApiTest2#testMaxProducersPerTopicUnlimited\n","date":"2021-01-11 11:55:07","modifiedFileCount":"11","status":"M","submitter":"feynmanlin"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2021-01-19 21:23:37","commitOrder":29,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-01-19 21:23:37","endLine":588,"groupId":"5736","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d2/6825e3dc51ab159d7f81dbc73fd2ed01409552.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":29,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"6c8c127f18fb53057af44f35690d7657997af1af","commitMessage":"@@@Fix maxConsumersPerTopic cannot be disabled at the namespace level (#9214)\n\nMaster Issue: #9146\n\n\n Motivation\n`maxConsumersPerTopic` cannot be disabled at the namespace level\n\n\n Modifications\n1.fixbug\n2.add remove API\n\n\n Verifying this change\nunit test\ntestMaxConsumersPerTopicUnlimited","date":"2021-01-19 21:23:37","modifiedFileCount":"12","status":"M","submitter":"feynmanlin"},{"authorTime":"2020-05-29 16:47:16","codes":[{"authorDate":"2021-01-26 12:04:28","commitOrder":30,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-01-26 12:04:28","endLine":591,"groupId":"5148","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/8d/c3f9d14c3f9d93d1976b5aa2889b780cc3c86b.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2020-05-29 16:47:16","commitOrder":30,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2020-05-29 16:47:16","endLine":587,"groupId":"2818","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d5/ca27ecca1af900b7c0db5b7477567f15f642d9.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"b9fe5d18fd7a3cb9c58bcdb0a9996a562481966a","commitMessage":"@@@Support get topic applied policy for DelayedDeliveryPolicies (#9245)\n\nMaster Issue: #9216\n\n\n Modifications\nadd applied API for client\n\n\n Verifying this change\nunit test:\nadminApiDelayedDelivery.testNamespaceDelayedDeliveryPolicyApi\nadminApiDelayedDelivery.testDelayedDeliveryApplied","date":"2021-01-26 12:04:28","modifiedFileCount":"11","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-01-29 03:06:36","commitOrder":31,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-01-29 03:06:36","endLine":591,"groupId":"3941","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":31,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"M"}],"commitId":"232b32439687995dd3102d8c281cf50b7b91e0bf","commitMessage":"@@@Lazily init PulsarAdmin in PulsarAdminTool (#9312)\n\n\n Motivation\npulsar-admin (PulsarAdminTool) initialises eagerly the PulsarAdmin object and some of the the underlying REST API intefaces.\nThis initialisation process triggers lot of resource loading (like SSL/RESTAPI classes....) that slows down the JVM even for stuff that is not needed.\nAlso there are shutdown hooks that are useless by they are executed while existing from the command.\n\nRemoving initialisation of useless stuff helps in having a better bootstrap time.  especially in case that you are not performing API calls.  like when you are learning the tool and you make lots of syntax errors. \n\n\n Modifications\n- Initialise as lazily as possible PulsarAdmin \n- Make PulsarAdminTool#main \"testable\" by allowing it to not call System.exit\n- Use halt instead of exit in order to not trigger shutdown hooks\n\n\n Verifying this change\nThis change is a trivial rework / code cleanup.  but I have added tests for parts that have been touched and had not unit tests.\n","date":"2021-01-29 03:06:36","modifiedFileCount":"27","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-02-07 14:45:07","commitOrder":32,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-02-07 14:45:07","endLine":594,"groupId":"8877","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/04/21a3ae90163d4b2fbaa6e452e8edd26c5d912f.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":32,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"08c4b04875f8ac24f43e9b917b6a383c573d60ec","commitMessage":"@@@Support get topic applied policy for Retention (#9362)\n\nMaster Issue: #9216\n\n Modifications\n1. Add applied API\n2. Add remove API\n\n\n Verifying this change\n1. Test whether the priority is correct when policies of different levels exist at the same time\n2. Test applied API works","date":"2021-02-07 14:45:07","modifiedFileCount":"12","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-02-19 18:45:48","commitOrder":33,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-02-19 18:45:48","endLine":582,"groupId":"8877","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ee/098c109d89f28eea9b9cb9016f8a12fe388f5a.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":33,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"6ea6a9bbad1e29267aeaa98a5362133eba505271","commitMessage":"@@@[Broker] Support enable subscription types. (#9401)\n\n## Motivation\nSupport setting enable subscription types. in broker/namespace/topic \n\n Verifying this change\nand the test\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen.  please highlight the changes","date":"2021-02-19 18:45:48","modifiedFileCount":"17","status":"M","submitter":"congbo"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-01 13:06:12","commitOrder":34,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-01 13:06:12","endLine":586,"groupId":"9486","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/e5/19b178990288c5392a7d739086012d517f4144.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":34,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"74db656a76fc26036d72250d755ea20c89f65ccd","commitMessage":"@@@Support get topic applied policy for DeduplicationStatus (#9339)\n\nMaster Issue: #9216\n\n\n Modifications\n1) The api name of topic-level is consistent with that of namespace-level\n2) Fix the problem that the namespace-level policy cannot be removed\n3) Fix the problem that topic-level does not take effect when multiple levels of policy are set at the same time\n4) Added applied API\n\n\n Verifying this change\nVerify that the new API is correct\nVerify that the applied API is correct\nVerify that policies of different levels exist at the same time and whether the priority is correct","date":"2021-03-01 13:06:12","modifiedFileCount":"14","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-08 07:50:50","commitOrder":35,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-08 07:50:50","endLine":589,"groupId":"9486","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f2/5e9b5c3456b1a809467838e08dffb6600e542c.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":35,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"8163435254e427d56f4d831c81d297bb4732ba5d","commitMessage":"@@@Support get topic applied policy for MaxUnackedMessagesPerSubscription (#9290)\n\nMaster Issue: #9216\n\n\n Modifications\n1) Fix the unackedMessagesExceededOnSubscription at the namespace level cannot be disabled\n2) Added applied interface\n\n\n Verifying this change\ntest applied api : testMaxUnackedMessagesOnSubApplied\ntest priority : testMaxUnackedMessagesOnSubscriptionPriority\n","date":"2021-03-08 07:50:50","modifiedFileCount":"20","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-08 11:03:21","commitOrder":36,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-08 11:03:21","endLine":592,"groupId":"9486","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/97/2e6ffc19f567370d124267de6abbd2ca760ab9.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":36,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"40845854095fe516b6e78905c542a652df190486","commitMessage":"@@@Support get applied SubscriptionDispatchRate (#9827)\n\nMaster Issue: #9216\n\n\n Modifications\n1. Add applied API for topic policies\n2. Add remove API for namespace policies\n\n\n Verifying this change\ntestGetSubDispatchRateApplied\n","date":"2021-03-08 11:03:21","modifiedFileCount":"15","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-08 14:37:15","commitOrder":37,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-08 14:37:15","endLine":601,"groupId":"9486","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/1c/9a8698bab9dd72999628abfaa5886ba086fada.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":37,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"bf60b4c64d38d5137fafdfd451bf6bd13c873302","commitMessage":"@@@Support get applied ReplicatorDispatchRate (#9833)\n\nMaster Issue: #9216\n\n\n Modifications\n1. Add applied API for ReplicatorDispatchRate in topic-level\n2. Add remove for ReplicatorDispatchRate in namespace-level\n\n\n Verifying this change\nVerify the applied API and CMD\n","date":"2021-03-08 14:37:15","modifiedFileCount":"13","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-10 14:45:42","commitOrder":38,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-10 14:45:42","endLine":604,"groupId":"11996","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/1c/11db55201878d2e0cea150be87d73c81090d62.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":38,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"59e0187c547ff117e95e91fa67be2c283cfda2e4","commitMessage":"@@@Support get applied PersistencePolicies (#9831)\n\nMaster Issue: #9216\n\n\n Modifications\nAdd applied API for topic-level\nAdd remove API for namespace-level\n\n\n Verifying this change\nVerify the applied API and CMD","date":"2021-03-10 14:45:42","modifiedFileCount":"11","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-10 14:47:32","commitOrder":39,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-10 14:47:32","endLine":607,"groupId":"11996","id":73,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3e/9dbc310674c3696c493f98053dc476d0d448ed.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":39,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":74,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"76883d455b44b7b0b73684d0212002397dbb9b2c","commitMessage":"@@@Support get applied clusterSubscribeRate (#9832)\n\nMaster Issue: #9216\n\n\n Modifications\n1. Add applied API for topic-level\n2. Add remove for namespace-level\n\n\n Verifying this change\nVerify applied API and CMD","date":"2021-03-10 14:47:32","modifiedFileCount":"15","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-11 16:39:29","commitOrder":40,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-11 16:39:29","endLine":637,"groupId":"11996","id":75,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/1d/8e0de45c2ac27014d88c1a4f00f3e245a2013a.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":40,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":76,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"96c1402db3221b54ae260152d65e3474b1387f4e","commitMessage":"@@@Support get applied dispatchRate (#9824)\n\nMaster Issue: #9216\n\n\n Modifications\n1. Add applied API for topic policies\n2. Add remove API for namespace policies\n","date":"2021-03-11 16:39:29","modifiedFileCount":"15","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-22 16:53:53","commitOrder":41,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-22 16:53:53","endLine":641,"groupId":"11996","id":77,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/00/5edc14729a22a7f5810cb9852fa4aed6f5fb6e.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":41,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":78,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"ff43bb8e9c5bbe246b560750484c76a07835b9ee","commitMessage":"@@@Support set compaction threshold in broker-level (#9989)\n\n\n Motivation\nCurrently we do not support setting the broker-level compaction threshold\n\n\n Modifications\nAdded compaction threshold for broker\nAdded a delete method to the compaction threshold of namespace-level\n\n\n Verifying this change\nTest whether the remove API is working properly\nTest the priority of different levels of policies\n","date":"2021-03-22 16:53:53","modifiedFileCount":"12","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-03-31 22:03:42","commitOrder":42,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-03-31 22:03:42","endLine":647,"groupId":"11996","id":79,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/93/d547f9a5905e04f18790d28825c7144602510a.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":42,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":80,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"4709f3aeaed1bc6a68a9a683c95e0398c940cd54","commitMessage":"@@@Fix can not disable and remove max consumer per subscription (#10070)\n\n\n Motivation\n1?Now.  we cannot disable `MaxConsumersPerSubscription` in any level of Policy\n2? The Namespace level MaxConsumersPerSubscription cannot be deleted as long as it is set\n3?The default value of the namespace level is incorrect.  and the broker level data will be returned","date":"2021-03-31 22:03:42","modifiedFileCount":"11","status":"M","submitter":"feynmanlin"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-05-07 05:12:56","commitOrder":43,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10L * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-05-07 05:12:56","endLine":658,"groupId":"11996","id":81,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d3/681677793ffc94b9190389eb18b7ff95b7e234.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\", new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\", new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\", new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\"\n                , new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\", null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":43,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":82,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"0355a63731299655acb4dce4f123074b608bdd81","commitMessage":"@@@[Issue 8894][Offloader] Fix AWS credentials usages (#8950)\n\n* support both STS and default aws creds\n\n* checkstyle\n\n* use provider\n\n* pass creds to properties\n\n* add tests","date":"2021-05-07 05:12:56","modifiedFileCount":"12","status":"M","submitter":"Alexandre DUVAL"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-05-15 09:59:57","commitOrder":44,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10L * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, 10000, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-05-15 09:59:57","endLine":666,"groupId":"4089","id":83,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/57/9d22f28af6970d038de341dfe6a5bf9a9ae95d.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10L * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":44,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":84,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"96325b98b08750f89f0190457c35497cbd5ef0bd","commitMessage":"@@@[CLI] Add support for setting time based limit on backlog quota with CLI. (#10401)\n\n","date":"2021-05-15 09:59:57","modifiedFileCount":"4","status":"M","submitter":"Marvin Cai"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-06-03 05:17:04","commitOrder":45,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10L * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, 10000, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPoliciesImpl.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-06-03 05:17:04","endLine":691,"groupId":"4089","id":85,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/18/0c8fe6627c626cce12b1d20a4b6242f759143a.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10L * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, 10000, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPolicies.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadPolicies.OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":45,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-01-29 03:06:36","endLine":643,"groupId":"4092","id":86,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/3a/d5f34345caec749c42b4482abd5af7256fce39.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"N"}],"commitId":"301a76435ce918520f1b70b95b7ebed9bf1b08b5","commitMessage":"@@@Remove pulsar-client-admin-api dependency : pulsar-common (#10774)\n\n* remove gson from admin api Topics.java\n\n* Bookies.java\n\n* Brokers.java\n\n* BrokerStats.java\n\n* fix PulsarAdminException\n\n* Clusters.java\n\n* Tenants.java\n\n* minor fix on ResourceGroups\n\n* Namespaces.java & OffloadPolicies\n\n* temp remove JsonProperty in OffloadPolicies\n\n* Topics & NonPersistentTopics\n\n* ResourceQuotas with MixIn class\n\n* Functions\n\n* Sources.java\n\n* Sinks.java\n\n* Schemas.java\n\n* resolve checkstyle\n\n* minor fix\n\n* Transactions.java\n\n* fix stylecheck\n\n* set ObjectMapper module\n\n* fix ci\n\n* fix PulsarAdminException\n\n* remove gson\n\n* remove swagger\n\n* merge master\n\n* remove swagger\n\n* remove io.swagger\n\n* remove commons-lang3\n\n* use Objects.requireNonNull\n\n* remove commons-lang3\n\n* fix interface mapping\n\n* fix ci\n\n* extract OffloadPoliciesInterface\n\n* extract FunctionStats interfaces\n\n* fix unit test\n\n* fix shaded class\n\n* add object mapper mixin tests\n\n* fix ci\n\n* fix admin exception ci error\n\n* UpdateOptions\n\n* AutoFailoverPolicyData\n\n* BrokerNamespaceIsolationData\n\n* ClusterData\n\n* FailureDomain\n\n* FunctionInstanceStats\n\n* NamespaceIsolationData\n\n* OffloadPolicies\n\n* TenantInfo\n\n* FunctionStats\n\n* fix stylecheck\n\n* Fixed interface\n\n* Fixed ClusterData equals method\n\n* Fixed merge issue\n\n* Fixed another merge issue\n\n* Fixed test issue after merge\n\nCo-authored-by: Rui Fu <freelz@gmail.com>","date":"2021-06-03 05:17:04","modifiedFileCount":"266","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-06-06 12:37:53","codes":[{"authorDate":"2021-06-06 12:37:53","commitOrder":46,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                BookieAffinityGroupData.builder()\n                        .bookkeeperAffinityGroupPrimary(\"test1\")\n                        .bookkeeperAffinityGroupSecondary(\"test2\")\n                        .build());\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(10)\n                .dispatchThrottlingRateInByte(11)\n                .ratePeriodInSecond(12)\n                .build());\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10)\n                        .retentionPolicy(RetentionPolicy.producer_request_hold)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10L * 1024 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10l * 1024 * 1024 * 1024)\n                        .limitTime(10000)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                AutoTopicCreationOverride.builder()\n                        .allowAutoTopicCreation(true)\n                        .topicType(TopicType.NON_PARTITIONED.toString())\n                        .build());\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                AutoSubscriptionCreationOverride.builder().allowAutoSubscriptionCreation(true).build());\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                DelayedDeliveryPolicies.builder().tickTime(1000).active(true).build());\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPoliciesImpl.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-06-06 12:37:53","endLine":740,"groupId":"9084","id":87,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0d/19d9ae8d4e1e4305e09d6175b199e5a0c88131.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                new BookieAffinityGroupData(\"test1\", \"test2\"));\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", new DispatchRate(10, 11, 12));\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10, RetentionPolicy.producer_request_hold));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10L * 1024 * 1024 * 1024, RetentionPolicy.producer_exception));\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                new BacklogQuota(10l * 1024 * 1024 * 1024, 10000, RetentionPolicy.producer_exception));\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                new AutoTopicCreationOverride(true, TopicType.NON_PARTITIONED.toString(), null));\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                new AutoSubscriptionCreationOverride(true));\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                new DelayedDeliveryPolicies(1000, true));\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", new DispatchRate(-1, -1, 2));\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPoliciesImpl.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2021-06-06 12:37:53","commitOrder":46,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = BundlesData.builder().numBundles(5).build();\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-06-06 12:37:53","endLine":793,"groupId":"11403","id":88,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0d/19d9ae8d4e1e4305e09d6175b199e5a0c88131.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = new BundlesData(5);\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":781,"status":"M"}],"commitId":"da71ec2b2a6682ffbab60843756f638bedbd4460","commitMessage":"@@@Make client-admin-api to use interfaces with builders instead of POJOs (#10818)\n\n\n Motivation\n\nInstead of using POJOs types in the Java client-admin API.  use interfaces \n\n\n Modifications\n * Converted more POJOs into interfaces\n * Added builders to construct instances of the interfaces without directly using the implementation classes\n\nNote: for easier reviewing.  there are 2 commits in this PR: \n * https://github.com/apache/pulsar/commit/f14ce733f69633143bd3bf4b4f3ae99a2ea93551 includes the changes to production code\n * https://github.com/apache/pulsar/commit/23b6f74c608cefc5da14ce1d2b29f34efde6870f changes to the unit tests\n","date":"2021-06-06 12:37:53","modifiedFileCount":"275","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-06-06 12:37:53","codes":[{"authorDate":"2021-07-09 09:38:51","commitOrder":47,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                BookieAffinityGroupData.builder()\n                        .bookkeeperAffinityGroupPrimary(\"test1\")\n                        .bookkeeperAffinityGroupSecondary(\"test2\")\n                        .build());\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(10)\n                .dispatchThrottlingRateInByte(11)\n                .ratePeriodInSecond(12)\n                .build());\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10)\n                        .retentionPolicy(RetentionPolicy.producer_request_hold)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10L * 1024 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10l * 1024 * 1024 * 1024)\n                        .limitTime(10000)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                AutoTopicCreationOverride.builder()\n                        .allowAutoTopicCreation(true)\n                        .topicType(TopicType.NON_PARTITIONED.toString())\n                        .build());\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                AutoSubscriptionCreationOverride.builder().allowAutoSubscriptionCreation(true).build());\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                DelayedDeliveryPolicies.builder().tickTime(1000).active(true).build());\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPoliciesImpl.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-07-09 09:38:51","endLine":743,"groupId":"11312","id":89,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ac/bda97d613bfd1a0b3b43af508599e8e641fc8a.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                BookieAffinityGroupData.builder()\n                        .bookkeeperAffinityGroupPrimary(\"test1\")\n                        .bookkeeperAffinityGroupSecondary(\"test2\")\n                        .build());\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(10)\n                .dispatchThrottlingRateInByte(11)\n                .ratePeriodInSecond(12)\n                .build());\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10)\n                        .retentionPolicy(RetentionPolicy.producer_request_hold)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10L * 1024 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10l * 1024 * 1024 * 1024)\n                        .limitTime(10000)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                AutoTopicCreationOverride.builder()\n                        .allowAutoTopicCreation(true)\n                        .topicType(TopicType.NON_PARTITIONED.toString())\n                        .build());\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                AutoSubscriptionCreationOverride.builder().allowAutoSubscriptionCreation(true).build());\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                DelayedDeliveryPolicies.builder().tickTime(1000).active(true).build());\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPoliciesImpl.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2021-06-06 12:37:53","commitOrder":47,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = BundlesData.builder().numBundles(5).build();\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-06-06 12:37:53","endLine":793,"groupId":"11403","id":90,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0d/19d9ae8d4e1e4305e09d6175b199e5a0c88131.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = BundlesData.builder().numBundles(5).build();\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":781,"status":"N"}],"commitId":"406ef7307bb12a8475e9764530ecf9fe2b19918d","commitMessage":"@@@Allow null to be set as namespace level subscription TTL (#11253)\n\n\n Motivation\n\nIf the subscription expiration time is set to a value greater than 0 at the broker level.  setting 0 at the namespace level will not disable automatic subscription deletion.\n\nFor example.  suppose `subscriptionExpirationTimeMinutes=5` is written in `broker.conf`. This means that subscriptions to which no consumer is connected will be automatically deleted in 5 minutes.\n\nNow.  suppose a user runs the following command to disable automatic subscription deletion in the namespace `tenant/ns`.\n\n```sh\n$ ./bin/pulsar-admin namespaces set-subscription-expiration-time -t 0 tenant/ns\n```\n\nHowever.  subscriptions in namespace `tenant/ns` will actually be deleted in 5 minutes like any other namespace.\n\n\n Modifications\n\nChange the type of `subscription_expiration_time_minutes` in the namespace policies from `int` to `java.lang.Integer` so that it can be set to null.\n\nIf `subscription_expiration_time_minutes` is 0.  automatic subscription deletion is disabled. If it is null.  the broker-level setting is used.\n\nThis fix is similar to https://github.com/apache/pulsar/pull/8178.","date":"2021-07-09 09:38:51","modifiedFileCount":"11","status":"M","submitter":"Masahiro Sakamoto"},{"authorTime":"2021-06-06 12:37:53","codes":[{"authorDate":"2021-08-06 11:41:18","commitOrder":48,"curCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                BookieAffinityGroupData.builder()\n                        .bookkeeperAffinityGroupPrimary(\"test1\")\n                        .bookkeeperAffinityGroupSecondary(\"test2\")\n                        .build());\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(10)\n                .dispatchThrottlingRateInByte(11)\n                .ratePeriodInSecond(12)\n                .build());\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10)\n                        .retentionPolicy(RetentionPolicy.producer_request_hold)\n                        .build(),\n                        BacklogQuota.BacklogQuotaType.destination_storage);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build(),\n                        BacklogQuota.BacklogQuotaType.destination_storage);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build(),\n                        BacklogQuota.BacklogQuotaType.destination_storage);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10L * 1024 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build(),\n                        BacklogQuota.BacklogQuotaType.destination_storage);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000 -t message_age\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10l * 1024 * 1024 * 1024)\n                        .limitTime(10000)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build(),\n                        BacklogQuota.BacklogQuotaType.message_age);\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                AutoTopicCreationOverride.builder()\n                        .allowAutoTopicCreation(true)\n                        .topicType(TopicType.NON_PARTITIONED.toString())\n                        .build());\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                AutoSubscriptionCreationOverride.builder().allowAutoSubscriptionCreation(true).build());\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                DelayedDeliveryPolicies.builder().tickTime(1000).active(true).build());\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPoliciesImpl.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","date":"2021-08-06 11:41:18","endLine":746,"groupId":"10284","id":91,"instanceNumber":1,"isCurCommit":0,"methodName":"namespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2d/b9bc0ac9c9978ade4ab89b00c4bbf07a1c1126.src","preCode":"    public void namespaces() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        Lookup mockLookup = mock(Lookup.class);\n        when(admin.lookups()).thenReturn(mockLookup);\n\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"list myprop\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\");\n\n        namespaces.run(split(\"list-cluster myprop/clust\"));\n        verify(mockNamespaces).getNamespaces(\"myprop\", \"clust\");\n\n        namespaces.run(split(\"topics myprop/clust/ns1\"));\n        verify(mockNamespaces).getTopics(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"create myprop/clust/ns1\"));\n        verify(mockNamespaces).createNamespace(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteNamespace(\"myprop/clust/ns1\", false);\n\n        namespaces.run(split(\"permissions myprop/clust/ns1\"));\n        verify(mockNamespaces).getPermissions(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"grant-permission myprop/clust/ns1 --role role1 --actions produce,consume\"));\n        verify(mockNamespaces).grantPermissionOnNamespace(\"myprop/clust/ns1\", \"role1\",\n                EnumSet.of(AuthAction.produce, AuthAction.consume));\n\n        namespaces.run(split(\"revoke-permission myprop/clust/ns1 --role role1\"));\n        verify(mockNamespaces).revokePermissionsOnNamespace(\"myprop/clust/ns1\", \"role1\");\n\n        namespaces.run(split(\"set-clusters myprop/clust/ns1 -c use,usw,usc\"));\n        verify(mockNamespaces).setNamespaceReplicationClusters(\"myprop/clust/ns1\",\n                Sets.newHashSet(\"use\", \"usw\", \"usc\"));\n\n        namespaces.run(split(\"get-clusters myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceReplicationClusters(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-types-enabled myprop/clust/ns1 -t Shared,Failover\"));\n        verify(mockNamespaces).setSubscriptionTypesEnabled(\"myprop/clust/ns1\",\n                Sets.newHashSet(SubscriptionType.Shared, SubscriptionType.Failover));\n\n        namespaces.run(split(\"get-subscription-types-enabled myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionTypesEnabled(\"myprop/clust/ns1\");\n\n        namespaces\n                .run(split(\"set-bookie-affinity-group myprop/clust/ns1 --primary-group test1 --secondary-group test2\"));\n        verify(mockNamespaces).setBookieAffinityGroup(\"myprop/clust/ns1\",\n                BookieAffinityGroupData.builder()\n                        .bookkeeperAffinityGroupPrimary(\"test1\")\n                        .bookkeeperAffinityGroupSecondary(\"test2\")\n                        .build());\n\n        namespaces.run(split(\"get-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"delete-bookie-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).deleteBookieAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-replicator-dispatch-rate myprop/clust/ns1 -md 10 -bd 11 -dt 12\"));\n        verify(mockNamespaces).setReplicatorDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(10)\n                .dispatchThrottlingRateInByte(11)\n                .ratePeriodInSecond(12)\n                .build());\n\n        namespaces.run(split(\"get-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-replicator-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeReplicatorDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"unload myprop/clust/ns1\"));\n        verify(mockNamespaces).unload(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unload myprop/clust/ns1 -b 0x80000000_0xffffffff\"));\n        verify(mockNamespaces).unloadNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        namespaces.run(split(\"split-bundle myprop/clust/ns1 -b 0x00000000_0xffffffff\"));\n        verify(mockNamespaces).splitNamespaceBundle(\"myprop/clust/ns1\", \"0x00000000_0xffffffff\", false, null);\n\n        namespaces.run(split(\"get-backlog-quotas myprop/clust/ns1\"));\n        verify(mockNamespaces).getBacklogQuotaMap(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_request_hold -l 10\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10)\n                        .retentionPolicy(RetentionPolicy.producer_request_hold)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10K\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10M\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10L * 1024 * 1024 * 1024)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-backlog-quota myprop/clust/ns1 -p producer_exception -l 10G -lt 10000\"));\n        verify(mockNamespaces).setBacklogQuota(\"myprop/clust/ns1\",\n                BacklogQuota.builder()\n                        .limitSize(10l * 1024 * 1024 * 1024)\n                        .limitTime(10000)\n                        .retentionPolicy(RetentionPolicy.producer_exception)\n                        .build());\n\n        namespaces.run(split(\"set-persistence myprop/clust/ns1 -e 2 -w 1 -a 1 -r 100.0\"));\n        verify(mockNamespaces).setPersistence(\"myprop/clust/ns1\",\n                new PersistencePolicies(2, 1, 1, 100.0d));\n\n        namespaces.run(split(\"get-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).getPersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-persistence myprop/clust/ns1\"));\n        verify(mockNamespaces).removePersistence(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-max-subscriptions-per-topic myprop/clust/ns1 -m 300\"));\n        verify(mockNamespaces).setMaxSubscriptionsPerTopic(\"myprop/clust/ns1\", 300);\n        namespaces.run(split(\"remove-max-subscriptions-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxSubscriptionsPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-message-ttl myprop/clust/ns1 -ttl 300\"));\n        verify(mockNamespaces).setNamespaceMessageTTL(\"myprop/clust/ns1\", 300);\n\n        namespaces.run(split(\"set-subscription-expiration-time myprop/clust/ns1 -t 60\"));\n        verify(mockNamespaces).setSubscriptionExpirationTime(\"myprop/clust/ns1\", 60);\n\n        namespaces.run(split(\"get-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationStatus(\"myprop/clust/ns1\");\n        namespaces.run(split(\"set-deduplication myprop/clust/ns1 --enable\"));\n        verify(mockNamespaces).setDeduplicationStatus(\"myprop/clust/ns1\", true);\n        namespaces.run(split(\"remove-deduplication myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationStatus(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-topic-creation myprop/clust/ns1 -e -t non-partitioned\"));\n        verify(mockNamespaces).setAutoTopicCreation(\"myprop/clust/ns1\",\n                AutoTopicCreationOverride.builder()\n                        .allowAutoTopicCreation(true)\n                        .topicType(TopicType.NON_PARTITIONED.toString())\n                        .build());\n\n        namespaces.run(split(\"remove-auto-topic-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoTopicCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-auto-subscription-creation myprop/clust/ns1 -e\"));\n        verify(mockNamespaces).setAutoSubscriptionCreation(\"myprop/clust/ns1\",\n                AutoSubscriptionCreationOverride.builder().allowAutoSubscriptionCreation(true).build());\n\n        namespaces.run(split(\"remove-auto-subscription-creation myprop/clust/ns1\"));\n        verify(mockNamespaces).removeAutoSubscriptionCreation(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-expiration-time myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionExpirationTime(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-anti-affinity-group myprop/clust/ns1 -g group\"));\n        verify(mockNamespaces).setNamespaceAntiAffinityGroup(\"myprop/clust/ns1\", \"group\");\n\n        namespaces.run(split(\"get-anti-affinity-group myprop/clust/ns1\"));\n        verify(mockNamespaces).getNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-anti-affinity-namespaces -p dummy -c cluster -g group\"));\n        verify(mockNamespaces).getAntiAffinityNamespaces(\"dummy\", \"cluster\", \"group\");\n\n        namespaces.run(split(\"delete-anti-affinity-group myprop/clust/ns1 \"));\n        verify(mockNamespaces).deleteNamespaceAntiAffinityGroup(\"myprop/clust/ns1\");\n\n\n        namespaces.run(split(\"set-retention myprop/clust/ns1 -t 1h -s 1M\"));\n        verify(mockNamespaces).setRetention(\"myprop/clust/ns1\",\n                new RetentionPolicies(60, 1));\n\n        namespaces.run(split(\"get-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).getRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-retention myprop/clust/ns1\"));\n        verify(mockNamespaces).removeRetention(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-delayed-delivery myprop/clust/ns1 -e -t 1s\"));\n        verify(mockNamespaces).setDelayedDeliveryMessages(\"myprop/clust/ns1\",\n                DelayedDeliveryPolicies.builder().tickTime(1000).active(true).build());\n\n        namespaces.run(split(\"get-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).getDelayedDelivery(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-delayed-delivery myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDelayedDeliveryMessages(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-inactive-topic-policies myprop/clust/ns1 -e -t 1s -m delete_when_no_subscriptions\"));\n        verify(mockNamespaces).setInactiveTopicPolicies(\"myprop/clust/ns1\",\n                new InactiveTopicPolicies(InactiveTopicDeleteMode.delete_when_no_subscriptions, 1,\n                        true));\n\n        namespaces.run(split(\"get-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-inactive-topic-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeInactiveTopicPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"clear-backlog myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklog(\"myprop/clust/ns1\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklog(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBacklogForSubscription(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"clear-backlog -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1 -force\"));\n        verify(mockNamespaces).clearNamespaceBundleBacklogForSubscription(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\",\n                \"my-sub\");\n\n        namespaces.run(split(\"unsubscribe -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespace(\"myprop/clust/ns1\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"unsubscribe -b 0x80000000_0xffffffff -s my-sub myprop/clust/ns1\"));\n        verify(mockNamespaces).unsubscribeNamespaceBundle(\"myprop/clust/ns1\", \"0x80000000_0xffffffff\", \"my-sub\");\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"get-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-producers-per-topic myprop/clust/ns1 -p 1\"));\n        verify(mockNamespaces).setMaxProducersPerTopic(\"myprop/clust/ns1\", 1);\n\n        namespaces.run(split(\"remove-max-producers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxProducersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-topic myprop/clust/ns1 -c 2\"));\n        verify(mockNamespaces).setMaxConsumersPerTopic(\"myprop/clust/ns1\", 2);\n\n        namespaces.run(split(\"remove-max-consumers-per-topic myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerTopic(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-max-consumers-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxConsumersPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-consumers-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxConsumersPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"get-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-subscription myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\", 3);\n\n        namespaces.run(split(\"remove-max-unacked-messages-per-subscription myprop/clust/ns1\"));\n        verify(mockNamespaces).removeMaxUnackedMessagesPerSubscription(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-max-unacked-messages-per-consumer myprop/clust/ns1\"));\n        verify(mockNamespaces).getMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-max-unacked-messages-per-consumer myprop/clust/ns1 -c 3\"));\n        verify(mockNamespaces).setMaxUnackedMessagesPerConsumer(\"myprop/clust/ns1\", 3);\n\n        mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"set-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-publish-rate myprop/clust/ns1 -m 10 -b 20\"));\n        verify(mockNamespaces).setPublishRate(\"myprop/clust/ns1\", new PublishRate(10, 20));\n\n        namespaces.run(split(\"get-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getPublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-publish-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removePublishRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscribe-rate myprop/clust/ns1 -sr 2 -st 60\"));\n        verify(mockNamespaces).setSubscribeRate(\"myprop/clust/ns1\", new SubscribeRate(2, 60));\n\n        namespaces.run(split(\"get-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscribe-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscribeRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-subscription-dispatch-rate myprop/clust/ns1 -md -1 -bd -1 -dt 2\"));\n        verify(mockNamespaces).setSubscriptionDispatchRate(\"myprop/clust/ns1\", DispatchRate.builder()\n                .dispatchThrottlingRateInMsg(-1)\n                .dispatchThrottlingRateInByte(-1)\n                .ratePeriodInSecond(2)\n                .build());\n\n        namespaces.run(split(\"get-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).getSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-subscription-dispatch-rate myprop/clust/ns1\"));\n        verify(mockNamespaces).removeSubscriptionDispatchRate(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-compaction-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).removeCompactionThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-compaction-threshold myprop/clust/ns1 -t 1G\"));\n        verify(mockNamespaces).setCompactionThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-threshold myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadThreshold(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-threshold myprop/clust/ns1 -s 1G\"));\n        verify(mockNamespaces).setOffloadThreshold(\"myprop/clust/ns1\", 1024 * 1024 * 1024);\n\n        namespaces.run(split(\"get-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadDeleteLagMs(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-offload-deletion-lag myprop/clust/ns1 -l 1d\"));\n        verify(mockNamespaces).setOffloadDeleteLag(\"myprop/clust/ns1\", 24 * 60 * 60, TimeUnit.SECONDS);\n\n        namespaces.run(split(\"clear-offload-deletion-lag myprop/clust/ns1\"));\n        verify(mockNamespaces).clearOffloadDeleteLag(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\n                \"set-offload-policies myprop/clust/ns1 -r test-region -d aws-s3 -b test-bucket -e http://test.endpoint -mbs 32M -rbs 5M -oat 10M -oae 10s -orp tiered-storage-first\"));\n        verify(mockNamespaces).setOffloadPolicies(\"myprop/clust/ns1\",\n                OffloadPoliciesImpl.create(\"aws-s3\", \"test-region\", \"test-bucket\",\n                        \"http://test.endpoint\",null, null, null, null, 32 * 1024 * 1024, 5 * 1024 * 1024,\n                        10 * 1024 * 1024L, 10000L, OffloadedReadPriority.TIERED_STORAGE_FIRST));\n\n        namespaces.run(split(\"remove-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).removeOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"get-offload-policies myprop/clust/ns1\"));\n        verify(mockNamespaces).getOffloadPolicies(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"remove-message-ttl myprop/clust/ns1\"));\n        verify(mockNamespaces).removeNamespaceMessageTTL(\"myprop/clust/ns1\");\n\n        namespaces.run(split(\"set-deduplication-snapshot-interval myprop/clust/ns1 -i 1000\"));\n        verify(mockNamespaces).setDeduplicationSnapshotInterval(\"myprop/clust/ns1\", 1000);\n        namespaces.run(split(\"get-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).getDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n        namespaces.run(split(\"remove-deduplication-snapshot-interval myprop/clust/ns1\"));\n        verify(mockNamespaces).removeDeduplicationSnapshotInterval(\"myprop/clust/ns1\");\n\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2021-06-06 12:37:53","commitOrder":48,"curCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = BundlesData.builder().numBundles(5).build();\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","date":"2021-06-06 12:37:53","endLine":793,"groupId":"10284","id":92,"instanceNumber":2,"isCurCommit":0,"methodName":"namespacesCreateWithBundlesAndClusters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0d/19d9ae8d4e1e4305e09d6175b199e5a0c88131.src","preCode":"    public void namespacesCreateWithBundlesAndClusters() throws Exception {\n        PulsarAdmin admin = Mockito.mock(PulsarAdmin.class);\n        Namespaces mockNamespaces = mock(Namespaces.class);\n        when(admin.namespaces()).thenReturn(mockNamespaces);\n        CmdNamespaces namespaces = new CmdNamespaces(() -> admin);\n\n        namespaces.run(split(\"create my-prop/my-namespace --bundles 5 --clusters a,b,c\"));\n\n        Policies policies = new Policies();\n        policies.bundles = BundlesData.builder().numBundles(5).build();\n        policies.replication_clusters = Sets.newHashSet(\"a\", \"b\", \"c\");\n        verify(mockNamespaces).createNamespace(\"my-prop/my-namespace\", policies);\n    }\n","realPath":"pulsar-client-tools-test/src/test/java/org/apache/pulsar/admin/cli/PulsarAdminToolTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":781,"status":"N"}],"commitId":"e82df7cb34dee301407d03d14f08368e63b792b5","commitMessage":"@@@Fix time based backlog quota. (#11509)\n\nFixes #11404\n\n\n Motivation\nTime based backlog quota type message_age is set separately but when check backlog we are only checking against destination_storage type.\nSo fix to loop through all BacklogQuotaType when checking if backlog exceeded.\n\n\n Modification\n* Added unit test.\n* Added default implementation to make Admin Topic/Namespace backlog quota related API backward compatible.\n","date":"2021-08-06 11:41:18","modifiedFileCount":"20","status":"M","submitter":"Marvin Cai"}]
