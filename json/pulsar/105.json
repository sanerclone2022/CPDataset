[{"authorTime":"2020-12-24 20:52:40","codes":[{"authorDate":"2020-12-24 20:52:40","commitOrder":2,"curCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2020-12-24 20:52:40","endLine":183,"groupId":"10139","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2b/d4df09d0516186c7fc0a08e86d1d24bc26dd5a.src","preCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"MB"},{"authorDate":"2020-12-24 20:52:40","commitOrder":2,"curCode":"    public void testParseBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        PulsarApi.BrokerEntryMetadata brokerMetadata =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2020-12-24 20:52:40","endLine":203,"groupId":"10139","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2b/d4df09d0516186c7fc0a08e86d1d24bc26dd5a.src","preCode":"    public void testParseBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        PulsarApi.BrokerEntryMetadata brokerMetadata =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"MB"}],"commitId":"d85a5e23c408eb3243c434909588324455aa94a5","commitMessage":"@@@[Feature] Introduce continuous offset for pulsar (#9039)\n\nFixes #9038 \n\n Motivation\n\nAs described in [PIP-70](https://github.com/apache/pulsar/wiki/PIP-70%3A-Introduce-lightweight-broker-entry-metadata).\nOne of the use case for Broker entry metadata is  providing continuous message sequence-Id for messages in one topic-partition which is useful for Protocol Hanlder like KOP.\n\nThis PR enable Pulsar to support continuous offset for message based on Broker entry metadata.\n\n\n Modifications\n\nIntroduce a new field for broker entry metadta named `offset`;\nIntroduce a new interceptor type `ManagedLedgerInterceptor` which intercept entry in `ManagedLedger`?\nEach partition will be assigned a `ManagedLedgerInterceptor` when `ManagedLedger` created;\nEach Entry will be intercept for adding a  monotone increasing offset in Broker entry metadata and the offet is added by batchSize of entry;\nSupport find position by a given offset.\n","date":"2020-12-24 20:52:40","modifiedFileCount":"16","status":"M","submitter":"Aloys"},{"authorTime":"2021-01-06 08:42:31","codes":[{"authorDate":"2020-12-24 20:52:40","commitOrder":3,"curCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2020-12-24 20:52:40","endLine":183,"groupId":"105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2b/d4df09d0516186c7fc0a08e86d1d24bc26dd5a.src","preCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"N"},{"authorDate":"2021-01-06 08:42:31","commitOrder":3,"curCode":"    public void testParseBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        BrokerEntryMetadata brokerMetadata =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2021-01-06 08:42:31","endLine":188,"groupId":"105","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testParseBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f3/393e621917d3ad1b505502661510424ae9a5cc.src","preCode":"    public void testParseBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        PulsarApi.BrokerEntryMetadata brokerMetadata =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"c12765a0530bcefca8e840d2f8f43383d7478778","commitMessage":"@@@PIP-75: Perform serialization/deserialization with LightProto (#9046)\n\n","date":"2021-01-06 08:42:31","modifiedFileCount":"185","status":"M","submitter":"Matteo Merli"}]
