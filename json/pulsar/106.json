[{"authorTime":"2020-12-28 08:31:54","codes":[{"authorDate":"2020-12-24 20:52:40","commitOrder":3,"curCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2020-12-24 20:52:40","endLine":183,"groupId":"10139","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2b/d4df09d0516186c7fc0a08e86d1d24bc26dd5a.src","preCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"NB"},{"authorDate":"2020-12-28 08:31:54","commitOrder":3,"curCode":"    public void testPeekBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        int bytesBeforePeek = dataWithBrokerEntryMetadata.readableBytes();\n        PulsarApi.BrokerEntryMetadata brokerMetadata =\n                Commands.peekBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n\n        int bytesAfterPeek = dataWithBrokerEntryMetadata.readableBytes();\n        assertEquals(bytesBeforePeek, bytesAfterPeek);\n\n        \r\n\n        PulsarApi.BrokerEntryMetadata brokerMetadata1 =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertTrue(brokerMetadata1.getBrokerTimestamp() <= System.currentTimeMillis());\n\n        assertEquals(brokerMetadata1.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2020-12-28 08:31:54","endLine":235,"groupId":"10140","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeekBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c7/fcc716f5f153142e546f2362eadecb92e92438.src","preCode":"    public void testPeekBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        int bytesBeforePeek = dataWithBrokerEntryMetadata.readableBytes();\n        PulsarApi.BrokerEntryMetadata brokerMetadata =\n                Commands.peekBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n\n        int bytesAfterPeek = dataWithBrokerEntryMetadata.readableBytes();\n        assertEquals(bytesBeforePeek, bytesAfterPeek);\n\n        \r\n\n        PulsarApi.BrokerEntryMetadata brokerMetadata1 =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertTrue(brokerMetadata1.getBrokerTimestamp() <= System.currentTimeMillis());\n\n        assertEquals(brokerMetadata1.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"50dcce8e8bf359ef016a29c69143c29b5768771e","commitMessage":"@@@support peek broker entry metadata (#9067)\n\n\n Motivation\nThis pull requeset adds `Commands.peekBrokerEntryMetadataIfExist` method to support peek broker entry metadata.\n\nThis will be used in protocol handler KOP.  \nCurrently.  when handles `FetchRequest`.  KOP will\n1. firset read `Entry` out of ledger\n2. get offset from `Enty` for caculating next offset to read from and building `MemoryRecordsBuilder`\n3. traverse every `Entry` and add each message into `MemoryRecordsBuilder`\nwe need the `Entry` twice.  first for peeking the offset and second for buiding `MemoryRecordsBuilder`.\n\nSo.  it's better that pulsar `Commands` can support only peek the broker entry metadata without changing the original entry content.\n\n","date":"2020-12-28 08:31:54","modifiedFileCount":"2","status":"M","submitter":"Aloys"},{"authorTime":"2021-01-06 08:42:31","codes":[{"authorDate":"2020-12-24 20:52:40","commitOrder":4,"curCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2020-12-24 20:52:40","endLine":183,"groupId":"106","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/2b/d4df09d0516186c7fc0a08e86d1d24bc26dd5a.src","preCode":"    public void testSkipBrokerEntryMetadata() throws Exception {\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), 11);\n\n        Commands.skipBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"N"},{"authorDate":"2021-01-06 08:42:31","commitOrder":4,"curCode":"    public void testPeekBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        int bytesBeforePeek = dataWithBrokerEntryMetadata.readableBytes();\n        BrokerEntryMetadata brokerMetadata =\n                Commands.peekBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n\n        int bytesAfterPeek = dataWithBrokerEntryMetadata.readableBytes();\n        assertEquals(bytesBeforePeek, bytesAfterPeek);\n\n        \r\n\n        BrokerEntryMetadata brokerMetadata1 =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertTrue(brokerMetadata1.getBrokerTimestamp() <= System.currentTimeMillis());\n\n        assertEquals(brokerMetadata1.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","date":"2021-01-06 08:42:31","endLine":220,"groupId":"106","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPeekBrokerEntryMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f3/393e621917d3ad1b505502661510424ae9a5cc.src","preCode":"    public void testPeekBrokerEntryMetadata() throws Exception {\n        int MOCK_BATCH_SIZE = 10;\n        String data = \"test-message\";\n        ByteBuf byteBuf = PulsarByteBufAllocator.DEFAULT.buffer(data.length(), data.length());\n        byteBuf.writeBytes(data.getBytes(StandardCharsets.UTF_8));\n        ByteBuf dataWithBrokerEntryMetadata =\n                Commands.addBrokerEntryMetadata(byteBuf, getBrokerEntryMetadataInterceptors(), MOCK_BATCH_SIZE);\n        int bytesBeforePeek = dataWithBrokerEntryMetadata.readableBytes();\n        PulsarApi.BrokerEntryMetadata brokerMetadata =\n                Commands.peekBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n\n        assertTrue(brokerMetadata.getBrokerTimestamp() <= System.currentTimeMillis());\n        assertEquals(brokerMetadata.getIndex(), MOCK_BATCH_SIZE - 1);\n\n        int bytesAfterPeek = dataWithBrokerEntryMetadata.readableBytes();\n        assertEquals(bytesBeforePeek, bytesAfterPeek);\n\n        \r\n\n        PulsarApi.BrokerEntryMetadata brokerMetadata1 =\n                Commands.parseBrokerEntryMetadataIfExist(dataWithBrokerEntryMetadata);\n        assertTrue(brokerMetadata1.getBrokerTimestamp() <= System.currentTimeMillis());\n\n        assertEquals(brokerMetadata1.getIndex(), MOCK_BATCH_SIZE - 1);\n        assertEquals(data.length(), dataWithBrokerEntryMetadata.readableBytes());\n\n        byte [] content = new byte[dataWithBrokerEntryMetadata.readableBytes()];\n        dataWithBrokerEntryMetadata.readBytes(content);\n        assertEquals(new String(content, StandardCharsets.UTF_8), data);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/protocol/CommandUtilsTests.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"c12765a0530bcefca8e840d2f8f43383d7478778","commitMessage":"@@@PIP-75: Perform serialization/deserialization with LightProto (#9046)\n\n","date":"2021-01-06 08:42:31","modifiedFileCount":"185","status":"M","submitter":"Matteo Merli"}]
