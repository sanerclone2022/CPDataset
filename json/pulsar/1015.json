[{"authorTime":"2017-06-24 02:22:49","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    public void testAutoFailoverPolicyData() {\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>();\n        policy1.parameters.put(\"min_limit\", \"3\");\n        policy1.parameters.put(\"usage_threshold\", \"10\");\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertTrue(policy0.equals(policy1));\n        policy1.parameters.put(\"min_limit\", \"5\");\n        assertFalse(policy0.equals(policy1));\n        assertFalse(policy1.equals(new OldPolicies()));\n    }\n","date":"2017-06-24 04:41:32","endLine":55,"groupId":"10693","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAutoFailoverPolicyData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/1b/dd24968b09430d9ebf94a08e6bff89d7016514.src","preCode":"    public void testAutoFailoverPolicyData() {\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>();\n        policy1.parameters.put(\"min_limit\", \"3\");\n        policy1.parameters.put(\"usage_threshold\", \"10\");\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertTrue(policy0.equals(policy1));\n        policy1.parameters.put(\"min_limit\", \"5\");\n        assertFalse(policy0.equals(policy1));\n        assertFalse(policy1.equals(new OldPolicies()));\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/AutoFailoverPolicyDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"},{"authorDate":"2017-06-24 02:22:49","commitOrder":1,"curCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationData n0 = new NamespaceIsolationData();\n        NamespaceIsolationData n1 = new NamespaceIsolationData();\n        assertFalse(n0.equals(new OldPolicies()));\n        n0.namespaces = new ArrayList<>();\n        n0.primary = new ArrayList<>();\n        n0.secondary = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            n0.namespaces.add(String.format(\"ns%d\", i));\n            n0.primary.add(String.format(\"p%d\", i));\n            n0.secondary.add(String.format(\"s%d\", i));\n        }\n\n        assertFalse(n0.equals(new NamespaceIsolationData()));\n\n        n1.namespaces = n0.namespaces;\n        n1.primary = n0.primary;\n        n1.secondary = n0.secondary;\n        assertTrue(n0.equals(n1));\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>(policy0.parameters);\n\n        n0.auto_failover_policy = policy0;\n        n1.auto_failover_policy = policy1;\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","date":"2017-06-24 04:41:32","endLine":84,"groupId":"7836","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNamespaceIsolationData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f9/da92d391de47ebafb1145eb09888d1b0430c6f.src","preCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationData n0 = new NamespaceIsolationData();\n        NamespaceIsolationData n1 = new NamespaceIsolationData();\n        assertFalse(n0.equals(new OldPolicies()));\n        n0.namespaces = new ArrayList<>();\n        n0.primary = new ArrayList<>();\n        n0.secondary = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            n0.namespaces.add(String.format(\"ns%d\", i));\n            n0.primary.add(String.format(\"p%d\", i));\n            n0.secondary.add(String.format(\"s%d\", i));\n        }\n\n        assertFalse(n0.equals(new NamespaceIsolationData()));\n\n        n1.namespaces = n0.namespaces;\n        n1.primary = n0.primary;\n        n1.secondary = n0.secondary;\n        assertTrue(n0.equals(n1));\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>(policy0.parameters);\n\n        n0.auto_failover_policy = policy0;\n        n1.auto_failover_policy = policy1;\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/NamespaceIsolationDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"70da31b082ea0ff7466cdf740fc0d6b443d21861","commitMessage":"@@@Renamed Java packages from com.yahoo.pulsar to org.apache.pulsar (#524)\n","date":"2017-06-24 04:41:32","modifiedFileCount":"5","status":"B","submitter":"Matteo Merli"},{"authorTime":"2019-07-26 00:14:02","codes":[{"authorDate":"2019-07-26 00:14:02","commitOrder":2,"curCode":"    public void testAutoFailoverPolicyData() {\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>();\n        policy1.parameters.put(\"min_limit\", \"3\");\n        policy1.parameters.put(\"usage_threshold\", \"10\");\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertEquals(policy1, policy0);\n        policy1.parameters.put(\"min_limit\", \"5\");\n        assertNotEquals(policy1, policy0);\n        assertNotEquals(new OldPolicies(), policy1);\n    }\n","date":"2019-07-26 00:14:02","endLine":53,"groupId":"10693","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAutoFailoverPolicyData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/91/d54e315e5dad18f575ab55779919f6aaec1b31.src","preCode":"    public void testAutoFailoverPolicyData() {\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>();\n        policy1.parameters.put(\"min_limit\", \"3\");\n        policy1.parameters.put(\"usage_threshold\", \"10\");\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertTrue(policy0.equals(policy1));\n        policy1.parameters.put(\"min_limit\", \"5\");\n        assertFalse(policy0.equals(policy1));\n        assertFalse(policy1.equals(new OldPolicies()));\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/AutoFailoverPolicyDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2019-07-26 00:14:02","commitOrder":2,"curCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationData n0 = new NamespaceIsolationData();\n        NamespaceIsolationData n1 = new NamespaceIsolationData();\n        assertNotEquals(new OldPolicies(), n0);\n        n0.namespaces = new ArrayList<>();\n        n0.primary = new ArrayList<>();\n        n0.secondary = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            n0.namespaces.add(String.format(\"ns%d\", i));\n            n0.primary.add(String.format(\"p%d\", i));\n            n0.secondary.add(String.format(\"s%d\", i));\n        }\n\n        assertNotEquals(new NamespaceIsolationData(), n0);\n\n        n1.namespaces = n0.namespaces;\n        n1.primary = n0.primary;\n        n1.secondary = n0.secondary;\n        assertEquals(n1, n0);\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>(policy0.parameters);\n\n        n0.auto_failover_policy = policy0;\n        n1.auto_failover_policy = policy1;\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","date":"2019-07-26 00:14:02","endLine":81,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNamespaceIsolationData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/88/20d6dec878e5157546250516073661de339a0a.src","preCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationData n0 = new NamespaceIsolationData();\n        NamespaceIsolationData n1 = new NamespaceIsolationData();\n        assertFalse(n0.equals(new OldPolicies()));\n        n0.namespaces = new ArrayList<>();\n        n0.primary = new ArrayList<>();\n        n0.secondary = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            n0.namespaces.add(String.format(\"ns%d\", i));\n            n0.primary.add(String.format(\"p%d\", i));\n            n0.secondary.add(String.format(\"s%d\", i));\n        }\n\n        assertFalse(n0.equals(new NamespaceIsolationData()));\n\n        n1.namespaces = n0.namespaces;\n        n1.primary = n0.primary;\n        n1.secondary = n0.secondary;\n        assertTrue(n0.equals(n1));\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>(policy0.parameters);\n\n        n0.auto_failover_policy = policy0;\n        n1.auto_failover_policy = policy1;\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/NamespaceIsolationDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"fb6895db195f08aa82f75dad93b1b9c0b1b15a88","commitMessage":"@@@Test cleanup and simplification (#4799)\n\n* Simplified assert statements in the tests. Switch to usage of static imports in tests. (Part 1)\n\n* Simplify assert statements in the tests and use the appropriate assert statements. Switch to usage of static imports in tests. Remove unused imports (Part 2)\n","date":"2019-07-26 00:14:02","modifiedFileCount":"134","status":"M","submitter":"vzhikserg"},{"authorTime":"2021-06-03 05:17:04","codes":[{"authorDate":"2021-06-03 05:17:04","commitOrder":3,"curCode":"    public void testAutoFailoverPolicyData() {\n        AutoFailoverPolicyDataImpl policy0 = new AutoFailoverPolicyDataImpl();\n        AutoFailoverPolicyDataImpl policy1 = new AutoFailoverPolicyDataImpl();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>();\n        policy1.parameters.put(\"min_limit\", \"3\");\n        policy1.parameters.put(\"usage_threshold\", \"10\");\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertEquals(policy1, policy0);\n        policy1.parameters.put(\"min_limit\", \"5\");\n        assertNotEquals(policy1, policy0);\n        assertNotEquals(new OldPolicies(), policy1);\n    }\n","date":"2021-06-03 05:17:04","endLine":53,"groupId":"10693","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAutoFailoverPolicyData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/78/42a38ec17dcc6853c19b794e4b53e3b51f80e6.src","preCode":"    public void testAutoFailoverPolicyData() {\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>();\n        policy1.parameters.put(\"min_limit\", \"3\");\n        policy1.parameters.put(\"usage_threshold\", \"10\");\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertEquals(policy1, policy0);\n        policy1.parameters.put(\"min_limit\", \"5\");\n        assertNotEquals(policy1, policy0);\n        assertNotEquals(new OldPolicies(), policy1);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/AutoFailoverPolicyDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-06-03 05:17:04","commitOrder":3,"curCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationDataImpl n0 = new NamespaceIsolationDataImpl();\n        NamespaceIsolationDataImpl n1 = new NamespaceIsolationDataImpl();\n        assertNotEquals(new OldPolicies(), n0);\n        n0.namespaces = new ArrayList<>();\n        n0.primary = new ArrayList<>();\n        n0.secondary = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            n0.namespaces.add(String.format(\"ns%d\", i));\n            n0.primary.add(String.format(\"p%d\", i));\n            n0.secondary.add(String.format(\"s%d\", i));\n        }\n\n        assertNotEquals(new NamespaceIsolationDataImpl(), n0);\n\n        n1.namespaces = n0.namespaces;\n        n1.primary = n0.primary;\n        n1.secondary = n0.secondary;\n        assertEquals(n1, n0);\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        AutoFailoverPolicyDataImpl policy0 = new AutoFailoverPolicyDataImpl();\n        AutoFailoverPolicyDataImpl policy1 = new AutoFailoverPolicyDataImpl();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>(policy0.parameters);\n\n        n0.auto_failover_policy = policy0;\n        n1.auto_failover_policy = policy1;\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","date":"2021-06-03 05:17:04","endLine":81,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNamespaceIsolationData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/7d/f8d2268f287a2a34fc4379bffd74a707dcb2f2.src","preCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationData n0 = new NamespaceIsolationData();\n        NamespaceIsolationData n1 = new NamespaceIsolationData();\n        assertNotEquals(new OldPolicies(), n0);\n        n0.namespaces = new ArrayList<>();\n        n0.primary = new ArrayList<>();\n        n0.secondary = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            n0.namespaces.add(String.format(\"ns%d\", i));\n            n0.primary.add(String.format(\"p%d\", i));\n            n0.secondary.add(String.format(\"s%d\", i));\n        }\n\n        assertNotEquals(new NamespaceIsolationData(), n0);\n\n        n1.namespaces = n0.namespaces;\n        n1.primary = n0.primary;\n        n1.secondary = n0.secondary;\n        assertEquals(n1, n0);\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        AutoFailoverPolicyData policy0 = new AutoFailoverPolicyData();\n        AutoFailoverPolicyData policy1 = new AutoFailoverPolicyData();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>(policy0.parameters);\n\n        n0.auto_failover_policy = policy0;\n        n1.auto_failover_policy = policy1;\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/NamespaceIsolationDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"301a76435ce918520f1b70b95b7ebed9bf1b08b5","commitMessage":"@@@Remove pulsar-client-admin-api dependency : pulsar-common (#10774)\n\n* remove gson from admin api Topics.java\n\n* Bookies.java\n\n* Brokers.java\n\n* BrokerStats.java\n\n* fix PulsarAdminException\n\n* Clusters.java\n\n* Tenants.java\n\n* minor fix on ResourceGroups\n\n* Namespaces.java & OffloadPolicies\n\n* temp remove JsonProperty in OffloadPolicies\n\n* Topics & NonPersistentTopics\n\n* ResourceQuotas with MixIn class\n\n* Functions\n\n* Sources.java\n\n* Sinks.java\n\n* Schemas.java\n\n* resolve checkstyle\n\n* minor fix\n\n* Transactions.java\n\n* fix stylecheck\n\n* set ObjectMapper module\n\n* fix ci\n\n* fix PulsarAdminException\n\n* remove gson\n\n* remove swagger\n\n* merge master\n\n* remove swagger\n\n* remove io.swagger\n\n* remove commons-lang3\n\n* use Objects.requireNonNull\n\n* remove commons-lang3\n\n* fix interface mapping\n\n* fix ci\n\n* extract OffloadPoliciesInterface\n\n* extract FunctionStats interfaces\n\n* fix unit test\n\n* fix shaded class\n\n* add object mapper mixin tests\n\n* fix ci\n\n* fix admin exception ci error\n\n* UpdateOptions\n\n* AutoFailoverPolicyData\n\n* BrokerNamespaceIsolationData\n\n* ClusterData\n\n* FailureDomain\n\n* FunctionInstanceStats\n\n* NamespaceIsolationData\n\n* OffloadPolicies\n\n* TenantInfo\n\n* FunctionStats\n\n* fix stylecheck\n\n* Fixed interface\n\n* Fixed ClusterData equals method\n\n* Fixed merge issue\n\n* Fixed another merge issue\n\n* Fixed test issue after merge\n\nCo-authored-by: Rui Fu <freelz@gmail.com>","date":"2021-06-03 05:17:04","modifiedFileCount":"266","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-06-06 12:37:53","codes":[{"authorDate":"2021-06-06 12:37:53","commitOrder":4,"curCode":"    public void testAutoFailoverPolicyData() {\n        Map<String, String> p1parameters = new HashMap<>();\n        p1parameters.put(\"min_limit\", \"3\");\n        p1parameters.put(\"usage_threshold\", \"10\");\n\n        Map<String, String> p2parameters = new HashMap<>();\n        p2parameters.put(\"min_limit\", \"3\");\n        p2parameters.put(\"usage_threshold\", \"10\");\n\n        AutoFailoverPolicyData policy0 = AutoFailoverPolicyData.builder()\n                .policyType(AutoFailoverPolicyType.min_available)\n                .parameters(p1parameters)\n                .build();\n        AutoFailoverPolicyData policy1 = AutoFailoverPolicyData.builder()\n                .policyType(AutoFailoverPolicyType.min_available)\n                .parameters(p2parameters)\n                .build();\n\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertEquals(policy1, policy0);\n        p1parameters.put(\"min_limit\", \"5\");\n        assertNotEquals(policy1, policy0);\n        assertNotEquals(new OldPolicies(), policy1);\n    }\n","date":"2021-06-06 12:37:53","endLine":61,"groupId":"1015","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testAutoFailoverPolicyData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b6/b615f6a5461f15bea0c554d4eecc08bbfee43d.src","preCode":"    public void testAutoFailoverPolicyData() {\n        AutoFailoverPolicyDataImpl policy0 = new AutoFailoverPolicyDataImpl();\n        AutoFailoverPolicyDataImpl policy1 = new AutoFailoverPolicyDataImpl();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>();\n        policy1.parameters.put(\"min_limit\", \"3\");\n        policy1.parameters.put(\"usage_threshold\", \"10\");\n        try {\n            policy0.validate();\n            policy1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n        assertEquals(policy1, policy0);\n        policy1.parameters.put(\"min_limit\", \"5\");\n        assertNotEquals(policy1, policy0);\n        assertNotEquals(new OldPolicies(), policy1);\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/AutoFailoverPolicyDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2021-06-06 12:37:53","commitOrder":4,"curCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationData n0 = NamespaceIsolationData.builder()\n                .namespaces(new ArrayList<>())\n                .primary(new ArrayList<>())\n                .secondary(new ArrayList<>())\n                .build();\n        assertNotEquals(new OldPolicies(), n0);\n\n        for (int i = 0; i < 5; i++) {\n            n0.getNamespaces().add(String.format(\"ns%d\", i));\n            n0.getPrimary().add(String.format(\"p%d\", i));\n            n0.getSecondary().add(String.format(\"s%d\", i));\n        }\n\n        assertNotEquals(NamespaceIsolationData.builder().build(), n0);\n\n        NamespaceIsolationData n1 = NamespaceIsolationData.builder()\n                .namespaces(n0.getNamespaces())\n                .primary(n0.getPrimary())\n                .secondary(n0.getSecondary())\n                .build();\n        assertEquals(n1, n0);\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        Map<String, String> p1parameters = new HashMap<>();\n        p1parameters.put(\"min_limit\", \"3\");\n        p1parameters.put(\"usage_threshold\", \"10\");\n\n        Map<String, String> p2parameters = new HashMap<>();\n        p2parameters.put(\"min_limit\", \"3\");\n        p2parameters.put(\"usage_threshold\", \"10\");\n\n        AutoFailoverPolicyData policy0 = AutoFailoverPolicyData.builder()\n                .policyType(AutoFailoverPolicyType.min_available)\n                .parameters(p1parameters)\n                .build();\n        AutoFailoverPolicyData policy1 = AutoFailoverPolicyData.builder()\n                .policyType(AutoFailoverPolicyType.min_available)\n                .parameters(p1parameters)\n                .build();\n\n        n0 = NamespaceIsolationData.builder()\n                .namespaces(new ArrayList<>())\n                .primary(new ArrayList<>())\n                .secondary(new ArrayList<>())\n                .autoFailoverPolicy(policy0)\n                .build();\n        assertNotEquals(new OldPolicies(), n0);\n\n        for (int i = 0; i < 5; i++) {\n            n0.getNamespaces().add(String.format(\"ns%d\", i));\n            n0.getPrimary().add(String.format(\"p%d\", i));\n            n0.getSecondary().add(String.format(\"s%d\", i));\n        }\n\n        assertNotEquals(NamespaceIsolationData.builder().build(), n0);\n\n        n1 = NamespaceIsolationData.builder()\n                .namespaces(n0.getNamespaces())\n                .primary(n0.getPrimary())\n                .secondary(n0.getSecondary())\n                .autoFailoverPolicy(policy1)\n                .build();\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","date":"2021-06-06 12:37:53","endLine":112,"groupId":"1015","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testNamespaceIsolationData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/bc/35c58c2a207dce2add7f3893eaf5996a3c54d1.src","preCode":"    public void testNamespaceIsolationData() {\n        NamespaceIsolationDataImpl n0 = new NamespaceIsolationDataImpl();\n        NamespaceIsolationDataImpl n1 = new NamespaceIsolationDataImpl();\n        assertNotEquals(new OldPolicies(), n0);\n        n0.namespaces = new ArrayList<>();\n        n0.primary = new ArrayList<>();\n        n0.secondary = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            n0.namespaces.add(String.format(\"ns%d\", i));\n            n0.primary.add(String.format(\"p%d\", i));\n            n0.secondary.add(String.format(\"s%d\", i));\n        }\n\n        assertNotEquals(new NamespaceIsolationDataImpl(), n0);\n\n        n1.namespaces = n0.namespaces;\n        n1.primary = n0.primary;\n        n1.secondary = n0.secondary;\n        assertEquals(n1, n0);\n\n        try {\n            n0.validate();\n            n1.validate();\n            fail(\"Should not happen\");\n        } catch (Exception e) {\n            \r\n        }\n\n        AutoFailoverPolicyDataImpl policy0 = new AutoFailoverPolicyDataImpl();\n        AutoFailoverPolicyDataImpl policy1 = new AutoFailoverPolicyDataImpl();\n        policy0.policy_type = AutoFailoverPolicyType.min_available;\n        policy0.parameters = new HashMap<>();\n        policy0.parameters.put(\"min_limit\", \"3\");\n        policy0.parameters.put(\"usage_threshold\", \"10\");\n        policy1.policy_type = AutoFailoverPolicyType.min_available;\n        policy1.parameters = new HashMap<>(policy0.parameters);\n\n        n0.auto_failover_policy = policy0;\n        n1.auto_failover_policy = policy1;\n\n        try {\n            n0.validate();\n            n1.validate();\n        } catch (Exception e) {\n            fail(\"Should not happen\");\n        }\n\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/NamespaceIsolationDataTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"da71ec2b2a6682ffbab60843756f638bedbd4460","commitMessage":"@@@Make client-admin-api to use interfaces with builders instead of POJOs (#10818)\n\n\n Motivation\n\nInstead of using POJOs types in the Java client-admin API.  use interfaces \n\n\n Modifications\n * Converted more POJOs into interfaces\n * Added builders to construct instances of the interfaces without directly using the implementation classes\n\nNote: for easier reviewing.  there are 2 commits in this PR: \n * https://github.com/apache/pulsar/commit/f14ce733f69633143bd3bf4b4f3ae99a2ea93551 includes the changes to production code\n * https://github.com/apache/pulsar/commit/23b6f74c608cefc5da14ce1d2b29f34efde6870f changes to the unit tests\n","date":"2021-06-06 12:37:53","modifiedFileCount":"275","status":"M","submitter":"Matteo Merli"}]
