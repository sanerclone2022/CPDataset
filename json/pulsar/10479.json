[{"authorTime":"2020-11-22 13:07:43","codes":[{"authorDate":"2020-12-03 11:03:23","commitOrder":2,"curCode":"    protected void startBookKeeper() throws Exception {\n        zkc = MockZooKeeper.newInstance();\n        for (int i = 0; i < numBookies; i++) {\n            ZkUtils.createFullPathOptimistic(zkc, \"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(), null,\n                    null);\n        }\n\n        zkc.create(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), null, null);\n\n        bkc = new PulsarMockBookKeeper(zkc, executor.chooseThread(this));\n    }\n","date":"2020-12-03 11:03:23","endLine":129,"groupId":"7219","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startBookKeeper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/f1/d0f08b3a36ad272d7ba62e277777f564b61cb2.src","preCode":"    protected void startBookKeeper() throws Exception {\n        zkc = MockZooKeeper.newInstance();\n        for (int i = 0; i < numBookies; i++) {\n            ZkUtils.createFullPathOptimistic(zkc, \"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(), null,\n                    null);\n        }\n\n        zkc.create(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), null, null);\n\n        bkc = new PulsarMockBookKeeper(zkc, executor.chooseThread(this));\n    }\n","realPath":"pulsar-package-management/bookkeeper-storage/src/test/java/org/apache/pulsar/packages/management/storage/bookkeeper/bookkeeper/test/MockedBookKeeperTestCase.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2020-11-22 13:07:43","commitOrder":2,"curCode":"    protected void startBookKeeper() throws Exception {\n        zkc = MockZooKeeper.newInstance();\n        for (int i = 0; i < numBookies; i++) {\n            ZkUtils.createFullPathOptimistic(zkc, \"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(), null,\n                    null);\n        }\n\n        zkc.create(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), null, null);\n\n        bkc = new PulsarMockBookKeeper(zkc, executor.chooseThread(this));\n    }\n","date":"2020-11-22 13:07:43","endLine":129,"groupId":"7219","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startBookKeeper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c6/df6d5255a49991bdb5c7c073f559a705c8a163.src","preCode":"    protected void startBookKeeper() throws Exception {\n        zkc = MockZooKeeper.newInstance();\n        for (int i = 0; i < numBookies; i++) {\n            ZkUtils.createFullPathOptimistic(zkc, \"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(), null,\n                    null);\n        }\n\n        zkc.create(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), null, null);\n\n        bkc = new PulsarMockBookKeeper(zkc, executor.chooseThread(this));\n    }\n","realPath":"pulsar-transaction/coordinator/src/test/java/org/apache/pulsar/transaction/coordinator/test/MockedBookKeeperTestCase.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"NB"}],"commitId":"4a2b006f854b36f042a845150acebcc3d7a50358","commitMessage":"@@@Package management bookkeeper storage implementation (#8744)\n\nMaster Issue: #8676\n\n\n Motivation\n\nSupport bookkeeper storage for packages management service.\n\n\n Modifications\n\n- Add bookkeeper storage provider\n- Add bookkeeper storage unit tests\n","date":"2020-12-03 11:03:23","modifiedFileCount":"5","status":"M","submitter":"Yong Zhang"},{"authorTime":"2021-05-23 05:35:11","codes":[{"authorDate":"2021-05-23 05:35:11","commitOrder":3,"curCode":"    protected void startBookKeeper() throws Exception {\n        for (int i = 0; i < numBookies; i++) {\n            metadataStore.put(\"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(),\n                    Optional.empty()).join();\n        }\n\n        metadataStore.put(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), Optional.empty()).join();\n\n        bkc = new PulsarMockBookKeeper(executor);\n    }\n","date":"2021-05-23 05:35:11","endLine":128,"groupId":"10479","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startBookKeeper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/90/a218449bb91aded2741d25cc6ced2106a95213.src","preCode":"    protected void startBookKeeper() throws Exception {\n        zkc = MockZooKeeper.newInstance();\n        for (int i = 0; i < numBookies; i++) {\n            ZkUtils.createFullPathOptimistic(zkc, \"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(), null,\n                    null);\n        }\n\n        zkc.create(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), null, null);\n\n        bkc = new PulsarMockBookKeeper(zkc, executor.chooseThread(this));\n    }\n","realPath":"pulsar-package-management/bookkeeper-storage/src/test/java/org/apache/pulsar/packages/management/storage/bookkeeper/bookkeeper/test/MockedBookKeeperTestCase.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2021-05-23 05:35:11","commitOrder":3,"curCode":"    protected void startBookKeeper() throws Exception {\n        for (int i = 0; i < numBookies; i++) {\n            metadataStore.put(\"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(), Optional.empty());\n        }\n\n        metadataStore.put(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), Optional.empty());\n\n        bkc = new PulsarMockBookKeeper(executor);\n    }\n","date":"2021-05-23 05:35:11","endLine":133,"groupId":"10479","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startBookKeeper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/9a/948571403f85102e95fa58357499a34b2988fa.src","preCode":"    protected void startBookKeeper() throws Exception {\n        zkc = MockZooKeeper.newInstance();\n        for (int i = 0; i < numBookies; i++) {\n            ZkUtils.createFullPathOptimistic(zkc, \"/ledgers/available/192.168.1.1:\" + (5000 + i), \"\".getBytes(), null,\n                    null);\n        }\n\n        zkc.create(\"/ledgers/LAYOUT\", \"1\\nflat:1\".getBytes(), null, null);\n\n        bkc = new PulsarMockBookKeeper(zkc, executor.chooseThread(this));\n    }\n","realPath":"pulsar-transaction/coordinator/src/test/java/org/apache/pulsar/transaction/coordinator/test/MockedBookKeeperTestCase.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"d94c3f03eff84b9259a1f19643531158157e04ba","commitMessage":"@@@PIP-45: Initialize ManagedLedgerFactory with MetadataStore (#10647)\n\n* PIP-45: Initialize ManagedLedgerFactory with MetadataStore\n\n* Fixed using the correct metadatastore in PulsarClusterMetadataTeardown\n\n* Fixed test\n\n* Removed multiple test invocations\n\n* Fixed package manager tests implementation","date":"2021-05-23 05:35:11","modifiedFileCount":"45","status":"M","submitter":"Matteo Merli"}]
