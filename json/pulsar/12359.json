[{"authorTime":"2020-07-31 14:06:47","codes":[{"authorDate":"2017-06-24 02:22:49","commitOrder":2,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            admin.namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, policy));\n        }\n","date":"2017-06-24 04:41:32","endLine":336,"groupId":"14518","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/df/dbb48971ebb7a33877dd76746aa85aa3071666.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            admin.namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"NB"},{"authorDate":"2020-07-31 14:06:47","commitOrder":2,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            admin.topics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, policy));\n        }\n","date":"2020-07-31 14:06:47","endLine":868,"groupId":"7265","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/4f/2e39986f2f0aaf867ea315ce95fc3cc5e13f7a.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            admin.topics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"B"}],"commitId":"26c49a85dd89d4282a625f02d16959de595d282f","commitMessage":"@@@[Issue 2689] Support set backlog quota on topic level. (#7646)\n\n\n Motivation\nSupport set backlog quota on topic level.\nBased on the system topic function.  refer to @codelipenghui  topic-level backlog quota based on zk implementation\n\n\nModifications\nSupport get-backlog-quotas on topic level.\nSupport set-backlog-quota on topic level.\nSupport remove-backlog-quota on topic level.","date":"2020-07-31 14:06:47","modifiedFileCount":"10","status":"M","submitter":"jianyun"},{"authorTime":"2021-01-29 03:06:36","codes":[{"authorDate":"2021-01-29 03:06:36","commitOrder":3,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, policy));\n        }\n","date":"2021-01-29 03:06:36","endLine":952,"groupId":"14518","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ec/636499520574781a4fcbea12fc708c94530242.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            admin.namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":937,"status":"M"},{"authorDate":"2021-01-29 03:06:36","commitOrder":3,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getAdmin().topics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, policy));\n        }\n","date":"2021-01-29 03:06:36","endLine":1061,"groupId":"7265","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0c/610c2779cd4584c2874daaace658aee5f2b9db.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            admin.topics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1046,"status":"M"}],"commitId":"232b32439687995dd3102d8c281cf50b7b91e0bf","commitMessage":"@@@Lazily init PulsarAdmin in PulsarAdminTool (#9312)\n\n\n Motivation\npulsar-admin (PulsarAdminTool) initialises eagerly the PulsarAdmin object and some of the the underlying REST API intefaces.\nThis initialisation process triggers lot of resource loading (like SSL/RESTAPI classes....) that slows down the JVM even for stuff that is not needed.\nAlso there are shutdown hooks that are useless by they are executed while existing from the command.\n\nRemoving initialisation of useless stuff helps in having a better bootstrap time.  especially in case that you are not performing API calls.  like when you are learning the tool and you make lots of syntax errors. \n\n\n Modifications\n- Initialise as lazily as possible PulsarAdmin \n- Make PulsarAdminTool#main \"testable\" by allowing it to not call System.exit\n- Use halt instead of exit in order to not trigger shutdown hooks\n\n\n Verifying this change\nThis change is a trivial rework / code cleanup.  but I have added tests for parts that have been touched and had not unit tests.\n","date":"2021-01-29 03:06:36","modifiedFileCount":"27","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2021-04-15 23:59:11","codes":[{"authorDate":"2021-01-29 03:06:36","commitOrder":4,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, policy));\n        }\n","date":"2021-01-29 03:06:36","endLine":952,"groupId":"14518","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ec/636499520574781a4fcbea12fc708c94530242.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":937,"status":"N"},{"authorDate":"2021-04-15 23:59:11","commitOrder":4,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getTopics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, policy));\n        }\n","date":"2021-04-15 23:59:11","endLine":1104,"groupId":"7265","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/d6/4d98aed4396b8d058faaf570c2fdad3237e29b.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getAdmin().topics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"M"}],"commitId":"2e305277c0ad89106beac260e9c3d5b517c10ab0","commitMessage":"@@@[ISSUE 10176] fix npe in CmdTopics (#10178)\n\n* [cmd] fix npe in CmdTopics\n\n* add unit tests\n\n* accept suggestion\n\nCo-authored-by: linjunhua <linjh1@jiguang.cn>","date":"2021-04-15 23:59:11","modifiedFileCount":"2","status":"M","submitter":"linlinnn"},{"authorTime":"2021-05-15 09:59:57","codes":[{"authorDate":"2021-05-15 09:59:57","commitOrder":5,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, limitTime, policy));\n        }\n","date":"2021-05-15 09:59:57","endLine":1076,"groupId":"14518","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/01/7768387b44633d0ed56a3c37570f288d729965.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1061,"status":"M"},{"authorDate":"2021-05-15 09:59:57","commitOrder":5,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getTopics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, limitTime, policy));\n        }\n","date":"2021-05-15 09:59:57","endLine":1123,"groupId":"7265","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/c2/431aabada19414d37e3026fb6ead35f13ccb64.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getTopics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1108,"status":"M"}],"commitId":"96325b98b08750f89f0190457c35497cbd5ef0bd","commitMessage":"@@@[CLI] Add support for setting time based limit on backlog quota with CLI. (#10401)\n\n","date":"2021-05-15 09:59:57","modifiedFileCount":"4","status":"M","submitter":"Marvin Cai"},{"authorTime":"2021-06-06 12:37:53","codes":[{"authorDate":"2021-06-06 12:37:53","commitOrder":6,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace,\n                    BacklogQuota.builder().limitSize(limit)\n                            .limitTime(limitTime)\n                            .retentionPolicy(policy)\n                            .build());\n        }\n","date":"2021-06-06 12:37:53","endLine":1106,"groupId":"14518","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ba/e1ae211f066c3045c86b1c490fcb3a927f5692.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace, new BacklogQuota(limit, limitTime, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1087,"status":"M"},{"authorDate":"2021-06-06 12:37:53","commitOrder":6,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getTopics().setBacklogQuota(persistentTopic, BacklogQuota.builder()\n                    .limitSize(limit)\n                    .limitTime(limitTime)\n                    .retentionPolicy(policy)\n                    .build());\n        }\n","date":"2021-06-06 12:37:53","endLine":1127,"groupId":"7265","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/64/fe0178a5f5b25c32794c70cb0f8a80fedd0366.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getTopics().setBacklogQuota(persistentTopic, new BacklogQuota(limit, limitTime, policy));\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1108,"status":"M"}],"commitId":"da71ec2b2a6682ffbab60843756f638bedbd4460","commitMessage":"@@@Make client-admin-api to use interfaces with builders instead of POJOs (#10818)\n\n\n Motivation\n\nInstead of using POJOs types in the Java client-admin API.  use interfaces \n\n\n Modifications\n * Converted more POJOs into interfaces\n * Added builders to construct instances of the interfaces without directly using the implementation classes\n\nNote: for easier reviewing.  there are 2 commits in this PR: \n * https://github.com/apache/pulsar/commit/f14ce733f69633143bd3bf4b4f3ae99a2ea93551 includes the changes to production code\n * https://github.com/apache/pulsar/commit/23b6f74c608cefc5da14ce1d2b29f34efde6870f changes to the unit tests\n","date":"2021-06-06 12:37:53","modifiedFileCount":"275","status":"M","submitter":"Matteo Merli"},{"authorTime":"2021-08-06 11:41:18","codes":[{"authorDate":"2021-08-06 11:41:18","commitOrder":7,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace,\n                    BacklogQuota.builder().limitSize(limit)\n                            .limitTime(limitTime)\n                            .retentionPolicy(policy)\n                            .build(),\n                            BacklogQuota.BacklogQuotaType.valueOf(backlogQuotaType));\n        }\n","date":"2021-08-06 11:41:18","endLine":1122,"groupId":"12359","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ba/c6a39d3802adfd7349d251b0d9b62320340cb1.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String namespace = validateNamespace(params);\n            getAdmin().namespaces().setBacklogQuota(namespace,\n                    BacklogQuota.builder().limitSize(limit)\n                            .limitTime(limitTime)\n                            .retentionPolicy(policy)\n                            .build());\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaces.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1102,"status":"M"},{"authorDate":"2021-08-06 11:41:18","commitOrder":7,"curCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getTopics().setBacklogQuota(persistentTopic, BacklogQuota.builder()\n                    .limitSize(limit)\n                    .limitTime(limitTime)\n                    .retentionPolicy(policy)\n                    .build(),\n                    BacklogQuota.BacklogQuotaType.valueOf(backlogQuotaType));\n        }\n","date":"2021-08-06 11:41:18","endLine":1223,"groupId":"12359","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/ab/d70ace1ddba460ca16dadb6a5ee6c1d214e9b5.src","preCode":"        void run() throws PulsarAdminException {\n            BacklogQuota.RetentionPolicy policy;\n            long limit;\n\n            try {\n                policy = BacklogQuota.RetentionPolicy.valueOf(policyStr);\n            } catch (IllegalArgumentException e) {\n                throw new ParameterException(String.format(\"Invalid retention policy type '%s'. Valid options are: %s\",\n                        policyStr, Arrays.toString(BacklogQuota.RetentionPolicy.values())));\n            }\n\n            limit = validateSizeString(limitStr);\n\n            String persistentTopic = validatePersistentTopic(params);\n            getTopics().setBacklogQuota(persistentTopic, BacklogQuota.builder()\n                    .limitSize(limit)\n                    .limitTime(limitTime)\n                    .retentionPolicy(policy)\n                    .build());\n        }\n","realPath":"pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":1203,"status":"M"}],"commitId":"e82df7cb34dee301407d03d14f08368e63b792b5","commitMessage":"@@@Fix time based backlog quota. (#11509)\n\nFixes #11404\n\n\n Motivation\nTime based backlog quota type message_age is set separately but when check backlog we are only checking against destination_storage type.\nSo fix to loop through all BacklogQuotaType when checking if backlog exceeded.\n\n\n Modification\n* Added unit test.\n* Added default implementation to make Admin Topic/Namespace backlog quota related API backward compatible.\n","date":"2021-08-06 11:41:18","modifiedFileCount":"20","status":"M","submitter":"Marvin Cai"}]
