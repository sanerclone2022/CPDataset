[{"authorTime":"2017-08-15 01:27:39","codes":[{"authorDate":"2017-08-15 01:27:39","commitOrder":1,"curCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.acquire(acquirePermist);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertTrue(rate.getAvailablePermits() == 0);\n        rate.close();\n    }\n","date":"2017-08-15 01:27:39","endLine":106,"groupId":"10141","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/dc/36d793b525031a225cffb5df46ec26c52ff8c5.src","preCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.acquire(acquirePermist);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertTrue(rate.getAvailablePermits() == 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2017-08-15 01:27:39","commitOrder":1,"curCode":"    public void testMultipleTryAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.tryAcquire(acquirePermist);\n        }\n        assertTrue(rate.getAvailablePermits() == 0);\n        rate.close();\n    }\n","date":"2017-08-15 01:27:39","endLine":141,"groupId":"3891","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleTryAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/dc/36d793b525031a225cffb5df46ec26c52ff8c5.src","preCode":"    public void testMultipleTryAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.tryAcquire(acquirePermist);\n        }\n        assertTrue(rate.getAvailablePermits() == 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"f03a8b7fdec8ad3c5c726ffde522aa8da4f7adc8","commitMessage":"@@@PIP-3 : Introduce message-dispatch rate limiting (#634)\n\n* Introduce message-dispatch rate limiting\n\nread messages based on available-message-rate-permits\n\nadd admin command\n\nadd message-rate + byte-rate options for dispatch-rate limiting\n\npolicies on global-zk + combined msg/byte rate + reset rateLimiter-timeUnit\n\n* address comment\n","date":"2017-08-15 01:27:39","modifiedFileCount":"20","status":"B","submitter":"Rajan Dhabalia"},{"authorTime":"2019-07-26 00:14:02","codes":[{"authorDate":"2019-07-26 00:14:02","commitOrder":2,"curCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.acquire(acquirePermist);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","date":"2019-07-26 00:14:02","endLine":106,"groupId":"10141","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b6/fe780688f5466e8addf2df09a9b664fb1a029f.src","preCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.acquire(acquirePermist);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertTrue(rate.getAvailablePermits() == 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2019-07-26 00:14:02","commitOrder":2,"curCode":"    public void testMultipleTryAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.tryAcquire(acquirePermist);\n        }\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","date":"2019-07-26 00:14:02","endLine":141,"groupId":"3891","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleTryAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/b6/fe780688f5466e8addf2df09a9b664fb1a029f.src","preCode":"    public void testMultipleTryAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.tryAcquire(acquirePermist);\n        }\n        assertTrue(rate.getAvailablePermits() == 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"fb6895db195f08aa82f75dad93b1b9c0b1b15a88","commitMessage":"@@@Test cleanup and simplification (#4799)\n\n* Simplified assert statements in the tests. Switch to usage of static imports in tests. (Part 1)\n\n* Simplify assert statements in the tests and use the appropriate assert statements. Switch to usage of static imports in tests. Remove unused imports (Part 2)\n","date":"2019-07-26 00:14:02","modifiedFileCount":"134","status":"M","submitter":"vzhikserg"},{"authorTime":"2020-10-15 09:03:13","codes":[{"authorDate":"2020-10-15 09:03:13","commitOrder":3,"curCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermits = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermits; i++) {\n            rate.acquire(acquirePermits);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","date":"2020-10-15 09:03:13","endLine":107,"groupId":"10141","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0f/cd5b78e07c27d287e10b64c84a6e5dbd3a5e6b.src","preCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.acquire(acquirePermist);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-10-15 09:03:13","commitOrder":3,"curCode":"    public void testMultipleTryAcquire() {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermits = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        for (int i = 0; i < permits / acquirePermits; i++) {\n            rate.tryAcquire(acquirePermits);\n        }\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","date":"2020-10-15 09:03:13","endLine":142,"groupId":"8081","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleTryAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/0f/cd5b78e07c27d287e10b64c84a6e5dbd3a5e6b.src","preCode":"    public void testMultipleTryAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermist = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        for (int i = 0; i < permits / acquirePermist; i++) {\n            rate.tryAcquire(acquirePermist);\n        }\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"7b8c6c70c4ef41feef16931fa04e704d6253c90e","commitMessage":"@@@Fix minor mistakes in rate limiter unit test (#8253)\n\n1?acquirePermist  -> acquirePermits\n2?remove some useless 'throws Exception' ","date":"2020-10-15 09:03:13","modifiedFileCount":"1","status":"M","submitter":"Hao Zhang"},{"authorTime":"2021-08-10 00:32:09","codes":[{"authorDate":"2021-08-10 00:32:09","commitOrder":4,"curCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermits = 50;\n        RateLimiter rate = RateLimiter.builder().permits(permits).rateTime(rateTimeMSec).timeUnit(TimeUnit.MILLISECONDS)\n                .build();\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermits; i++) {\n            rate.acquire(acquirePermits);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","date":"2021-08-10 00:32:09","endLine":110,"groupId":"1023","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testMultipleAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/78/8ab749390db2acda52417772afca8792c5397c.src","preCode":"    public void testMultipleAcquire() throws Exception {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermits = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < permits / acquirePermits; i++) {\n            rate.acquire(acquirePermits);\n        }\n        long end = System.currentTimeMillis();\n        assertTrue((end - start) < rateTimeMSec);\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2021-08-10 00:32:09","commitOrder":4,"curCode":"    public void testMultipleTryAcquire() {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermits = 50;\n        RateLimiter rate = RateLimiter.builder().permits(permits).rateTime(rateTimeMSec).timeUnit(TimeUnit.MILLISECONDS)\n                .build();\n        for (int i = 0; i < permits / acquirePermits; i++) {\n            rate.tryAcquire(acquirePermits);\n        }\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","date":"2021-08-10 00:32:09","endLine":148,"groupId":"1023","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultipleTryAcquire","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-pulsar-10-0.7/blobInfo/CC_OUT/blobs/78/8ab749390db2acda52417772afca8792c5397c.src","preCode":"    public void testMultipleTryAcquire() {\n        final long rateTimeMSec = 1000;\n        final int permits = 100;\n        final int acquirePermits = 50;\n        RateLimiter rate = new RateLimiter(permits, rateTimeMSec, TimeUnit.MILLISECONDS);\n        for (int i = 0; i < permits / acquirePermits; i++) {\n            rate.tryAcquire(acquirePermits);\n        }\n        assertEquals(rate.getAvailablePermits(), 0);\n        rate.close();\n    }\n","realPath":"pulsar-common/src/test/java/org/apache/pulsar/common/util/RateLimiterTest.java","repoName":"pulsar","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"fcd3336c083f359e9f5a5d624edffb21df62d9d1","commitMessage":"@@@Remove RateLimiter constructors and replace with builder usage (#11599)\n\n","date":"2021-08-10 00:32:09","modifiedFileCount":"8","status":"M","submitter":"Lari Hotari"}]
