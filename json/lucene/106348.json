[{"authorTime":"2018-07-30 16:35:10","codes":[{"authorDate":"2018-07-30 16:35:10","commitOrder":3,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      Query query = new SynonymQuery(\n          new Term[] {\n              new Term(\"foo\", Integer.toString(term1)),\n              new Term(\"foo\", Integer.toString(term2))});\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":311,"groupId":"50761","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/17/68254f68aa3fa05834b61cbb6f1e2fbc7176d0.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      Query query = new SynonymQuery(\n          new Term[] {\n              new Term(\"foo\", Integer.toString(term1)),\n              new Term(\"foo\", Integer.toString(term2))});\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"MB"},{"authorDate":"2018-07-30 16:35:10","commitOrder":3,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":257,"groupId":"56713","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f0/5935cc71467d30c8a0b5abcf9d70329368f289.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"MB"}],"commitId":"61e89e3ca05802a95bcc185092bc73f3e25e7fa3","commitMessage":"@@@LUCENE-8431: Top-docs collectors now collect lower bounds of the hit count.\n","date":"2018-07-30 22:38:05","modifiedFileCount":"36","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-30 16:35:10","codes":[{"authorDate":"2019-03-11 17:20:11","commitOrder":4,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2019-03-11 17:20:11","endLine":439,"groupId":"41028","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b8/14e4a4a9d28bcb36a2ffc5791e097fe9894dae.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      Query query = new SynonymQuery(\n          new Term[] {\n              new Term(\"foo\", Integer.toString(term1)),\n              new Term(\"foo\", Integer.toString(term2))});\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2018-07-30 16:35:10","commitOrder":4,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":257,"groupId":"56713","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f0/5935cc71467d30c8a0b5abcf9d70329368f289.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"N"}],"commitId":"d8cfeba912ea9c474f81f336d1bf403477dc553c","commitMessage":"@@@LUCENE-8652: SynonymQuery can now deboost the document frequency of each term when blending the score of the synonym\n","date":"2019-03-11 17:20:11","modifiedFileCount":"12","status":"M","submitter":"jimczi"},{"authorTime":"2018-07-30 16:35:10","codes":[{"authorDate":"2020-01-23 06:47:38","commitOrder":5,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = TEST_NIGHTLY ? atLeast(128 * 8 * 8 * 3) : atLeast(100); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2020-01-23 06:49:33","endLine":438,"groupId":"41028","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ff/2bf4dcbe6e6162ca7753e08d0fc8b0e409ba8c.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"},{"authorDate":"2018-07-30 16:35:10","commitOrder":5,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":257,"groupId":"56713","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f0/5935cc71467d30c8a0b5abcf9d70329368f289.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"N"}],"commitId":"1051db4038ac666db374a3de6a3d1152f418f818","commitMessage":"@@@LUCENE-9163: test speedup for slowest/pathological tests\n\nCalming down individual test methods with double-digit execution times\nafter running tests many times.\n\nThere are a few more issues remaining.  but this solves the majority of them.\n","date":"2020-01-23 06:49:33","modifiedFileCount":"91","status":"M","submitter":"Robert Muir"},{"authorTime":"2020-01-24 21:58:59","codes":[{"authorDate":"2020-01-23 06:47:38","commitOrder":6,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = TEST_NIGHTLY ? atLeast(128 * 8 * 8 * 3) : atLeast(100); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2020-01-23 06:49:33","endLine":438,"groupId":"106348","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ff/2bf4dcbe6e6162ca7753e08d0fc8b0e409ba8c.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = TEST_NIGHTLY ? atLeast(128 * 8 * 8 * 3) : atLeast(100); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int term1 = 0; term1 < 15; ++term1) {\n      int term2;\n      do {\n        term2 = random().nextInt(15);\n      } while (term1 == term2);\n      float boost1 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      float boost2 = random().nextBoolean() ? Math.max(random().nextFloat(), Float.MIN_NORMAL) : 1f;\n      Query query = new SynonymQuery.Builder(\"foo\")\n          .addTerm(new Term(\"foo\", Integer.toString(term1)), boost1)\n          .addTerm(new Term(\"foo\", Integer.toString(term2)), boost2)\n          .build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n\n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"N"},{"authorDate":"2020-01-24 21:58:59","commitOrder":6,"curCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = TEST_NIGHTLY ? atLeast(128 * 8 * 8 * 3) : atLeast(500); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","date":"2020-01-24 21:58:59","endLine":257,"groupId":"106348","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomTopDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0c/fabd67a06287141fb217b6ef9185109a1b5bfa.src","preCode":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); \r\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); \r\n      collector2 = TopScoreDocCollector.create(10, null, 1); \r\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"c53cc3edafbb00c9b1f411af7c2abf48e9b75288","commitMessage":"@@@LUCENE-9167: test speedup for slowest/pathological tests (round 3)\n","date":"2020-01-24 21:58:59","modifiedFileCount":"136","status":"M","submitter":"Robert Muir"}]
