[{"authorTime":"2012-04-17 21:36:19","codes":[{"authorDate":"2012-04-17 21:36:19","commitOrder":1,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 21; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2012-04-17 21:36:19","endLine":709,"groupId":"60528","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/00/7959598a43cfd46491d066a8c08c870727d582.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 21; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"B"},{"authorDate":"2012-04-17 21:36:19","commitOrder":1,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 28; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2012-04-17 21:36:19","endLine":1085,"groupId":"60528","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e0/179858af34074ae787be32f3ae9efcac6ccc9b.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 28; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1051,"status":"B"}],"commitId":"e8e4245d9b36123446546ff15967ac95429ea2b0","commitMessage":"@@@LUCENE-3965: consolidate all api modules and fix packaging for 4.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1327094 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-17 21:36:19","modifiedFileCount":"1","status":"B","submitter":"Robert Muir"},{"authorTime":"2012-08-29 03:19:20","codes":[{"authorDate":"2012-08-29 03:19:20","commitOrder":2,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 21; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2012-08-29 03:19:20","endLine":709,"groupId":"60528","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/26/bcfc546b91c1a54b31721e47d077243b7fa873.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 21; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"M"},{"authorDate":"2012-08-29 03:19:20","commitOrder":2,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 28; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2012-08-29 03:19:20","endLine":1055,"groupId":"60528","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/67/6d8a0141ae0b5259638b8f06c0de2289f60ea7.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 28; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1021,"status":"M"}],"commitId":"0d707bd8c73271f0518171890ac3e83b8f082047","commitMessage":"@@@fix broken javadocs (javacc bug) by regenerating with latest version.  fix broken links in .javacc (reintroduced if you regenerate)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1378274 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-29 03:19:20","modifiedFileCount":"16","status":"M","submitter":"Robert Muir"},{"authorTime":"2015-02-17 16:20:15","codes":[{"authorDate":"2012-08-29 03:19:20","commitOrder":3,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 21; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2012-08-29 03:19:20","endLine":709,"groupId":"60528","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/26/bcfc546b91c1a54b31721e47d077243b7fa873.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 21; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"N"},{"authorDate":"2015-02-17 16:20:15","commitOrder":3,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 26; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2015-02-17 16:20:15","endLine":1031,"groupId":"60528","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/74/83a94faa8ff253cde8ef6940152e680beb1b90.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 28; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"M"}],"commitId":"274e24afed69b69958449c9ac7296fb8c960d85b","commitMessage":"@@@LUCENE-6249: StandardQueryParser doesn't support pure negative clauses.\nLUCENE-6248: Remove unused odd constants from StandardSyntaxParser.jj \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1660315 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-17 16:20:15","modifiedFileCount":"2","status":"M","submitter":"Dawid Weiss"},{"authorTime":"2015-02-17 16:20:15","codes":[{"authorDate":"2016-07-06 06:03:42","commitOrder":4,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 26; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2016-07-06 06:03:42","endLine":905,"groupId":"60528","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/c1/37d3043b7c9bdf3303b4f6c7d472e6977c9772.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 21; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"M"},{"authorDate":"2015-02-17 16:20:15","commitOrder":4,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 26; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2015-02-17 16:20:15","endLine":1031,"groupId":"60528","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/74/83a94faa8ff253cde8ef6940152e680beb1b90.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 26; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"17d113dac1e6081a48144679234b00a556210160","commitMessage":"@@@LUCENE-2605: Add classic QueryParser option setSplitOnWhitespace() to control whether to split on whitespace prior to text analysis.  Default behavior remains unchanged: split-on-whitespace=true.\n","date":"2016-07-06 06:03:42","modifiedFileCount":"15","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-05-14 23:31:22","codes":[{"authorDate":"2017-05-14 23:31:22","commitOrder":5,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2017-05-14 23:31:22","endLine":932,"groupId":"60528","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/13/4ddfa9775bc69816243e4b17b89b1fa67bbfb1.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 26; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"M"},{"authorDate":"2017-05-14 23:31:22","commitOrder":5,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2017-05-14 23:31:22","endLine":1030,"groupId":"60528","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/60/08bcc3dc06bb8d372d10e966cc2dbf504b15f8.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 26; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":996,"status":"M"}],"commitId":"e11bc030987b33faadf42f0b2fb21d521077f361","commitMessage":"@@@LUCENE-7821: The classic and flexible query parsers.  as well as Solr's 'lucene'/standard query parser.  should require ' TO ' in range queries.  and accept 'TO' as endpoints in range queries.\n","date":"2017-05-14 23:31:22","modifiedFileCount":"5","status":"M","submitter":"Steve Rowe"},{"authorTime":"2020-01-13 06:12:57","codes":[{"authorDate":"2020-01-13 06:12:57","commitOrder":6,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-01-13 06:12:57","endLine":933,"groupId":"60528","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/01/abb788bbf9f51098a8f0312e1df634ee986e7c.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"M"},{"authorDate":"2020-01-13 06:12:57","commitOrder":6,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-01-13 06:12:57","endLine":1031,"groupId":"60528","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/8f/1160ef3f6d46dcd687a689948dc48d25a614a9.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"M"}],"commitId":"3bae63d215972b8a60c825b5b5716ee0841ecd19","commitMessage":"@@@LUCENE-9080: Upgrade ICU4j to 62.2 and make regenerate work\n","date":"2020-01-13 06:12:57","modifiedFileCount":"18","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-02-01 06:04:10","codes":[{"authorDate":"2020-02-01 06:04:10","commitOrder":7,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-02-01 06:04:10","endLine":932,"groupId":"60528","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/87/7f1415865f6d154be2d76ed805b80b90852d32.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"M"},{"authorDate":"2020-02-01 06:04:10","commitOrder":7,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-02-01 06:04:10","endLine":1030,"groupId":"60528","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e0/34607e23eecf722e9b4e19a76488fd80be1ae9.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = (int[])jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":996,"status":"M"}],"commitId":"5253c0cb7479e8682c19d05898cac14a67c4280a","commitMessage":"@@@LUCENE-9134 Port ant-regenerate tasks to Gradle build (#1226)\n\nLUCENE-9134: Port ant-regenerate tasks to Gradle build Javacc sub-task. Closes #1226\n","date":"2020-02-01 06:04:10","modifiedFileCount":"9","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-09-17 19:29:18","codes":[{"authorDate":"2020-02-01 06:04:10","commitOrder":8,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-02-01 06:04:10","endLine":932,"groupId":"60528","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/87/7f1415865f6d154be2d76ed805b80b90852d32.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"N"},{"authorDate":"2020-09-17 19:29:18","commitOrder":8,"curCode":"  public ParseException generateParseException() {\n     jj_expentries.clear();\n     boolean[] la1tokens = new boolean[34];\n     if (jj_kind >= 0) {\n       la1tokens[jj_kind] = true;\n       jj_kind = -1;\n     }\n     for (int i = 0; i < 24; i++) {\n       if (jj_la1[i] == jj_gen) {\n         for (int j = 0; j < 32; j++) {\n           if ((jj_la1_0[i] & (1<<j)) != 0) {\n             la1tokens[j] = true;\n           }\n           if ((jj_la1_1[i] & (1<<j)) != 0) {\n             la1tokens[32+j] = true;\n           }\n         }\n       }\n     }\n     for (int i = 0; i < 34; i++) {\n       if (la1tokens[i]) {\n         jj_expentry = new int[1];\n         jj_expentry[0] = i;\n         jj_expentries.add(jj_expentry);\n       }\n     }\n     jj_endpos = 0;\n     jj_rescan_token();\n     jj_add_error_token(0, 0);\n     int[][] exptokseq = new int[jj_expentries.size()][];\n     for (int i = 0; i < jj_expentries.size(); i++) {\n       exptokseq[i] = jj_expentries.get(i);\n     }\n     return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-09-17 19:29:18","endLine":1269,"groupId":"60528","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/66/500fac40dafd9278291ee88f72e24bb0d86722.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[34];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 34; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1235,"status":"M"}],"commitId":"6c9d7adf7985e4b895a80e561f1a3bb5820126a8","commitMessage":"@@@LUCENE-9527: upgrade javacc to 7.0.4 (#1884)\n\n","date":"2020-09-17 19:29:18","modifiedFileCount":"29","status":"M","submitter":"Dawid Weiss"},{"authorTime":"2020-09-18 15:38:20","codes":[{"authorDate":"2020-02-01 06:04:10","commitOrder":9,"curCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-02-01 06:04:10","endLine":932,"groupId":"109","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/87/7f1415865f6d154be2d76ed805b80b90852d32.src","preCode":"  public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[33];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 25; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 33; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"N"},{"authorDate":"2020-09-18 15:38:20","commitOrder":9,"curCode":"  public ParseException generateParseException() {\n     jj_expentries.clear();\n     boolean[] la1tokens = new boolean[34];\n     if (jj_kind >= 0) {\n       la1tokens[jj_kind] = true;\n       jj_kind = -1;\n     }\n     for (int i = 0; i < 21; i++) {\n       if (jj_la1[i] == jj_gen) {\n         for (int j = 0; j < 32; j++) {\n           if ((jj_la1_0[i] & (1<<j)) != 0) {\n             la1tokens[j] = true;\n           }\n           if ((jj_la1_1[i] & (1<<j)) != 0) {\n             la1tokens[32+j] = true;\n           }\n         }\n       }\n     }\n     for (int i = 0; i < 34; i++) {\n       if (la1tokens[i]) {\n         jj_expentry = new int[1];\n         jj_expentry[0] = i;\n         jj_expentries.add(jj_expentry);\n       }\n     }\n     jj_endpos = 0;\n     jj_rescan_token();\n     jj_add_error_token(0, 0);\n     int[][] exptokseq = new int[jj_expentries.size()][];\n     for (int i = 0; i < jj_expentries.size(); i++) {\n       exptokseq[i] = jj_expentries.get(i);\n     }\n     return new ParseException(token, exptokseq, tokenImage);\n  }\n","date":"2020-09-18 15:38:20","endLine":880,"groupId":"109","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"generateParseException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/61/a323851f090dad45d1ab3c19bb0cd0afa52bd4.src","preCode":"  public ParseException generateParseException() {\n     jj_expentries.clear();\n     boolean[] la1tokens = new boolean[34];\n     if (jj_kind >= 0) {\n       la1tokens[jj_kind] = true;\n       jj_kind = -1;\n     }\n     for (int i = 0; i < 24; i++) {\n       if (jj_la1[i] == jj_gen) {\n         for (int j = 0; j < 32; j++) {\n           if ((jj_la1_0[i] & (1<<j)) != 0) {\n             la1tokens[j] = true;\n           }\n           if ((jj_la1_1[i] & (1<<j)) != 0) {\n             la1tokens[32+j] = true;\n           }\n         }\n       }\n     }\n     for (int i = 0; i < 34; i++) {\n       if (la1tokens[i]) {\n         jj_expentry = new int[1];\n         jj_expentry[0] = i;\n         jj_expentries.add(jj_expentry);\n       }\n     }\n     jj_endpos = 0;\n     jj_rescan_token();\n     jj_add_error_token(0, 0);\n     int[][] exptokseq = new int[jj_expentries.size()][];\n     for (int i = 0; i < jj_expentries.size(); i++) {\n       exptokseq[i] = jj_expentries.get(i);\n     }\n     return new ParseException(token, exptokseq, tokenImage);\n  }\n","realPath":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":846,"status":"M"}],"commitId":"3a92e1b93ebce73ab148eecc31776dde07c3d56d","commitMessage":"@@@LUCENE-9528: cleanup of flexible query parser's grammar (#1879)\n\n","date":"2020-09-18 15:38:20","modifiedFileCount":"7","status":"M","submitter":"Dawid Weiss"}]
