[{"authorTime":"2018-04-13 21:40:11","codes":[{"authorDate":"2014-05-08 06:44:18","commitOrder":3,"curCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","date":"2014-05-08 06:44:18","endLine":135,"groupId":"55448","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"BinaryDictionary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/19/56c996637fb491f5ab8767faf383e37dd6b0a6.src","preCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"NB"},{"authorDate":"2018-04-13 21:40:11","commitOrder":3,"curCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","date":"2018-04-13 21:40:11","endLine":115,"groupId":"16160","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"BinaryDictionary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b7/a36120211a47e2d74f8f47e93c444121d3ef99.src","preCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"f88a553a91207d911c99d17cb3a23d9eeb6b3665","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-04-13 21:40:11","modifiedFileCount":"5","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-04-13 21:40:11","codes":[{"authorDate":"2019-06-16 02:59:46","commitOrder":4,"curCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n                              + \", targetMapOffsets.length=\" + targetMapOffsets.length\n                              + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","date":"2019-06-21 06:38:44","endLine":163,"groupId":"16160","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"BinaryDictionary","params":"(ResourceSchemeresourceScheme@StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ca/4eb2c398c468f0cdf89ccb32877f2f7956bdab.src","preCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2018-04-13 21:40:11","commitOrder":4,"curCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","date":"2018-04-13 21:40:11","endLine":115,"groupId":"16160","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"BinaryDictionary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b7/a36120211a47e2d74f8f47e93c444121d3ef99.src","preCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"4502065f03654af204f23d7c90ee95c28d97f987","commitMessage":"@@@LUCENE-8863: enhance Kuromoji DictionaryBuilder tool\n added tests\n enabled ids up to 8191\n support loading custom system dictionary from filesystem or classpath\n","date":"2019-06-21 06:38:44","modifiedFileCount":"5","status":"M","submitter":"Michael Sokolov"},{"authorTime":"2019-07-11 22:59:34","codes":[{"authorDate":"2019-06-16 02:59:46","commitOrder":5,"curCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n                              + \", targetMapOffsets.length=\" + targetMapOffsets.length\n                              + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","date":"2019-06-21 06:38:44","endLine":163,"groupId":"16160","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"BinaryDictionary","params":"(ResourceSchemeresourceScheme@StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ca/4eb2c398c468f0cdf89ccb32877f2f7956bdab.src","preCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n                              + \", targetMapOffsets.length=\" + targetMapOffsets.length\n                              + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2019-07-11 22:59:34","commitOrder":5,"curCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n            + \", targetMapOffsets.length=\" + targetMapOffsets.length\n            + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","date":"2019-07-11 22:59:34","endLine":147,"groupId":"16160","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"BinaryDictionary","params":"(ResourceSchemeresourceScheme@StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/86/49837b8cdfe76687ee2097acf80423808d152b.src","preCode":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"2ac5fb668a83f6484276de8059875bebf6a7ce16","commitMessage":"@@@LUCENE-8904: enhance Nori DictionaryBuilder tool\n\n","date":"2019-07-11 22:59:34","modifiedFileCount":"5","status":"M","submitter":"Namgyu Kim"},{"authorTime":"2019-08-27 02:09:03","codes":[{"authorDate":"2019-06-16 02:59:46","commitOrder":6,"curCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n                              + \", targetMapOffsets.length=\" + targetMapOffsets.length\n                              + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","date":"2019-06-21 06:38:44","endLine":163,"groupId":"101665","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"BinaryDictionary","params":"(ResourceSchemeresourceScheme@StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ca/4eb2c398c468f0cdf89ccb32877f2f7956bdab.src","preCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n                              + \", targetMapOffsets.length=\" + targetMapOffsets.length\n                              + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        \r\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2019-08-27 02:09:03","commitOrder":6,"curCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets, targetMap;\n    ByteBuffer buffer;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n            + \", targetMapOffsets.length=\" + targetMapOffsets.length\n            + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n    } finally {\n      IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","date":"2019-08-27 02:09:03","endLine":141,"groupId":"101665","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"BinaryDictionary","params":"(ResourceSchemeresourceScheme@StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/4d/8074c0f45e31fa0d8dfb6e4c214c86a1359918.src","preCode":"  protected BinaryDictionary(ResourceScheme resourceScheme, String resourcePath) throws IOException {\n    this.resourceScheme = resourceScheme;\n    if (resourcePath == null) {\n      if (resourceScheme != ResourceScheme.CLASSPATH) {\n        throw new IllegalArgumentException(\"resourcePath must be supplied with FILE resource scheme\");\n      }\n      this.resourcePath = getClass().getName().replace('.', '/');\n    } else {\n      this.resourcePath = resourcePath;\n    }\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken; targetMap.length=\" + targetMap.length\n            + \", targetMapOffsets.length=\" + targetMapOffsets.length\n            + \", sourceId=\" + sourceId);\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      \r\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, posIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, posIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n","realPath":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"a9607b2a88185f03f95e7b0ab282336c8997488e","commitMessage":"@@@LUCENE-8954: refactor Nori analyzer\n\nSigned-off-by: Namgyu Kim <namgyu@apache.org>","date":"2019-08-27 02:09:03","modifiedFileCount":"21","status":"M","submitter":"Namgyu Kim"}]
