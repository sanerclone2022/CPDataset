[{"authorTime":"2014-02-10 23:44:23","codes":[{"authorDate":"2014-02-10 23:44:23","commitOrder":4,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-02-10 23:44:23","endLine":160,"groupId":"31147","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/36/264f338784afe8835ee1993bd65ad1b33e107e.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2014-02-10 23:44:23","commitOrder":4,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-02-10 23:44:23","endLine":203,"groupId":"31147","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/44/d30784773ed613dcc13a20edf94fc4301fd28a.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"MB"}],"commitId":"b872f4b5c3c5324711ebb379e6c8e4c705ab3f42","commitMessage":"@@@LUCENE-5440: Add LongBitSet to handle large number of bits; replace usage of OpenBitSet by FixedBitSet/LongBitSet\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1566662 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-10 23:44:23","modifiedFileCount":"15","status":"M","submitter":"Shai Erera"},{"authorTime":"2014-02-19 09:38:33","codes":[{"authorDate":"2014-02-19 09:38:33","commitOrder":5,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-02-19 09:38:33","endLine":160,"groupId":"31147","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/07/0438ef96fdaec90dfe814d0a5735d921812510.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2014-02-19 09:38:33","commitOrder":5,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-02-19 09:38:33","endLine":203,"groupId":"31147","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/9f/31e301a5ef5e08115452126a253ee753ecb3ac.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"36b2f2512b53b3c4d5951dbeaf7d25106a806413","commitMessage":"@@@LUCENE-5449: Rename _TestUtil to TestUtil.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1569597 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-19 09:38:33","modifiedFileCount":"321","status":"M","submitter":"Benson Margulies"},{"authorTime":"2014-10-22 20:50:50","codes":[{"authorDate":"2014-02-19 09:38:33","commitOrder":6,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-02-19 09:38:33","endLine":160,"groupId":"31147","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/07/0438ef96fdaec90dfe814d0a5735d921812510.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2014-10-22 20:50:50","commitOrder":6,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-10-22 20:50:50","endLine":203,"groupId":"31147","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6f/a84271a49ffbe1a93e5e66bcc963c392f9ce7e.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"62bf86a2e17b5e4806330c04c114fe8a0fb1a9ce","commitMessage":"@@@LUCENE-6017: Specialize FixedBitSet.xor in case of a FixedBitSetIterator.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1633610 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-10-22 20:50:50","modifiedFileCount":"2","status":"M","submitter":"Adrien Grand"},{"authorTime":"2014-10-24 15:32:19","codes":[{"authorDate":"2014-02-19 09:38:33","commitOrder":7,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-02-19 09:38:33","endLine":160,"groupId":"31147","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/07/0438ef96fdaec90dfe814d0a5735d921812510.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2014-10-24 15:32:19","commitOrder":7,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    java.util.BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      java.util.BitSet a = new java.util.BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      java.util.BitSet aa = (java.util.BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        java.util.BitSet a_and = (java.util.BitSet)a.clone(); a_and.and(a0);\n        java.util.BitSet a_or = (java.util.BitSet)a.clone(); a_or.or(a0);\n        java.util.BitSet a_xor = (java.util.BitSet)a.clone(); a_xor.xor(a0);\n        java.util.BitSet a_andn = (java.util.BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-10-24 15:32:19","endLine":206,"groupId":"45812","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/43/c4663fe70017aed7147c22d104a89ecf74a8b3.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"c179a9bf947249722910d7001b671fb3f12ccfa2","commitMessage":"@@@LUCENE-6021: Make SparseFixedBitSet and FixedBitSet share a common \"BitSet\" interface.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1634012 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-10-24 15:32:19","modifiedFileCount":"53","status":"M","submitter":"Adrien Grand"},{"authorTime":"2014-10-24 15:32:19","codes":[{"authorDate":"2015-04-29 04:37:15","commitOrder":8,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    java.util.BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      java.util.BitSet a = new java.util.BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      java.util.BitSet aa = (java.util.BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        java.util.BitSet a_and = (java.util.BitSet)a.clone(); a_and.and(a0);\n        java.util.BitSet a_or = (java.util.BitSet)a.clone(); a_or.or(a0);\n        java.util.BitSet a_xor = (java.util.BitSet)a.clone(); a_xor.xor(a0);\n        java.util.BitSet a_andn = (java.util.BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2015-04-29 04:37:15","endLine":162,"groupId":"106793","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/01/8a7d59c922feae07d107152cbae4f2a8134e17.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    LongBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      LongBitSet b = new LongBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      LongBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        LongBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        LongBitSet b_or = b.clone(); b_or.or(b0);\n        LongBitSet b_xor = b.clone(); b_xor.xor(b0);\n        LongBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2014-10-24 15:32:19","commitOrder":8,"curCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    java.util.BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      java.util.BitSet a = new java.util.BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      java.util.BitSet aa = (java.util.BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        java.util.BitSet a_and = (java.util.BitSet)a.clone(); a_and.and(a0);\n        java.util.BitSet a_or = (java.util.BitSet)a.clone(); a_or.or(a0);\n        java.util.BitSet a_xor = (java.util.BitSet)a.clone(); a_xor.xor(a0);\n        java.util.BitSet a_andn = (java.util.BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","date":"2014-10-24 15:32:19","endLine":206,"groupId":"106793","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSets","params":"(intmaxSize@intiter@intmode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/43/c4663fe70017aed7147c22d104a89ecf74a8b3.src","preCode":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    java.util.BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      java.util.BitSet a = new java.util.BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      \r\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      \r\n      doGet(a,b);\n\n      \r\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      java.util.BitSet aa = (java.util.BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   \r\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); \r\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        java.util.BitSet a_and = (java.util.BitSet)a.clone(); a_and.and(a0);\n        java.util.BitSet a_or = (java.util.BitSet)a.clone(); a_or.or(a0);\n        java.util.BitSet a_xor = (java.util.BitSet)a.clone(); a_xor.xor(a0);\n        java.util.BitSet a_andn = (java.util.BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"}],"commitId":"701b7ddf3a2f34f26834f3c09ba94b98ca4a0543","commitMessage":"@@@LUCENE-6427: Added assertion about the presence of ghost bits in (Fixed|Long)BitSet.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1676617 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-29 04:37:15","modifiedFileCount":"5","status":"M","submitter":"Adrien Grand"}]
