[{"authorTime":"2017-01-20 01:12:04","codes":[{"authorDate":"2017-01-20 01:12:04","commitOrder":1,"curCode":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","date":"2017-01-20 20:42:31","endLine":92,"groupId":"57915","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestDuelPointRangeNumericRangeQuery","params":"(booleansortedNumeric@intmaxValuesPerDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/50/1538f426f7d11dd60da73b257c8ecc2c44943c.src","preCode":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2017-01-20 01:12:04","commitOrder":1,"curCode":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","date":"2017-01-20 20:42:31","endLine":159,"groupId":"41354","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestDuelPointRangeSortedRangeQuery","params":"(booleansortedSet@intmaxValuesPerDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/50/1538f426f7d11dd60da73b257c8ecc2c44943c.src","preCode":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"71ca2a84bad2495eff3b0b15dc445f3f013ea4af","commitMessage":"@@@LUCENE-7643: Move IndexOrDocValuesQuery to core.\n","date":"2017-01-20 20:42:31","modifiedFileCount":"10","status":"B","submitter":"Adrien Grand"},{"authorTime":"2017-01-20 01:12:04","codes":[{"authorDate":"2017-07-04 22:44:13","commitOrder":2,"curCode":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","date":"2017-07-04 22:44:13","endLine":93,"groupId":"57915","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestDuelPointRangeNumericRangeQuery","params":"(booleansortedNumeric@intmaxValuesPerDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/05/9127829d96501032e01d853f02870ad677b594.src","preCode":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2017-01-20 01:12:04","commitOrder":2,"curCode":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","date":"2017-01-20 20:42:31","endLine":159,"groupId":"41354","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestDuelPointRangeSortedRangeQuery","params":"(booleansortedSet@intmaxValuesPerDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/50/1538f426f7d11dd60da73b257c8ecc2c44943c.src","preCode":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"1e6e4022cf6b8f927ec6a10f4d4c4b866fce8f0f","commitMessage":"@@@LUCENE-7892: Add \"slow\" to factory methods of doc-values queries.\n","date":"2017-07-04 22:44:13","modifiedFileCount":"9","status":"M","submitter":"Adrien Grand"},{"authorTime":"2017-07-20 21:10:11","codes":[{"authorDate":"2017-07-04 22:44:13","commitOrder":3,"curCode":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","date":"2017-07-04 22:44:13","endLine":93,"groupId":"106521","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestDuelPointRangeNumericRangeQuery","params":"(booleansortedNumeric@intmaxValuesPerDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/05/9127829d96501032e01d853f02870ad677b594.src","preCode":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2017-07-20 21:10:11","commitOrder":3,"curCode":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newSlowRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newSlowRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","date":"2017-07-20 21:10:11","endLine":160,"groupId":"106521","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestDuelPointRangeSortedRangeQuery","params":"(booleansortedSet@intmaxValuesPerDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/43/fae3eb7a449a8f8b5afe94bb3a8c30fc027657.src","preCode":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"7ea4072b3640d9aabcf60d0a012af828cf034b46","commitMessage":"@@@LUCENE-7892: Add missing \"Slow\" to doc-value query factory methods.\n","date":"2017-07-20 21:10:11","modifiedFileCount":"6","status":"M","submitter":"Adrien Grand"}]
