[{"authorTime":"2014-01-06 19:09:43","codes":[{"authorDate":"2014-01-06 19:09:43","commitOrder":2,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc++;\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2014-01-06 19:09:43","endLine":86,"groupId":"14538","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a0/c807d62a06bbde97e78a64ea1efd70017238db.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc++;\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"MB"},{"authorDate":"2014-01-06 19:09:43","commitOrder":2,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n        doc++;\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2014-01-06 19:09:43","endLine":100,"groupId":"32041","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/da/c45d0459996ceb4c1b4664f7214674c79e5b1d.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n        doc++;\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"MB"}],"commitId":"75b0b5312c6f7722b88088fbc590259e9cd31567","commitMessage":"@@@fix test bug; remove dead code\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1555715 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-06 19:09:43","modifiedFileCount":"3","status":"M","submitter":"Michael McCandless"},{"authorTime":"2014-02-06 03:45:46","codes":[{"authorDate":"2014-02-06 03:45:46","commitOrder":3,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      DocIdSetIterator docs = hits.bits.iterator();      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2014-02-06 03:45:46","endLine":86,"groupId":"42956","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/22/441378a72b9dc8391330d1d887ee21e315e1f1.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc++;\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2014-02-06 03:45:46","commitOrder":3,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      DocIdSetIterator docs = hits.bits.iterator();\n      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2014-02-06 03:45:46","endLine":102,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a8/04187b83ceda33dd30656409e3a247393b2928.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      final int length = hits.bits.length();\n      int doc = 0;\n      totCount += hits.totalHits;\n      while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n        doc++;\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"c039f73cde9a18465f197af1747b13d71d774e06","commitMessage":"@@@LUCENE-5425: Make creation of FixedBitSet in FacetsCollector overridable\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1564898 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-06 03:45:46","modifiedFileCount":"10","status":"M","submitter":"Shai Erera"},{"authorTime":"2014-02-07 02:36:48","codes":[{"authorDate":"2014-02-07 02:36:48","commitOrder":4,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      Bits bits;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        bits = dis.bits();\n        if (bits == null) {\n          throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n        }\n      } else {\n        bits = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (bits != null && bits.get(doc) == false) {\n          doc++;\n          continue;\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2014-02-07 02:36:48","endLine":117,"groupId":"42956","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/78/cc7195b1a9c496882761ba09bba0f9f2322edc.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      DocIdSetIterator docs = hits.bits.iterator();      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2014-02-07 02:36:48","commitOrder":4,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      Bits bits;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        bits = dis.bits();\n        if (bits == null) {\n          throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n        }\n      } else {\n        bits = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (bits != null && bits.get(doc) == false) {\n          doc++;\n          continue;\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2014-02-07 02:36:48","endLine":133,"groupId":"42956","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/58/7c68cc988630bdfd6a759277a669cfc0822363.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      DocIdSetIterator docs = hits.bits.iterator();\n      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"20a280c33cd9765ca9186593771fc628b92cf6b3","commitMessage":"@@@LUCENE-5418: faster drill-down/sideways on costly filters\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1565387 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-07 02:36:48","modifiedFileCount":"17","status":"M","submitter":"Michael McCandless"},{"authorTime":"2015-02-21 22:08:09","codes":[{"authorDate":"2014-02-07 02:36:48","commitOrder":5,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      Bits bits;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        bits = dis.bits();\n        if (bits == null) {\n          throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n        }\n      } else {\n        bits = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (bits != null && bits.get(doc) == false) {\n          doc++;\n          continue;\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2014-02-07 02:36:48","endLine":117,"groupId":"42956","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/78/cc7195b1a9c496882761ba09bba0f9f2322edc.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      Bits bits;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        bits = dis.bits();\n        if (bits == null) {\n          throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n        }\n      } else {\n        bits = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (bits != null && bits.get(doc) == false) {\n          doc++;\n          continue;\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2015-02-21 22:08:09","commitOrder":5,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        fastMatchDocs = dis.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2015-02-21 22:08:09","endLine":138,"groupId":"39412","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ce/348ea37069b29d894280b8058bef481715e1f6.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      Bits bits;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        bits = dis.bits();\n        if (bits == null) {\n          throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n        }\n      } else {\n        bits = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (bits != null && bits.get(doc) == false) {\n          doc++;\n          continue;\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"3dc3e578478c8f85e3e596595d53ad783ef257ae","commitMessage":"@@@LUCENE-6269: Remove BooleanFilter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1661366 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-21 22:08:09","modifiedFileCount":"12","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-02-21 22:08:09","codes":[{"authorDate":"2015-02-27 22:12:02","commitOrder":6,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        fastMatchDocs = dis.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2015-02-27 22:12:02","endLine":122,"groupId":"39412","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/fa/7e0b6e0ab6cafa4a0a613295aa220fc0fc50b6.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      Bits bits;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        bits = dis.bits();\n        if (bits == null) {\n          throw new IllegalArgumentException(\"fastMatchFilter does not implement DocIdSet.bits\");\n        }\n      } else {\n        bits = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      int doc;\n      while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (bits != null && bits.get(doc) == false) {\n          doc++;\n          continue;\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2015-02-21 22:08:09","commitOrder":6,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        fastMatchDocs = dis.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2015-02-21 22:08:09","endLine":138,"groupId":"39412","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ce/348ea37069b29d894280b8058bef481715e1f6.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        fastMatchDocs = dis.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"544f5bf1e7b71e3816d17e4f6c8204aef79733c8","commitMessage":"@@@LUCENE-6300: Remove multi-term filters.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1662682 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-27 22:12:02","modifiedFileCount":"56","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-07-01 22:48:21","codes":[{"authorDate":"2015-07-01 22:48:21","commitOrder":7,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        fastMatchDocs = fastMatchWeight.scorer(hits.context);\n        if (fastMatchDocs == null) {\n          continue;\n        }\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2015-07-01 22:48:21","endLine":127,"groupId":"2074","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3a/f15c687afbab3ee1866fa7265893f6d65b9e4d.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        fastMatchDocs = dis.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2015-07-01 22:48:21","commitOrder":7,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        fastMatchDocs = fastMatchWeight.scorer(hits.context);\n        if (fastMatchDocs == null) {\n          continue;\n        }\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2015-07-01 22:48:21","endLine":143,"groupId":"2074","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/38/7d4918a49af23f741daac7218390e766c47393.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchFilter != null) {\n        DocIdSet dis = fastMatchFilter.getDocIdSet(hits.context, null);\n        if (dis == null) {\n          \r\n          continue;\n        }\n        fastMatchDocs = dis.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"bc1c535617ba0c366a6ab86d8ad733e7cc784f99","commitMessage":"@@@LUCENE-6648: Remove usage of oal.search.Filter in lucene/facet.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1688661 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-01 22:48:21","modifiedFileCount":"13","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-12-10 21:43:50","codes":[{"authorDate":"2015-12-10 21:43:50","commitOrder":8,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2015-12-10 21:43:50","endLine":129,"groupId":"2074","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d7/295767d20d30c42b9e2fbbf8c00f057ba5a548.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        fastMatchDocs = fastMatchWeight.scorer(hits.context);\n        if (fastMatchDocs == null) {\n          continue;\n        }\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2015-12-10 21:43:50","commitOrder":8,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2015-12-10 21:43:50","endLine":145,"groupId":"2074","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/46/9bdf02bf0e9ebc8d2c9e49d2f5c6515afd154e.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        fastMatchDocs = fastMatchWeight.scorer(hits.context);\n        if (fastMatchDocs == null) {\n          continue;\n        }\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"ddb3a97678fa112292c0f5aed271087a79281d12","commitMessage":"@@@LUCENE-6919: Make Scorer expose an iterator instead of extending DocIdSetIterator.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719081 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-10 21:43:50","modifiedFileCount":"119","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-12-12 05:13:41","codes":[{"authorDate":"2015-12-10 21:43:50","commitOrder":9,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2015-12-10 21:43:50","endLine":129,"groupId":"2074","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d7/295767d20d30c42b9e2fbbf8c00f057ba5a548.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"},{"authorDate":"2015-12-12 05:13:41","commitOrder":9,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     LegacyNumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     LegacyNumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(LegacyNumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2015-12-12 05:13:41","endLine":145,"groupId":"2074","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/48/5a8d6b9d7d68dcf50157569d8e160bb4c044e0.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     NumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"7da175b0b6b4185ee6b5df852e59b93d9a9a1c86","commitMessage":"@@@LUCENE-6917: rename/deprecate numeric classes in favor of dimensional values\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719562 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-12 05:13:41","modifiedFileCount":"125","status":"M","submitter":"Michael McCandless"},{"authorTime":"2016-03-04 18:54:10","codes":[{"authorDate":"2015-12-10 21:43:50","commitOrder":10,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2015-12-10 21:43:50","endLine":129,"groupId":"2074","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d7/295767d20d30c42b9e2fbbf8c00f057ba5a548.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"},{"authorDate":"2016-03-04 18:54:10","commitOrder":10,"curCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.min), true,\n                                     NumericUtils.doubleToSortableLong(range.max), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2016-03-04 18:54:10","endLine":144,"groupId":"2074","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(ValueSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2d/0ba5c13e8acc1c3c3554752a4be65505fb5215.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     LegacyNumericUtils.doubleToSortableLong(range.minIncl), true,\n                                     LegacyNumericUtils.doubleToSortableLong(range.maxIncl), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(LegacyNumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"517acece6a210b2d1baf75a39fe3b77ea59926b2","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n\nConflicts:\n\tsolr/CHANGES.txt\n","date":"2016-03-04 18:54:10","modifiedFileCount":"303","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-01-06 18:41:12","codes":[{"authorDate":"2017-01-06 18:41:12","commitOrder":11,"curCode":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2017-01-07 19:52:24","endLine":147,"groupId":"32041","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(LongValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a3/cfc7157d030ff7f09e58f422d2fe5481141cfa.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(fv.longVal(doc));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2017-01-06 18:41:12","commitOrder":11,"curCode":"  private void count(DoubleValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.min), true,\n                                     NumericUtils.doubleToSortableLong(range.max), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      DoubleValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleValue()));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2017-01-07 19:52:24","endLine":164,"groupId":"32041","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(DoubleValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/63/fc935f980b7dde44eae008b6b1f6053a1bdbdb.src","preCode":"  private void count(ValueSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.min), true,\n                                     NumericUtils.doubleToSortableLong(range.max), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      FunctionValues fv = valueSource.getValues(Collections.emptyMap(), hits.context);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.exists(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleVal(doc)));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"713b65d1dcc80c1fe147a5bf999e1a88b63b9dce","commitMessage":"@@@LUCENE-7610: Deprecate ValueSource methods in facets module\n","date":"2017-01-07 19:52:24","modifiedFileCount":"11","status":"M","submitter":"Alan Woodward"},{"authorTime":"2017-12-08 18:41:33","codes":[{"authorDate":"2017-12-08 18:41:33","commitOrder":12,"curCode":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2017-12-08 18:41:33","endLine":129,"groupId":"41202","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(LongValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0b/f9959f97214635be88c7284be669ab98292d3c.src","preCode":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2017-12-08 18:41:33","commitOrder":12,"curCode":"  private void count(DoubleValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.min), true,\n                                     NumericUtils.doubleToSortableLong(range.max), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      DoubleValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleValue()));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2017-12-08 18:41:33","endLine":142,"groupId":"41202","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(DoubleValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0c/e483194c5a015ae06fa2b70ab2e8975ac393a6.src","preCode":"  private void count(DoubleValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.min), true,\n                                     NumericUtils.doubleToSortableLong(range.max), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      DoubleValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, false);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleValue()));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"dcb84701a4c6d293b8eb30c676630d16d6cdcaa8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-12-08 18:41:33","modifiedFileCount":"293","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-04-10 08:13:23","codes":[{"authorDate":"2018-04-10 08:13:23","commitOrder":13,"curCode":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createWeight(searcher.rewrite(fastMatchQuery), ScoreMode.COMPLETE_NO_SCORES, 1);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","date":"2018-04-10 08:13:23","endLine":128,"groupId":"32041","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(LongValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cb/e7b9f76b78e238d20d300485f69bba25960a3f.src","preCode":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();      \n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n    \n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2018-04-10 08:13:23","commitOrder":13,"curCode":"  private void count(DoubleValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.min), true,\n                                     NumericUtils.doubleToSortableLong(range.max), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      DoubleValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createWeight(searcher.rewrite(fastMatchQuery), ScoreMode.COMPLETE_NO_SCORES, 1);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleValue()));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","date":"2018-04-10 08:13:23","endLine":142,"groupId":"32041","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"count","params":"(DoubleValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/40/84dfada269f56359b25550e7b4ab90702c7441.src","preCode":"  private void count(DoubleValuesSource valueSource, List<MatchingDocs> matchingDocs) throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for(int i=0;i<ranges.length;i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =  new LongRange(range.label,\n                                     NumericUtils.doubleToSortableLong(range.min), true,\n                                     NumericUtils.doubleToSortableLong(range.max), true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      DoubleValues fv = valueSource.getValues(hits.context, null);\n      \n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight = searcher.createNormalizedWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleValue()));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"1cd859713bda498fe295b2774fa74640d669882b","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-04-10 08:13:23","modifiedFileCount":"67","status":"M","submitter":"Karl Wright"},{"authorTime":"2021-05-31 10:46:11","codes":[{"authorDate":"2021-05-31 10:46:11","commitOrder":14,"curCode":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs)\n      throws IOException {\n\n    LongRange[] ranges = getLongRanges();\n\n    LongRangeCounter counter = LongRangeCounter.create(ranges, counts);\n\n    int missingCount = 0;\n\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n      totCount += hits.totalHits;\n\n      final DocIdSetIterator it = createIterator(hits);\n      if (it == null) {\n        continue;\n      }\n\n      for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.addSingleValued(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = it.nextDoc();\n      }\n    }\n\n    missingCount += counter.finish();\n    totCount -= missingCount;\n  }\n","date":"2021-05-31 10:46:11","endLine":124,"groupId":"103416","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"count","params":"(LongValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/50/c9dd635cb6533aedd9329b6eb37731ab39fd8f.src","preCode":"  private void count(LongValuesSource valueSource, List<MatchingDocs> matchingDocs)\n      throws IOException {\n\n    LongRange[] ranges = (LongRange[]) this.ranges;\n\n    LongRangeCounter counter = new LongRangeCounter(ranges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      LongValues fv = valueSource.getValues(hits.context, null);\n\n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight =\n            searcher.createWeight(\n                searcher.rewrite(fastMatchQuery), ScoreMode.COMPLETE_NO_SCORES, 1);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(fv.longValue());\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    int x = counter.fillCounts(counts);\n\n    missingCount += x;\n\n    \r\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-05-31 10:46:11","commitOrder":14,"curCode":"  private void count(DoubleValuesSource valueSource, List<MatchingDocs> matchingDocs)\n      throws IOException {\n\n    LongRange[] longRanges = getLongRanges();\n\n    LongRangeCounter counter = LongRangeCounter.create(longRanges, counts);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      DoubleValues fv = valueSource.getValues(hits.context, null);\n      totCount += hits.totalHits;\n\n      final DocIdSetIterator it = createIterator(hits);\n      if (it == null) {\n        continue;\n      }\n\n      for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.addSingleValued(NumericUtils.doubleToSortableLong(fv.doubleValue()));\n        } else {\n          missingCount++;\n        }\n\n        doc = it.nextDoc();\n      }\n    }\n\n    missingCount += counter.finish();\n    totCount -= missingCount;\n  }\n","date":"2021-05-31 10:46:11","endLine":135,"groupId":"103416","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"count","params":"(DoubleValuesSourcevalueSource@List<MatchingDocs>matchingDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/22/5318383d4c6390e2c8883629147656e68c9c4a.src","preCode":"  private void count(DoubleValuesSource valueSource, List<MatchingDocs> matchingDocs)\n      throws IOException {\n\n    DoubleRange[] ranges = (DoubleRange[]) this.ranges;\n\n    LongRange[] longRanges = new LongRange[ranges.length];\n    for (int i = 0; i < ranges.length; i++) {\n      DoubleRange range = ranges[i];\n      longRanges[i] =\n          new LongRange(\n              range.label,\n              NumericUtils.doubleToSortableLong(range.min),\n              true,\n              NumericUtils.doubleToSortableLong(range.max),\n              true);\n    }\n\n    LongRangeCounter counter = new LongRangeCounter(longRanges);\n\n    int missingCount = 0;\n    for (MatchingDocs hits : matchingDocs) {\n      DoubleValues fv = valueSource.getValues(hits.context, null);\n\n      totCount += hits.totalHits;\n      final DocIdSetIterator fastMatchDocs;\n      if (fastMatchQuery != null) {\n        final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(hits.context);\n        final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n        searcher.setQueryCache(null);\n        final Weight fastMatchWeight =\n            searcher.createWeight(\n                searcher.rewrite(fastMatchQuery), ScoreMode.COMPLETE_NO_SCORES, 1);\n        Scorer s = fastMatchWeight.scorer(hits.context);\n        if (s == null) {\n          continue;\n        }\n        fastMatchDocs = s.iterator();\n      } else {\n        fastMatchDocs = null;\n      }\n\n      DocIdSetIterator docs = hits.bits.iterator();\n\n      for (int doc = docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {\n        if (fastMatchDocs != null) {\n          int fastMatchDoc = fastMatchDocs.docID();\n          if (fastMatchDoc < doc) {\n            fastMatchDoc = fastMatchDocs.advance(doc);\n          }\n\n          if (doc != fastMatchDoc) {\n            doc = docs.advance(fastMatchDoc);\n            continue;\n          }\n        }\n        \r\n        if (fv.advanceExact(doc)) {\n          counter.add(NumericUtils.doubleToSortableLong(fv.doubleValue()));\n        } else {\n          missingCount++;\n        }\n\n        doc = docs.nextDoc();\n      }\n    }\n\n    missingCount += counter.fillCounts(counts);\n    totCount -= missingCount;\n  }\n","realPath":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"d669ddebc53845e921bc3703f16aa2c1daef0124","commitMessage":"@@@LUCENE-9946: Support multi-value fields in range facet counting (#127)\n\n","date":"2021-05-31 10:46:11","modifiedFileCount":"5","status":"M","submitter":"Greg Miller"}]
