[{"authorTime":"2012-02-08 03:59:05","codes":[{"authorDate":"2012-02-08 03:59:05","commitOrder":1,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-02-08 03:59:05","endLine":689,"groupId":"49406","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a9/33a0a5fc2a258364ad550947eae7ccc13ebcb7.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"B"},{"authorDate":"2012-02-08 03:59:05","commitOrder":1,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          if (docValues == null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" omits docvalues but should have them!\");\n          }\n          DocValues.Type type = docValues.type();\n          if (type != fieldInfo.getDocValuesType()) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has type: \" + type + \" but fieldInfos says:\" + fieldInfo.getDocValuesType());\n          }\n          final Source values = docValues.getDirectSource();\n          final int maxDoc = reader.maxDoc();\n          int size = docValues.getValueSize();\n          for (int i = 0; i < maxDoc; i++) {\n            switch (fieldInfo.getDocValuesType()) {\n            case BYTES_FIXED_SORTED:\n            case BYTES_VAR_SORTED:\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_VAR_DEREF:\n            case BYTES_VAR_STRAIGHT:\n              BytesRef bytes = new BytesRef();\n              values.getBytes(i, bytes);\n              if (size != -1 && size != bytes.length) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" returned wrongly sized bytes, was: \" + bytes.length + \" should be: \" + size);\n              }\n              break;\n            case FLOAT_32:\n              assert size == 4;\n              values.getFloat(i);\n              break;\n            case FLOAT_64:\n              assert size == 8;\n              values.getFloat(i);\n              break;\n            case VAR_INTS:\n              assert size == -1;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_16:\n              assert size == 2;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_32:\n              assert size == 4;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_64:\n              assert size == 8;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_8:\n              assert size == 1;\n              values.getInt(i);\n              break;\n            default:\n              throw new IllegalArgumentException(\"Field: \" + fieldInfo.name\n                          + \" - no such DocValues type: \" + fieldInfo.getDocValuesType());\n            }\n          }\n          if (type == DocValues.Type.BYTES_FIXED_SORTED || type == DocValues.Type.BYTES_VAR_SORTED) {\n            \r\n            SortedSource sortedValues = values.asSortedSource();\n            Comparator<BytesRef> comparator = sortedValues.getComparator();\n            int lastOrd = -1;\n            BytesRef lastBytes = new BytesRef();\n            for (int i = 0; i < maxDoc; i++) {\n              int ord = sortedValues.ord(i);\n              if (ord < 0 || ord > maxDoc) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord is out of bounds: \" + ord);\n              }\n              BytesRef bytes = new BytesRef();\n              sortedValues.getByOrd(ord, bytes);\n              if (lastOrd != -1) {\n                int ordComp = Integer.signum(new Integer(ord).compareTo(new Integer(lastOrd)));\n                int bytesComp = Integer.signum(comparator.compare(bytes, lastBytes));\n                if (ordComp != bytesComp) {\n                  throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord comparison is wrong: \" + ordComp + \" comparator claims: \" + bytesComp);\n                }\n              }\n              lastOrd = ord;\n              lastBytes = bytes;\n            }\n          }\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-02-08 03:59:05","endLine":1268,"groupId":"16888","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoinfo@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a9/33a0a5fc2a258364ad550947eae7ccc13ebcb7.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          if (docValues == null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" omits docvalues but should have them!\");\n          }\n          DocValues.Type type = docValues.type();\n          if (type != fieldInfo.getDocValuesType()) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has type: \" + type + \" but fieldInfos says:\" + fieldInfo.getDocValuesType());\n          }\n          final Source values = docValues.getDirectSource();\n          final int maxDoc = reader.maxDoc();\n          int size = docValues.getValueSize();\n          for (int i = 0; i < maxDoc; i++) {\n            switch (fieldInfo.getDocValuesType()) {\n            case BYTES_FIXED_SORTED:\n            case BYTES_VAR_SORTED:\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_VAR_DEREF:\n            case BYTES_VAR_STRAIGHT:\n              BytesRef bytes = new BytesRef();\n              values.getBytes(i, bytes);\n              if (size != -1 && size != bytes.length) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" returned wrongly sized bytes, was: \" + bytes.length + \" should be: \" + size);\n              }\n              break;\n            case FLOAT_32:\n              assert size == 4;\n              values.getFloat(i);\n              break;\n            case FLOAT_64:\n              assert size == 8;\n              values.getFloat(i);\n              break;\n            case VAR_INTS:\n              assert size == -1;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_16:\n              assert size == 2;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_32:\n              assert size == 4;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_64:\n              assert size == 8;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_8:\n              assert size == 1;\n              values.getInt(i);\n              break;\n            default:\n              throw new IllegalArgumentException(\"Field: \" + fieldInfo.name\n                          + \" - no such DocValues type: \" + fieldInfo.getDocValuesType());\n            }\n          }\n          if (type == DocValues.Type.BYTES_FIXED_SORTED || type == DocValues.Type.BYTES_VAR_SORTED) {\n            \r\n            SortedSource sortedValues = values.asSortedSource();\n            Comparator<BytesRef> comparator = sortedValues.getComparator();\n            int lastOrd = -1;\n            BytesRef lastBytes = new BytesRef();\n            for (int i = 0; i < maxDoc; i++) {\n              int ord = sortedValues.ord(i);\n              if (ord < 0 || ord > maxDoc) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord is out of bounds: \" + ord);\n              }\n              BytesRef bytes = new BytesRef();\n              sortedValues.getByOrd(ord, bytes);\n              if (lastOrd != -1) {\n                int ordComp = Integer.signum(new Integer(ord).compareTo(new Integer(lastOrd)));\n                int bytesComp = Integer.signum(comparator.compare(bytes, lastBytes));\n                if (ordComp != bytesComp) {\n                  throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord comparison is wrong: \" + ordComp + \" comparator claims: \" + bytesComp);\n                }\n              }\n              lastOrd = ord;\n              lastBytes = bytes;\n            }\n          }\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1158,"status":"B"}],"commitId":"eb0ab3d392a42c1835f79bcd7f5404bcc50c8e4c","commitMessage":"@@@LUCENE-3753: Restructure the Lucene build system\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1241588 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-08 03:59:05","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2012-02-08 03:59:05","codes":[{"authorDate":"2012-03-11 23:18:29","commitOrder":2,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      \r\n      \r\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          DocValues.Type type = dv.type();\n          if (type != info.getNormType()) {\n            throw new RuntimeException(\"field: \" + info.name + \" has type: \" + type + \" but fieldInfos says:\" + info.getNormType());\n          }\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-03-11 23:18:29","endLine":695,"groupId":"49406","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d1/259cc873587946b3e7c47b17a1464ff64b3869.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"M"},{"authorDate":"2012-02-08 03:59:05","commitOrder":2,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          if (docValues == null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" omits docvalues but should have them!\");\n          }\n          DocValues.Type type = docValues.type();\n          if (type != fieldInfo.getDocValuesType()) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has type: \" + type + \" but fieldInfos says:\" + fieldInfo.getDocValuesType());\n          }\n          final Source values = docValues.getDirectSource();\n          final int maxDoc = reader.maxDoc();\n          int size = docValues.getValueSize();\n          for (int i = 0; i < maxDoc; i++) {\n            switch (fieldInfo.getDocValuesType()) {\n            case BYTES_FIXED_SORTED:\n            case BYTES_VAR_SORTED:\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_VAR_DEREF:\n            case BYTES_VAR_STRAIGHT:\n              BytesRef bytes = new BytesRef();\n              values.getBytes(i, bytes);\n              if (size != -1 && size != bytes.length) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" returned wrongly sized bytes, was: \" + bytes.length + \" should be: \" + size);\n              }\n              break;\n            case FLOAT_32:\n              assert size == 4;\n              values.getFloat(i);\n              break;\n            case FLOAT_64:\n              assert size == 8;\n              values.getFloat(i);\n              break;\n            case VAR_INTS:\n              assert size == -1;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_16:\n              assert size == 2;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_32:\n              assert size == 4;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_64:\n              assert size == 8;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_8:\n              assert size == 1;\n              values.getInt(i);\n              break;\n            default:\n              throw new IllegalArgumentException(\"Field: \" + fieldInfo.name\n                          + \" - no such DocValues type: \" + fieldInfo.getDocValuesType());\n            }\n          }\n          if (type == DocValues.Type.BYTES_FIXED_SORTED || type == DocValues.Type.BYTES_VAR_SORTED) {\n            \r\n            SortedSource sortedValues = values.asSortedSource();\n            Comparator<BytesRef> comparator = sortedValues.getComparator();\n            int lastOrd = -1;\n            BytesRef lastBytes = new BytesRef();\n            for (int i = 0; i < maxDoc; i++) {\n              int ord = sortedValues.ord(i);\n              if (ord < 0 || ord > maxDoc) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord is out of bounds: \" + ord);\n              }\n              BytesRef bytes = new BytesRef();\n              sortedValues.getByOrd(ord, bytes);\n              if (lastOrd != -1) {\n                int ordComp = Integer.signum(new Integer(ord).compareTo(new Integer(lastOrd)));\n                int bytesComp = Integer.signum(comparator.compare(bytes, lastBytes));\n                if (ordComp != bytesComp) {\n                  throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord comparison is wrong: \" + ordComp + \" comparator claims: \" + bytesComp);\n                }\n              }\n              lastOrd = ord;\n              lastBytes = bytes;\n            }\n          }\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-02-08 03:59:05","endLine":1268,"groupId":"16888","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoinfo@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a9/33a0a5fc2a258364ad550947eae7ccc13ebcb7.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          if (docValues == null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" omits docvalues but should have them!\");\n          }\n          DocValues.Type type = docValues.type();\n          if (type != fieldInfo.getDocValuesType()) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has type: \" + type + \" but fieldInfos says:\" + fieldInfo.getDocValuesType());\n          }\n          final Source values = docValues.getDirectSource();\n          final int maxDoc = reader.maxDoc();\n          int size = docValues.getValueSize();\n          for (int i = 0; i < maxDoc; i++) {\n            switch (fieldInfo.getDocValuesType()) {\n            case BYTES_FIXED_SORTED:\n            case BYTES_VAR_SORTED:\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_VAR_DEREF:\n            case BYTES_VAR_STRAIGHT:\n              BytesRef bytes = new BytesRef();\n              values.getBytes(i, bytes);\n              if (size != -1 && size != bytes.length) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" returned wrongly sized bytes, was: \" + bytes.length + \" should be: \" + size);\n              }\n              break;\n            case FLOAT_32:\n              assert size == 4;\n              values.getFloat(i);\n              break;\n            case FLOAT_64:\n              assert size == 8;\n              values.getFloat(i);\n              break;\n            case VAR_INTS:\n              assert size == -1;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_16:\n              assert size == 2;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_32:\n              assert size == 4;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_64:\n              assert size == 8;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_8:\n              assert size == 1;\n              values.getInt(i);\n              break;\n            default:\n              throw new IllegalArgumentException(\"Field: \" + fieldInfo.name\n                          + \" - no such DocValues type: \" + fieldInfo.getDocValuesType());\n            }\n          }\n          if (type == DocValues.Type.BYTES_FIXED_SORTED || type == DocValues.Type.BYTES_VAR_SORTED) {\n            \r\n            SortedSource sortedValues = values.asSortedSource();\n            Comparator<BytesRef> comparator = sortedValues.getComparator();\n            int lastOrd = -1;\n            BytesRef lastBytes = new BytesRef();\n            for (int i = 0; i < maxDoc; i++) {\n              int ord = sortedValues.ord(i);\n              if (ord < 0 || ord > maxDoc) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord is out of bounds: \" + ord);\n              }\n              BytesRef bytes = new BytesRef();\n              sortedValues.getByOrd(ord, bytes);\n              if (lastOrd != -1) {\n                int ordComp = Integer.signum(new Integer(ord).compareTo(new Integer(lastOrd)));\n                int bytesComp = Integer.signum(comparator.compare(bytes, lastBytes));\n                if (ordComp != bytesComp) {\n                  throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord comparison is wrong: \" + ordComp + \" comparator claims: \" + bytesComp);\n                }\n              }\n              lastOrd = ord;\n              lastBytes = bytes;\n            }\n          }\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1158,"status":"N"}],"commitId":"5fce870b6350e2bc61dc1a71fc996a7e0f5ee7ce","commitMessage":"@@@LUCENE-3860: 3.x indexes have the wrong normType set in fieldinfos\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1299375 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-11 23:18:29","modifiedFileCount":"2","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-03-11 23:45:52","codes":[{"authorDate":"2012-03-11 23:45:52","commitOrder":3,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-03-11 23:45:52","endLine":679,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b3/30ddd240b9702f6ec8c9dded788dfbb420c672.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      \r\n      \r\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          DocValues.Type type = dv.type();\n          if (type != info.getNormType()) {\n            throw new RuntimeException(\"field: \" + info.name + \" has type: \" + type + \" but fieldInfos says:\" + info.getNormType());\n          }\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"M"},{"authorDate":"2012-03-11 23:45:52","commitOrder":3,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-03-11 23:45:52","endLine":1280,"groupId":"30332","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoinfo@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b3/30ddd240b9702f6ec8c9dded788dfbb420c672.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          if (docValues == null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" omits docvalues but should have them!\");\n          }\n          DocValues.Type type = docValues.type();\n          if (type != fieldInfo.getDocValuesType()) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has type: \" + type + \" but fieldInfos says:\" + fieldInfo.getDocValuesType());\n          }\n          final Source values = docValues.getDirectSource();\n          final int maxDoc = reader.maxDoc();\n          int size = docValues.getValueSize();\n          for (int i = 0; i < maxDoc; i++) {\n            switch (fieldInfo.getDocValuesType()) {\n            case BYTES_FIXED_SORTED:\n            case BYTES_VAR_SORTED:\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_VAR_DEREF:\n            case BYTES_VAR_STRAIGHT:\n              BytesRef bytes = new BytesRef();\n              values.getBytes(i, bytes);\n              if (size != -1 && size != bytes.length) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" returned wrongly sized bytes, was: \" + bytes.length + \" should be: \" + size);\n              }\n              break;\n            case FLOAT_32:\n              assert size == 4;\n              values.getFloat(i);\n              break;\n            case FLOAT_64:\n              assert size == 8;\n              values.getFloat(i);\n              break;\n            case VAR_INTS:\n              assert size == -1;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_16:\n              assert size == 2;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_32:\n              assert size == 4;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_64:\n              assert size == 8;\n              values.getInt(i);\n              break;\n            case FIXED_INTS_8:\n              assert size == 1;\n              values.getInt(i);\n              break;\n            default:\n              throw new IllegalArgumentException(\"Field: \" + fieldInfo.name\n                          + \" - no such DocValues type: \" + fieldInfo.getDocValuesType());\n            }\n          }\n          if (type == DocValues.Type.BYTES_FIXED_SORTED || type == DocValues.Type.BYTES_VAR_SORTED) {\n            \r\n            SortedSource sortedValues = values.asSortedSource();\n            Comparator<BytesRef> comparator = sortedValues.getComparator();\n            int lastOrd = -1;\n            BytesRef lastBytes = new BytesRef();\n            for (int i = 0; i < maxDoc; i++) {\n              int ord = sortedValues.ord(i);\n              if (ord < 0 || ord > maxDoc) {\n                throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord is out of bounds: \" + ord);\n              }\n              BytesRef bytes = new BytesRef();\n              sortedValues.getByOrd(ord, bytes);\n              if (lastOrd != -1) {\n                int ordComp = Integer.signum(new Integer(ord).compareTo(new Integer(lastOrd)));\n                int bytesComp = Integer.signum(comparator.compare(bytes, lastBytes));\n                if (ordComp != bytesComp) {\n                  throw new RuntimeException(\"field: \" + fieldInfo.name + \" ord comparison is wrong: \" + ordComp + \" comparator claims: \" + bytesComp);\n                }\n              }\n              lastOrd = ord;\n              lastBytes = bytes;\n            }\n          }\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1250,"status":"M"}],"commitId":"a2c87cf79d143bdd09e47f0a1af4859d1ea622f5","commitMessage":"@@@LUCENE-3860: factor out a shared CheckIndex.checkDocValues.  used by both testDocValues and testFieldNorms\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1299382 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-11 23:45:52","modifiedFileCount":"1","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-03-11 23:45:52","codes":[{"authorDate":"2012-03-12 00:09:21","commitOrder":4,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-03-12 00:09:21","endLine":678,"groupId":"14778","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0a/67716d80dd8623746fd34420eb35320214607e.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"M"},{"authorDate":"2012-03-11 23:45:52","commitOrder":4,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-03-11 23:45:52","endLine":1280,"groupId":"30332","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoinfo@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b3/30ddd240b9702f6ec8c9dded788dfbb420c672.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1250,"status":"N"}],"commitId":"40a9dbf3ce4042bde81d35ae73efe7f275f4ca8e","commitMessage":"@@@LUCENE-3859: deprecate AtomicReader.hasNorms.  implement via fieldinfos.  make final.  and cleanup/javadoc some related fieldinfos methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1299384 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-12 00:09:21","modifiedFileCount":"17","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-04-08 18:09:19","codes":[{"authorDate":"2012-03-12 00:09:21","commitOrder":5,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-03-12 00:09:21","endLine":678,"groupId":"14778","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0a/67716d80dd8623746fd34420eb35320214607e.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"N"},{"authorDate":"2012-04-08 18:09:19","commitOrder":5,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues InvertedFields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-04-08 18:09:19","endLine":1341,"groupId":"30332","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoinfo@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/5e/769fbbf570c613d661ee32f34492a2113ae5be.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1311,"status":"M"}],"commitId":"c9031ca725c84e7199e3a6ac10deb40bb0b31c5b","commitMessage":"@@@LUCENE-3109: rename Fields/Producer/Consumer to InvertedFields*\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1310969 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-08 18:09:19","modifiedFileCount":"86","status":"M","submitter":"Michael McCandless"},{"authorTime":"2012-04-08 21:38:01","codes":[{"authorDate":"2012-03-12 00:09:21","commitOrder":6,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-03-12 00:09:21","endLine":678,"groupId":"14778","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0a/67716d80dd8623746fd34420eb35320214607e.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"N"},{"authorDate":"2012-04-08 21:38:01","commitOrder":6,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-04-08 21:38:01","endLine":1341,"groupId":"30332","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoinfo@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/36/836842b90ed6c5d74996d43c456a77d50516a8.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues InvertedFields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1311,"status":"M"}],"commitId":"72cc92c9031990f95be7873d444d5db90c2c6cba","commitMessage":"@@@LUCENE-3109: revert\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1310998 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-08 21:38:01","modifiedFileCount":"86","status":"M","submitter":"Michael McCandless"},{"authorTime":"2012-05-29 03:28:10","codes":[{"authorDate":"2012-03-12 00:09:21","commitOrder":7,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-03-12 00:09:21","endLine":678,"groupId":"14778","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0a/67716d80dd8623746fd34420eb35320214607e.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"N"},{"authorDate":"2012-05-29 03:28:10","commitOrder":7,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfoPerCommit info,\n                                               FieldInfos fieldInfos,\n                                               SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-05-29 03:28:10","endLine":1309,"groupId":"30332","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoPerCommitinfo@FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/4e/e5c8776cabc6ce922321cf512c9f9c2870f8b2.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfo info,\n      SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      final FieldInfos fieldInfos = info.getFieldInfos();\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1279,"status":"M"}],"commitId":"e9bb48725216af399d3d3cd7663b53fa63ec5438","commitMessage":"@@@LUCENE-4055: Refactor SegmentInfo and FieldInfo to make them extensible\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1343365 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-05-29 03:28:10","modifiedFileCount":"205","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-05-29 03:28:10","codes":[{"authorDate":"2012-05-31 10:07:11","commitOrder":8,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-05-31 10:07:11","endLine":666,"groupId":"40186","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/7f/94e6ea6621d7b103e228721af90c2835153dd8.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); \r\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); \r\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":636,"status":"M"},{"authorDate":"2012-05-29 03:28:10","commitOrder":8,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfoPerCommit info,\n                                               FieldInfos fieldInfos,\n                                               SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-05-29 03:28:10","endLine":1309,"groupId":"30332","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoPerCommitinfo@FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/4e/e5c8776cabc6ce922321cf512c9f9c2870f8b2.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfoPerCommit info,\n                                               FieldInfos fieldInfos,\n                                               SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1279,"status":"N"}],"commitId":"bc3a3dc5d47af0c00748468b1ae14b4a18854366","commitMessage":"@@@LUCENE-4095: remove deprecations from trunk (just the easy ones for now)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1344531 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-05-31 10:07:11","modifiedFileCount":"218","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-10-10 11:10:12","codes":[{"authorDate":"2012-05-31 10:07:11","commitOrder":9,"curCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2012-05-31 10:07:11","endLine":666,"groupId":"40186","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/7f/94e6ea6621d7b103e228721af90c2835153dd8.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":636,"status":"N"},{"authorDate":"2012-10-10 11:10:12","commitOrder":9,"curCode":"  private Status.DocValuesStatus testDocValues(SegmentInfoPerCommit info,\n                                               FieldInfos fieldInfos,\n                                               SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2012-10-10 11:10:12","endLine":1352,"groupId":"30332","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(SegmentInfoPerCommitinfo@FieldInfosfieldInfos@SegmentReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bf/5df24a0a22f9154f0fb72b721c634e50fa0897.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfoPerCommit info,\n                                               FieldInfos fieldInfos,\n                                               SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: DocValues........\");\n      }\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc Count; Num DocValues Fields \"\n          + status.totalValueFields);\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1323,"status":"M"}],"commitId":"9d2f4e562a24bd90847ea534cbb3362dfe9ffe79","commitMessage":"@@@Make the checkindex output for docvalues consistent and line up so the output is pretty\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1396454 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-10-10 11:10:12","modifiedFileCount":"1","status":"M","submitter":"Robert Muir"},{"authorTime":"2013-02-08 04:48:21","codes":[{"authorDate":"2013-02-08 04:48:21","commitOrder":10,"curCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2013-02-08 04:48:21","endLine":698,"groupId":"13829","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/51cc59488cf7f5c2b39eb769eabd0ed4dcbd16.src","preCode":"  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"},{"authorDate":"2013-02-08 04:48:21","commitOrder":10,"curCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2013-02-08 04:48:21","endLine":1293,"groupId":"5365","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/51cc59488cf7f5c2b39eb769eabd0ed4dcbd16.src","preCode":"  private Status.DocValuesStatus testDocValues(SegmentInfoPerCommit info,\n                                               FieldInfos fieldInfos,\n                                               SegmentReader reader) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          final DocValues docValues = reader.docValues(fieldInfo.name);\n          checkDocValues(docValues, fieldInfo.name, fieldInfo.getDocValuesType(), reader.maxDoc());\n        } else {\n          if (reader.docValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1264,"status":"M"}],"commitId":"a181dc07353975b9fbf8721bf24cc56edf262b96","commitMessage":"@@@LUCENE-4547: DocValues improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1443717 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-02-08 04:48:21","modifiedFileCount":"253","status":"M","submitter":"Robert Muir"},{"authorTime":"2013-02-20 12:29:42","codes":[{"authorDate":"2013-02-08 04:48:21","commitOrder":11,"curCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2013-02-08 04:48:21","endLine":698,"groupId":"13829","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/51cc59488cf7f5c2b39eb769eabd0ed4dcbd16.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"},{"authorDate":"2013-02-20 12:29:42","commitOrder":11,"curCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2013-02-20 12:29:42","endLine":1295,"groupId":"5365","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0e/dadfc9eeae10c0f8b5e6784972fd6d94cd9c70.src","preCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1265,"status":"M"}],"commitId":"b44aa6183484591e8db4a9490b8ce571d40458fe","commitMessage":"@@@LUCENE-4765: Multi-valued docvalues field\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1447999 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-02-20 12:29:42","modifiedFileCount":"57","status":"M","submitter":"Robert Muir"},{"authorTime":"2013-07-25 21:40:12","codes":[{"authorDate":"2013-02-08 04:48:21","commitOrder":12,"curCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2013-02-08 04:48:21","endLine":698,"groupId":"13829","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/51cc59488cf7f5c2b39eb769eabd0ed4dcbd16.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"},{"authorDate":"2013-07-25 21:40:12","commitOrder":12,"curCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2013-07-25 21:40:12","endLine":1298,"groupId":"38519","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/64/c9d171fda8af0b54fef26a037562e1aa38ac9a.src","preCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.docCount + \" total doc count; \" + status.totalValueFields + \" docvalues fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1264,"status":"M"}],"commitId":"213dacd8d99a3347289d020550ceb7ddd9303b07","commitMessage":"@@@LUCENE-5131: CheckIndex is confusing for docvalues fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1506964 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-07-25 21:40:12","modifiedFileCount":"1","status":"M","submitter":"Robert Muir"},{"authorTime":"2013-08-21 05:30:55","codes":[{"authorDate":"2013-02-08 04:48:21","commitOrder":13,"curCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2013-02-08 04:48:21","endLine":698,"groupId":"13829","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/51cc59488cf7f5c2b39eb769eabd0ed4dcbd16.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"},{"authorDate":"2013-08-21 05:30:55","commitOrder":13,"curCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2013-08-21 05:30:55","endLine":1303,"groupId":"38519","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d0/f7bed509e14bb30de7a0ffca923d245a8c6e2a.src","preCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1268,"status":"M"}],"commitId":"39dbc26716009e1d3aefb744de2d8c722a6023a8","commitMessage":"@@@LUCENE-5178: add missing support for docvalues\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1515977 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-08-21 05:30:55","modifiedFileCount":"86","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-06-13 03:40:36","codes":[{"authorDate":"2013-02-08 04:48:21","commitOrder":14,"curCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2013-02-08 04:48:21","endLine":698,"groupId":"13829","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/51cc59488cf7f5c2b39eb769eabd0ed4dcbd16.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"},{"authorDate":"2014-06-13 03:40:36","commitOrder":14,"curCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2014-06-13 03:40:36","endLine":1395,"groupId":"38519","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(AtomicReaderreader@PrintStreaminfoStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/4c/22e58900b0c005f695db0ffc47d25bf067a8b4.src","preCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"M"}],"commitId":"398af4596bd7fd18dcb60143ed1150cdde25f6ac","commitMessage":"@@@LUCENE-5748: Add SORTED_NUMERIC docvalues type\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1602277 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-06-13 03:40:36","modifiedFileCount":"56","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-07-20 20:08:32","codes":[{"authorDate":"2014-07-20 20:08:32","commitOrder":15,"curCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2014-07-20 20:08:32","endLine":740,"groupId":"13829","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(AtomicReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cf/4a64c0e9e23d8eb320ebf8f3979a0a336aef7d.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":708,"status":"M"},{"authorDate":"2014-07-20 20:08:32","commitOrder":15,"curCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2014-07-20 20:08:32","endLine":1436,"groupId":"38519","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(AtomicReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cf/4a64c0e9e23d8eb320ebf8f3979a0a336aef7d.src","preCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream) {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1396,"status":"M"}],"commitId":"80fe3c277f30c275573e4f4a72096b695c0c2dec","commitMessage":"@@@LUCENE-5819: add terms dict and postings format that implement term ordinals\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1612080 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-20 20:08:32","modifiedFileCount":"8","status":"M","submitter":"Michael McCandless"},{"authorTime":"2014-09-24 07:51:55","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":16,"curCode":"  public static Status.FieldNormStatus testFieldNorms(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2014-09-24 07:51:55","endLine":747,"groupId":"13829","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(LeafReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2a/47003755c74ab7765714dde8198f608f5e4a2d.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":715,"status":"M"},{"authorDate":"2014-09-24 07:51:55","commitOrder":16,"curCode":"  public static Status.DocValuesStatus testDocValues(LeafReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2014-09-24 07:51:55","endLine":1444,"groupId":"38519","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(LeafReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2a/47003755c74ab7765714dde8198f608f5e4a2d.src","preCode":"  public static Status.DocValuesStatus testDocValues(AtomicReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"M"}],"commitId":"85bf3181737a34e2d357f0c926d7ae8d07b9ae39","commitMessage":"@@@LUCENE-5569: *AtomicReader/AtomicReaderContext have been renamed to *LeafReader/LeafReaderContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627178 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 07:51:55","modifiedFileCount":"459","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2014-11-03 03:03:11","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":17,"curCode":"  public static Status.FieldNormStatus testFieldNorms(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2014-09-24 07:51:55","endLine":747,"groupId":"13829","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(LeafReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2a/47003755c74ab7765714dde8198f608f5e4a2d.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":715,"status":"N"},{"authorDate":"2014-11-03 03:03:11","commitOrder":17,"curCode":"  public static Status.DocValuesStatus testDocValues(LeafReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2014-11-03 03:03:11","endLine":1568,"groupId":"38519","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(LeafReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/eb/5d31237433b935b06d3da3db4689997f71cea5.src","preCode":"  public static Status.DocValuesStatus testDocValues(LeafReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.hasDocValues()) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1528,"status":"M"}],"commitId":"17ab4645d511401a94a478e2ea5344813d0467c3","commitMessage":"@@@LUCENE-6041: remove FieldInfo.isIndex/hasDocValues sugar APIs\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1636166 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-11-03 03:03:11","modifiedFileCount":"21","status":"M","submitter":"Michael McCandless"},{"authorTime":"2015-02-11 06:54:22","codes":[{"authorDate":"2015-02-11 06:54:22","commitOrder":18,"curCode":"  public static Status.FieldNormStatus testFieldNorms(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2015-02-11 06:54:22","endLine":882,"groupId":"36622","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(LeafReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e8/426c9b2cf63b77aebc0ea02712b7c8e6c77a79.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"M"},{"authorDate":"2015-02-11 06:54:22","commitOrder":18,"curCode":"  public static Status.DocValuesStatus testDocValues(LeafReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2015-02-11 06:54:22","endLine":1603,"groupId":"52774","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(LeafReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e8/426c9b2cf63b77aebc0ea02712b7c8e6c77a79.src","preCode":"  public static Status.DocValuesStatus testDocValues(LeafReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totalValueFields + \" docvalues fields; \"\n                             + status.totalBinaryFields + \" BINARY; \" \n                             + status.totalNumericFields + \" NUMERIC; \"\n                             + status.totalSortedFields + \" SORTED; \"\n                             + status.totalSortedNumericFields + \" SORTED_NUMERIC; \"\n                             + status.totalSortedSetFields + \" SORTED_SET]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1559,"status":"M"}],"commitId":"ff886ebb70ccf627100936977f1cb78bea26ca2f","commitMessage":"@@@LUCENE-6233: speed up CheckIndex when the index has term vectors\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1658831 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-11 06:54:22","modifiedFileCount":"1","status":"M","submitter":"Michael McCandless"},{"authorTime":"2015-03-03 09:18:33","codes":[{"authorDate":"2015-03-03 09:18:33","commitOrder":19,"curCode":"  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, reader.maxDoc(), normsReader.getNorms(info), new Bits.MatchAllBits(reader.maxDoc()));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2015-03-03 09:18:33","endLine":886,"groupId":"13656","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bb/3f624e7e55877d0f2c084ae3e275cf1febf82c.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"M"},{"authorDate":"2015-03-03 09:18:33","commitOrder":19,"curCode":"  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2015-03-03 09:18:33","endLine":1605,"groupId":"40158","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bb/3f624e7e55877d0f2c084ae3e275cf1febf82c.src","preCode":"  public static Status.DocValuesStatus testDocValues(LeafReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"M"}],"commitId":"1510f693034fc23098cd3203c21e6d1b71662542","commitMessage":"@@@LUCENE-6320: speed up checkindex\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1663505 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-03 09:18:33","modifiedFileCount":"3","status":"M","submitter":"Robert Muir"},{"authorTime":"2015-03-03 09:18:33","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":20,"curCode":"  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2016-10-03 03:18:22","endLine":1022,"groupId":"30576","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/27/d7c50cc25a41e9c271854a462e67315dc47609.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, reader.maxDoc(), normsReader.getNorms(info), new Bits.MatchAllBits(reader.maxDoc()));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":989,"status":"M"},{"authorDate":"2015-03-03 09:18:33","commitOrder":20,"curCode":"  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2015-03-03 09:18:33","endLine":1605,"groupId":"40158","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bb/3f624e7e55877d0f2c084ae3e275cf1febf82c.src","preCode":"  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"N"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-04-28 16:58:55","codes":[{"authorDate":"2017-04-28 16:58:55","commitOrder":21,"curCode":"  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2017-04-28 18:17:21","endLine":1028,"groupId":"30576","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e4/48d8199e690b92fd66c37703f44021c8812f07.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":995,"status":"M"},{"authorDate":"2017-04-28 16:58:55","commitOrder":21,"curCode":"  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2017-04-28 18:17:21","endLine":2140,"groupId":"40158","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e4/48d8199e690b92fd66c37703f44021c8812f07.src","preCode":"  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":2100,"status":"M"}],"commitId":"e52d8609949369aebae0297c855936138141c557","commitMessage":"@@@LUCENE-7796: Make IOUtils.reThrow idiom declare Error return type so\ncallers may use it in a way that compiler knows subsequent code is\nunreachable. reThrow is now deprecated in favor of IOUtils.rethrowAlways.\n","date":"2017-04-28 18:17:21","modifiedFileCount":"21","status":"M","submitter":"Dawid Weiss"},{"authorTime":"2017-04-28 16:58:55","codes":[{"authorDate":"2019-03-19 17:53:10","commitOrder":22,"curCode":"  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info), normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","date":"2019-03-19 17:53:10","endLine":1005,"groupId":"105237","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldNorms","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/81/93b5fbe8cfa49a72453fc10ff6b76bc544d8fd.src","preCode":"  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      \r\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"M"},{"authorDate":"2017-04-28 16:58:55","commitOrder":22,"curCode":"  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","date":"2017-04-28 18:17:21","endLine":2140,"groupId":"105237","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValues","params":"(CodecReaderreader@PrintStreaminfoStream@booleanfailFast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e4/48d8199e690b92fd66c37703f44021c8812f07.src","preCode":"  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":2100,"status":"N"}],"commitId":"07f35357939b0ba391c3be86808279138db0de46","commitMessage":"@@@LUCENE-8138: Check that dv producers's next/advance and advanceExact impls are consistent.\n","date":"2019-03-19 17:53:10","modifiedFileCount":"1","status":"M","submitter":"Adrien Grand"}]
