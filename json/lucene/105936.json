[{"authorTime":"2012-02-08 03:59:05","codes":[{"authorDate":"2012-02-08 03:59:05","commitOrder":1,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","date":"2012-02-08 03:59:05","endLine":199,"groupId":"8358","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/02/3a59ef4890abc023770b4a8b3b11c60f23b901.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"},{"authorDate":"2012-02-08 03:59:05","commitOrder":1,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","date":"2012-02-08 03:59:05","endLine":95,"groupId":"23945","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/93/6bdf05498efcf6ab47162e87dd6d3367974d4a.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"}],"commitId":"eb0ab3d392a42c1835f79bcd7f5404bcc50c8e4c","commitMessage":"@@@LUCENE-3753: Restructure the Lucene build system\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1241588 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-08 03:59:05","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2012-02-08 03:59:05","codes":[{"authorDate":"2012-02-28 03:20:08","commitOrder":2,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","date":"2012-02-28 03:20:08","endLine":198,"groupId":"8358","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/81/1cf569fa1c658f6a099bcb00b08b4ef494a845.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2012-02-08 03:59:05","commitOrder":2,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","date":"2012-02-08 03:59:05","endLine":95,"groupId":"23945","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/93/6bdf05498efcf6ab47162e87dd6d3367974d4a.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"}],"commitId":"29ab4d99d62f3c919334132a2ef4bdaaa5fd8084","commitMessage":"@@@LUCENE-3829: improve test coverage of DocValues\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1294286 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-28 03:20:08","modifiedFileCount":"13","status":"M","submitter":"Michael McCandless"},{"authorTime":"2012-03-12 08:15:49","codes":[{"authorDate":"2012-02-28 03:20:08","commitOrder":3,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","date":"2012-02-28 03:20:08","endLine":198,"groupId":"8358","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/81/1cf569fa1c658f6a099bcb00b08b4ef494a845.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"},{"authorDate":"2012-03-12 08:15:49","commitOrder":3,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","date":"2012-03-12 08:15:49","endLine":95,"groupId":"23945","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a8/a4fc3239a3ab43d0dea938cfc1d39fe2d3264c.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"b075b7466c481b15cdc8667605c358d96f7a01ab","commitMessage":"@@@LUCENE-3863: rename DocValues.type() to DocValues.getType()\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1299495 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-12 08:15:49","modifiedFileCount":"24","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-04-15 22:41:44","codes":[{"authorDate":"2012-04-15 22:41:44","commitOrder":4,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","date":"2012-04-15 22:41:44","endLine":200,"groupId":"45362","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bc/870fb648022af3bf1a1fab3db738be5e302bb1.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2012-04-15 22:41:44","commitOrder":4,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","date":"2012-04-15 22:41:44","endLine":95,"groupId":"37799","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/71/5e1f9a32df2daa3329af10a12e0cde4dcb9a40.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"cf85aab1a06cb2b12e4778c1dd7c1368a6225b91","commitMessage":"@@@LUCENE-3808: Switch LuceneTestCaseRunner to RandomizedRunner. Enforce Random sharing contracts. Enforce thread leaks.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1326351 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-15 22:41:44","modifiedFileCount":"501","status":"M","submitter":"Dawid Weiss"},{"authorTime":"2012-04-16 12:01:35","codes":[{"authorDate":"2012-04-16 12:01:35","commitOrder":5,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2012-04-16 12:01:35","endLine":201,"groupId":"45362","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/33/228aa8d08b97f25928d31d4a844691282e2366.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2012-04-16 12:01:35","commitOrder":5,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2012-04-16 12:01:35","endLine":96,"groupId":"37799","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/9ac5c209281820266630b9b998fdc1c654b1e5.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"2b071864927fc10f4e8eb0e6bf0c500c357eab0d","commitMessage":"@@@fix more linefiledocs leaks\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1326474 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-16 12:01:35","modifiedFileCount":"7","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-04-16 12:01:35","codes":[{"authorDate":"2012-05-30 10:07:31","commitOrder":6,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2012-05-30 10:07:31","endLine":204,"groupId":"37850","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6d/ee50c7f2a4ca36496440b194fc67a3a3fdbb82.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2012-04-16 12:01:35","commitOrder":6,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2012-04-16 12:01:35","endLine":96,"groupId":"37799","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/9ac5c209281820266630b9b998fdc1c654b1e5.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"}],"commitId":"54be02eef2e42205136f22372ecd642995126ce0","commitMessage":"@@@LUCENE-4086: remove 3.x index support from trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1344076 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-05-30 10:07:31","modifiedFileCount":"51","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-06-01 01:32:11","codes":[{"authorDate":"2012-05-30 10:07:31","commitOrder":7,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2012-05-30 10:07:31","endLine":204,"groupId":"37850","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6d/ee50c7f2a4ca36496440b194fc67a3a3fdbb82.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2012-06-01 01:32:11","commitOrder":7,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2012-06-01 01:32:11","endLine":83,"groupId":"37799","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d7/9643d0274c4a18d51f73157ac5c89feed13a37.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    \r\n    dir.setCheckIndexOnClose(false); \r\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"168e73bca7817c08590203fd57fbb9ebfe513575","commitMessage":"@@@LUCENE-4096: impossible to checkindex if you use norms other than byte[]\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1344826 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-01 01:32:11","modifiedFileCount":"2","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-06-11 01:42:19","codes":[{"authorDate":"2012-06-11 01:42:19","commitOrder":8,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2012-06-11 01:42:19","endLine":203,"groupId":"12100","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6b/05328654066292d35b762f6f4ea0130bd48bb3.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2012-06-11 01:42:19","commitOrder":8,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2012-06-11 01:42:19","endLine":85,"groupId":"37799","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/81/fb29613c251cf96366fc63850fa7ed7eca37b5.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"dba50b31e7543e3861e44de6e0ff6e7f79ec1be4","commitMessage":"@@@LUCENE-4101: add ctors create stored or not-stored variants of indexed fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1348630 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-11 01:42:19","modifiedFileCount":"254","status":"M","submitter":"Michael McCandless"},{"authorTime":"2012-06-11 01:42:19","codes":[{"authorDate":"2012-06-29 00:39:25","commitOrder":9,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2012-06-29 00:39:25","endLine":202,"groupId":"12100","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/18/6bc7a572acfd2abc80a2062ac4ae9422f6bd79.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2012-06-11 01:42:19","commitOrder":9,"curCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2012-06-11 01:42:19","endLine":85,"groupId":"37799","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/81/fb29613c251cf96366fc63850fa7ed7eca37b5.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"fd16190940d7495e985f44ce7504562c8bbc91e6","commitMessage":"@@@LUCENE-4172: clean up redundant throws clauses\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1355069 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-29 00:39:25","modifiedFileCount":"402","status":"M","submitter":"Steven Rowe"},{"authorTime":"2012-07-21 06:09:26","codes":[{"authorDate":"2012-06-29 00:39:25","commitOrder":10,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2012-06-29 00:39:25","endLine":202,"groupId":"12100","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/18/6bc7a572acfd2abc80a2062ac4ae9422f6bd79.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2012-07-21 06:09:26","commitOrder":10,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2012-07-21 06:09:26","endLine":84,"groupId":"37799","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3e/aaa1389aac2a6cf5c748b95ddf415cfa1a2f3e.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"22b5c84800df161022dfcf888ba93708215cefb0","commitMessage":"@@@LUCENE-4243: MockDirectoryWrapper synchronizes too much\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1363971 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-21 06:09:26","modifiedFileCount":"35","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-09-02 22:35:35","codes":[{"authorDate":"2012-06-29 00:39:25","commitOrder":11,"curCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2012-06-29 00:39:25","endLine":202,"groupId":"12100","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir@booleanwriteNorms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/18/6bc7a572acfd2abc80a2062ac4ae9422f6bd79.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2012-09-02 22:35:35","commitOrder":11,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2012-09-02 22:35:35","endLine":84,"groupId":"37799","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cd/69b647a7ccf99a29c94f058d76f8520274f9d6.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"bde79d433c9aad46e62c457a613a41be78513a02","commitMessage":"@@@LUCENE-3312:  The API of oal.document was restructured to differentiate between stored documents and indexed documents\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1379982 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-02 22:35:35","modifiedFileCount":"176","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2013-02-08 04:48:21","codes":[{"authorDate":"2013-02-08 04:48:21","commitOrder":12,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2013-02-08 04:48:21","endLine":140,"groupId":"61696","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bf/7f13c40b24965365bd3b052852db3425987201.src","preCode":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random().nextInt(255) : 0;\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2013-02-08 04:48:21","commitOrder":12,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2013-02-08 04:48:21","endLine":77,"groupId":"54823","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ee/c412c593c86964b87d691f83be18c0eb9e7138.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"a181dc07353975b9fbf8721bf24cc56edf262b96","commitMessage":"@@@LUCENE-4547: DocValues improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1443717 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-02-08 04:48:21","modifiedFileCount":"253","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-03-08 21:12:47","codes":[{"authorDate":"2013-02-08 04:48:21","commitOrder":13,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2013-02-08 04:48:21","endLine":140,"groupId":"61696","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bf/7f13c40b24965365bd3b052852db3425987201.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2014-03-08 21:12:47","commitOrder":13,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2014-03-08 21:12:47","endLine":81,"groupId":"54823","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/aa/eeca302dd7726dc1332b426ee562f3e5c08246.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"df17e3951d9968536bdf04f39ddc4e4bbeb05cdb","commitMessage":"@@@don't try to index megaterms\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1575538 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-08 21:12:47","modifiedFileCount":"17","status":"M","submitter":"Michael McCandless"},{"authorTime":"2014-03-08 21:12:47","codes":[{"authorDate":"2014-03-28 17:04:27","commitOrder":14,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2014-03-28 17:04:27","endLine":154,"groupId":"61696","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3e/365e70c416262eda083103260a24aa692d63be.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2014-03-08 21:12:47","commitOrder":14,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2014-03-08 21:12:47","endLine":81,"groupId":"54823","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/aa/eeca302dd7726dc1332b426ee562f3e5c08246.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"4215cfc27f114b21732893452a056f225d9ef1f1","commitMessage":"@@@don't try to index megaterms.  take 2\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1582641 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-28 17:04:27","modifiedFileCount":"2","status":"M","submitter":"Michael McCandless"},{"authorTime":"2014-04-08 23:34:50","codes":[{"authorDate":"2014-04-08 23:34:50","commitOrder":15,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n","date":"2014-04-08 23:34:50","endLine":154,"groupId":"61696","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/c0/b84ea6e432c9fe64e190546628a4ec70e5e6d6.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2014-04-08 23:34:50","commitOrder":15,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2014-04-08 23:34:50","endLine":81,"groupId":"54823","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/db/eed659f6461eea132d62cf4034c773913bd688.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"8559eafd99e5b569d4ad866e98f410fb4868fd4c","commitMessage":"@@@LUCENE-4246: fix IW.close to just close.  even on exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1585759 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-08 23:34:50","modifiedFileCount":"403","status":"M","submitter":"Michael McCandless"},{"authorTime":"2014-07-31 00:20:24","codes":[{"authorDate":"2014-07-31 00:20:24","commitOrder":16,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n","date":"2014-07-31 00:20:24","endLine":153,"groupId":"61696","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/61/d3e64c11b93504425b2daeddff7905bd6e3891.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2014-07-31 00:20:24","commitOrder":16,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2014-07-31 00:20:24","endLine":80,"groupId":"54823","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d0/9822711466935dfcf960918f6ebd51a48205d5.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"3f4b2b472f2c76d72cae94fd4747b103c973d707","commitMessage":"@@@LUCENE-5859: remove Version param from LuceneTestCase.newIndexWriterConfig.  the grand sum of 2 tests making use of it can use the 3-arg version and reduce the noise everywhere else\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1614698 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-31 00:20:24","modifiedFileCount":"244","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-08-10 02:54:35","codes":[{"authorDate":"2014-08-10 02:54:35","commitOrder":17,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2014-08-10 02:54:35","endLine":153,"groupId":"61696","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/fa/9e0acdc0eaff697bff758fc624cbdbcf507164.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2014-08-10 02:54:35","commitOrder":17,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2014-08-10 02:54:35","endLine":80,"groupId":"54823","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0f/95286df16796f027ff6135314a31db0bd2723d.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"872bd9145cd9504fc16b318f7ea0a666d9429103","commitMessage":"@@@LUCENE-5871: Remove Version from IndexWriterConfig\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1617004 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-08-10 02:54:35","modifiedFileCount":"450","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2014-09-24 07:51:55","codes":[{"authorDate":"2014-08-10 02:54:35","commitOrder":18,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2014-08-10 02:54:35","endLine":153,"groupId":"61696","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/fa/9e0acdc0eaff697bff758fc624cbdbcf507164.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"},{"authorDate":"2014-09-24 07:51:55","commitOrder":18,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2014-09-24 07:51:55","endLine":80,"groupId":"54823","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/fe/324f95935d2b116b7f92aa5228e46c565f1cc5.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"85bf3181737a34e2d357f0c926d7ae8d07b9ae39","commitMessage":"@@@LUCENE-5569: *AtomicReader/AtomicReaderContext have been renamed to *LeafReader/LeafReaderContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627178 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 07:51:55","modifiedFileCount":"459","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2016-01-18 03:54:50","codes":[{"authorDate":"2014-08-10 02:54:35","commitOrder":19,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2014-08-10 02:54:35","endLine":153,"groupId":"61696","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/fa/9e0acdc0eaff697bff758fc624cbdbcf507164.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"},{"authorDate":"2016-01-18 03:54:50","commitOrder":19,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2016-01-18 03:54:50","endLine":80,"groupId":"54823","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/1ffc8f6fe47814b162e2b6f5a280002dde37b7.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"24c46305bd8f335c3d0e501a33dd3da82732c49e","commitMessage":"@@@LUCENE-6971: remove StorableField.  StoredDocument\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1725117 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-18 03:54:50","modifiedFileCount":"167","status":"M","submitter":"Michael McCandless"},{"authorTime":"2016-01-18 03:54:50","codes":[{"authorDate":"2016-03-09 04:21:37","commitOrder":20,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2016-03-09 04:21:37","endLine":153,"groupId":"42486","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/56/2cefb77740485958573b17a33dbb6332e55854.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2016-01-18 03:54:50","commitOrder":20,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2016-01-18 03:54:50","endLine":80,"groupId":"54823","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/1ffc8f6fe47814b162e2b6f5a280002dde37b7.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"62b3aaa526d6b883e95cf899d0fc89da11fc5e93","commitMessage":"@@@improve testing for sparse points\n","date":"2016-03-09 04:21:37","modifiedFileCount":"13","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-03-11 05:08:59","codes":[{"authorDate":"2016-03-09 04:21:37","commitOrder":21,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2016-03-09 04:21:37","endLine":153,"groupId":"42486","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/56/2cefb77740485958573b17a33dbb6332e55854.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"},{"authorDate":"2016-03-11 05:08:59","commitOrder":21,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2016-03-11 05:08:59","endLine":80,"groupId":"47129","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/c5/13093c42dc28c6be7b4209aef660892d01f95e.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"7523ca116276fbcf03bfa630c859c4a58f77add4","commitMessage":"@@@LUCENE-7086: move SlowCompositeReaderWrapper to misc module.  and throw clear exc if you try to use in with points\n\nSquashed commits:\n\ncommit e26b065c71388407bc6725256ca43d7bb30dee29\nAuthor: Mike McCandless <mikemccand@apache.org>\nDate:   Thu Mar 10 14:16:45 2016 -0500\n\n    simplify the checking for incoming points\n\ncommit b7254376dcb398c7739aab4544118bb4526961d5\nMerge: 8ec82a0 d35d569\nAuthor: Mike McCandless <mikemccand@apache.org>\nDate:   Thu Mar 10 14:05:24 2016 -0500\n\n    Merge branch 'master' into slow_wrapper\n\n    Conflicts:\n    \tlucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java\n    \tlucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheReopen.java\n\ncommit 8ec82a0d9a0dd946d96da20962bb2ea95758edbe\nAuthor: Mike McCandless <mikemccand@apache.org>\nDate:   Thu Mar 10 13:56:25 2016 -0500\n\n    LUCENE-7086: move SlowCompositeReaderWrapper to misc module\n","date":"2016-03-11 05:08:59","modifiedFileCount":"85","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-03-09 04:21:37","commitOrder":22,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2016-03-09 04:21:37","endLine":153,"groupId":"42486","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/56/2cefb77740485958573b17a33dbb6332e55854.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"},{"authorDate":"2016-10-03 03:18:22","commitOrder":22,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, Float.intBitsToFloat((int)norms.longValue()), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2016-10-03 03:18:22","endLine":81,"groupId":"47129","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/65/310cf71d6416a6214cedba6ee15b882e4cfb4e.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-03-03 02:18:16","codes":[{"authorDate":"2017-03-03 02:18:16","commitOrder":23,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(byteTestField, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2017-03-03 02:18:16","endLine":157,"groupId":"42486","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/36/3f57e78351bcab53f46ad890b5544127de7250.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2017-03-03 02:18:16","commitOrder":23,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(floatTestField, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(floatTestField).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2017-03-03 02:18:16","endLine":83,"groupId":"1871","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/931400a2e8fd1d6789d158671357773be84308.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, Float.intBitsToFloat((int)norms.longValue()), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"8ed2b764ed4d4d5203b5df1e16fdc1ffd640322c","commitMessage":"@@@LUCENE-6819: Remove index-time boosts.\n","date":"2017-03-03 02:18:16","modifiedFileCount":"113","status":"M","submitter":"Adrien Grand"},{"authorTime":"2017-03-31 22:22:45","codes":[{"authorDate":"2017-03-31 22:22:45","commitOrder":24,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2017-03-31 23:28:21","endLine":157,"groupId":"42486","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/64/c064996bed04e68d39eb821a4236db4ac56d50.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(byteTestField, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2017-03-31 22:22:45","commitOrder":24,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2017-03-31 23:28:21","endLine":83,"groupId":"1871","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a8/111921ff68df258bebf38c3f3d49cc51403611.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(floatTestField, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(floatTestField).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"e80643e5a77297ba7ee29c7297e37af6ffb73ac2","commitMessage":"@@@LUCENE-7753: Make fields static when possible.\n","date":"2017-03-31 23:28:21","modifiedFileCount":"40","status":"M","submitter":"Adrien Grand"},{"authorTime":"2017-03-31 22:22:45","codes":[{"authorDate":"2018-05-09 16:04:18","commitOrder":25,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    \r\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2018-05-09 16:04:18","endLine":95,"groupId":"42486","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/82/ac27d1cad713bf557535a6a76232e3f4c047d2.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2017-03-31 22:22:45","commitOrder":25,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2017-03-31 23:28:21","endLine":83,"groupId":"1871","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a8/111921ff68df258bebf38c3f3d49cc51403611.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"6262b7757b843dd3bb41e86e334c832cec72d161","commitMessage":"@@@[TEST] Fix TestNorms to ensure that max token lenght is at least 3 to have predictable norms\n","date":"2018-05-09 16:04:18","modifiedFileCount":"1","status":"M","submitter":"Simon Willnauer"},{"authorTime":"2019-07-10 15:09:07","codes":[{"authorDate":"2018-05-09 16:04:18","commitOrder":26,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    \r\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","date":"2018-05-09 16:04:18","endLine":95,"groupId":"42486","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/82/ac27d1cad713bf557535a6a76232e3f4c047d2.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    \r\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2019-07-10 15:09:07","commitOrder":26,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 2, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2019-07-10 15:09:54","endLine":83,"groupId":"1871","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3b/3e982c5dfa88f5657ea18d7642430af38f5509.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"fb30ded6436a577af86e5db201eed01170102a97","commitMessage":"@@@Ensure tokens have at least 2 chars.  otherwise norms are incorrect.\n","date":"2019-07-10 15:09:54","modifiedFileCount":"1","status":"M","submitter":"Adrien Grand"},{"authorTime":"2019-07-10 15:09:07","codes":[{"authorDate":"2020-01-31 20:57:34","commitOrder":27,"curCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    \r\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n    }\n    writer.commit();\n    writer.close();\n  }\n","date":"2020-01-31 20:57:34","endLine":85,"groupId":"105936","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"buildIndex","params":"(Directorydir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a8/db06f2783c0f541f5ca1032c617932f96557c8.src","preCode":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    \r\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-07-10 15:09:07","commitOrder":27,"curCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 2, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","date":"2019-07-10 15:09:54","endLine":83,"groupId":"105936","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3b/3e982c5dfa88f5657ea18d7642430af38f5509.src","preCode":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 2, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"9ceaff913ee9a8818e5a889a95c04d114634a007","commitMessage":"@@@LUCENE-9195: more slow tests fixes\n","date":"2020-01-31 20:57:34","modifiedFileCount":"36","status":"M","submitter":"Robert Muir"}]
