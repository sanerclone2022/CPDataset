[{"authorTime":"2012-09-02 22:35:35","codes":[{"authorDate":"2013-04-19 00:10:46","commitOrder":6,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2013-04-19 00:10:46","endLine":122,"groupId":"26476","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0b/b8abb5751c2040f813c8588f5dc6a1f5ded502.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"MB"},{"authorDate":"2012-09-02 22:35:35","commitOrder":6,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2012-09-02 22:35:35","endLine":154,"groupId":"26470","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f2/c98e7bc171943bcb075b23d0e0fd837a97fc66.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"}],"commitId":"dd0b36d053da597778387d02f005427c73cf022f","commitMessage":"@@@make sure the test is run on a separate atomic readers\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1469397 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-04-19 00:10:46","modifiedFileCount":"1","status":"M","submitter":"Simon Willnauer"},{"authorTime":"2013-09-06 18:07:12","codes":[{"authorDate":"2013-09-06 18:07:12","commitOrder":7,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2013-09-06 18:07:12","endLine":122,"groupId":"26476","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/76/f25f4df89532984fc7f9acb526e22189e66c82.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2013-09-06 18:07:12","commitOrder":7,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2013-09-06 18:07:12","endLine":214,"groupId":"26470","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/76/f25f4df89532984fc7f9acb526e22189e66c82.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"da16af75194ed20d14edba6464c7c102c32d5399","commitMessage":"@@@LUCENE-5101: Make it easier to plugin different bitset implementations to CachingWrapperFilter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1520525 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-09-06 18:07:12","modifiedFileCount":"7","status":"M","submitter":"Adrien Grand"},{"authorTime":"2014-01-29 00:59:06","codes":[{"authorDate":"2013-09-06 18:07:12","commitOrder":8,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2013-09-06 18:07:12","endLine":122,"groupId":"26476","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/76/f25f4df89532984fc7f9acb526e22189e66c82.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2014-01-29 00:59:06","commitOrder":8,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2014-01-29 00:59:06","endLine":214,"groupId":"26470","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b7/88ea0f2bc6f73adb613fffc4799385b997e979.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"fd35f2609a324d164e4b0f0f76f99e3aefe69815","commitMessage":"@@@LUCENE-5409: fix ToParentBlockJoinQuery.rewrite to correctly preserve the origChildQuery after more than one iteration of rewrite\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1562124 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-29 00:59:06","modifiedFileCount":"5","status":"M","submitter":"Michael McCandless"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":9,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2014-03-12 22:39:17","endLine":122,"groupId":"26476","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/14/7dcb773e0fc89630645760f8ba8a06407f6a03.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2014-03-12 22:39:17","commitOrder":9,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2014-03-12 22:39:17","endLine":214,"groupId":"26470","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/14/7dcb773e0fc89630645760f8ba8a06407f6a03.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-04-08 23:34:50","codes":[{"authorDate":"2014-04-08 23:34:50","commitOrder":10,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2014-04-08 23:34:50","endLine":122,"groupId":"26476","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cb/21fd36e1537d76a33d510ebc147d82fd52165d.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2014-04-08 23:34:50","commitOrder":10,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2014-04-08 23:34:50","endLine":214,"groupId":"26470","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cb/21fd36e1537d76a33d510ebc147d82fd52165d.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"8559eafd99e5b569d4ad866e98f410fb4868fd4c","commitMessage":"@@@LUCENE-4246: fix IW.close to just close.  even on exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1585759 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-08 23:34:50","modifiedFileCount":"403","status":"M","submitter":"Michael McCandless"},{"authorTime":"2014-04-08 23:34:50","codes":[{"authorDate":"2014-05-01 02:13:04","commitOrder":11,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2014-05-01 02:13:04","endLine":122,"groupId":"26476","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/84/9e0d5d2f2b15dcb6cedb5f28d1b76888f52b8d.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2014-04-08 23:34:50","commitOrder":11,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2014-04-08 23:34:50","endLine":214,"groupId":"26470","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cb/21fd36e1537d76a33d510ebc147d82fd52165d.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"b8c02f6267f3f520713b1ceaee7828dcf5ef4260","commitMessage":"@@@LUCENE-5633: replace NoMergePolicy.COMPOUND/NO_COMPOUND by NoMergePolicy.INSTANCE\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1591432 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-01 02:13:04","modifiedFileCount":"29","status":"M","submitter":"Shai Erera"},{"authorTime":"2014-08-10 02:54:35","codes":[{"authorDate":"2014-08-10 02:54:35","commitOrder":12,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2014-08-10 02:54:35","endLine":124,"groupId":"26476","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/68/d68565576d64cb740bb577915a2d7a0c8c2784.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2014-08-10 02:54:35","commitOrder":12,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2014-08-10 02:54:35","endLine":216,"groupId":"26470","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/68/d68565576d64cb740bb577915a2d7a0c8c2784.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"872bd9145cd9504fc16b318f7ea0a666d9429103","commitMessage":"@@@LUCENE-5871: Remove Version from IndexWriterConfig\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1617004 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-08-10 02:54:35","modifiedFileCount":"450","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2014-10-31 00:06:17","codes":[{"authorDate":"2014-10-31 00:06:17","commitOrder":13,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2014-10-31 00:06:17","endLine":122,"groupId":"26476","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/df/763de61645ffa661d64faa93e0d0c242c5866a.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2014-10-31 00:06:17","commitOrder":13,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2014-10-31 00:06:17","endLine":214,"groupId":"26470","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/df/763de61645ffa661d64faa93e0d0c242c5866a.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"347e4447ebf138333b14d9aaaeac90e228f46b6e","commitMessage":"@@@LUCENE-6025: Add BitSet.prevSetBit and cut over the join module to this API.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1635531 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-10-31 00:06:17","modifiedFileCount":"21","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-02-06 23:54:53","codes":[{"authorDate":"2014-10-31 00:06:17","commitOrder":14,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2014-10-31 00:06:17","endLine":122,"groupId":"26476","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/df/763de61645ffa661d64faa93e0d0c242c5866a.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2015-02-06 23:54:53","commitOrder":14,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2015-02-06 23:54:53","endLine":255,"groupId":"26470","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0a/3dcfb908439b11691706d377b9da0269836994.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"e4436aa7fec0ea789598ac20fae7ed75edfbf7e1","commitMessage":"@@@LUCENE-6220: Move needsScores to Query.createWeight.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1657874 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-06 23:54:53","modifiedFileCount":"72","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-02-25 01:43:10","codes":[{"authorDate":"2014-10-31 00:06:17","commitOrder":15,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2014-10-31 00:06:17","endLine":122,"groupId":"26476","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/df/763de61645ffa661d64faa93e0d0c242c5866a.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2015-02-25 01:43:10","commitOrder":15,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2015-02-25 01:43:10","endLine":256,"groupId":"26470","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/65/263dfa6786109de60b99311bb164e8a7e01fc0.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"2cd3fb807daf7a82d71c2ffeb44c75e2bd0814fc","commitMessage":"@@@LUCENE-6286: Removed IndexSearcher methods that take a Filter object.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1662059 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-25 01:43:10","modifiedFileCount":"123","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-06-18 15:14:05","codes":[{"authorDate":"2015-06-18 15:14:05","commitOrder":16,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2015-06-18 15:14:05","endLine":145,"groupId":"26476","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b2/3e057815b59d2f09fbc5f018f09f59e3e1e7ba.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2015-06-18 15:14:05","commitOrder":16,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery.build(),\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2015-06-18 15:14:05","endLine":237,"groupId":"17073","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b2/3e057815b59d2f09fbc5f018f09f59e3e1e7ba.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"4aafacfbef423a25a349dd8c6e5e6178ac1ba334","commitMessage":"@@@LUCENE-6570: Make BooleanQuery immutable.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686145 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-18 15:14:05","modifiedFileCount":"184","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-06-18 20:29:56","codes":[{"authorDate":"2015-06-18 15:14:05","commitOrder":17,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2015-06-18 15:14:05","endLine":145,"groupId":"26476","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b2/3e057815b59d2f09fbc5f018f09f59e3e1e7ba.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2015-06-18 20:29:56","commitOrder":17,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2015-06-18 20:29:56","endLine":236,"groupId":"17073","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b3/7554a07344b3dbb385c72c0013a6c02a501e4a.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    assertEquals(0, s.search(new FilteredQuery(fullChildQuery.build(),\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\")))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"35c0ff0ec64d2428059318aca830425367541896","commitMessage":"@@@LUCENE-6583: Remove FilteredQuery.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686203 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-18 20:29:56","modifiedFileCount":"50","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-07-06 23:48:28","codes":[{"authorDate":"2015-07-06 23:48:28","commitOrder":18,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2015-07-06 23:48:28","endLine":166,"groupId":"0","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f8/c259be034c6e2a85ae175573eb3663acfee8e2.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2015-07-06 23:48:28","commitOrder":18,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2015-07-06 23:48:28","endLine":257,"groupId":"17073","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f8/c259be034c6e2a85ae175573eb3663acfee8e2.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"2919e13adc72a4ea5b7bbd7d43320f5d7e371177","commitMessage":"@@@LUCENE-6649: Remove dependency of lucene/join on Filter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689432 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-06 23:48:28","modifiedFileCount":"12","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-07-07 20:18:44","codes":[{"authorDate":"2015-07-07 20:18:44","commitOrder":19,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2015-07-07 20:18:44","endLine":160,"groupId":"45212","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/5b/ead24879d2dd84c0dc461d7e30cb02ec5ecb1a.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); \r\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2015-07-07 20:18:44","commitOrder":19,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2015-07-07 20:18:44","endLine":252,"groupId":"17073","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/5b/ead24879d2dd84c0dc461d7e30cb02ec5ecb1a.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"cf0a0bf33f8dfb1fa6df7e29305c8e471a13920b","commitMessage":"@@@LUCENE-6589: Add CheckJoinIndex to validate index structure for joins.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689637 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-07 20:18:44","modifiedFileCount":"2","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-12-12 05:13:41","codes":[{"authorDate":"2015-12-12 05:13:41","commitOrder":20,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2015-12-12 05:13:41","endLine":162,"groupId":"45212","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/59/8d4d7a390bd474859446b720d7e9cfe072613a.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2015-12-12 05:13:41","commitOrder":20,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2015-12-12 05:13:41","endLine":254,"groupId":"17073","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/59/8d4d7a390bd474859446b720d7e9cfe072613a.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"7da175b0b6b4185ee6b5df852e59b93d9a9a1c86","commitMessage":"@@@LUCENE-6917: rename/deprecate numeric classes in favor of dimensional values\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719562 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-12 05:13:41","modifiedFileCount":"125","status":"M","submitter":"Michael McCandless"},{"authorTime":"2016-01-18 03:54:50","codes":[{"authorDate":"2016-01-18 03:54:50","commitOrder":21,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2016-01-18 03:54:50","endLine":161,"groupId":"45212","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3f/b8e20ccfd3b9b28c32d1ed9d2069cb46cbda45.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2016-01-18 03:54:50","commitOrder":21,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2016-01-18 03:54:50","endLine":253,"groupId":"17073","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3f/b8e20ccfd3b9b28c32d1ed9d2069cb46cbda45.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"24c46305bd8f335c3d0e501a33dd3da82732c49e","commitMessage":"@@@LUCENE-6971: remove StorableField.  StoredDocument\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1725117 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-18 03:54:50","modifiedFileCount":"167","status":"M","submitter":"Michael McCandless"},{"authorTime":"2016-01-18 03:54:50","codes":[{"authorDate":"2016-01-18 08:43:44","commitOrder":22,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2016-01-18 08:43:44","endLine":161,"groupId":"48774","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/c4/f6626ec7692a25aada7c726579eb4c74adec84.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2016-01-18 03:54:50","commitOrder":22,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2016-01-18 03:54:50","endLine":253,"groupId":"17073","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/3f/b8e20ccfd3b9b28c32d1ed9d2069cb46cbda45.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"}],"commitId":"40d290ee8440196913ceac36d10cd8a7e49d7d79","commitMessage":"@@@LUCENE-6980: default applyDeletes to true when opening NRT readers\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1725160 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-18 08:43:44","modifiedFileCount":"75","status":"M","submitter":"Michael McCandless"},{"authorTime":"2016-03-08 21:40:39","codes":[{"authorDate":"2016-03-08 21:40:39","commitOrder":23,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2016-03-08 21:41:24","endLine":156,"groupId":"44367","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b5/f2038a0dcf8612c71a1c80cd8027063510e16c.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2016-03-08 21:40:39","commitOrder":23,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2016-03-08 21:41:24","endLine":248,"groupId":"12333","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b5/f2038a0dcf8612c71a1c80cd8027063510e16c.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"4cc9ad44df9ce26aadcb8d9ef739e303d32d6db6","commitMessage":"@@@LUCENE-7075: remove legacy numericutils usage from test.\n","date":"2016-03-08 21:41:24","modifiedFileCount":"2","status":"M","submitter":"Robert Muir"},{"authorTime":"2016-03-10 03:10:10","codes":[{"authorDate":"2016-03-08 21:40:39","commitOrder":24,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2016-03-08 21:41:24","endLine":156,"groupId":"44367","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b5/f2038a0dcf8612c71a1c80cd8027063510e16c.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"},{"authorDate":"2016-03-10 03:10:10","commitOrder":24,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","date":"2016-03-10 03:11:04","endLine":248,"groupId":"12333","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/01/a81351511fae22a7675514d77cad2e5fc38c07.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n    \n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"dee8b5e40a3d37da180630c1b2839c1836f97c4d","commitMessage":"@@@don't use slow composite wrapper in these tests\n","date":"2016-03-10 03:11:04","modifiedFileCount":"2","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-03-08 21:40:39","commitOrder":25,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2016-03-08 21:41:24","endLine":156,"groupId":"44367","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/b5/f2038a0dcf8612c71a1c80cd8027063510e16c.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"},{"authorDate":"2016-05-26 01:42:11","commitOrder":25,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":283,"groupId":"12333","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ab/6aa5886d38ce7f24a432504946f2b4a81f8492.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-01-30 04:36:48","codes":[{"authorDate":"2017-01-30 04:36:48","commitOrder":26,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2017-01-30 04:56:13","endLine":172,"groupId":"12420","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f5/08f84e2fd3e6c91d1718fd9f7f8f270358a8ff.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2017-01-30 04:36:48","commitOrder":26,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    \r\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n","date":"2017-01-30 04:56:13","endLine":320,"groupId":"12421","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f5/08f84e2fd3e6c91d1718fd9f7f8f270358a8ff.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    s.search(fullQuery.build(), c);\n\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n\n    \r\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"e327efb676e04f72c39e902f08c0d11497b4c57d","commitMessage":"@@@LUCENE-6959: Removed ToParentBlockJoinCollector in favour of ParentChildrenBlockJoinQuery.  that can return the matching children documents per parent document.\nThis query should be executed for each matching parent document after the main query has been executed.\n","date":"2017-01-30 04:56:13","modifiedFileCount":"5","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2018-07-17 20:30:23","codes":[{"authorDate":"2017-01-30 04:36:48","commitOrder":27,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2017-01-30 04:56:13","endLine":172,"groupId":"12420","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f5/08f84e2fd3e6c91d1718fd9f7f8f270358a8ff.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2018-07-17 20:30:23","commitOrder":27,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    \r\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.count(fullChildQuery.build()));\n\n    r.close();\n    dir.close();\n  }\n","date":"2018-07-17 20:32:02","endLine":325,"groupId":"12421","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/06/548220e853260aae35a648a9e25679fd8670f9.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    \r\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.search(fullChildQuery.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"d730c8b214bd8b659aa92011e7a8d455af535382","commitMessage":"@@@LUCENE-8060: Remove usage of TopDocs#totalHits that should really be IndexSearcher#count.\n\nMany tests were written before we introduced IndexSearcher#count and used\n`searcher.search(query.  1).totalHits` to get the number of matches of a query\nrather than `searcher.count(query)`.\n","date":"2018-07-17 20:32:02","modifiedFileCount":"20","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-30 16:08:16","codes":[{"authorDate":"2018-07-30 16:08:16","commitOrder":28,"curCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits.value);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":177,"groupId":"107229","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyChildFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bb/f73c0c9247952e92953b6eb1bafd710421373a.src","preCode":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    \r\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2018-07-30 16:08:16","commitOrder":28,"curCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    \r\n    assertEquals(1, topDocs.totalHits.value);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits.value);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.count(fullChildQuery.build()));\n\n    r.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":325,"groupId":"107229","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bb/f73c0c9247952e92953b6eb1bafd710421373a.src","preCode":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    \r\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    \r\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    \r\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    \r\n    \r\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    \r\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    CheckHits.checkHitCollector(random(), fullQuery.build(), \"country\", s, new int[] {2});\n\n    TopDocs topDocs = s.search(fullQuery.build(), 1);\n\n    \r\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n\n    \r\n\n    \r\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    BooleanQuery.Builder fullChildQuery = new BooleanQuery.Builder();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery.build(), Occur.MUST));\n\n    \r\n    TopDocs hits = s.search(fullChildQuery.build(), 10);\n    assertEquals(1, hits.totalHits);\n    Document childDoc = s.doc(hits.scoreDocs[0].doc);\n    \r\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, childDoc.getField(\"year\").numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    \r\n    fullChildQuery.add(new TermQuery(new Term(\"skill\", \"foosball\")), Occur.FILTER);\n    assertEquals(0, s.count(fullChildQuery.build()));\n\n    r.close();\n    dir.close();\n  }\n","realPath":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"9ca053712af0795cbd0d0d9f2d862f24d9e547c3","commitMessage":"@@@LUCENE-8430: TopDocs.totalHits may now be a lower bound of the hit count.\n","date":"2018-07-30 22:38:05","modifiedFileCount":"178","status":"M","submitter":"Adrien Grand"}]
