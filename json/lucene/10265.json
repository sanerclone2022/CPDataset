[{"authorTime":"2012-04-17 21:36:19","codes":[{"authorDate":"2012-04-17 21:36:19","commitOrder":1,"curCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","date":"2012-04-17 21:36:19","endLine":107,"groupId":"56948","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/7b/1d49b8d33f9afbe6532bc5e286390f87d4126f.src","preCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2012-04-17 21:36:19","commitOrder":1,"curCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","date":"2012-04-17 21:36:19","endLine":140,"groupId":"56948","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPosIncrementAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/7b/1d49b8d33f9afbe6532bc5e286390f87d4126f.src","preCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"e8e4245d9b36123446546ff15967ac95429ea2b0","commitMessage":"@@@LUCENE-3965: consolidate all api modules and fix packaging for 4.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1327094 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-17 21:36:19","modifiedFileCount":"1","status":"B","submitter":"Robert Muir"},{"authorTime":"2012-07-29 22:38:37","codes":[{"authorDate":"2012-04-17 21:36:19","commitOrder":2,"curCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","date":"2012-04-17 21:36:19","endLine":107,"groupId":"56948","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/7b/1d49b8d33f9afbe6532bc5e286390f87d4126f.src","preCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2012-07-29 22:38:37","commitOrder":2,"curCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"? quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"? quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","date":"2012-07-29 22:38:37","endLine":140,"groupId":"56948","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPosIncrementAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ce/a26f91b5aee3d9f7bd086d48e40eabe51d35cf.src","preCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"2b10f1617dbae024c0387e4bdfdcd11dc2592b23","commitMessage":"@@@LUCENE-4109: BooleanQueries are not parsed correctly with the flexible queryparser\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1366854 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-29 22:38:37","modifiedFileCount":"12","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-07-29 22:38:37","codes":[{"authorDate":"2014-11-29 07:05:14","commitOrder":3,"curCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","date":"2014-11-29 07:05:14","endLine":107,"groupId":"56948","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/21/33e6eaba35b7ec29a506c841ab7a56df849dfa.src","preCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setDefaultPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setDefaultPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2012-07-29 22:38:37","commitOrder":3,"curCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"? quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"? quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","date":"2012-07-29 22:38:37","endLine":140,"groupId":"56948","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPosIncrementAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ce/a26f91b5aee3d9f7bd086d48e40eabe51d35cf.src","preCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"? quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"? quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"46e8f846c5a5304e8d1c6ab56d24ac548a68231f","commitMessage":"@@@LUCENE-6080: remove some deprecations from trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1642374 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-11-29 07:05:14","modifiedFileCount":"20","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-07-29 22:38:37","codes":[{"authorDate":"2015-10-13 00:04:28","commitOrder":4,"curCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(\\\"(multi multi2) foo\\\")^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","date":"2015-10-13 00:04:28","endLine":107,"groupId":"10265","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/19/02df260e89bef7743fa4c86d201f6ef8934726.src","preCode":"  public void testMultiAnalyzer() throws QueryNodeException {\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MultiAnalyzer());\n\n    \r\n    assertEquals(\"foo\", qp.parse(\"foo\", \"\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\", \"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\", \"\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\", \"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\", \"\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\", \"\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\", \"\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\", \"\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\", \"\")\n        .toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\", \"\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\n        \"field:\\\"multi foo\\\"\", \"\").toString());\n\n    \r\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\", \"\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\", \"\").toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\", \"\")\n        .toString());\n\n    \r\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\", \"\")\n        .toString());\n\n    \r\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\",\n        \"\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\", \"\").toString());\n    qp.setPhraseSlop(0);\n\n    \r\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\", \"\").toString());\n\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2012-07-29 22:38:37","commitOrder":4,"curCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"? quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"? quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","date":"2012-07-29 22:38:37","endLine":140,"groupId":"10265","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPosIncrementAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ce/a26f91b5aee3d9f7bd086d48e40eabe51d35cf.src","preCode":"  public void testPosIncrementAnalyzer() throws QueryNodeException {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new PosIncrementAnalyzer());\n\n    assertEquals(\"quick brown\", qp.parse(\"the quick brown\", \"\").toString());\n    assertEquals(\"\\\"? quick brown\\\"\", qp.parse(\"\\\"the quick brown\\\"\", \"\")\n        .toString());\n    assertEquals(\"quick brown fox\", qp.parse(\"the quick brown fox\", \"\")\n        .toString());\n    assertEquals(\"\\\"? quick brown fox\\\"\", qp.parse(\"\\\"the quick brown fox\\\"\", \"\")\n        .toString());\n  }\n","realPath":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"876181ff1bcd3aa178b719e83547ecd2c922a2dd","commitMessage":"@@@LUCENE-6834: Removed BoostQuery.toString()'s hack with parenthesis.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1708146 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-10-13 00:04:28","modifiedFileCount":"14","status":"M","submitter":"Adrien Grand"}]
