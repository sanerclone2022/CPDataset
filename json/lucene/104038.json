[{"authorTime":"2021-03-09 15:11:59","codes":[{"authorDate":"2021-02-24 18:15:11","commitOrder":2,"curCode":"  public Lucene50CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","date":"2021-02-24 18:15:11","endLine":91,"groupId":"40235","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"Lucene50CompressingTermVectorsFormat","params":"(StringformatName@StringsegmentSuffix@CompressionModecompressionMode@intchunkSize@intblockSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/62/8b21d7834645b6be929a3df069be85ffcd0bea.src","preCode":"  public Lucene50CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","realPath":"lucene/backward-codecs/src/java/org/apache/lucene/backward_codecs/lucene50/compressing/Lucene50CompressingTermVectorsFormat.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"NB"},{"authorDate":"2021-03-09 15:11:59","commitOrder":2,"curCode":"  public Lucene90CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","date":"2021-03-09 15:11:59","endLine":86,"groupId":"40235","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"Lucene90CompressingTermVectorsFormat","params":"(StringformatName@StringsegmentSuffix@CompressionModecompressionMode@intchunkSize@intblockSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/96/4259ebcc06d05613774c0497b753a34f063d00.src","preCode":"  public Lucene90CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/codecs/lucene90/compressing/Lucene90CompressingTermVectorsFormat.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"144ef2a0c054b54ee533f5618f36651931825f7d","commitMessage":"@@@LUCENE-9705: Create Lucene90StoredFieldsFormat (#2444)\n\n","date":"2021-03-09 15:11:59","modifiedFileCount":"16","status":"M","submitter":"Ignacio Vera"},{"authorTime":"2021-04-07 02:18:48","codes":[{"authorDate":"2021-02-24 18:15:11","commitOrder":3,"curCode":"  public Lucene50CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","date":"2021-02-24 18:15:11","endLine":91,"groupId":"40235","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"Lucene50CompressingTermVectorsFormat","params":"(StringformatName@StringsegmentSuffix@CompressionModecompressionMode@intchunkSize@intblockSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/62/8b21d7834645b6be929a3df069be85ffcd0bea.src","preCode":"  public Lucene50CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","realPath":"lucene/backward-codecs/src/java/org/apache/lucene/backward_codecs/lucene50/compressing/Lucene50CompressingTermVectorsFormat.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"},{"authorDate":"2021-04-07 02:18:48","commitOrder":3,"curCode":"  public Lucene90CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int maxDocsPerChunk,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","date":"2021-04-07 02:18:48","endLine":90,"groupId":"17716","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"Lucene90CompressingTermVectorsFormat","params":"(StringformatName@StringsegmentSuffix@CompressionModecompressionMode@intchunkSize@intmaxDocsPerChunk@intblockSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ec/9b6803c8e6c7574797d8b4ef0c3e944ab150a0.src","preCode":"  public Lucene90CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/codecs/lucene90/compressing/Lucene90CompressingTermVectorsFormat.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"be94a667f2091b2c0fad570f9e726197d466767b","commitMessage":"@@@LUCENE-9827: avoid wasteful recompression for small segments (#28)\n\nRequire that the segment has enough dirty documents to create a clean\nchunk before recompressing during merge.  there must be at least maxChunkSize.\n\nThis prevents wasteful recompression with small flushes (e.g. every\ndocument): we ensure recompression achieves some \"permanent\" progress.\n\nExpose maxDocsPerChunk as a parameter for Term vectors too.  matching the\nstored fields format. This allows for easy testing.\n\nIncrement numDirtyDocs for partially optimized merges:\nIf segment N needs recompression.  we have to flush any buffered docs\nbefore bulk-copying segment N+1. Don't just increment numDirtyChunks. \nalso make sure numDirtyDocs is incremented.  too.\nThis doesn't have a performance impact.  and is unrelated to tooDirty()\nimprovements.  but it is easier to reason about things with correct\nstatistics in the index.\n\nFurther tuning of how dirtiness is measured: for simplification just use percentage\nof dirty chunks.\n\nCo-authored-by: Adrien Grand <jpountz@gmail.com>","date":"2021-04-07 02:18:48","modifiedFileCount":"10","status":"M","submitter":"Robert Muir"},{"authorTime":"2021-04-07 02:18:48","codes":[{"authorDate":"2021-05-20 20:49:43","commitOrder":4,"curCode":"  public Lucene50CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int maxDocsPerChunk,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","date":"2021-05-20 20:49:43","endLine":96,"groupId":"104038","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"Lucene50CompressingTermVectorsFormat","params":"(StringformatName@StringsegmentSuffix@CompressionModecompressionMode@intchunkSize@intmaxDocsPerChunk@intblockSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f9/6605dc7861a7b28e800bba3c1387c0103def89.src","preCode":"  public Lucene50CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","realPath":"lucene/backward-codecs/src/java/org/apache/lucene/backward_codecs/lucene50/compressing/Lucene50CompressingTermVectorsFormat.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-04-07 02:18:48","commitOrder":4,"curCode":"  public Lucene90CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int maxDocsPerChunk,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","date":"2021-04-07 02:18:48","endLine":90,"groupId":"104038","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"Lucene90CompressingTermVectorsFormat","params":"(StringformatName@StringsegmentSuffix@CompressionModecompressionMode@intchunkSize@intmaxDocsPerChunk@intblockSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ec/9b6803c8e6c7574797d8b4ef0c3e944ab150a0.src","preCode":"  public Lucene90CompressingTermVectorsFormat(\n      String formatName,\n      String segmentSuffix,\n      CompressionMode compressionMode,\n      int chunkSize,\n      int maxDocsPerChunk,\n      int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/codecs/lucene90/compressing/Lucene90CompressingTermVectorsFormat.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"a12260eb950c760b96b6692f5c6ec66eaff36622","commitMessage":"@@@LUCENE-9827: Update backward codec in Lucene 9.0 (#147)\n\nWe need to update the reading logic of the backward codec in Lucene 9 \nfor LUCENE-9827 and LUCENE-9935 as we have backported them to Lucene 8.\n\nRelates apache/lucene-solr#2495\nRelates apache/lucene-solr#2494","date":"2021-05-20 20:49:43","modifiedFileCount":"8","status":"M","submitter":"Nhat Nguyen"}]
