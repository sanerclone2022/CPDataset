[{"authorTime":"2013-08-21 05:30:55","codes":[{"authorDate":"2013-08-21 05:30:55","commitOrder":1,"curCode":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv, Bits docsWithField) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n      if (docsWithField.get(i) == false && scratch.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + scratch + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2013-08-21 05:30:55","endLine":1314,"groupId":"49857","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBinaryDocValues","params":"(StringfieldName@AtomicReaderreader@BinaryDocValuesdv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d0/f7bed509e14bb30de7a0ffca923d245a8c6e2a.src","preCode":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv, Bits docsWithField) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n      if (docsWithField.get(i) == false && scratch.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + scratch + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"B"},{"authorDate":"2013-08-21 05:30:55","commitOrder":1,"curCode":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2013-08-21 05:30:55","endLine":1417,"groupId":"3907","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkNumericDocValues","params":"(StringfieldName@AtomicReaderreader@NumericDocValuesndv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d0/f7bed509e14bb30de7a0ffca923d245a8c6e2a.src","preCode":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1410,"status":"B"}],"commitId":"39dbc26716009e1d3aefb744de2d8c722a6023a8","commitMessage":"@@@LUCENE-5178: add missing support for docvalues\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1515977 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-08-21 05:30:55","modifiedFileCount":"86","status":"B","submitter":"Robert Muir"},{"authorTime":"2013-08-21 05:30:55","codes":[{"authorDate":"2014-06-05 23:54:49","commitOrder":2,"curCode":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      final BytesRef term = dv.get(i);\n      assert term.isValid();\n      if (docsWithField.get(i) == false && term.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + term + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2014-06-05 23:54:49","endLine":1402,"groupId":"42049","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBinaryDocValues","params":"(StringfieldName@AtomicReaderreader@BinaryDocValuesdv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/8f/5dd472c696deee0c6a25626e4563d499eb546b.src","preCode":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv, Bits docsWithField) {\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      assert scratch.isValid();\n      if (docsWithField.get(i) == false && scratch.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + scratch + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1394,"status":"M"},{"authorDate":"2013-08-21 05:30:55","commitOrder":2,"curCode":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2013-08-21 05:30:55","endLine":1417,"groupId":"3907","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkNumericDocValues","params":"(StringfieldName@AtomicReaderreader@NumericDocValuesndv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d0/f7bed509e14bb30de7a0ffca923d245a8c6e2a.src","preCode":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1410,"status":"N"}],"commitId":"8f267c8560cac15d140c5097dfd6392c4270d3d2","commitMessage":"@@@LUCENE-5703: BinaryDocValues producers don't allocate or copy bytes on each access anymore\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1600688 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-06-05 23:54:49","modifiedFileCount":"75","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-09-24 07:51:55","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":3,"curCode":"  private static void checkBinaryDocValues(String fieldName, LeafReader reader, BinaryDocValues dv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      final BytesRef term = dv.get(i);\n      assert term.isValid();\n      if (docsWithField.get(i) == false && term.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + term + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2014-09-24 07:51:55","endLine":1454,"groupId":"42049","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBinaryDocValues","params":"(StringfieldName@LeafReaderreader@BinaryDocValuesdv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2a/47003755c74ab7765714dde8198f608f5e4a2d.src","preCode":"  private static void checkBinaryDocValues(String fieldName, AtomicReader reader, BinaryDocValues dv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      final BytesRef term = dv.get(i);\n      assert term.isValid();\n      if (docsWithField.get(i) == false && term.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + term + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1446,"status":"M"},{"authorDate":"2014-09-24 07:51:55","commitOrder":3,"curCode":"  private static void checkNumericDocValues(String fieldName, LeafReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2014-09-24 07:51:55","endLine":1597,"groupId":"3907","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkNumericDocValues","params":"(StringfieldName@LeafReaderreader@NumericDocValuesndv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2a/47003755c74ab7765714dde8198f608f5e4a2d.src","preCode":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1590,"status":"M"}],"commitId":"85bf3181737a34e2d357f0c926d7ae8d07b9ae39","commitMessage":"@@@LUCENE-5569: *AtomicReader/AtomicReaderContext have been renamed to *LeafReader/LeafReaderContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627178 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 07:51:55","modifiedFileCount":"459","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2015-03-03 09:18:33","codes":[{"authorDate":"2015-03-03 09:18:33","commitOrder":4,"curCode":"  private static void checkBinaryDocValues(String fieldName, int maxDoc, BinaryDocValues dv, Bits docsWithField) {\n    for (int i = 0; i < maxDoc; i++) {\n      final BytesRef term = dv.get(i);\n      assert term.isValid();\n      if (docsWithField.get(i) == false && term.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + term + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2015-03-03 09:18:33","endLine":1615,"groupId":"42049","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBinaryDocValues","params":"(StringfieldName@intmaxDoc@BinaryDocValuesdv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bb/3f624e7e55877d0f2c084ae3e275cf1febf82c.src","preCode":"  private static void checkBinaryDocValues(String fieldName, LeafReader reader, BinaryDocValues dv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      final BytesRef term = dv.get(i);\n      assert term.isValid();\n      if (docsWithField.get(i) == false && term.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + term + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1607,"status":"M"},{"authorDate":"2015-03-03 09:18:33","commitOrder":4,"curCode":"  private static void checkNumericDocValues(String fieldName, int maxDoc, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < maxDoc; i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","date":"2015-03-03 09:18:33","endLine":1758,"groupId":"3907","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkNumericDocValues","params":"(StringfieldName@intmaxDoc@NumericDocValuesndv@BitsdocsWithField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bb/3f624e7e55877d0f2c084ae3e275cf1febf82c.src","preCode":"  private static void checkNumericDocValues(String fieldName, LeafReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":1751,"status":"M"}],"commitId":"1510f693034fc23098cd3203c21e6d1b71662542","commitMessage":"@@@LUCENE-6320: speed up checkindex\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1663505 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-03 09:18:33","modifiedFileCount":"3","status":"M","submitter":"Robert Muir"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":5,"curCode":"  private static void checkBinaryDocValues(String fieldName, int maxDoc, BinaryDocValues bdv) throws IOException {\n    int doc;\n    if (bdv.docID() != -1) {\n      throw new RuntimeException(\"binary dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + bdv.docID());\n    }\n    \r\n    \r\n    while ((doc = bdv.nextDoc()) != NO_MORE_DOCS) {\n      BytesRef value = bdv.binaryValue();\n      value.isValid();\n    }\n  }\n","date":"2016-10-03 03:18:22","endLine":2073,"groupId":"53635","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBinaryDocValues","params":"(StringfieldName@intmaxDoc@BinaryDocValuesbdv)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/27/d7c50cc25a41e9c271854a462e67315dc47609.src","preCode":"  private static void checkBinaryDocValues(String fieldName, int maxDoc, BinaryDocValues dv, Bits docsWithField) {\n    for (int i = 0; i < maxDoc; i++) {\n      final BytesRef term = dv.get(i);\n      assert term.isValid();\n      if (docsWithField.get(i) == false && term.length > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has value=\" + term + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":2062,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":5,"curCode":"  private static void checkNumericDocValues(String fieldName, NumericDocValues ndv) throws IOException {\n    int doc;\n    if (ndv.docID() != -1) {\n      throw new RuntimeException(\"dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + ndv.docID());\n    }\n    \r\n    \r\n    while ((doc = ndv.nextDoc()) != NO_MORE_DOCS) {\n      ndv.longValue();\n    }\n  }\n","date":"2016-10-03 03:18:22","endLine":2195,"groupId":"53635","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkNumericDocValues","params":"(StringfieldName@NumericDocValuesndv)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/27/d7c50cc25a41e9c271854a462e67315dc47609.src","preCode":"  private static void checkNumericDocValues(String fieldName, int maxDoc, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < maxDoc; i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":2185,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-03-19 17:53:10","codes":[{"authorDate":"2019-03-19 17:53:10","commitOrder":6,"curCode":"  private static void checkBinaryDocValues(String fieldName, int maxDoc, BinaryDocValues bdv, BinaryDocValues bdv2) throws IOException {\n    if (bdv.docID() != -1) {\n      throw new RuntimeException(\"binary dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + bdv.docID());\n    }\n    \r\n    for (int doc = bdv.nextDoc(); doc != NO_MORE_DOCS; doc = bdv.nextDoc()) {\n      BytesRef value = bdv.binaryValue();\n      value.isValid();\n\n      if (bdv2.advanceExact(doc) == false) {\n        throw new RuntimeException(\"advanceExact did not find matching doc ID: \" + doc);\n      }\n      BytesRef value2 = bdv2.binaryValue();\n      if (value.equals(value2) == false) {\n        throw new RuntimeException(\"nextDoc and advanceExact report different values: \" + value + \" != \" + value2);\n      }\n    }\n  }\n","date":"2019-03-19 17:53:10","endLine":2332,"groupId":"21187","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBinaryDocValues","params":"(StringfieldName@intmaxDoc@BinaryDocValuesbdv@BinaryDocValuesbdv2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/81/93b5fbe8cfa49a72453fc10ff6b76bc544d8fd.src","preCode":"  private static void checkBinaryDocValues(String fieldName, int maxDoc, BinaryDocValues bdv) throws IOException {\n    int doc;\n    if (bdv.docID() != -1) {\n      throw new RuntimeException(\"binary dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + bdv.docID());\n    }\n    \r\n    while ((doc = bdv.nextDoc()) != NO_MORE_DOCS) {\n      BytesRef value = bdv.binaryValue();\n      value.isValid();\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":2315,"status":"M"},{"authorDate":"2019-03-19 17:53:10","commitOrder":6,"curCode":"  private static void checkNumericDocValues(String fieldName, NumericDocValues ndv, NumericDocValues ndv2) throws IOException {\n    if (ndv.docID() != -1) {\n      throw new RuntimeException(\"dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + ndv.docID());\n    }\n    \r\n    for (int doc = ndv.nextDoc(); doc != NO_MORE_DOCS; doc = ndv.nextDoc()) {\n      long value = ndv.longValue();\n\n      if (ndv2.advanceExact(doc) == false) {\n        throw new RuntimeException(\"advanceExact did not find matching doc ID: \" + doc);\n      }\n      long value2 = ndv2.longValue();\n      if (value != value2) {\n        throw new RuntimeException(\"advanceExact reports different value: \" + value + \" != \" + value2);\n      }\n    }\n  }\n","date":"2019-03-19 17:53:10","endLine":2482,"groupId":"25228","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"checkNumericDocValues","params":"(StringfieldName@NumericDocValuesndv@NumericDocValuesndv2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/81/93b5fbe8cfa49a72453fc10ff6b76bc544d8fd.src","preCode":"  private static void checkNumericDocValues(String fieldName, NumericDocValues ndv) throws IOException {\n    int doc;\n    if (ndv.docID() != -1) {\n      throw new RuntimeException(\"dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + ndv.docID());\n    }\n    \r\n    while ((doc = ndv.nextDoc()) != NO_MORE_DOCS) {\n      ndv.longValue();\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":2466,"status":"M"}],"commitId":"07f35357939b0ba391c3be86808279138db0de46","commitMessage":"@@@LUCENE-8138: Check that dv producers's next/advance and advanceExact impls are consistent.\n","date":"2019-03-19 17:53:10","modifiedFileCount":"1","status":"M","submitter":"Adrien Grand"},{"authorTime":"2021-09-01 10:24:14","codes":[{"authorDate":"2021-09-01 10:24:14","commitOrder":7,"curCode":"  private static void checkBinaryDocValues(\n      String fieldName, int maxDoc, BinaryDocValues bdv, BinaryDocValues bdv2) throws IOException {\n    if (bdv.docID() != -1) {\n      throw new CheckIndexException(\n          \"binary dv iterator for field: \"\n              + fieldName\n              + \" should start at docID=-1, but got \"\n              + bdv.docID());\n    }\n    \r\n    for (int doc = bdv.nextDoc(); doc != NO_MORE_DOCS; doc = bdv.nextDoc()) {\n      BytesRef value = bdv.binaryValue();\n      value.isValid();\n\n      if (bdv2.advanceExact(doc) == false) {\n        throw new CheckIndexException(\"advanceExact did not find matching doc ID: \" + doc);\n      }\n      BytesRef value2 = bdv2.binaryValue();\n      if (value.equals(value2) == false) {\n        throw new CheckIndexException(\n            \"nextDoc and advanceExact report different values: \" + value + \" != \" + value2);\n      }\n    }\n  }\n","date":"2021-09-01 10:24:14","endLine":3227,"groupId":"105238","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBinaryDocValues","params":"(StringfieldName@intmaxDoc@BinaryDocValuesbdv@BinaryDocValuesbdv2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f3/fc7684900556671150519bb807c802e5c86210.src","preCode":"  private static void checkBinaryDocValues(\n      String fieldName, int maxDoc, BinaryDocValues bdv, BinaryDocValues bdv2) throws IOException {\n    if (bdv.docID() != -1) {\n      throw new RuntimeException(\n          \"binary dv iterator for field: \"\n              + fieldName\n              + \" should start at docID=-1, but got \"\n              + bdv.docID());\n    }\n    \r\n    for (int doc = bdv.nextDoc(); doc != NO_MORE_DOCS; doc = bdv.nextDoc()) {\n      BytesRef value = bdv.binaryValue();\n      value.isValid();\n\n      if (bdv2.advanceExact(doc) == false) {\n        throw new RuntimeException(\"advanceExact did not find matching doc ID: \" + doc);\n      }\n      BytesRef value2 = bdv2.binaryValue();\n      if (value.equals(value2) == false) {\n        throw new RuntimeException(\n            \"nextDoc and advanceExact report different values: \" + value + \" != \" + value2);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":3204,"status":"M"},{"authorDate":"2021-09-01 10:24:14","commitOrder":7,"curCode":"  private static void checkNumericDocValues(\n      String fieldName, NumericDocValues ndv, NumericDocValues ndv2) throws IOException {\n    if (ndv.docID() != -1) {\n      throw new CheckIndexException(\n          \"dv iterator for field: \"\n              + fieldName\n              + \" should start at docID=-1, but got \"\n              + ndv.docID());\n    }\n    \r\n    for (int doc = ndv.nextDoc(); doc != NO_MORE_DOCS; doc = ndv.nextDoc()) {\n      long value = ndv.longValue();\n\n      if (ndv2.advanceExact(doc) == false) {\n        throw new CheckIndexException(\"advanceExact did not find matching doc ID: \" + doc);\n      }\n      long value2 = ndv2.longValue();\n      if (value != value2) {\n        throw new CheckIndexException(\n            \"advanceExact reports different value: \" + value + \" != \" + value2);\n      }\n    }\n  }\n","date":"2021-09-01 10:24:14","endLine":3434,"groupId":"105238","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"checkNumericDocValues","params":"(StringfieldName@NumericDocValuesndv@NumericDocValuesndv2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f3/fc7684900556671150519bb807c802e5c86210.src","preCode":"  private static void checkNumericDocValues(\n      String fieldName, NumericDocValues ndv, NumericDocValues ndv2) throws IOException {\n    if (ndv.docID() != -1) {\n      throw new RuntimeException(\n          \"dv iterator for field: \"\n              + fieldName\n              + \" should start at docID=-1, but got \"\n              + ndv.docID());\n    }\n    \r\n    for (int doc = ndv.nextDoc(); doc != NO_MORE_DOCS; doc = ndv.nextDoc()) {\n      long value = ndv.longValue();\n\n      if (ndv2.advanceExact(doc) == false) {\n        throw new RuntimeException(\"advanceExact did not find matching doc ID: \" + doc);\n      }\n      long value2 = ndv2.longValue();\n      if (value != value2) {\n        throw new RuntimeException(\n            \"advanceExact reports different value: \" + value + \" != \" + value2);\n      }\n    }\n  }\n","realPath":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":3412,"status":"M"}],"commitId":"424192e1704664dc0ebc55109feaad5990b945cb","commitMessage":"@@@LUCENE-9662: CheckIndex should be concurrent  - parallelizing index check across segments (#128)\n\n","date":"2021-09-01 10:24:14","modifiedFileCount":"9","status":"M","submitter":"zacharymorn"}]
