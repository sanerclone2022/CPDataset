[{"authorTime":"2013-11-06 03:41:28","codes":[{"authorDate":"2013-10-02 02:14:00","commitOrder":6,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(arr.get(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n","date":"2013-10-02 02:14:00","endLine":123,"groupId":"2310","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/a6/ca74ea47ef653ec9e779e34a3946e14425e2b3.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(arr.get(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"NB"},{"authorDate":"2013-11-06 03:41:28","commitOrder":6,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = arr.get(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr.get(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n    };\n  }\n","date":"2013-11-06 03:41:28","endLine":202,"groupId":"2310","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cd/83c9440524870c4a4c187fec0ce9c6df09849e.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = arr.get(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr.get(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"a9f8bf654c2a338c709e1d385758474f3fa83e84","commitMessage":"@@@SOLR-5084: added enum field type to Solr\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1539111 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-11-06 03:41:28","modifiedFileCount":"3","status":"M","submitter":"Erick Erickson"},{"authorTime":"2014-05-17 00:39:56","codes":[{"authorDate":"2014-05-17 00:39:56","commitOrder":7,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2014-05-17 00:39:56","endLine":92,"groupId":"3496","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/96/59cc29dc61971170c7bd1c9d798822e55e2b3a.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n      \n      @Override\n      public float floatVal(int doc) {\n        return (float)arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(arr.get(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n      \n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2014-05-17 00:39:56","commitOrder":7,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2014-05-17 00:39:56","endLine":174,"groupId":"28252","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bd/8f7fd18aebb57b16b5db5b1bfc310a5d65c73a.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = arr.get(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr.get(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"e2ba693a6ee11127897a25de1dbb7549ebe6ea3a","commitMessage":"@@@LUCENE-5666: Add UninvertingReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1595259 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-17 00:39:56","modifiedFileCount":"155","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-09-24 07:51:55","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":8,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":89,"groupId":"3496","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6d/1414d201d60372d84a977d6b7b948b04bb1c84.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2014-09-24 07:51:55","commitOrder":8,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":173,"groupId":"28252","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/59/da29d98a11b5bcbd35c162d3fb4a2dbe2a044b.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"85bf3181737a34e2d357f0c926d7ae8d07b9ae39","commitMessage":"@@@LUCENE-5569: *AtomicReader/AtomicReaderContext have been renamed to *LeafReader/LeafReaderContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627178 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 07:51:55","modifiedFileCount":"459","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2015-08-07 01:47:24","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":9,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":89,"groupId":"3496","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6d/1414d201d60372d84a977d6b7b948b04bb1c84.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2015-08-07 01:47:24","commitOrder":9,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matches(int doc) {\n            int val = intVal(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2015-08-07 01:47:24","endLine":173,"groupId":"28252","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0c/2289851ea79e960f5f87cced3864d9a9a9cac8.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"13f8ab93a9777e662c111b279bbddcacbcfbde30","commitMessage":"@@@LUCENE-6720: new FunctionRangeQuery wrapper around ValueSourceScorer.\nAnd ValueSourceScorer improvements.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1694543 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-07 01:47:24","modifiedFileCount":"11","status":"M","submitter":"David Wayne Smiley"},{"authorTime":"2016-03-18 04:58:27","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":10,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":89,"groupId":"3496","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6d/1414d201d60372d84a977d6b7b948b04bb1c84.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2016-03-18 04:58:27","commitOrder":10,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","date":"2016-03-18 04:58:27","endLine":170,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d0/f42a55e089f2a98860036d95e16f04b744ab2d.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matches(int doc) {\n            int val = intVal(doc);\n            \r\n            \r\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"5ea86b14c36bc38366888a208368ac241d254baf","commitMessage":"@@@SOLR-8867: fix frange/FunctionValues.getRangeScorer to not match missing values.  getRangeScorer refactored to take LeafReaderContext\n","date":"2016-03-18 04:58:27","modifiedFileCount":"13","status":"M","submitter":"yonik"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":11,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":112,"groupId":"36427","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/28/87e037c102a75efa9332c2d6933d7f4e278744.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n    \n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":11,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":187,"groupId":"29968","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/26/67660f95a9158b80fc577fdbfb52ca576cad02.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-02-07 02:44:09","commitOrder":12,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2017-02-07 02:44:09","endLine":110,"groupId":"36427","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/8d/2ab7fe965c74f94f32df6f87ecc3985f0ddd65.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":12,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":187,"groupId":"29968","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/26/67660f95a9158b80fc577fdbfb52ca576cad02.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"}],"commitId":"7f13105fbe0023771b581c0423df7eaa6a76335e","commitMessage":"@@@LUCENE-7673: Add MultiValued[Int/Long/Float/Double]FieldSource for SortedNumericDocValues\n","date":"2017-02-07 02:44:09","modifiedFileCount":"9","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2018-09-04 20:24:32","codes":[{"authorDate":"2017-02-07 02:44:09","commitOrder":13,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2017-02-07 02:44:09","endLine":110,"groupId":"36427","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/8d/2ab7fe965c74f94f32df6f87ecc3985f0ddd65.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2018-09-04 20:24:32","commitOrder":13,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2018-09-07 18:41:47","endLine":188,"groupId":"29968","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/21/dbfab049392e49a744de66529e995b2e2623ed.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"66c671ea80f81596dad6d2e7745328f31f530cb8","commitMessage":"@@@LUCENE-8483: Scorer cannot have a null Weight\n","date":"2018-09-07 18:41:47","modifiedFileCount":"37","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-06-12 19:25:31","codes":[{"authorDate":"2020-06-12 19:25:31","commitOrder":14,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-12 19:25:31","endLine":110,"groupId":"36427","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/e0def563a7ac64b9c621891ade8865d79afd68.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-06-12 19:25:31","commitOrder":14,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-12 19:25:31","endLine":188,"groupId":"29968","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d5/75277d7282ff03c0893fbe7dfbb49c2ee52fa6.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"26075fc1dc06766a9d2af8bd5dd14243c0463a6b","commitMessage":"@@@LUCENE-9394: fix and suppress warnings (#1563)\n\n* LUCENE-9394: fix and suppress warnings in lucene/*\n* Change type of ValuesSource context from raw Map to Map<Object.  Object>","date":"2020-06-12 19:25:31","modifiedFileCount":"120","status":"M","submitter":"Michael Sokolov"},{"authorTime":"2021-03-23 23:09:24","codes":[{"authorDate":"2020-06-12 19:25:31","commitOrder":15,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-12 19:25:31","endLine":110,"groupId":"36427","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/e0def563a7ac64b9c621891ade8865d79afd68.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2021-03-23 23:09:24","commitOrder":15,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext)\n      throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\n              \"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(\n          Weight weight,\n          LeafReaderContext readerContext,\n          String lowerVal,\n          String upperVal,\n          boolean includeLower,\n          boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2021-03-23 23:09:24","endLine":197,"groupId":"29968","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/01/a3723f411bde680f45942782a1315a6d42597b.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext)\n      throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\n              \"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(\n          Weight weight,\n          LeafReaderContext readerContext,\n          String lowerVal,\n          String upperVal,\n          boolean includeLower,\n          boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"20dba278bbfc4fec8b53c8371eae982e3fa24b39","commitMessage":"@@@LUCENE-9856: fail precommit on unused local variables (#34)\n\nEnable ecj unused local variable.  private instance and method detection. Allow SuppressWarnings(\"unused\") to disable unused checks (e.g. for generated code or very special tests). Fix gradlew regenerate for python 3.9 SuppressWarnings(\"unused\") for generated javacc and jflex code. Enable a few other easy ecj checks such as Deprecated annotation.  hashcode/equals.  equals across different types.\n\nCo-authored-by: Mike McCandless <mikemccand@apache.org>","date":"2021-03-23 23:09:24","modifiedFileCount":"209","status":"M","submitter":"Robert Muir"},{"authorTime":"2021-03-24 00:46:36","codes":[{"authorDate":"2020-06-12 19:25:31","commitOrder":16,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-12 19:25:31","endLine":110,"groupId":"36427","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/e0def563a7ac64b9c621891ade8865d79afd68.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2021-03-24 00:46:36","commitOrder":16,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext)\n      throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\n              \"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(\n          Weight weight,\n          LeafReaderContext readerContext,\n          String lowerVal,\n          String upperVal,\n          boolean includeLower,\n          boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2021-03-24 00:46:36","endLine":199,"groupId":"29968","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/8d/80677664afaa35e7cb7a09a468636b38255814.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext)\n      throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\n              \"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(\n          Weight weight,\n          LeafReaderContext readerContext,\n          String lowerVal,\n          String upperVal,\n          boolean includeLower,\n          boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"e6c4956cf69b7d2b47297f589a6855fa3028396a","commitMessage":"@@@Revert \"LUCENE-9856: fail precommit on unused local variables (#34)\"\n\nThis reverts commit 20dba278bbfc4fec8b53c8371eae982e3fa24b39.\n","date":"2021-03-24 00:46:36","modifiedFileCount":"209","status":"M","submitter":"Robert Muir"},{"authorTime":"2021-03-24 01:59:00","codes":[{"authorDate":"2020-06-12 19:25:31","commitOrder":17,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-12 19:25:31","endLine":110,"groupId":"104738","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/d8/e0def563a7ac64b9c621891ade8865d79afd68.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2021-03-24 01:59:00","commitOrder":17,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext)\n      throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\n              \"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(\n          Weight weight,\n          LeafReaderContext readerContext,\n          String lowerVal,\n          String upperVal,\n          boolean includeLower,\n          boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","date":"2021-03-24 01:59:00","endLine":197,"groupId":"104738","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/01/a3723f411bde680f45942782a1315a6d42597b.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext)\n      throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\n              \"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(\n          Weight weight,\n          LeafReaderContext readerContext,\n          String lowerVal,\n          String upperVal,\n          boolean includeLower,\n          boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        \r\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n","realPath":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"945b1cb8726223d5b0d5f61e85174ca93931b86e","commitMessage":"@@@LUCENE-9856: fail precommit on unused local variables.  take two (#37)\n\nEnable ecj unused local variable.  private instance and method detection. Allow SuppressWarnings(\"unused\") to disable unused checks (e.g. for generated code or very special tests). Fix gradlew regenerate for python 3.9 SuppressWarnings(\"unused\") for generated javacc and jflex code. Enable a few other easy ecj checks such as Deprecated annotation.  hashcode/equals.  equals across different types.\n\nCo-authored-by: Mike McCandless <mikemccand@apache.org>","date":"2021-03-24 01:59:00","modifiedFileCount":"158","status":"M","submitter":"Robert Muir"}]
