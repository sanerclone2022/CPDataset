[{"authorTime":"2016-03-09 22:28:50","codes":[{"authorDate":"2016-03-09 22:28:50","commitOrder":1,"curCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-09 22:30:22","endLine":85,"groupId":"60144","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test1D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bf/e387e8ca9a115bdb475dfdbf7291ea06d89728.src","preCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2016-03-09 22:28:50","commitOrder":1,"curCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter, 2*counter+1));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", new long[] {33640828, 33673327}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-09 22:30:22","endLine":129,"groupId":"60144","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test2D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/bf/e387e8ca9a115bdb475dfdbf7291ea06d89728.src","preCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter, 2*counter+1));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", new long[] {33640828, 33673327}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"}],"commitId":"004e83bb6cd75dabf3e6c6928bcb6fe382b3f234","commitMessage":"@@@add 2B point test\n","date":"2016-03-09 22:30:22","modifiedFileCount":"0","status":"B","submitter":"Mike McCandless"},{"authorTime":"2016-03-11 19:48:30","codes":[{"authorDate":"2016-03-11 19:48:30","commitOrder":2,"curCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-11 19:48:30","endLine":95,"groupId":"60144","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test1D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/43/207b8ceec37bff1817243a103ef5b4f96331cd.src","preCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2016-03-11 19:48:30","commitOrder":2,"curCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter, 2*counter+1));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", new long[] {33640828, 33673327}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-11 19:48:30","endLine":141,"groupId":"60144","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test2D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/43/207b8ceec37bff1817243a103ef5b4f96331cd.src","preCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter, 2*counter+1));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", new long[] {33640828, 33673327}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"1e05d3be76e0dcd7d0e1a2bb2bb89eb4019e33cc","commitMessage":"@@@fix int overflow bug in BKDWriter that prevented it from indexing > 2.1B points; try to improve runtime of Test2BPoints\n","date":"2016-03-11 19:48:30","modifiedFileCount":"2","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-03-13 18:41:19","codes":[{"authorDate":"2016-03-13 18:41:19","commitOrder":3,"curCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-13 18:41:19","endLine":96,"groupId":"60144","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test1D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/75/f2bbe3f47b06aff960df79b250573e5c36aec8.src","preCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2016-03-13 18:41:19","commitOrder":3,"curCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", new long[] {33640828, 33673327}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-13 18:41:19","endLine":144,"groupId":"60144","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test2D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/75/f2bbe3f47b06aff960df79b250573e5c36aec8.src","preCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter, 2*counter+1));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", new long[] {33640828, 33673327}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"f474f523dce537fc5b06e626b259ec4c08faa975","commitMessage":"@@@improve 2B points test; add new 2B test against BKD directly\n","date":"2016-03-13 18:41:19","modifiedFileCount":"1","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-03-13 20:56:51","codes":[{"authorDate":"2016-03-13 20:56:51","commitOrder":4,"curCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-13 20:56:51","endLine":96,"groupId":"60144","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test1D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/57/66b911230c933768ce3703ab8a842dece24cd7.src","preCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2016-03-13 20:56:51","commitOrder":4,"curCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", new long[] {Long.MIN_VALUE, Long.MAX_VALUE}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-13 20:56:51","endLine":144,"groupId":"60144","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"test2D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/57/66b911230c933768ce3703ab8a842dece24cd7.src","preCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", new long[] {33640828, 33673327}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"3c7e55da3a29224a90a8fc71815a7a52433a6a90","commitMessage":"@@@fix wrong param order in 2B tests\n","date":"2016-03-13 20:56:51","modifiedFileCount":"2","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-03-13 20:56:51","codes":[{"authorDate":"2016-03-15 19:36:02","commitOrder":5,"curCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-15 19:36:02","endLine":95,"groupId":"60144","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"test1D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/5ba19ed38f0f08e8538a69b7c7c3fb19cdc77b.src","preCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2016-03-13 20:56:51","commitOrder":5,"curCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", new long[] {Long.MIN_VALUE, Long.MAX_VALUE}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-13 20:56:51","endLine":144,"groupId":"60144","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"test2D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/57/66b911230c933768ce3703ab8a842dece24cd7.src","preCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", new long[] {Long.MIN_VALUE, Long.MAX_VALUE}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"}],"commitId":"82c06190a35a8159288c2fb48d8d38d6d81dbbf2","commitMessage":"@@@LUCENE-7101: OfflineSorter had O(N^2) merge cost.  and used too many temporary file descriptors.  for large sorts\n","date":"2016-03-15 19:36:02","modifiedFileCount":"5","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-03-15 21:50:12","codes":[{"authorDate":"2016-03-15 19:36:02","commitOrder":6,"curCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-15 19:36:02","endLine":95,"groupId":"60144","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"test1D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/f1/5ba19ed38f0f08e8538a69b7c7c3fb19cdc77b.src","preCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2016-03-15 21:50:12","commitOrder":6,"curCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", new long[] {Long.MIN_VALUE, Long.MIN_VALUE}, new long[] {Long.MAX_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-03-15 21:50:12","endLine":143,"groupId":"60144","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"test2D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2f/3a3a698906f9a8991f44b4ace79fb4550fb8b2.src","preCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", new long[] {Long.MIN_VALUE, Long.MAX_VALUE}, new long[] {Long.MIN_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"3ba7456f7062f263dbb859cbe5d59046450a5371","commitMessage":"@@@LUCENE-7108: this test was running the wrong range query\n","date":"2016-03-15 21:50:12","modifiedFileCount":"1","status":"M","submitter":"Mike McCandless"},{"authorTime":"2016-10-18 00:09:23","codes":[{"authorDate":"2016-10-18 00:09:23","commitOrder":7,"curCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues(\"long\").size() > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-10-18 16:14:27","endLine":87,"groupId":"105940","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"test1D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2e/327732ec6503f4c2f033cee74a167bf6181a93.src","preCode":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2016-10-18 00:09:23","commitOrder":7,"curCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", new long[] {Long.MIN_VALUE, Long.MIN_VALUE}, new long[] {Long.MAX_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues(\"long\").size() > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","date":"2016-10-18 16:14:27","endLine":135,"groupId":"105940","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"test2D","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/2e/327732ec6503f4c2f033cee74a167bf6181a93.src","preCode":"  public void test2D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints2D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     \r\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        long y = (((long) random().nextInt() << 32)) | (long) random().nextInt();\n        doc.add(new LongPoint(\"long\", x, y));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", new long[] {Long.MIN_VALUE, Long.MIN_VALUE}, new long[] {Long.MAX_VALUE, Long.MAX_VALUE})));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n","realPath":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"c22725f0b53a0d1a50cbc5a9d21ced29e6d7cd39","commitMessage":"@@@LUCENE-7494: Give points a per-field API.\n","date":"2016-10-18 16:14:27","modifiedFileCount":"50","status":"M","submitter":"Adrien Grand"}]
