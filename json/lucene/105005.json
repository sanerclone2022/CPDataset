[{"authorTime":"2017-05-18 20:35:53","codes":[{"authorDate":"2016-11-25 10:48:09","commitOrder":8,"curCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2016-11-25 10:48:09","endLine":239,"groupId":"22701","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/77/f04164cc3a067cb1a5869edc719da4d58cafe8.src","preCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"NB"},{"authorDate":"2017-05-18 20:35:53","commitOrder":8,"curCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2017-05-18 20:36:18","endLine":213,"groupId":"22701","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/1c/de4681ad7fd948588a2bf8586314393a0b1b59.src","preCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"}],"commitId":"bd9e32d358399af7c31e732314e1ef1dd89bcfa1","commitMessage":"@@@LUCENE-7838 - added knn classifier based on flt\n","date":"2017-05-18 20:36:18","modifiedFileCount":"2","status":"M","submitter":"Tommaso Teofili"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2016-11-25 10:48:09","commitOrder":9,"curCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2016-11-25 10:48:09","endLine":239,"groupId":"22701","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/77/f04164cc3a067cb1a5869edc719da4d58cafe8.src","preCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"N"},{"authorDate":"2017-06-29 17:00:17","commitOrder":9,"curCode":"  private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2017-06-29 17:00:17","endLine":207,"groupId":"16322","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/cb/d241b4bb466d878f0f8f059544f2cdc7ea9d81.src","preCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-07-18 14:31:44","codes":[{"authorDate":"2018-07-18 14:31:44","commitOrder":10,"curCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2018-07-18 14:38:57","endLine":236,"groupId":"22701","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/6c/55493491122218c4fa4260e8e4b79103e99d94.src","preCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2018-07-18 14:31:44","commitOrder":10,"curCode":"  private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2018-07-18 14:38:57","endLine":198,"groupId":"16322","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/0e/90ccdecb8a96a5ac17497f47c198e8221f98d7.src","preCode":"  private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.getMaxScore();\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"331ccf391067b7775db371bec1ec8e8c9004e904","commitMessage":"@@@LUCENE-8405: Remove TopDocs.maxScore.\n","date":"2018-07-18 14:38:57","modifiedFileCount":"67","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-30 16:08:16","codes":[{"authorDate":"2018-07-30 16:08:16","commitOrder":11,"curCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits.value == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2018-07-30 22:38:05","endLine":236,"groupId":"22701","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/da/db8854e192c5f5ec1c7f4f2de2b4f23ca8b557.src","preCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2018-07-30 16:08:16","commitOrder":11,"curCode":"  private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits.value == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2018-07-30 22:38:05","endLine":198,"groupId":"16322","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/03/98fbc11cd0ce60a25e8faadebaf19b536421ee.src","preCode":"  private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"9ca053712af0795cbd0d0d9f2d862f24d9e547c3","commitMessage":"@@@LUCENE-8430: TopDocs.totalHits may now be a lower bound of the hit count.\n","date":"2018-07-30 22:38:05","modifiedFileCount":"178","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-30 16:08:16","codes":[{"authorDate":"2019-01-24 17:26:58","commitOrder":12,"curCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits.value == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n          classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2019-01-24 17:26:58","endLine":231,"groupId":"105005","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/e4/ac81a2e998f6557084856ab9960c3d63345303.src","preCode":"  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits.value == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField[] storableFields = indexSearcher.doc(scoreDoc.doc).getFields(classFieldName);\n      for (IndexableField singleStorableField : storableFields) {\n        if (singleStorableField != null) {\n          BytesRef cl = new BytesRef(singleStorableField.stringValue());\n        \r\n        Integer count = classCounts.get(cl);\n        if (count != null) {\n          classCounts.put(cl, count + 1);\n        } else {\n          classCounts.put(cl, 1);\n        }\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2018-07-30 16:08:16","commitOrder":12,"curCode":"  private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits.value == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","date":"2018-07-30 22:38:05","endLine":198,"groupId":"105005","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"buildListFromTopDocs","params":"(TopDocstopDocs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/03/98fbc11cd0ce60a25e8faadebaf19b536421ee.src","preCode":"  private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {\n    Map<BytesRef, Integer> classCounts = new HashMap<>();\n    Map<BytesRef, Double> classBoosts = new HashMap<>(); \r\n    float maxScore = topDocs.totalHits.value == 0 ? Float.NaN : topDocs.scoreDocs[0].score;\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n      IndexableField storableField = indexSearcher.doc(scoreDoc.doc).getField(classFieldName);\n      if (storableField != null) {\n        BytesRef cl = new BytesRef(storableField.stringValue());\n        \r\n        classCounts.merge(cl, 1, (a, b) -> a + b);\n        \r\n        Double totalBoost = classBoosts.get(cl);\n        double singleBoost = scoreDoc.score / maxScore;\n        if (totalBoost != null) {\n          classBoosts.put(cl, totalBoost + singleBoost);\n        } else {\n          classBoosts.put(cl, singleBoost);\n        }\n      }\n    }\n    List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    List<ClassificationResult<BytesRef>> temporaryList = new ArrayList<>();\n    int sumdoc = 0;\n    for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {\n      Integer count = entry.getValue();\n      Double normBoost = classBoosts.get(entry.getKey()) / count; \r\n      temporaryList.add(new ClassificationResult<>(entry.getKey().clone(), (count * normBoost) / (double) k));\n      sumdoc += count;\n    }\n\n    \r\n    if (sumdoc < k) {\n      for (ClassificationResult<BytesRef> cr : temporaryList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), cr.getScore() * k / (double) sumdoc));\n      }\n    } else {\n      returnList = temporaryList;\n    }\n    return returnList;\n  }\n","realPath":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"}],"commitId":"a557aa0aa3a807bb29dc01101bab4d54ec6fba4e","commitMessage":"@@@Merge pull request #544 from tteofili/LUCENE-5698\n\nLUCENE-5698 - added test to benchmark lucene classification against 20n dataset","date":"2019-01-24 17:26:58","modifiedFileCount":"8","status":"M","submitter":"Tommaso Teofili"}]
