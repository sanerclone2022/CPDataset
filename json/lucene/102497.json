[{"authorTime":"2015-04-25 02:15:42","codes":[{"authorDate":"2015-04-25 02:15:42","commitOrder":2,"curCode":"  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      \r\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      \r\n    }\n  }\n","date":"2015-04-25 02:15:42","endLine":115,"groupId":"62525","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidVariableMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/ff/6c2b9d5234919c89af846f9883a39d31b56d55.src","preCode":"  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      \r\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      \r\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2015-04-25 02:15:42","commitOrder":2,"curCode":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n  }\n","date":"2015-04-25 02:15:42","endLine":185,"groupId":"44221","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongArity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/4c/304d8055a5256f2d3813229f8c4f21cb3ad30c.src","preCode":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"MB"}],"commitId":"458f5042027e2c4fca5974b33cc1a069b24e3ed2","commitMessage":"@@@LUCENE-6451: Expressions now support bindings keys that look like zero arg functions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1675926 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-25 02:15:42","modifiedFileCount":"3","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2016-01-08 05:50:04","codes":[{"authorDate":"2016-01-08 05:50:04","commitOrder":3,"curCode":"  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n      assertTrue(expected.getCause() != null && expected.getCause() != expected);\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n","date":"2016-01-08 05:50:04","endLine":132,"groupId":"62525","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidVariableMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/53/938d035144fc01b16fab08be579586133bd33f.src","preCode":"  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      \r\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      \r\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2016-01-08 05:50:04","commitOrder":3,"curCode":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 0);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\" tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 1);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 4);\n    }\n  }\n","date":"2016-01-08 05:50:04","endLine":211,"groupId":"44221","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongArity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/c5/72c332a25ff1378f43ac65849b0720ec6e0b21.src","preCode":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"cc546f4e393143531f0de6c7ee45f8fd86174a14","commitMessage":"@@@Expression's JavascriptCompiler now throw ParseException with bad function names or bad arity instead of IllegalArgumentException\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723631 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-08 05:50:04","modifiedFileCount":"3","status":"M","submitter":"Tomas Eduardo Fernandez Lobbe"},{"authorTime":"2016-01-08 05:50:04","codes":[{"authorDate":"2016-01-08 07:38:14","commitOrder":4,"curCode":"  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n","date":"2016-01-08 07:38:14","endLine":131,"groupId":"62525","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidVariableMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/5c/7dfec26620288843a389d67fc2af746d17fac7.src","preCode":"  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n      assertTrue(expected.getCause() != null && expected.getCause() != expected);\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2016-01-08 05:50:04","commitOrder":4,"curCode":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 0);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\" tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 1);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 4);\n    }\n  }\n","date":"2016-01-08 05:50:04","endLine":211,"groupId":"44221","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongArity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/c5/72c332a25ff1378f43ac65849b0720ec6e0b21.src","preCode":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 0);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\" tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 1);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 4);\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"N"}],"commitId":"a46d5535cbca36fc44762355f27f61131391f48b","commitMessage":"@@@LUCENE-6965: Changed exception handling in JavascriptCompiler using \"sneaky rethrow\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723642 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-08 07:38:14","modifiedFileCount":"2","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2016-02-20 01:07:07","codes":[{"authorDate":"2016-02-20 01:07:07","commitOrder":5,"curCode":"  public void testInvalidVariableMethods() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"method()\");\n    });\n    assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n    assertEquals(0, expected.getErrorOffset());\n\n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"method.method(1)\");\n    });\n    assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n    assertEquals(0, expected.getErrorOffset());\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"1 + method()\");\n    });\n    assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n    assertEquals(4, expected.getErrorOffset());\n  }\n","date":"2016-02-20 01:07:47","endLine":114,"groupId":"102497","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidVariableMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/7c/46b05e2c08ead37300e5cfefe932a8041505d9.src","preCode":"  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      \r\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2016-02-20 01:07:07","commitOrder":5,"curCode":"  public void testWrongArity() throws Exception {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    });\n    assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n    assertEquals(expected.getErrorOffset(), 0);\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n    });\n    assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\" tan()\");\n    });\n    assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n    assertEquals(expected.getErrorOffset(), 1);\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"1 + tan()\");\n    });\n    assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n    assertEquals(expected.getErrorOffset(), 4);\n  }\n","date":"2016-02-20 01:07:47","endLine":171,"groupId":"102497","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongArity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-lucene-10-0.7/blobInfo/CC_OUT/blobs/99/418651e3a68fd150e5e153dfbd7938465d6d74.src","preCode":"  public void testWrongArity() throws Exception {\n    try {\n      JavascriptCompiler.compile(\"tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression 'tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 0);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"tan(1, 1)\");\n      fail();\n    } catch (ParseException expected) {\n      assertTrue(expected.getMessage().contains(\"arguments for function call\"));\n    }\n    \n    try {\n      JavascriptCompiler.compile(\" tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression ' tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 1);\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + tan()\");\n      fail();\n    } catch (ParseException expected) {\n      assertEquals(\"Invalid expression '1 + tan()': Expected (1) arguments for function call (tan), but found (0).\", expected.getMessage());\n      assertEquals(expected.getErrorOffset(), 4);\n    }\n  }\n","realPath":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestJavascriptCompiler.java","repoName":"lucene","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"189e985b5c14c5c19799b7bdfd040874b94ba18c","commitMessage":"@@@LUCENE-7037: Switch all exceptions tests to expectThrows()\n","date":"2016-02-20 01:07:47","modifiedFileCount":"277","status":"M","submitter":"Robert Muir"}]
