[{"authorTime":"2018-02-13 02:47:03","codes":[{"authorDate":"2016-11-15 20:45:23","commitOrder":2,"curCode":"    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0]);\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null);\n        assertFalse(tok.hasNext());\n    }\n","date":"2016-11-15 20:45:23","endLine":683,"groupId":"606","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor_charArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/4b/39f55cf75c02930fa3930a9510d32fba2895ed.src","preCode":"    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0]);\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null);\n        assertFalse(tok.hasNext());\n    }\n","realPath":"src/test/java/org/apache/commons/text/StrTokenizerTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"NB"},{"authorDate":"2018-02-13 02:47:03","commitOrder":2,"curCode":"    public void testConstructor_charArray_char() {\n        StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer(new char[0], ' ');\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer((char[]) null, ' ');\n        assertFalse(tok.hasNext());\n    }\n","date":"2018-02-13 02:47:03","endLine":741,"groupId":"650","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConstructor_charArray_char","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/79/a61db30f27433d1c64680493d9c68e8f39b566.src","preCode":"    public void testConstructor_charArray_char() {\n        StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer(new char[0], ' ');\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer((char[]) null, ' ');\n        assertFalse(tok.hasNext());\n    }\n","realPath":"src/test/java/org/apache/commons/text/StringTokenizerTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":729,"status":"B"}],"commitId":"6d8b511f2081117a3c07a5e54392b1948df79248","commitMessage":"@@@[TEXT-116] Add a StrTokenizer replacement based on the StringMatcher\ninterface: StringTokenizer.","date":"2018-02-13 02:47:03","modifiedFileCount":"9","status":"M","submitter":"Gary Gregory"},{"authorTime":"2020-06-27 03:53:27","codes":[{"authorDate":"2016-11-15 20:45:23","commitOrder":3,"curCode":"    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0]);\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null);\n        assertFalse(tok.hasNext());\n    }\n","date":"2016-11-15 20:45:23","endLine":683,"groupId":"606","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor_charArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/4b/39f55cf75c02930fa3930a9510d32fba2895ed.src","preCode":"    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0]);\n        assertFalse(tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null);\n        assertFalse(tok.hasNext());\n    }\n","realPath":"src/test/java/org/apache/commons/text/StrTokenizerTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"N"},{"authorDate":"2020-06-27 03:53:27","commitOrder":3,"curCode":"    public void testConstructor_charArray_char() {\n        StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \", 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer(new char[0], ' ');\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer((char[]) null, ' ');\n        assertFalse(tok.hasNext());\n    }\n","date":"2020-06-27 03:53:27","endLine":737,"groupId":"650","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConstructor_charArray_char","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/81/9ec89081dc4b82fd3d5158523f9b441397e12a.src","preCode":"    public void testConstructor_charArray_char() {\n        StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer(new char[0], ' ');\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer((char[]) null, ' ');\n        assertFalse(tok.hasNext());\n    }\n","realPath":"src/test/java/org/apache/commons/text/StringTokenizerTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":724,"status":"M"}],"commitId":"2b1f1a2c2de194d127deb1ce0ce1047f22316d55","commitMessage":"@@@Add isMatch(CharSequence.  int)\n\nAdd isMatch(CharSequence.  int.  int.  int)\n","date":"2020-06-27 03:53:27","modifiedFileCount":"3","status":"M","submitter":"Gary Gregory"},{"authorTime":"2020-06-27 05:02:28","codes":[{"authorDate":"2020-06-27 05:02:28","commitOrder":4,"curCode":"    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StrTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY);\n        assertFalse(tok.hasNext());\n\n        tok = new StrTokenizer((char[]) null);\n        assertFalse(tok.hasNext());\n    }\n","date":"2020-06-27 05:02:28","endLine":720,"groupId":"10225","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor_charArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/74/4e598d5ddb322ec36d7eb6564014bd4c49c33c.src","preCode":"    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StrTokenizer(new char[0]);\n        assertFalse(tok.hasNext());\n\n        tok = new StrTokenizer((char[]) null);\n        assertFalse(tok.hasNext());\n    }\n","realPath":"src/test/java/org/apache/commons/text/StrTokenizerTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"M"},{"authorDate":"2020-06-27 05:02:28","commitOrder":4,"curCode":"    public void testConstructor_charArray_char() {\n        StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \", 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY, ' ');\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer((char[]) null, ' ');\n        assertFalse(tok.hasNext());\n    }\n","date":"2020-06-27 05:02:28","endLine":739,"groupId":"10225","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConstructor_charArray_char","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/67/5bf0d102dd044ccc7b00d8655d04dfeca4e805.src","preCode":"    public void testConstructor_charArray_char() {\n        StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \", 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer(new char[0], ' ');\n        assertFalse(tok.hasNext());\n\n        tok = new StringTokenizer((char[]) null, ' ');\n        assertFalse(tok.hasNext());\n    }\n","realPath":"src/test/java/org/apache/commons/text/StringTokenizerTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":726,"status":"M"}],"commitId":"93b8a088a0ebbd2bdb80d05c6f87381976906763","commitMessage":"@@@No need to create a new size 0 char[] each time one is needed.\n","date":"2020-06-27 05:02:28","modifiedFileCount":"35","status":"M","submitter":"Gary Gregory"}]
