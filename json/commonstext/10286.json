[{"authorTime":"2016-11-30 11:27:04","codes":[{"authorDate":"2016-11-30 11:27:04","commitOrder":5,"curCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n                { new JaroWinklerDistance(), \"elephant\", \"hippo\", 0.44 },\n                { new JaroWinklerDistance(), \"hippo\", \"elephant\",  0.44 },\n                { new JaroWinklerDistance(), \"hippo\", \"zzzzzzzz\", 0.0 },\n\n                {\n                        new SimilarityScore<Boolean>() {\n                            @Override\n                            public Boolean apply(final CharSequence left, final CharSequence right) {\n                                return left == right || (left != null && left.equals(right));\n                            }\n                        },\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                }\n\n        } );\n    }\n","date":"2016-11-30 11:27:04","endLine":58,"groupId":"371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/74/7f74867a27c504df72eab675b9f9a59cb16780.src","preCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n                { new JaroWinklerDistance(), \"elephant\", \"hippo\", 0.44 },\n                { new JaroWinklerDistance(), \"hippo\", \"elephant\",  0.44 },\n                { new JaroWinklerDistance(), \"hippo\", \"zzzzzzzz\", 0.0 },\n\n                {\n                        new SimilarityScore<Boolean>() {\n                            @Override\n                            public Boolean apply(final CharSequence left, final CharSequence right) {\n                                return left == right || (left != null && left.equals(right));\n                            }\n                        },\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                }\n\n        } );\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedSimilarityScoreFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"MB"},{"authorDate":"2016-11-30 11:27:04","commitOrder":5,"curCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n            { new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1 },\n            { new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2 },\n            { new HammingDistance(), \"Hamming\", \"Hamming\", 0 },\n\n            { new LevenshteinDistance(), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(), \"go\", \"go\", 0 },\n\n            { new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(4), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(0), \"go\", \"go\", 0 },\n\n            {\n                new EditDistance<Boolean>() {\n                    @Override\n                    public Boolean apply(final CharSequence left, final CharSequence right) {\n                        return left == right || (left != null && left.equals(right));\n                    }\n                },\n                \"Bob's your uncle.\",\n                \"Every good boy does fine.\",\n                false\n            }\n\n        } );\n    }\n","date":"2016-11-30 11:27:04","endLine":82,"groupId":"735","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/b3/d3ae5e3ebfcb7100ec1dad84da35de9ee7d887.src","preCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n            { new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1 },\n            { new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2 },\n            { new HammingDistance(), \"Hamming\", \"Hamming\", 0 },\n\n            { new LevenshteinDistance(), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(), \"go\", \"go\", 0 },\n\n            { new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(4), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(0), \"go\", \"go\", 0 },\n\n            {\n                new EditDistance<Boolean>() {\n                    @Override\n                    public Boolean apply(final CharSequence left, final CharSequence right) {\n                        return left == right || (left != null && left.equals(right));\n                    }\n                },\n                \"Bob's your uncle.\",\n                \"Every good boy does fine.\",\n                false\n            }\n\n        } );\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedEditDistanceFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"}],"commitId":"e3bb7f75a17e613fafa0b9c9a24439fbeda39c13","commitMessage":"@@@TEXT-2: Resolving merge conflict\n","date":"2016-11-30 11:27:04","modifiedFileCount":"37","status":"M","submitter":"Rob Tompkins"},{"authorTime":"2016-11-30 11:27:04","codes":[{"authorDate":"2017-04-05 18:05:06","commitOrder":6,"curCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n                { new LevenshteinDistance(), \"elephant\", \"hippo\", 7 },\n                { new LevenshteinDistance(), \"hippo\", \"elephant\",  7 },\n                { new LevenshteinDistance(), \"hippo\", \"zzzzzzzz\", 8 },\n\n                {\n                        new SimilarityScore<Boolean>() {\n                            @Override\n                            public Boolean apply(final CharSequence left, final CharSequence right) {\n                                return left == right || (left != null && left.equals(right));\n                            }\n                        },\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                }\n\n        } );\n    }\n","date":"2017-04-05 18:05:06","endLine":74,"groupId":"401","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/13/dcea08f5f60e4b7ab5bb9b7d42848fd746afea.src","preCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n                { new JaroWinklerDistance(), \"elephant\", \"hippo\", 0.44 },\n                { new JaroWinklerDistance(), \"hippo\", \"elephant\",  0.44 },\n                { new JaroWinklerDistance(), \"hippo\", \"zzzzzzzz\", 0.0 },\n\n                {\n                        new SimilarityScore<Boolean>() {\n                            @Override\n                            public Boolean apply(final CharSequence left, final CharSequence right) {\n                                return left == right || (left != null && left.equals(right));\n                            }\n                        },\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                }\n\n        } );\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedSimilarityScoreFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2016-11-30 11:27:04","commitOrder":6,"curCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n            { new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1 },\n            { new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2 },\n            { new HammingDistance(), \"Hamming\", \"Hamming\", 0 },\n\n            { new LevenshteinDistance(), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(), \"go\", \"go\", 0 },\n\n            { new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(4), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(0), \"go\", \"go\", 0 },\n\n            {\n                new EditDistance<Boolean>() {\n                    @Override\n                    public Boolean apply(final CharSequence left, final CharSequence right) {\n                        return left == right || (left != null && left.equals(right));\n                    }\n                },\n                \"Bob's your uncle.\",\n                \"Every good boy does fine.\",\n                false\n            }\n\n        } );\n    }\n","date":"2016-11-30 11:27:04","endLine":82,"groupId":"735","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/b3/d3ae5e3ebfcb7100ec1dad84da35de9ee7d887.src","preCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList( new Object[][] {\n\n            { new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1 },\n            { new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2 },\n            { new HammingDistance(), \"Hamming\", \"Hamming\", 0 },\n\n            { new LevenshteinDistance(), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(), \"go\", \"go\", 0 },\n\n            { new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4 },\n            { new LevenshteinDistance(4), \"go\", \"no go\", 3 },\n            { new LevenshteinDistance(0), \"go\", \"go\", 0 },\n\n            {\n                new EditDistance<Boolean>() {\n                    @Override\n                    public Boolean apply(final CharSequence left, final CharSequence right) {\n                        return left == right || (left != null && left.equals(right));\n                    }\n                },\n                \"Bob's your uncle.\",\n                \"Every good boy does fine.\",\n                false\n            }\n\n        } );\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedEditDistanceFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"fe20a173e01a0d73e75d0907fed3a371d34d0f8b","commitMessage":"@@@TEXT-76: Remove Math.round from Jaro Winkler distance.  returning complete jw value\n","date":"2017-04-05 18:05:06","modifiedFileCount":"3","status":"M","submitter":"Bruno P. Kinoshita"},{"authorTime":"2018-04-08 23:42:14","codes":[{"authorDate":"2018-04-08 23:42:14","commitOrder":7,"curCode":"    public static Stream<Arguments> parameters() {\n        return Stream.of(\n                Arguments.of(new LevenshteinDistance(), \"elephant\", \"hippo\", 7),\n                Arguments.of(new LevenshteinDistance(), \"hippo\", \"elephant\", 7),\n                Arguments.of(new LevenshteinDistance(), \"hippo\", \"zzzzzzzz\", 8),\n\n                Arguments.of(\n                        new SimilarityScore<Boolean>() {\n                            @Override\n                            public Boolean apply(final CharSequence left, final CharSequence right) {\n                                return left == right || (left != null && left.equals(right));\n                            }\n                        },\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                ));\n    }\n","date":"2018-04-08 23:42:14","endLine":51,"groupId":"401","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/9e/30bed3975c82676d1a4516500e900a29eeb76f.src","preCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList(new Object[][] {\n\n                {new LevenshteinDistance(), \"elephant\", \"hippo\", 7},\n                {new LevenshteinDistance(), \"hippo\", \"elephant\",  7},\n                {new LevenshteinDistance(), \"hippo\", \"zzzzzzzz\", 8},\n\n                {\n                        new SimilarityScore<Boolean>() {\n                            @Override\n                            public Boolean apply(final CharSequence left, final CharSequence right) {\n                                return left == right || (left != null && left.equals(right));\n                            }\n                        },\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                }\n\n        });\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedSimilarityScoreFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2018-04-08 23:42:14","commitOrder":7,"curCode":"    public static Stream<Arguments> parameters() {\n        return Stream.of(\n                Arguments.of(new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1),\n                Arguments.of(new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2),\n                Arguments.of(new HammingDistance(), \"Hamming\", \"Hamming\", 0),\n\n                Arguments.of(new LevenshteinDistance(), \"Apache\", \"a patchy\", 4),\n                Arguments.of(new LevenshteinDistance(), \"go\", \"no go\", 3),\n                Arguments.of(new LevenshteinDistance(), \"go\", \"go\", 0),\n\n                Arguments.of(new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4),\n                Arguments.of(new LevenshteinDistance(4), \"go\", \"no go\", 3),\n                Arguments.of(new LevenshteinDistance(0), \"go\", \"go\", 0),\n\n                Arguments.of(\n                    new EditDistance<Boolean>() {\n                        @Override\n                        public Boolean apply(final CharSequence left, final CharSequence right) {\n                            return left == right || (left != null && left.equals(right));\n                        }\n                    },\n                    \"Bob's your uncle.\",\n                    \"Every good boy does fine.\",\n                    false));\n    }\n","date":"2018-04-08 23:42:14","endLine":59,"groupId":"180","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/72/1439b86e214de4babdcf53f3deb14aa7c5b11d.src","preCode":"    public static Iterable<Object[]> parameters() {\n        return Arrays.asList(new Object[][] {\n\n            {new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1},\n            {new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2},\n            {new HammingDistance(), \"Hamming\", \"Hamming\", 0},\n\n            {new LevenshteinDistance(), \"Apache\", \"a patchy\", 4},\n            {new LevenshteinDistance(), \"go\", \"no go\", 3},\n            {new LevenshteinDistance(), \"go\", \"go\", 0},\n\n            {new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4},\n            {new LevenshteinDistance(4), \"go\", \"no go\", 3},\n            {new LevenshteinDistance(0), \"go\", \"go\", 0},\n\n            {\n                new EditDistance<Boolean>() {\n                    @Override\n                    public Boolean apply(final CharSequence left, final CharSequence right) {\n                        return left == right || (left != null && left.equals(right));\n                    }\n                },\n                \"Bob's your uncle.\",\n                \"Every good boy does fine.\",\n                false\n            }\n\n        });\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedEditDistanceFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"49db4cb38baa24348023258924e63e9dac786f00","commitMessage":"@@@Update tests from JUnit 4 to 5. Closes #79.","date":"2018-04-08 23:42:14","modifiedFileCount":"63","status":"M","submitter":"Pascal Schumacher"},{"authorTime":"2019-09-13 08:59:10","codes":[{"authorDate":"2019-09-13 08:59:10","commitOrder":8,"curCode":"    public static Stream<Arguments> parameters() {\n        return Stream.of(\n                Arguments.of(new LevenshteinDistance(), \"elephant\", \"hippo\", 7),\n                Arguments.of(new LevenshteinDistance(), \"hippo\", \"elephant\", 7),\n                Arguments.of(new LevenshteinDistance(), \"hippo\", \"zzzzzzzz\", 8),\n\n                Arguments.of(\n                        (SimilarityScore<Boolean>) (left, right) -> left == right || (left != null && left.equals(right)),\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                ));\n    }\n","date":"2019-09-13 08:59:10","endLine":46,"groupId":"10286","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/20/17097b4ee024cc564b1dd5de46d87f82a1a7aa.src","preCode":"    public static Stream<Arguments> parameters() {\n        return Stream.of(\n                Arguments.of(new LevenshteinDistance(), \"elephant\", \"hippo\", 7),\n                Arguments.of(new LevenshteinDistance(), \"hippo\", \"elephant\", 7),\n                Arguments.of(new LevenshteinDistance(), \"hippo\", \"zzzzzzzz\", 8),\n\n                Arguments.of(\n                        new SimilarityScore<Boolean>() {\n                            @Override\n                            public Boolean apply(final CharSequence left, final CharSequence right) {\n                                return left == right || (left != null && left.equals(right));\n                            }\n                        },\n                        \"Bob's your uncle.\",\n                        \"Every good boy does fine.\",\n                        false\n                ));\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedSimilarityScoreFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-09-13 08:59:10","commitOrder":8,"curCode":"    public static Stream<Arguments> parameters() {\n        return Stream.of(\n                Arguments.of(new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1),\n                Arguments.of(new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2),\n                Arguments.of(new HammingDistance(), \"Hamming\", \"Hamming\", 0),\n\n                Arguments.of(new LevenshteinDistance(), \"Apache\", \"a patchy\", 4),\n                Arguments.of(new LevenshteinDistance(), \"go\", \"no go\", 3),\n                Arguments.of(new LevenshteinDistance(), \"go\", \"go\", 0),\n\n                Arguments.of(new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4),\n                Arguments.of(new LevenshteinDistance(4), \"go\", \"no go\", 3),\n                Arguments.of(new LevenshteinDistance(0), \"go\", \"go\", 0),\n\n                Arguments.of(\n                    (EditDistance<Boolean>) (left, right) -> left == right || (left != null && left.equals(right)),\n                    \"Bob's your uncle.\",\n                    \"Every good boy does fine.\",\n                    false));\n    }\n","date":"2019-09-13 08:59:10","endLine":54,"groupId":"10286","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"parameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-commonstext-10-0.7/blobInfo/CC_OUT/blobs/9f/10817a8d0ce6c1f2d59cb876bd9e6f3db40793.src","preCode":"    public static Stream<Arguments> parameters() {\n        return Stream.of(\n                Arguments.of(new HammingDistance(), \"Sam I am.\", \"Ham I am.\", 1),\n                Arguments.of(new HammingDistance(), \"Japtheth, Ham, Shem\", \"Japtheth, HAM, Shem\", 2),\n                Arguments.of(new HammingDistance(), \"Hamming\", \"Hamming\", 0),\n\n                Arguments.of(new LevenshteinDistance(), \"Apache\", \"a patchy\", 4),\n                Arguments.of(new LevenshteinDistance(), \"go\", \"no go\", 3),\n                Arguments.of(new LevenshteinDistance(), \"go\", \"go\", 0),\n\n                Arguments.of(new LevenshteinDistance(4), \"Apache\", \"a patchy\", 4),\n                Arguments.of(new LevenshteinDistance(4), \"go\", \"no go\", 3),\n                Arguments.of(new LevenshteinDistance(0), \"go\", \"go\", 0),\n\n                Arguments.of(\n                    new EditDistance<Boolean>() {\n                        @Override\n                        public Boolean apply(final CharSequence left, final CharSequence right) {\n                            return left == right || (left != null && left.equals(right));\n                        }\n                    },\n                    \"Bob's your uncle.\",\n                    \"Every good boy does fine.\",\n                    false));\n    }\n","realPath":"src/test/java/org/apache/commons/text/similarity/ParameterizedEditDistanceFromTest.java","repoName":"commonstext","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"aeccdea9ae744ca6ffcc2e03908d8142e008407a","commitMessage":"@@@More lambdas.  less boilerplate.\n","date":"2019-09-13 08:59:10","modifiedFileCount":"4","status":"M","submitter":"Gary Gregory"}]
