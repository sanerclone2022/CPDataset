[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testEqualsLiteralByteString() {\n    ByteString literal = ByteString.copyFrom(BYTES);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", literal,\n        TEST_STRING);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", TEST_STRING,\n        literal);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        TEST_STRING.equals(ByteString.EMPTY));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY, TEST_STRING.substring(55, 55));\n\n    literal = ByteString.copyFrom(mungedBytes());\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        TEST_STRING.equals(literal));\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        literal.equals(TEST_STRING));\n  }\n","date":"2016-01-14 03:22:18","endLine":415,"groupId":"1453","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqualsLiteralByteString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/06/79937f34f16a75c0733dfd2e52e45ec7fbf4d1.src","preCode":"  public void testEqualsLiteralByteString() {\n    ByteString literal = ByteString.copyFrom(BYTES);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", literal,\n        TEST_STRING);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", TEST_STRING,\n        literal);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        TEST_STRING.equals(ByteString.EMPTY));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY, TEST_STRING.substring(55, 55));\n\n    literal = ByteString.copyFrom(mungedBytes());\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        TEST_STRING.equals(literal));\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        literal.equals(TEST_STRING));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testEqualsRopeByteString() {\n    ByteString p1 = ByteString.copyFrom(BYTES, 0, 5);\n    ByteString p2 = ByteString.copyFrom(BYTES, 5, BYTES.length - 5);\n    ByteString rope = p1.concat(p2);\n\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", rope,\n        TEST_STRING);\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", TEST_STRING,\n        rope);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        TEST_STRING.equals(ByteString.EMPTY.concat(ByteString.EMPTY)));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY.concat(ByteString.EMPTY), TEST_STRING.substring(55, 55));\n\n    byte[] mungedBytes = mungedBytes();\n    p1 = ByteString.copyFrom(mungedBytes, 0, 5);\n    p2 = ByteString.copyFrom(mungedBytes, 5, mungedBytes.length - 5);\n    rope = p1.concat(p2);\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        TEST_STRING.equals(rope));\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        rope.equals(TEST_STRING));\n  }\n","date":"2016-01-14 03:22:18","endLine":439,"groupId":"2002","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEqualsRopeByteString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/06/79937f34f16a75c0733dfd2e52e45ec7fbf4d1.src","preCode":"  public void testEqualsRopeByteString() {\n    ByteString p1 = ByteString.copyFrom(BYTES, 0, 5);\n    ByteString p2 = ByteString.copyFrom(BYTES, 5, BYTES.length - 5);\n    ByteString rope = p1.concat(p2);\n\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", rope,\n        TEST_STRING);\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", TEST_STRING,\n        rope);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        TEST_STRING.equals(ByteString.EMPTY.concat(ByteString.EMPTY)));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY.concat(ByteString.EMPTY), TEST_STRING.substring(55, 55));\n\n    byte[] mungedBytes = mungedBytes();\n    p1 = ByteString.copyFrom(mungedBytes, 0, 5);\n    p2 = ByteString.copyFrom(mungedBytes, 5, mungedBytes.length - 5);\n    rope = p1.concat(p2);\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        TEST_STRING.equals(rope));\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        rope.equals(TEST_STRING));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2016-04-12 14:37:42","codes":[{"authorDate":"2016-04-12 14:37:42","commitOrder":2,"curCode":"  public void testEqualsLiteralByteString() {\n    ByteString literal = ByteString.copyFrom(BYTES);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", literal,\n        testString);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", testString,\n        literal);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        testString.equals(ByteString.EMPTY));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY, testString.substring(55, 55));\n\n    literal = ByteString.copyFrom(mungedBytes());\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        testString.equals(literal));\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        literal.equals(testString));\n  }\n","date":"2016-04-12 14:37:42","endLine":489,"groupId":"1453","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqualsLiteralByteString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/6b/e5b93c31e504983e49f47c8fce6d5abade1b39.src","preCode":"  public void testEqualsLiteralByteString() {\n    ByteString literal = ByteString.copyFrom(BYTES);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", literal,\n        TEST_STRING);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", TEST_STRING,\n        literal);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        TEST_STRING.equals(ByteString.EMPTY));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY, TEST_STRING.substring(55, 55));\n\n    literal = ByteString.copyFrom(mungedBytes());\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        TEST_STRING.equals(literal));\n    assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        literal.equals(TEST_STRING));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2016-04-12 14:37:42","commitOrder":2,"curCode":"  public void testEqualsRopeByteString() {\n    ByteString p1 = ByteString.copyFrom(BYTES, 0, 5);\n    ByteString p2 = ByteString.copyFrom(BYTES, 5, BYTES.length - 5);\n    ByteString rope = p1.concat(p2);\n\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", rope,\n        testString);\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", testString,\n        rope);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        testString.equals(ByteString.EMPTY.concat(ByteString.EMPTY)));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY.concat(ByteString.EMPTY), testString.substring(55, 55));\n\n    byte[] mungedBytes = mungedBytes();\n    p1 = ByteString.copyFrom(mungedBytes, 0, 5);\n    p2 = ByteString.copyFrom(mungedBytes, 5, mungedBytes.length - 5);\n    rope = p1.concat(p2);\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        testString.equals(rope));\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        rope.equals(testString));\n  }\n","date":"2016-04-12 14:37:42","endLine":513,"groupId":"2002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEqualsRopeByteString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/6b/e5b93c31e504983e49f47c8fce6d5abade1b39.src","preCode":"  public void testEqualsRopeByteString() {\n    ByteString p1 = ByteString.copyFrom(BYTES, 0, 5);\n    ByteString p2 = ByteString.copyFrom(BYTES, 5, BYTES.length - 5);\n    ByteString rope = p1.concat(p2);\n\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", rope,\n        TEST_STRING);\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", TEST_STRING,\n        rope);\n    assertFalse(CLASSNAME + \" must not equal the empty string\",\n        TEST_STRING.equals(ByteString.EMPTY.concat(ByteString.EMPTY)));\n    assertEquals(CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY.concat(ByteString.EMPTY), TEST_STRING.substring(55, 55));\n\n    byte[] mungedBytes = mungedBytes();\n    p1 = ByteString.copyFrom(mungedBytes, 0, 5);\n    p2 = ByteString.copyFrom(mungedBytes, 5, mungedBytes.length - 5);\n    rope = p1.concat(p2);\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        TEST_STRING.equals(rope));\n    assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        rope.equals(TEST_STRING));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"}],"commitId":"814685ca2cd9280ca401e1842fd6311440921a0a","commitMessage":"@@@Merge pull request #1397 from google/internal-merge\n\nInternal merge","date":"2016-04-12 14:37:42","modifiedFileCount":"57","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testEqualsLiteralByteString() {\n    ByteString literal = ByteString.copyFrom(BYTES);\n    assertWithMessage(\"%s must equal LiteralByteString with same value\", CLASSNAME)\n        .that(literal)\n        .isEqualTo(testString);\n    assertWithMessage(\"%s must equal LiteralByteString with same value\", CLASSNAME)\n        .that(testString)\n        .isEqualTo(literal);\n    assertWithMessage(\"%s must not equal the empty string\", CLASSNAME)\n        .that(testString)\n        .isNotEqualTo(ByteString.EMPTY);\n    assertWithMessage(\"%s empty strings must be equal\", CLASSNAME)\n        .that(ByteString.EMPTY)\n        .isEqualTo(testString.substring(55, 55));\n\n    literal = ByteString.copyFrom(mungedBytes());\n    assertWithMessage(\"%s must not equal every LiteralByteString with the same length\", CLASSNAME)\n        .that(testString)\n        .isNotEqualTo(literal);\n    assertWithMessage(\"%s must not equal every LiteralByteString with the same length\", CLASSNAME)\n        .that(literal)\n        .isNotEqualTo(testString);\n  }\n","date":"2021-08-10 06:55:00","endLine":577,"groupId":"10523","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testEqualsLiteralByteString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1f/1427142bb2e8ecd0e82902a8a97e2fedd983e2.src","preCode":"  public void testEqualsLiteralByteString() {\n    ByteString literal = ByteString.copyFrom(BYTES);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", literal, testString);\n    assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\", testString, literal);\n    assertFalse(\n        CLASSNAME + \" must not equal the empty string\", testString.equals(ByteString.EMPTY));\n    assertEquals(\n        CLASSNAME + \" empty strings must be equal\", ByteString.EMPTY, testString.substring(55, 55));\n\n    literal = ByteString.copyFrom(mungedBytes());\n    assertFalse(\n        CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        testString.equals(literal));\n    assertFalse(\n        CLASSNAME + \" must not equal every LiteralByteString with the same length\",\n        literal.equals(testString));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testEqualsRopeByteString() {\n    ByteString p1 = ByteString.copyFrom(BYTES, 0, 5);\n    ByteString p2 = ByteString.copyFrom(BYTES, 5, BYTES.length - 5);\n    ByteString rope = p1.concat(p2);\n\n    assertWithMessage(\"%s must equal RopeByteString with same value\", CLASSNAME)\n        .that(rope)\n        .isEqualTo(testString);\n    assertWithMessage(\"%s must equal RopeByteString with same value\", CLASSNAME)\n        .that(testString)\n        .isEqualTo(rope);\n    assertWithMessage(\"%s must not equal the empty string\", CLASSNAME)\n        .that(testString)\n        .isNotEqualTo(ByteString.EMPTY.concat(ByteString.EMPTY));\n    assertWithMessage(\"%s empty strings must be equal\", CLASSNAME)\n        .that(ByteString.EMPTY.concat(ByteString.EMPTY))\n        .isEqualTo(testString.substring(55, 55));\n\n    byte[] mungedBytes = mungedBytes();\n    p1 = ByteString.copyFrom(mungedBytes, 0, 5);\n    p2 = ByteString.copyFrom(mungedBytes, 5, mungedBytes.length - 5);\n    rope = p1.concat(p2);\n    assertWithMessage(\"%s must not equal every RopeByteString with the same length\", CLASSNAME)\n        .that(testString)\n        .isNotEqualTo(rope);\n\n    assertWithMessage(\"%s must not equal every RopeByteString with the same length\", CLASSNAME)\n        .that(rope)\n        .isNotEqualTo(testString);\n  }\n","date":"2021-08-10 06:55:00","endLine":609,"groupId":"10523","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testEqualsRopeByteString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1f/1427142bb2e8ecd0e82902a8a97e2fedd983e2.src","preCode":"  public void testEqualsRopeByteString() {\n    ByteString p1 = ByteString.copyFrom(BYTES, 0, 5);\n    ByteString p2 = ByteString.copyFrom(BYTES, 5, BYTES.length - 5);\n    ByteString rope = p1.concat(p2);\n\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", rope, testString);\n    assertEquals(CLASSNAME + \" must equal RopeByteString with same value\", testString, rope);\n    assertFalse(\n        CLASSNAME + \" must not equal the empty string\",\n        testString.equals(ByteString.EMPTY.concat(ByteString.EMPTY)));\n    assertEquals(\n        CLASSNAME + \" empty strings must be equal\",\n        ByteString.EMPTY.concat(ByteString.EMPTY),\n        testString.substring(55, 55));\n\n    byte[] mungedBytes = mungedBytes();\n    p1 = ByteString.copyFrom(mungedBytes, 0, 5);\n    p2 = ByteString.copyFrom(mungedBytes, 5, mungedBytes.length - 5);\n    rope = p1.concat(p2);\n    assertFalse(\n        CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        testString.equals(rope));\n    assertFalse(\n        CLASSNAME + \" must not equal every RopeByteString with the same length\",\n        rope.equals(testString));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
