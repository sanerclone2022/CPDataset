[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  private void assertImmutable(LongArrayList list) {\n    if (list.contains(1L)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new LongArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addLong(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setLong(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":463,"groupId":"154","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertImmutable","params":"(LongArrayListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1b/d094f70bc49c12f23a95574120dbb874dbc998.src","preCode":"  private void assertImmutable(LongArrayList list) {\n    if (list.contains(1L)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new LongArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addLong(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setLong(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LongArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  private void assertImmutable(FloatArrayList list) {\n    if (list.contains(1F)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new FloatArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addFloat(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setFloat(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":463,"groupId":"440","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImmutable","params":"(FloatArrayListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a5/e6542445f31acf983b468195de56d680f56a91.src","preCode":"  private void assertImmutable(FloatArrayList list) {\n    if (list.contains(1F)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new FloatArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addFloat(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setFloat(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FloatArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2018-08-09 08:00:41","codes":[{"authorDate":"2018-08-09 08:00:41","commitOrder":2,"curCode":"  private void assertImmutable(LongList list) {\n    if (list.contains(1L)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new LongArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addLong(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setLong(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2018-08-09 08:00:41","endLine":468,"groupId":"154","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertImmutable","params":"(LongListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/14/a8e15975566be61a7a568f7024ce67ccb7b62a.src","preCode":"  private void assertImmutable(LongArrayList list) {\n    if (list.contains(1L)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new LongArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addLong(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setLong(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LongArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2018-08-09 08:00:41","commitOrder":2,"curCode":"  private void assertImmutable(FloatList list) {\n    if (list.contains(1F)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new FloatArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addFloat(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setFloat(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2018-08-09 08:00:41","endLine":468,"groupId":"440","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImmutable","params":"(FloatListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/38/eccc93b2e4b119e0e4a4aeb84b6866ab2425b7.src","preCode":"  private void assertImmutable(FloatArrayList list) {\n    if (list.contains(1F)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new FloatArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addFloat(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setFloat(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FloatArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"}],"commitId":"6bbe197e9c1b6fc38cbdc45e3bf83fa7ced792a3","commitMessage":"@@@Down-integrate from google3.\n","date":"2018-08-09 08:00:41","modifiedFileCount":"41","status":"M","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  private void assertImmutable(LongList list) {\n    if (list.contains(1L)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1L);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1L);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Long>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1L));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new LongArrayList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1L));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Long>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addLong(0);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Long>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1L));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Long>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1L));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0L);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setLong(0, 0);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":574,"groupId":"10222","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertImmutable","params":"(LongListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/29/82e0cad4c9f981fc764412e8b57d98e9ffb57e.src","preCode":"  private void assertImmutable(LongList list) {\n    if (list.contains(1L)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new LongArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addLong(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Long>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1L));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0L);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setLong(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LongArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  private void assertImmutable(FloatList list) {\n    if (list.contains(1F)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1F);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1F);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Float>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1F));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new FloatArrayList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1F));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Float>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addFloat(0);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Float>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1F));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Float>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1F));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0F);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setFloat(0, 0);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":576,"groupId":"10222","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertImmutable","params":"(FloatListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/8f/e850804418b854ca5550be428690596d7912ac.src","preCode":"  private void assertImmutable(FloatList list) {\n    if (list.contains(1F)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new FloatArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addFloat(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Float>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1F));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0F);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setFloat(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FloatArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
