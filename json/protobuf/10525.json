[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = TEST_STRING.newInput();\n    int stringSize = TEST_STRING.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        TEST_STRING.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n        stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        TEST_STRING.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2016-01-14 03:22:18","endLine":509,"groupId":"2025","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/06/79937f34f16a75c0733dfd2e52e45ec7fbf4d1.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = TEST_STRING.newInput();\n    int stringSize = TEST_STRING.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        TEST_STRING.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n        stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        TEST_STRING.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n                 stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n                 stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2016-01-14 03:22:18","endLine":464,"groupId":"2025","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c8/4956335e4c6be461a56be3d32960c6893af6f5.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n                 stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n                 stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LiteralByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-04-12 14:37:42","commitOrder":2,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = testString.newInput();\n    int stringSize = testString.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        testString.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n        stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        testString.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2016-04-12 14:37:42","endLine":583,"groupId":"2025","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/6b/e5b93c31e504983e49f47c8fce6d5abade1b39.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = TEST_STRING.newInput();\n    int stringSize = TEST_STRING.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        TEST_STRING.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n        stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        TEST_STRING.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":2,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n                 stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n                 stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2016-01-14 03:22:18","endLine":464,"groupId":"2025","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c8/4956335e4c6be461a56be3d32960c6893af6f5.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n                 stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n                 stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LiteralByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"N"}],"commitId":"814685ca2cd9280ca401e1842fd6311440921a0a","commitMessage":"@@@Merge pull request #1397 from google/internal-merge\n\nInternal merge","date":"2016-04-12 14:37:42","modifiedFileCount":"57","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2019-10-25 03:03:05","codes":[{"authorDate":"2016-04-12 14:37:42","commitOrder":3,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = testString.newInput();\n    int stringSize = testString.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        testString.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n        stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        testString.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2016-04-12 14:37:42","endLine":583,"groupId":"2025","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/6b/e5b93c31e504983e49f47c8fce6d5abade1b39.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = testString.newInput();\n    int stringSize = testString.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\"InputStream.skip(), read()\",\n        testString.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\",\n        stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\",\n        skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\",\n        stringSize - skipped1, input.available());\n    assertEquals(\"InputStream.reset(), read()\",\n        testString.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"N"},{"authorDate":"2019-10-25 03:03:05","commitOrder":3,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    assertThat(input.skip(1)).isEqualTo(0);\n    assertThat(input.read(new byte[1],  0,  0)).isEqualTo(-1);\n\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2019-10-25 03:03:05","endLine":542,"groupId":"2025","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/ca/b14c38b78ea5f11307c9dd876fc2755991d42c.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LiteralByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"}],"commitId":"342a2d627c023dfe5dcf1c9d9fd014338a0665be","commitMessage":"@@@Merge pull request #6752 from rafi-kamal/201910111201\n\nDown integrate Google3 changes to Github","date":"2019-10-25 03:03:05","modifiedFileCount":"7","status":"M","submitter":"Rafi Kamal"},{"authorTime":"2020-01-09 02:18:20","codes":[{"authorDate":"2020-01-09 02:18:20","commitOrder":4,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = testString.newInput();\n    int stringSize = testString.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", testString.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", testString.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2020-01-09 02:18:20","endLine":596,"groupId":"2025","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/48/9bb7c10283c862d29bfb532c2756ad188993b5.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = testString.newInput();\n    int stringSize = testString.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", testString.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", testString.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"},{"authorDate":"2020-01-09 02:18:20","commitOrder":4,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    assertThat(input.skip(1)).isEqualTo(0);\n    assertThat(input.read(new byte[1],  0,  0)).isEqualTo(-1);\n\n    input.reset();\n    assertEquals(\"InputStream.reset() succeeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","date":"2020-01-09 02:18:20","endLine":542,"groupId":"2025","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/9f/64b6baba70137bf913ff4153e09f0d7aa290f1.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    assertThat(input.skip(1)).isEqualTo(0);\n    assertThat(input.read(new byte[1],  0,  0)).isEqualTo(-1);\n\n    input.reset();\n    assertEquals(\"InputStream.reset() succeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LiteralByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"}],"commitId":"a104dffcb6b1958a424f5fa6f9e6bdc0ab9b6f9e","commitMessage":"@@@Fix typos (#7050)\n\nUses https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines to find likely typos.  with https://github.com/bwignall/typochecker to help automate the checking.","date":"2020-01-09 02:18:20","modifiedFileCount":"13","status":"M","submitter":"Brian Wignall"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":5,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = testString.newInput();\n    int stringSize = testString.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertWithMessage(\"InputStream.skip()\").that(skipped1).isEqualTo(nearEndIndex);\n    assertWithMessage(\"InputStream.available()\")\n        .that(input.available())\n        .isEqualTo(stringSize - skipped1);\n    assertWithMessage(\"InputStream.mark() is available\").that(input.markSupported()).isTrue();\n    input.mark(0);\n    assertWithMessage(\"InputStream.skip(), read()\")\n        .that(input.read())\n        .isEqualTo(testString.byteAt(nearEndIndex) & 0xFF);\n    assertWithMessage(\"InputStream.available()\")\n        .that(input.available())\n        .isEqualTo(stringSize - skipped1 - 1);\n    long skipped2 = input.skip(stringSize);\n    assertWithMessage(\"InputStream.skip() incomplete\")\n        .that(skipped2)\n        .isEqualTo(stringSize - skipped1 - 1);\n    assertWithMessage(\"InputStream.skip(), no more input\").that(input.available()).isEqualTo(0);\n    assertWithMessage(\"InputStream.skip(), no more input\").that(input.read()).isEqualTo(-1);\n    input.reset();\n    assertWithMessage(\"InputStream.reset() succeeded\")\n        .that(input.available())\n        .isEqualTo(stringSize - skipped1);\n    assertWithMessage(\"InputStream.reset(), read()\")\n        .that(input.read())\n        .isEqualTo(testString.byteAt(nearEndIndex) & 0xFF);\n  }\n","date":"2021-08-10 06:55:00","endLine":701,"groupId":"10525","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1f/1427142bb2e8ecd0e82902a8a97e2fedd983e2.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = testString.newInput();\n    int stringSize = testString.size();\n    int nearEndIndex = stringSize * 2 / 3;\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", testString.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    input.reset();\n    assertEquals(\"InputStream.reset() succeeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", testString.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/NioByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":5,"curCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n\n    long skipped1 = input.skip(nearEndIndex);\n    assertWithMessage(\"InputStream.skip()\").that(skipped1).isEqualTo(nearEndIndex);\n    assertWithMessage(\"InputStream.available()\")\n        .that(input.available())\n        .isEqualTo(stringSize - skipped1);\n    assertWithMessage(\"InputStream.mark() is available\").that(input.markSupported()).isTrue();\n    input.mark(0);\n    assertWithMessage(\"InputStream.skip(), read()\")\n        .that(stringUnderTest.byteAt(nearEndIndex) & 0xFF)\n        .isEqualTo(input.read());\n    assertWithMessage(\"InputStream.available()\")\n        .that(input.available())\n        .isEqualTo(stringSize - skipped1 - 1);\n\n    long skipped2 = input.skip(stringSize);\n    assertWithMessage(\"InputStream.skip() incomplete\")\n        .that(skipped2)\n        .isEqualTo(stringSize - skipped1 - 1);\n    assertWithMessage(\"InputStream.skip(), no more input\").that(input.available()).isEqualTo(0);\n    assertWithMessage(\"InputStream.skip(), no more input\").that(input.read()).isEqualTo(-1);\n    assertThat(input.skip(1)).isEqualTo(0);\n    assertThat(input.read(new byte[1],  0,  0)).isEqualTo(-1);\n\n    input.reset();\n    assertWithMessage(\"InputStream.reset() succeeded\")\n        .that(input.available())\n        .isEqualTo(stringSize - skipped1);\n    assertWithMessage(\"InputStream.reset(), read()\")\n        .that(input.read())\n        .isEqualTo(stringUnderTest.byteAt(nearEndIndex) & 0xFF);\n  }\n","date":"2021-08-10 06:55:00","endLine":642,"groupId":"10525","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testNewInput_skip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/5e/c4a937bb40791b1a2e146759b90dc458c83203.src","preCode":"  public void testNewInput_skip() throws IOException {\n    InputStream input = stringUnderTest.newInput();\n    int stringSize = stringUnderTest.size();\n    int nearEndIndex = stringSize * 2 / 3;\n\n    long skipped1 = input.skip(nearEndIndex);\n    assertEquals(\"InputStream.skip()\", skipped1, nearEndIndex);\n    assertEquals(\"InputStream.available()\", stringSize - skipped1, input.available());\n    assertTrue(\"InputStream.mark() is available\", input.markSupported());\n    input.mark(0);\n    assertEquals(\n        \"InputStream.skip(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n    assertEquals(\"InputStream.available()\", stringSize - skipped1 - 1, input.available());\n\n    long skipped2 = input.skip(stringSize);\n    assertEquals(\"InputStream.skip() incomplete\", skipped2, stringSize - skipped1 - 1);\n    assertEquals(\"InputStream.skip(), no more input\", 0, input.available());\n    assertEquals(\"InputStream.skip(), no more input\", -1, input.read());\n    assertThat(input.skip(1)).isEqualTo(0);\n    assertThat(input.read(new byte[1],  0,  0)).isEqualTo(-1);\n\n    input.reset();\n    assertEquals(\"InputStream.reset() succeeded\", stringSize - skipped1, input.available());\n    assertEquals(\n        \"InputStream.reset(), read()\", stringUnderTest.byteAt(nearEndIndex) & 0xFF, input.read());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LiteralByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
