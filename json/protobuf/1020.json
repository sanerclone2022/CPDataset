[{"authorTime":"2021-03-04 06:59:34","codes":[{"authorDate":"2021-03-04 06:59:34","commitOrder":1,"curCode":"  public void testParseFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseFrom(\n          CodedInputStream.newInstance(\n              new InputStream() {\n                @Override\n                public int read() throws IOException {\n                  throw readException;\n                }\n              }));\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","date":"2021-03-04 06:59:34","endLine":1667,"groupId":"2084","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseFromStream_IOExceptionNotLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/06/d244a643670f068c5192290ce5d3654b35c8f8.src","preCode":"  public void testParseFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseFrom(\n          CodedInputStream.newInstance(\n              new InputStream() {\n                @Override\n                public int read() throws IOException {\n                  throw readException;\n                }\n              }));\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1643,"status":"B"},{"authorDate":"2021-03-04 06:59:34","commitOrder":1,"curCode":"  public void testParseDelimitedFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseDelimitedFrom(\n          new InputStream() {\n            @Override\n            public int read() throws IOException {\n              throw readException;\n            }\n          });\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","date":"2021-03-04 06:59:34","endLine":1692,"groupId":"2084","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseDelimitedFromStream_IOExceptionNotLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/06/d244a643670f068c5192290ce5d3654b35c8f8.src","preCode":"  public void testParseDelimitedFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseDelimitedFrom(\n          new InputStream() {\n            @Override\n            public int read() throws IOException {\n              throw readException;\n            }\n          });\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1669,"status":"B"}],"commitId":"27f4e8b5d93cc5ded69f3a9e7c11b04b68b284d4","commitMessage":"@@@Merge pull request #8350 from haberman/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-03-04 06:59:34","modifiedFileCount":"6","status":"B","submitter":"Joshua Haberman"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testParseFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseFrom(\n          CodedInputStream.newInstance(\n              new InputStream() {\n                @Override\n                public int read() throws IOException {\n                  throw readException;\n                }\n              }));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":1718,"groupId":"1020","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testParseFromStream_IOExceptionNotLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testParseFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseFrom(\n          CodedInputStream.newInstance(\n              new InputStream() {\n                @Override\n                public int read() throws IOException {\n                  throw readException;\n                }\n              }));\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1694,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testParseDelimitedFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseDelimitedFrom(\n          new InputStream() {\n            @Override\n            public int read() throws IOException {\n              throw readException;\n            }\n          });\n      assertWithMessage(\"expected exception\").fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":1744,"groupId":"1020","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testParseDelimitedFromStream_IOExceptionNotLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testParseDelimitedFromStream_IOExceptionNotLost() throws Exception {\n    final IOException readException = new IOException();\n    try {\n      TestAllTypesLite.parseDelimitedFrom(\n          new InputStream() {\n            @Override\n            public int read() throws IOException {\n              throw readException;\n            }\n          });\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      boolean found = false;\n      for (Throwable exception = expected; exception != null; exception = exception.getCause()) {\n        if (exception == readException) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new AssertionError(\"Lost cause of parsing error\", expected);\n      }\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1721,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
