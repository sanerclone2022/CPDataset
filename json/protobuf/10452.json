[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  private void assertImmutable(BooleanArrayList list) {\n    try {\n      list.add(false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(false));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new BooleanArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addBoolean(true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setBoolean(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":459,"groupId":"383","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertImmutable","params":"(BooleanArrayListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/b8/ad1fe4c0eccc92985994252675f32e55c39a80.src","preCode":"  private void assertImmutable(BooleanArrayList list) {\n    try {\n      list.add(false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(false));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new BooleanArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addBoolean(true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setBoolean(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BooleanArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  private void assertImmutable(DoubleArrayList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new DoubleArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addDouble(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setDouble(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":463,"groupId":"398","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImmutable","params":"(DoubleArrayListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/d3/deaa073ab4db8ca307f32affb9b9008b396d8c.src","preCode":"  private void assertImmutable(DoubleArrayList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new DoubleArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addDouble(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setDouble(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DoubleArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-06-30 06:23:27","commitOrder":2,"curCode":"  private void assertImmutable(BooleanArrayList list) {\n\n    try {\n      list.add(true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new BooleanArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addBoolean(false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setBoolean(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2016-06-30 06:38:03","endLine":449,"groupId":"383","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertImmutable","params":"(BooleanArrayListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/ec/1392255479b39d9920e79047d5b211fb195743.src","preCode":"  private void assertImmutable(BooleanArrayList list) {\n    try {\n      list.add(false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(false));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new BooleanArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addBoolean(true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setBoolean(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BooleanArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":2,"curCode":"  private void assertImmutable(DoubleArrayList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new DoubleArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addDouble(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setDouble(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":463,"groupId":"398","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImmutable","params":"(DoubleArrayListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/d3/deaa073ab4db8ca307f32affb9b9008b396d8c.src","preCode":"  private void assertImmutable(DoubleArrayList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n    \n    try {\n      list.add(1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.add(0, 1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(Collections.singletonList(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(new DoubleArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.addDouble(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.set(0, 0D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n    \n    try {\n      list.setDouble(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DoubleArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"N"}],"commitId":"d64a2d9941c36a7bc2a7959ea10ab8363192ac14","commitMessage":"@@@Integrated internal changes from Google\n\nThis includes all internal changes from around May 20 to now.\n","date":"2016-06-30 06:38:03","modifiedFileCount":"44","status":"M","submitter":"Adam Cozzette"},{"authorTime":"2018-08-09 08:00:41","codes":[{"authorDate":"2018-08-09 08:00:41","commitOrder":3,"curCode":"  private void assertImmutable(BooleanList list) {\n\n    try {\n      list.add(true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new BooleanArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addBoolean(false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setBoolean(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2018-08-09 08:00:41","endLine":465,"groupId":"383","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertImmutable","params":"(BooleanListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fe/be8537f6e33b9ffb9c5dd9fd2a96eb12a48811.src","preCode":"  private void assertImmutable(BooleanArrayList list) {\n\n    try {\n      list.add(true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new BooleanArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addBoolean(false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setBoolean(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BooleanArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2018-08-09 08:00:41","commitOrder":3,"curCode":"  private void assertImmutable(DoubleList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new DoubleArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addDouble(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setDouble(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2018-08-09 08:00:41","endLine":468,"groupId":"398","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertImmutable","params":"(DoubleListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a4/c2f5aa89d521d76e2541d72b63b551ef6ed0d7.src","preCode":"  private void assertImmutable(DoubleArrayList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new DoubleArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addDouble(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setDouble(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DoubleArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"}],"commitId":"6bbe197e9c1b6fc38cbdc45e3bf83fa7ced792a3","commitMessage":"@@@Down-integrate from google3.\n","date":"2018-08-09 08:00:41","modifiedFileCount":"41","status":"M","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":4,"curCode":"  private void assertImmutable(BooleanList list) {\n\n    try {\n      list.add(true);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, true);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(true));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new BooleanArrayList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(true));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addBoolean(false);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, false);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setBoolean(0, false);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":576,"groupId":"10452","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"assertImmutable","params":"(BooleanListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/20/50507a36f1a6fb49ef7503b42dd9ca0555aad0.src","preCode":"  private void assertImmutable(BooleanList list) {\n\n    try {\n      list.add(true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, true);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new BooleanArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(true));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addBoolean(false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Boolean>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(Boolean.TRUE));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setBoolean(0, false);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BooleanArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":4,"curCode":"  private void assertImmutable(DoubleList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1D);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1D);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Double>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1D));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new DoubleArrayList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1D));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addDouble(0);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1D));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1D));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0D);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setDouble(0, 0);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":576,"groupId":"10452","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"assertImmutable","params":"(DoubleListlist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/28/c05a369e6ca947702da37f9e55534fdbe28bfa.src","preCode":"  private void assertImmutable(DoubleList list) {\n    if (list.contains(1D)) {\n      throw new RuntimeException(\"Cannot test the immutability of lists that contain 1.\");\n    }\n\n    try {\n      list.add(1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.add(0, 1D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(Collections.singletonList(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(new DoubleArrayList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addAll(0, Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.addDouble(0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.clear();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(1);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.remove(new Object());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.removeAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.<Double>emptyList());\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(Collections.singleton(1D));\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.retainAll(UNARY_LIST);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.set(0, 0D);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n\n    try {\n      list.setDouble(0, 0);\n      fail();\n    } catch (UnsupportedOperationException e) {\n      \r\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DoubleArrayListTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
