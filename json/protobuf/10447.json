[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testPrintToUnicodeString() throws Exception {\n    assertEquals(\n        \"optional_string: \\\"abc\\u3042efg\\\"\\n\" +\n        \"optional_bytes: \\\"\\\\343\\\\201\\\\202\\\"\\n\" +\n        \"repeated_string: \\\"\\u3093XYZ\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"abc\\u3042efg\")\n            .setOptionalBytes(bytes(0xe3, 0x81, 0x82))\n            .addRepeatedString(\"\\u3093XYZ\")\n            .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"a\\\\\\\\bc\\\\\\\"ef\\\\\\\"g\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"a\\\\bc\\\"ef\\\"g\")\n            .build()));\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder()\n        .setOptionalString(\"a\\\\bc\\\\\\\"ef\\\"g\")\n        .build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printToUnicodeString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","date":"2016-01-14 03:22:18","endLine":881,"groupId":"2177","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrintToUnicodeString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1d/f4fad778dd3dcac9990e0ae573770c7409d033.src","preCode":"  public void testPrintToUnicodeString() throws Exception {\n    assertEquals(\n        \"optional_string: \\\"abc\\u3042efg\\\"\\n\" +\n        \"optional_bytes: \\\"\\\\343\\\\201\\\\202\\\"\\n\" +\n        \"repeated_string: \\\"\\u3093XYZ\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"abc\\u3042efg\")\n            .setOptionalBytes(bytes(0xe3, 0x81, 0x82))\n            .addRepeatedString(\"\\u3093XYZ\")\n            .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"a\\\\\\\\bc\\\\\\\"ef\\\\\\\"g\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"a\\\\bc\\\"ef\\\"g\")\n            .build()));\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder()\n        .setOptionalString(\"a\\\\bc\\\\\\\"ef\\\"g\")\n        .build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printToUnicodeString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/TextFormatTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":856,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testPrintToUnicodeStringWithNewlines() throws Exception {\n    \r\n    assertEquals(\"optional_string: \\\"test newlines\\\\n\\\\nin\\\\nstring\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"test newlines\\n\\nin\\nstring\")\n            .build()));\n\n    \r\n    assertEquals(\"optional_string: \\\"\\\\ntest\\\\nnewlines\\\\n\\\\nin\\\\nstring\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n            .build()));\n\n    \r\n    assertEquals(\"optional_string: \\\"\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\")\n            .build()));\n    assertEquals(\"optional_string: \\\"\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\\n\")\n            .build()));\n    assertEquals(\"optional_string: \\\"\\\\n\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\\n\\n\")\n            .build()));\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder()\n        .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n        .build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printToUnicodeString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","date":"2016-01-14 03:22:18","endLine":917,"groupId":"2177","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrintToUnicodeStringWithNewlines","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1d/f4fad778dd3dcac9990e0ae573770c7409d033.src","preCode":"  public void testPrintToUnicodeStringWithNewlines() throws Exception {\n    \r\n    assertEquals(\"optional_string: \\\"test newlines\\\\n\\\\nin\\\\nstring\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"test newlines\\n\\nin\\nstring\")\n            .build()));\n\n    \r\n    assertEquals(\"optional_string: \\\"\\\\ntest\\\\nnewlines\\\\n\\\\nin\\\\nstring\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n            .build()));\n\n    \r\n    assertEquals(\"optional_string: \\\"\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\")\n            .build()));\n    assertEquals(\"optional_string: \\\"\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\\n\")\n            .build()));\n    assertEquals(\"optional_string: \\\"\\\\n\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder()\n            .setOptionalString(\"\\n\\n\")\n            .build()));\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder()\n        .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n        .build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printToUnicodeString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/TextFormatTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":883,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2019-06-12 21:03:41","codes":[{"authorDate":"2019-06-12 21:03:41","commitOrder":2,"curCode":"  public void testPrintToUnicodeString() throws Exception {\n    assertEquals(\n        \"optional_string: \\\"abc\\u3042efg\\\"\\n\"\n            + \"optional_bytes: \\\"\\\\343\\\\201\\\\202\\\"\\n\"\n            + \"repeated_string: \\\"\\u3093XYZ\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(\n                TestAllTypes.newBuilder()\n                    .setOptionalString(\"abc\\u3042efg\")\n                    .setOptionalBytes(bytes(0xe3, 0x81, 0x82))\n                    .addRepeatedString(\"\\u3093XYZ\")\n                    .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"a\\\\\\\\bc\\\\\\\"ef\\\\\\\"g\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\"ef\\\"g\").build()));\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\\\\\"ef\\\"g\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","date":"2019-06-12 21:03:41","endLine":954,"groupId":"2177","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrintToUnicodeString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/44/21c0cc4b20df2c7f89e248da590c85b5675e59.src","preCode":"  public void testPrintToUnicodeString() throws Exception {\n    assertEquals(\n        \"optional_string: \\\"abc\\u3042efg\\\"\\n\"\n            + \"optional_bytes: \\\"\\\\343\\\\201\\\\202\\\"\\n\"\n            + \"repeated_string: \\\"\\u3093XYZ\\\"\\n\",\n        TextFormat.printToUnicodeString(\n            TestAllTypes.newBuilder()\n                .setOptionalString(\"abc\\u3042efg\")\n                .setOptionalBytes(bytes(0xe3, 0x81, 0x82))\n                .addRepeatedString(\"\\u3093XYZ\")\n                .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"a\\\\\\\\bc\\\\\\\"ef\\\\\\\"g\\\"\\n\",\n        TextFormat.printToUnicodeString(\n            TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\"ef\\\"g\").build()));\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\\\\\"ef\\\"g\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printToUnicodeString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/TextFormatTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":928,"status":"M"},{"authorDate":"2019-06-12 21:03:41","commitOrder":2,"curCode":"  public void testPrintToUnicodeStringWithNewlines() throws Exception {\n    \r\n    assertEquals(\n        \"optional_string: \\\"test newlines\\\\n\\\\nin\\\\nstring\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(\n                TestAllTypes.newBuilder()\n                    .setOptionalString(\"test newlines\\n\\nin\\nstring\")\n                    .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"\\\\ntest\\\\nnewlines\\\\n\\\\nin\\\\nstring\\\\n\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(\n                TestAllTypes.newBuilder()\n                    .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n                    .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()));\n    assertEquals(\n        \"optional_string: \\\"\\\\n\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"\\n\").build()));\n    assertEquals(\n        \"optional_string: \\\"\\\\n\\\\n\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"\\n\\n\").build()));\n\n    \r\n    TestAllTypes message =\n        TestAllTypes.newBuilder().setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","date":"2019-06-12 21:03:41","endLine":1000,"groupId":"2177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrintToUnicodeStringWithNewlines","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/44/21c0cc4b20df2c7f89e248da590c85b5675e59.src","preCode":"  public void testPrintToUnicodeStringWithNewlines() throws Exception {\n    \r\n    assertEquals(\n        \"optional_string: \\\"test newlines\\\\n\\\\nin\\\\nstring\\\"\\n\",\n        TextFormat.printToUnicodeString(\n            TestAllTypes.newBuilder().setOptionalString(\"test newlines\\n\\nin\\nstring\").build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"\\\\ntest\\\\nnewlines\\\\n\\\\nin\\\\nstring\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(\n            TestAllTypes.newBuilder()\n                .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n                .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder().setOptionalString(\"\").build()));\n    assertEquals(\n        \"optional_string: \\\"\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(TestAllTypes.newBuilder().setOptionalString(\"\\n\").build()));\n    assertEquals(\n        \"optional_string: \\\"\\\\n\\\\n\\\"\\n\",\n        TextFormat.printToUnicodeString(\n            TestAllTypes.newBuilder().setOptionalString(\"\\n\\n\").build()));\n\n    \r\n    TestAllTypes message =\n        TestAllTypes.newBuilder().setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printToUnicodeString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/TextFormatTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":956,"status":"M"}],"commitId":"61301f01552dd84d744a05c88af95833c600a1a7","commitMessage":"@@@Merge pull request #6245 from haon4/201906111559\n\nDown Integrate to GitHub","date":"2019-06-12 21:03:41","modifiedFileCount":"9","status":"M","submitter":"Hao Nguyen"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testPrintToUnicodeString() throws Exception {\n    assertThat(\n            TextFormat.printer()\n                .escapingNonAscii(false)\n                .printToString(\n                    TestAllTypes.newBuilder()\n                        .setOptionalString(\"abc\\u3042efg\")\n                        .setOptionalBytes(bytes(0xe3, 0x81, 0x82))\n                        .addRepeatedString(\"\\u3093XYZ\")\n                        .build()))\n        .isEqualTo(\n            \"optional_string: \\\"abc\\u3042efg\\\"\\n\"\n                + \"optional_bytes: \\\"\\\\343\\\\201\\\\202\\\"\\n\"\n                + \"repeated_string: \\\"\\u3093XYZ\\\"\\n\");\n\n    \r\n    assertThat(\n            TextFormat.printer()\n                .escapingNonAscii(false)\n                .printToString(TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\"ef\\\"g\").build()))\n        .isEqualTo(\"optional_string: \\\"a\\\\\\\\bc\\\\\\\"ef\\\\\\\"g\\\"\\n\");\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\\\\\"ef\\\"g\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message), builder);\n    assertThat(builder.getOptionalString()).isEqualTo(message.getOptionalString());\n  }\n","date":"2021-08-10 06:55:00","endLine":1297,"groupId":"10447","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrintToUnicodeString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/69/568e1df5e2a4320fcad1e8090fffc838e50ebb.src","preCode":"  public void testPrintToUnicodeString() throws Exception {\n    assertEquals(\n        \"optional_string: \\\"abc\\u3042efg\\\"\\n\"\n            + \"optional_bytes: \\\"\\\\343\\\\201\\\\202\\\"\\n\"\n            + \"repeated_string: \\\"\\u3093XYZ\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(\n                TestAllTypes.newBuilder()\n                    .setOptionalString(\"abc\\u3042efg\")\n                    .setOptionalBytes(bytes(0xe3, 0x81, 0x82))\n                    .addRepeatedString(\"\\u3093XYZ\")\n                    .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"a\\\\\\\\bc\\\\\\\"ef\\\\\\\"g\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\"ef\\\"g\").build()));\n\n    \r\n    TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"a\\\\bc\\\\\\\"ef\\\"g\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/TextFormatTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testPrintToUnicodeStringWithNewlines() throws Exception {\n    \r\n    assertThat(\n            TextFormat.printer()\n                .escapingNonAscii(false)\n                .printToString(\n                    TestAllTypes.newBuilder()\n                        .setOptionalString(\"test newlines\\n\\nin\\nstring\")\n                        .build()))\n        .isEqualTo(\"optional_string: \\\"test newlines\\\\n\\\\nin\\\\nstring\\\"\\n\");\n\n    \r\n    assertThat(\n            TextFormat.printer()\n                .escapingNonAscii(false)\n                .printToString(\n                    TestAllTypes.newBuilder()\n                        .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n                        .build()))\n        .isEqualTo(\"optional_string: \\\"\\\\ntest\\\\nnewlines\\\\n\\\\nin\\\\nstring\\\\n\\\"\\n\");\n\n    \r\n    assertThat(\n            TextFormat.printer()\n                .escapingNonAscii(false)\n                .printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()))\n        .isEqualTo(\"optional_string: \\\"\\\"\\n\");\n    assertThat(\n            TextFormat.printer()\n                .escapingNonAscii(false)\n                .printToString(TestAllTypes.newBuilder().setOptionalString(\"\\n\").build()))\n        .isEqualTo(\"optional_string: \\\"\\\\n\\\"\\n\");\n    assertThat(\n            TextFormat.printer()\n                .escapingNonAscii(false)\n                .printToString(TestAllTypes.newBuilder().setOptionalString(\"\\n\\n\").build()))\n        .isEqualTo(\"optional_string: \\\"\\\\n\\\\n\\\"\\n\");\n\n    \r\n    TestAllTypes message =\n        TestAllTypes.newBuilder().setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message), builder);\n    assertThat(builder.getOptionalString()).isEqualTo(message.getOptionalString());\n  }\n","date":"2021-08-10 06:55:00","endLine":1344,"groupId":"10447","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrintToUnicodeStringWithNewlines","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/69/568e1df5e2a4320fcad1e8090fffc838e50ebb.src","preCode":"  public void testPrintToUnicodeStringWithNewlines() throws Exception {\n    \r\n    assertEquals(\n        \"optional_string: \\\"test newlines\\\\n\\\\nin\\\\nstring\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(\n                TestAllTypes.newBuilder()\n                    .setOptionalString(\"test newlines\\n\\nin\\nstring\")\n                    .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"\\\\ntest\\\\nnewlines\\\\n\\\\nin\\\\nstring\\\\n\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(\n                TestAllTypes.newBuilder()\n                    .setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\")\n                    .build()));\n\n    \r\n    assertEquals(\n        \"optional_string: \\\"\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()));\n    assertEquals(\n        \"optional_string: \\\"\\\\n\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"\\n\").build()));\n    assertEquals(\n        \"optional_string: \\\"\\\\n\\\\n\\\"\\n\",\n        TextFormat.printer()\n            .escapingNonAscii(false)\n            .printToString(TestAllTypes.newBuilder().setOptionalString(\"\\n\\n\").build()));\n\n    \r\n    TestAllTypes message =\n        TestAllTypes.newBuilder().setOptionalString(\"\\ntest\\nnewlines\\n\\nin\\nstring\\n\").build();\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message), builder);\n    assertEquals(message.getOptionalString(), builder.getOptionalString());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/TextFormatTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1300,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
