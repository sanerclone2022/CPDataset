[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(message2.getFooMessage().getQuxInt(), 234);\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":1511,"groupId":"1817","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneofSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/70/812b953f57ff7335eb7c6e183eda8b414e8b44.src","preCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(message2.getFooMessage().getQuxInt(), 234);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1470,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testOneofNestedBuilderOnChangePropagation() {\n    NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder();\n    TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder();\n    builder.getOneofNestedMessageBuilder();\n    assertTrue(builder.hasOneofNestedMessage());\n    assertTrue(parentBuilder.hasPayload());\n    NestedTestAllTypes message = parentBuilder.build();\n    assertTrue(message.hasPayload());\n    assertTrue(message.getPayload().hasOneofNestedMessage());\n  }\n","date":"2016-01-14 03:22:18","endLine":1522,"groupId":"942","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneofNestedBuilderOnChangePropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/70/812b953f57ff7335eb7c6e183eda8b414e8b44.src","preCode":"  public void testOneofNestedBuilderOnChangePropagation() {\n    NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder();\n    TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder();\n    builder.getOneofNestedMessageBuilder();\n    assertTrue(builder.hasOneofNestedMessage());\n    assertTrue(parentBuilder.hasPayload());\n    NestedTestAllTypes message = parentBuilder.build();\n    assertTrue(message.hasPayload());\n    assertTrue(message.getPayload().hasOneofNestedMessage());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1513,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2017-08-22 01:39:27","commitOrder":2,"curCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(123, message2.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(\"foo\", message2.getFooString());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, message2.getFooEnum());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(234, message2.getFooMessage().getQuxInt());\n    }\n  }\n","date":"2017-08-22 01:39:27","endLine":1518,"groupId":"1817","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneofSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a4/311d17dbe32f8de1d3cdb93a7fb2bdeabac9c3.src","preCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(message2.getFooMessage().getQuxInt(), 234);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1477,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":2,"curCode":"  public void testOneofNestedBuilderOnChangePropagation() {\n    NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder();\n    TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder();\n    builder.getOneofNestedMessageBuilder();\n    assertTrue(builder.hasOneofNestedMessage());\n    assertTrue(parentBuilder.hasPayload());\n    NestedTestAllTypes message = parentBuilder.build();\n    assertTrue(message.hasPayload());\n    assertTrue(message.getPayload().hasOneofNestedMessage());\n  }\n","date":"2016-01-14 03:22:18","endLine":1522,"groupId":"942","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneofNestedBuilderOnChangePropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/70/812b953f57ff7335eb7c6e183eda8b414e8b44.src","preCode":"  public void testOneofNestedBuilderOnChangePropagation() {\n    NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder();\n    TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder();\n    builder.getOneofNestedMessageBuilder();\n    assertTrue(builder.hasOneofNestedMessage());\n    assertTrue(parentBuilder.hasPayload());\n    NestedTestAllTypes message = parentBuilder.build();\n    assertTrue(message.hasPayload());\n    assertTrue(message.getPayload().hasOneofNestedMessage());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1513,"status":"N"}],"commitId":"ba4e54724d2e6a1881c4fe88664d81fbacaf8c08","commitMessage":"@@@Merge pull request #3529 from pherl/merge3.4.x\n\nMerge 3.4.x into master","date":"2017-08-22 01:39:27","modifiedFileCount":"32","status":"M","submitter":"Jisi Liu"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooInt()).isTrue();\n      assertThat(message2.getFooInt()).isEqualTo(123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooString()).isTrue();\n      assertThat(message2.getFooString()).isEqualTo(\"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooEnum()).isTrue();\n      assertThat(message2.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message =\n          builder\n              .setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build())\n              .build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooMessage()).isTrue();\n      assertThat(message2.getFooMessage().getQuxInt()).isEqualTo(234);\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":1736,"groupId":"10509","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testOneofSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fb/ba612bd2a86e442aceac2543c138810d348cc0.src","preCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(123, message2.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(\"foo\", message2.getFooString());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, message2.getFooEnum());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message =\n          builder\n              .setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build())\n              .build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(234, message2.getFooMessage().getQuxInt());\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1693,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testOneofNestedBuilderOnChangePropagation() {\n    NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder();\n    TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder();\n    builder.getOneofNestedMessageBuilder();\n    assertThat(builder.hasOneofNestedMessage()).isTrue();\n    assertThat(parentBuilder.hasPayload()).isTrue();\n    NestedTestAllTypes message = parentBuilder.build();\n    assertThat(message.hasPayload()).isTrue();\n    assertThat(message.getPayload().hasOneofNestedMessage()).isTrue();\n  }\n","date":"2021-08-10 06:55:00","endLine":1748,"groupId":"10509","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testOneofNestedBuilderOnChangePropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fb/ba612bd2a86e442aceac2543c138810d348cc0.src","preCode":"  public void testOneofNestedBuilderOnChangePropagation() {\n    NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder();\n    TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder();\n    builder.getOneofNestedMessageBuilder();\n    assertTrue(builder.hasOneofNestedMessage());\n    assertTrue(parentBuilder.hasPayload());\n    NestedTestAllTypes message = parentBuilder.build();\n    assertTrue(message.hasPayload());\n    assertTrue(message.getPayload().hasOneofNestedMessage());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1739,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
