[{"authorTime":"2016-06-30 06:23:27","codes":[{"authorDate":"2019-04-06 07:39:18","commitOrder":2,"curCode":"  public void testSanityCopyOnWrite() throws InvalidProtocolBufferException {\n    \r\n    \r\n    \r\n\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite message = builder.build();\n    TestAllTypesLite messageAfterBuild;\n    builder.setOptionalBool(true);\n    assertEquals(false, message.getOptionalBool());\n    assertEquals(true, builder.getOptionalBool());\n    messageAfterBuild = builder.build();\n    assertEquals(true, messageAfterBuild.getOptionalBool());\n    assertEquals(false, message.getOptionalBool());\n    builder.clearOptionalBool();\n    assertEquals(false, builder.getOptionalBool());\n    assertEquals(true, messageAfterBuild.getOptionalBool());\n\n    message = builder.build();\n    builder.setOptionalBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), builder.getOptionalBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getOptionalBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    builder.clearOptionalBytes();\n    assertEquals(ByteString.EMPTY, builder.getOptionalBytes());\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getOptionalBytes());\n\n    message = builder.build();\n    builder.setOptionalCord(\"hi\");\n    assertEquals(\"\", message.getOptionalCord());\n    assertEquals(\"hi\", builder.getOptionalCord());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalCord());\n    assertEquals(\"\", message.getOptionalCord());\n    builder.clearOptionalCord();\n    assertEquals(\"\", builder.getOptionalCord());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalCord());\n\n    message = builder.build();\n    builder.setOptionalCordBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalCordBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalCordBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalCordBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalCordBytes());\n    builder.clearOptionalCord();\n    assertEquals(ByteString.EMPTY, builder.getOptionalCordBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalCordBytes());\n\n    message = builder.build();\n    builder.setOptionalDouble(1);\n    assertEquals(0D, message.getOptionalDouble(), 0.0);\n    assertEquals(1D, builder.getOptionalDouble(), 0.0);\n    messageAfterBuild = builder.build();\n    assertEquals(1D, messageAfterBuild.getOptionalDouble(), 0.0);\n    assertEquals(0D, message.getOptionalDouble(), 0.0);\n    builder.clearOptionalDouble();\n    assertEquals(0D, builder.getOptionalDouble(), 0.0);\n    assertEquals(1D, messageAfterBuild.getOptionalDouble(), 0.0);\n\n    message = builder.build();\n    builder.setOptionalFixed32(1);\n    assertEquals(0, message.getOptionalFixed32());\n    assertEquals(1, builder.getOptionalFixed32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalFixed32());\n    assertEquals(0, message.getOptionalFixed32());\n    builder.clearOptionalFixed32();\n    assertEquals(0, builder.getOptionalFixed32());\n    assertEquals(1, messageAfterBuild.getOptionalFixed32());\n\n    message = builder.build();\n    builder.setOptionalFixed64(1);\n    assertEquals(0L, message.getOptionalFixed64());\n    assertEquals(1L, builder.getOptionalFixed64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalFixed64());\n    assertEquals(0L, message.getOptionalFixed64());\n    builder.clearOptionalFixed64();\n    assertEquals(0L, builder.getOptionalFixed64());\n    assertEquals(1L, messageAfterBuild.getOptionalFixed64());\n\n    message = builder.build();\n    builder.setOptionalFloat(1);\n    assertEquals(0F, message.getOptionalFloat(), 0.0f);\n    assertEquals(1F, builder.getOptionalFloat(), 0.0f);\n    messageAfterBuild = builder.build();\n    assertEquals(1F, messageAfterBuild.getOptionalFloat(), 0.0f);\n    assertEquals(0F, message.getOptionalFloat(), 0.0f);\n    builder.clearOptionalFloat();\n    assertEquals(0F, builder.getOptionalFloat(), 0.0f);\n    assertEquals(1F, messageAfterBuild.getOptionalFloat(), 0.0f);\n\n    message = builder.build();\n    builder.setOptionalForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, message.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, builder.getOptionalForeignEnum());\n    messageAfterBuild = builder.build();\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, message.getOptionalForeignEnum());\n    builder.clearOptionalForeignEnum();\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, builder.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getOptionalForeignEnum());\n\n    message = builder.build();\n    ForeignMessageLite foreignMessage = ForeignMessageLite.newBuilder().setC(1).build();\n    builder.setOptionalForeignMessage(foreignMessage);\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    assertEquals(foreignMessage, builder.getOptionalForeignMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(foreignMessage, messageAfterBuild.getOptionalForeignMessage());\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    builder.clearOptionalForeignMessage();\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getOptionalForeignMessage());\n    assertEquals(foreignMessage, messageAfterBuild.getOptionalForeignMessage());\n\n    message = builder.build();\n    ForeignMessageLite foreignMessageC3 = ForeignMessageLite.newBuilder().setC(3).build();\n    builder.setOptionalForeignMessage(foreignMessageC3);\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    assertEquals(foreignMessageC3, builder.getOptionalForeignMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(foreignMessageC3, messageAfterBuild.getOptionalForeignMessage());\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    builder.clearOptionalForeignMessage();\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getOptionalForeignMessage());\n    assertEquals(foreignMessageC3, messageAfterBuild.getOptionalForeignMessage());\n\n    message = builder.build();\n    OptionalGroup optionalGroup = OptionalGroup.newBuilder().setA(1).build();\n    builder.setOptionalGroup(optionalGroup);\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    assertEquals(optionalGroup, builder.getOptionalGroup());\n    messageAfterBuild = builder.build();\n    assertEquals(optionalGroup, messageAfterBuild.getOptionalGroup());\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    builder.clearOptionalGroup();\n    assertEquals(OptionalGroup.getDefaultInstance(), builder.getOptionalGroup());\n    assertEquals(optionalGroup, messageAfterBuild.getOptionalGroup());\n\n    message = builder.build();\n    OptionalGroup.Builder optionalGroupBuilder = OptionalGroup.newBuilder().setA(3);\n    builder.setOptionalGroup(optionalGroupBuilder);\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    assertEquals(optionalGroupBuilder.build(), builder.getOptionalGroup());\n    messageAfterBuild = builder.build();\n    assertEquals(optionalGroupBuilder.build(), messageAfterBuild.getOptionalGroup());\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    builder.clearOptionalGroup();\n    assertEquals(OptionalGroup.getDefaultInstance(), builder.getOptionalGroup());\n    assertEquals(optionalGroupBuilder.build(), messageAfterBuild.getOptionalGroup());\n\n    message = builder.build();\n    builder.setOptionalInt32(1);\n    assertEquals(0, message.getOptionalInt32());\n    assertEquals(1, builder.getOptionalInt32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalInt32());\n    assertEquals(0, message.getOptionalInt32());\n    builder.clearOptionalInt32();\n    assertEquals(0, builder.getOptionalInt32());\n    assertEquals(1, messageAfterBuild.getOptionalInt32());\n\n    message = builder.build();\n    builder.setOptionalInt64(1);\n    assertEquals(0L, message.getOptionalInt64());\n    assertEquals(1L, builder.getOptionalInt64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalInt64());\n    assertEquals(0L, message.getOptionalInt64());\n    builder.clearOptionalInt64();\n    assertEquals(0L, builder.getOptionalInt64());\n    assertEquals(1L, messageAfterBuild.getOptionalInt64());\n\n    message = builder.build();\n    NestedMessage nestedMessage = NestedMessage.newBuilder().setBb(1).build();\n    builder.setOptionalLazyMessage(nestedMessage);\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    assertEquals(nestedMessage, builder.getOptionalLazyMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(nestedMessage, messageAfterBuild.getOptionalLazyMessage());\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    builder.clearOptionalLazyMessage();\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getOptionalLazyMessage());\n    assertEquals(nestedMessage, messageAfterBuild.getOptionalLazyMessage());\n\n    message = builder.build();\n    NestedMessage.Builder nestedMessageBuilder = NestedMessage.newBuilder().setBb(3);\n    builder.setOptionalLazyMessage(nestedMessageBuilder);\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    assertEquals(nestedMessageBuilder.build(), builder.getOptionalLazyMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getOptionalLazyMessage());\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    builder.clearOptionalLazyMessage();\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getOptionalLazyMessage());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getOptionalLazyMessage());\n\n    message = builder.build();\n    builder.setOptionalSfixed32(1);\n    assertEquals(0, message.getOptionalSfixed32());\n    assertEquals(1, builder.getOptionalSfixed32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalSfixed32());\n    assertEquals(0, message.getOptionalSfixed32());\n    builder.clearOptionalSfixed32();\n    assertEquals(0, builder.getOptionalSfixed32());\n    assertEquals(1, messageAfterBuild.getOptionalSfixed32());\n\n    message = builder.build();\n    builder.setOptionalSfixed64(1);\n    assertEquals(0L, message.getOptionalSfixed64());\n    assertEquals(1L, builder.getOptionalSfixed64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalSfixed64());\n    assertEquals(0L, message.getOptionalSfixed64());\n    builder.clearOptionalSfixed64();\n    assertEquals(0L, builder.getOptionalSfixed64());\n    assertEquals(1L, messageAfterBuild.getOptionalSfixed64());\n\n    message = builder.build();\n    builder.setOptionalSint32(1);\n    assertEquals(0, message.getOptionalSint32());\n    assertEquals(1, builder.getOptionalSint32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalSint32());\n    builder.clearOptionalSint32();\n    assertEquals(0, builder.getOptionalSint32());\n    assertEquals(1, messageAfterBuild.getOptionalSint32());\n\n    message = builder.build();\n    builder.setOptionalSint64(1);\n    assertEquals(0L, message.getOptionalSint64());\n    assertEquals(1L, builder.getOptionalSint64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalSint64());\n    assertEquals(0L, message.getOptionalSint64());\n    builder.clearOptionalSint64();\n    assertEquals(0L, builder.getOptionalSint64());\n    assertEquals(1L, messageAfterBuild.getOptionalSint64());\n\n    message = builder.build();\n    builder.setOptionalString(\"hi\");\n    assertEquals(\"\", message.getOptionalString());\n    assertEquals(\"hi\", builder.getOptionalString());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalString());\n    assertEquals(\"\", message.getOptionalString());\n    builder.clearOptionalString();\n    assertEquals(\"\", builder.getOptionalString());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalString());\n\n    message = builder.build();\n    builder.setOptionalStringBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalStringBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalStringBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalStringBytes());\n    builder.clearOptionalString();\n    assertEquals(ByteString.EMPTY, builder.getOptionalStringBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringBytes());\n\n    message = builder.build();\n    builder.setOptionalStringPiece(\"hi\");\n    assertEquals(\"\", message.getOptionalStringPiece());\n    assertEquals(\"hi\", builder.getOptionalStringPiece());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalStringPiece());\n    assertEquals(\"\", message.getOptionalStringPiece());\n    builder.clearOptionalStringPiece();\n    assertEquals(\"\", builder.getOptionalStringPiece());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalStringPiece());\n\n    message = builder.build();\n    builder.setOptionalStringPieceBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalStringPieceBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalStringPieceBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringPieceBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalStringPieceBytes());\n    builder.clearOptionalStringPiece();\n    assertEquals(ByteString.EMPTY, builder.getOptionalStringPieceBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringPieceBytes());\n\n    message = builder.build();\n    builder.setOptionalUint32(1);\n    assertEquals(0, message.getOptionalUint32());\n    assertEquals(1, builder.getOptionalUint32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalUint32());\n    assertEquals(0, message.getOptionalUint32());\n    builder.clearOptionalUint32();\n    assertEquals(0, builder.getOptionalUint32());\n    assertEquals(1, messageAfterBuild.getOptionalUint32());\n\n    message = builder.build();\n    builder.setOptionalUint64(1);\n    assertEquals(0L, message.getOptionalUint64());\n    assertEquals(1L, builder.getOptionalUint64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalUint64());\n    assertEquals(0L, message.getOptionalUint64());\n    builder.clearOptionalUint64();\n    assertEquals(0L, builder.getOptionalUint64());\n    assertEquals(1L, messageAfterBuild.getOptionalUint64());\n\n    message = builder.build();\n    builder.addAllRepeatedBool(singletonList(true));\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    assertEquals(singletonList(true), builder.getRepeatedBoolList());\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertEquals(emptyList(), builder.getRepeatedBoolList());\n    assertEquals(singletonList(true), messageAfterBuild.getRepeatedBoolList());\n\n    message = builder.build();\n    builder.addAllRepeatedBytes(singletonList(ByteString.copyFromUtf8(\"hi\")));\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    assertEquals(singletonList(ByteString.copyFromUtf8(\"hi\")), builder.getRepeatedBytesList());\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertEquals(emptyList(), builder.getRepeatedBytesList());\n    assertEquals(\n        singletonList(ByteString.copyFromUtf8(\"hi\")), messageAfterBuild.getRepeatedBytesList());\n\n    message = builder.build();\n    builder.addAllRepeatedCord(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedCordList());\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertEquals(emptyList(), builder.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedCordList());\n\n    message = builder.build();\n    builder.addAllRepeatedDouble(singletonList(1D));\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), builder.getRepeatedDoubleList());\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertEquals(emptyList(), builder.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), messageAfterBuild.getRepeatedDoubleList());\n\n    message = builder.build();\n    builder.addAllRepeatedFixed32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedFixed32List());\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertEquals(emptyList(), builder.getRepeatedFixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedFixed32List());\n\n    message = builder.build();\n    builder.addAllRepeatedFixed64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedFixed64List());\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertEquals(emptyList(), builder.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedFixed64List());\n\n    message = builder.build();\n    builder.addAllRepeatedFloat(singletonList(1F));\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    assertEquals(singletonList(1F), builder.getRepeatedFloatList());\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertEquals(emptyList(), builder.getRepeatedFloatList());\n    assertEquals(singletonList(1F), messageAfterBuild.getRepeatedFloatList());\n\n    message = builder.build();\n    builder.addAllRepeatedForeignEnum(singletonList(ForeignEnumLite.FOREIGN_LITE_BAR));\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR), builder.getRepeatedForeignEnumList());\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertEquals(emptyList(), builder.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR),\n        messageAfterBuild.getRepeatedForeignEnumList());\n\n    message = builder.build();\n    builder.addAllRepeatedForeignMessage(singletonList(foreignMessage));\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), builder.getRepeatedForeignMessageList());\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignMessage();\n    assertEquals(emptyList(), builder.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), messageAfterBuild.getRepeatedForeignMessageList());\n\n    message = builder.build();\n    builder.addAllRepeatedGroup(singletonList(RepeatedGroup.getDefaultInstance()));\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    assertEquals(singletonList(RepeatedGroup.getDefaultInstance()), builder.getRepeatedGroupList());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedGroup();\n    assertEquals(emptyList(), builder.getRepeatedGroupList());\n    assertEquals(\n        singletonList(RepeatedGroup.getDefaultInstance()),\n        messageAfterBuild.getRepeatedGroupList());\n\n    message = builder.build();\n    builder.addAllRepeatedInt32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    assertEquals(singletonList(1), builder.getRepeatedInt32List());\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertEquals(emptyList(), builder.getRepeatedInt32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedInt32List());\n\n    message = builder.build();\n    builder.addAllRepeatedInt64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    assertEquals(singletonList(1L), builder.getRepeatedInt64List());\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertEquals(emptyList(), builder.getRepeatedInt64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedInt64List());\n\n    message = builder.build();\n    builder.addAllRepeatedLazyMessage(singletonList(nestedMessage));\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), builder.getRepeatedLazyMessageList());\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedLazyMessage();\n    assertEquals(emptyList(), builder.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), messageAfterBuild.getRepeatedLazyMessageList());\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedSfixed32List());\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertEquals(emptyList(), builder.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSfixed32List());\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSfixed64List());\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertEquals(emptyList(), builder.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSfixed64List());\n\n    message = builder.build();\n    builder.addAllRepeatedSint32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    assertEquals(singletonList(1), builder.getRepeatedSint32List());\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertEquals(emptyList(), builder.getRepeatedSint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSint32List());\n\n    message = builder.build();\n    builder.addAllRepeatedSint64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSint64List());\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertEquals(emptyList(), builder.getRepeatedSint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSint64List());\n\n    message = builder.build();\n    builder.addAllRepeatedString(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringList());\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertEquals(emptyList(), builder.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringList());\n\n    message = builder.build();\n    builder.addAllRepeatedStringPiece(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringPieceList());\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertEquals(emptyList(), builder.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringPieceList());\n\n    message = builder.build();\n    builder.addAllRepeatedUint32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    assertEquals(singletonList(1), builder.getRepeatedUint32List());\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertEquals(emptyList(), builder.getRepeatedUint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedUint32List());\n\n    message = builder.build();\n    builder.addAllRepeatedUint64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedUint64List());\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertEquals(emptyList(), builder.getRepeatedUint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedUint64List());\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    assertEquals(singletonList(true), builder.getRepeatedBoolList());\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertEquals(emptyList(), builder.getRepeatedBoolList());\n    assertEquals(singletonList(true), messageAfterBuild.getRepeatedBoolList());\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    assertEquals(singletonList(ByteString.copyFromUtf8(\"hi\")), builder.getRepeatedBytesList());\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertEquals(emptyList(), builder.getRepeatedBytesList());\n    assertEquals(\n        singletonList(ByteString.copyFromUtf8(\"hi\")), messageAfterBuild.getRepeatedBytesList());\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedCordList());\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertEquals(emptyList(), builder.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedCordList());\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), builder.getRepeatedDoubleList());\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertEquals(emptyList(), builder.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), messageAfterBuild.getRepeatedDoubleList());\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedFixed32List());\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertEquals(emptyList(), builder.getRepeatedFixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedFixed32List());\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedFixed64List());\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertEquals(emptyList(), builder.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedFixed64List());\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    assertEquals(singletonList(1F), builder.getRepeatedFloatList());\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertEquals(emptyList(), builder.getRepeatedFloatList());\n    assertEquals(singletonList(1F), messageAfterBuild.getRepeatedFloatList());\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR), builder.getRepeatedForeignEnumList());\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertEquals(emptyList(), builder.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR),\n        messageAfterBuild.getRepeatedForeignEnumList());\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), builder.getRepeatedForeignMessageList());\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedForeignMessage(0);\n    assertEquals(emptyList(), builder.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), messageAfterBuild.getRepeatedForeignMessageList());\n\n    message = builder.build();\n    builder.addRepeatedGroup(RepeatedGroup.getDefaultInstance());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    assertEquals(singletonList(RepeatedGroup.getDefaultInstance()), builder.getRepeatedGroupList());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedGroup(0);\n    assertEquals(emptyList(), builder.getRepeatedGroupList());\n    assertEquals(\n        singletonList(RepeatedGroup.getDefaultInstance()),\n        messageAfterBuild.getRepeatedGroupList());\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    assertEquals(singletonList(1), builder.getRepeatedInt32List());\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertEquals(emptyList(), builder.getRepeatedInt32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedInt32List());\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    assertEquals(singletonList(1L), builder.getRepeatedInt64List());\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertEquals(emptyList(), builder.getRepeatedInt64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedInt64List());\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), builder.getRepeatedLazyMessageList());\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedLazyMessage(0);\n    assertEquals(emptyList(), builder.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), messageAfterBuild.getRepeatedLazyMessageList());\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedSfixed32List());\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertEquals(emptyList(), builder.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSfixed32List());\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSfixed64List());\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertEquals(emptyList(), builder.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSfixed64List());\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    assertEquals(singletonList(1), builder.getRepeatedSint32List());\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertEquals(emptyList(), builder.getRepeatedSint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSint32List());\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSint64List());\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertEquals(emptyList(), builder.getRepeatedSint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSint64List());\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringList());\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertEquals(emptyList(), builder.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringList());\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringPieceList());\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertEquals(emptyList(), builder.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringPieceList());\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    assertEquals(singletonList(1), builder.getRepeatedUint32List());\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertEquals(emptyList(), builder.getRepeatedUint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedUint32List());\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedUint64List());\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertEquals(emptyList(), builder.getRepeatedUint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedUint64List());\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedBoolCount());\n    builder.setRepeatedBool(0, false);\n    assertEquals(true, messageAfterBuild.getRepeatedBool(0));\n    assertEquals(false, builder.getRepeatedBool(0));\n    builder.clearRepeatedBool();\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedBytesCount());\n    builder.setRepeatedBytes(0, ByteString.EMPTY);\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedBytes(0));\n    builder.clearRepeatedBytes();\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedCordCount());\n    builder.setRepeatedCord(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedCord(0));\n    assertEquals(\"\", builder.getRepeatedCord(0));\n    builder.clearRepeatedCord();\n    message = builder.build();\n\n    builder.addRepeatedCordBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedCordCount());\n    builder.setRepeatedCord(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedCordBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedCordBytes(0));\n    builder.clearRepeatedCord();\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedDoubleCount());\n    builder.setRepeatedDouble(0, 0D);\n    assertEquals(1D, messageAfterBuild.getRepeatedDouble(0), 0.0);\n    assertEquals(0D, builder.getRepeatedDouble(0), 0.0);\n    builder.clearRepeatedDouble();\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFixed32Count());\n    builder.setRepeatedFixed32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedFixed32(0));\n    assertEquals(0, builder.getRepeatedFixed32(0));\n    builder.clearRepeatedFixed32();\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFixed64Count());\n    builder.setRepeatedFixed64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedFixed64(0));\n    assertEquals(0L, builder.getRepeatedFixed64(0));\n    builder.clearRepeatedFixed64();\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFloatCount());\n    builder.setRepeatedFloat(0, 0F);\n    assertEquals(1F, messageAfterBuild.getRepeatedFloat(0), 0.0f);\n    assertEquals(0F, builder.getRepeatedFloat(0), 0.0f);\n    builder.clearRepeatedFloat();\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignEnumCount());\n    builder.setRepeatedForeignEnum(0, ForeignEnumLite.FOREIGN_LITE_FOO);\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getRepeatedForeignEnum(0));\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, builder.getRepeatedForeignEnum(0));\n    builder.clearRepeatedForeignEnum();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertEquals(foreignMessage, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessageC3);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertEquals(foreignMessageC3, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(0, foreignMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, foreignMessageC3);\n    assertEquals(foreignMessage, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(foreignMessageC3, builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    RepeatedGroup repeatedGroup = RepeatedGroup.newBuilder().setA(1).build();\n    builder.addRepeatedGroup(repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroup, messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroup, messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    RepeatedGroup.Builder repeatedGroupBuilder = RepeatedGroup.newBuilder().setA(3);\n    builder.addRepeatedGroup(repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroupBuilder.build(), messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroupBuilder.build(), messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedInt32Count());\n    builder.setRepeatedInt32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedInt32(0));\n    assertEquals(0, builder.getRepeatedInt32(0));\n    builder.clearRepeatedInt32();\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedInt64Count());\n    builder.setRepeatedInt64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedInt64(0));\n    assertEquals(0L, builder.getRepeatedInt64(0));\n    builder.clearRepeatedInt64();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessage, messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessage, messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedSfixed32Count());\n    builder.setRepeatedSfixed32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedSfixed32(0));\n    assertEquals(0, builder.getRepeatedSfixed32(0));\n    builder.clearRepeatedSfixed32();\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedSfixed64Count());\n    builder.setRepeatedSfixed64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedSfixed64(0));\n    assertEquals(0L, builder.getRepeatedSfixed64(0));\n    builder.clearRepeatedSfixed64();\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedSint32Count());\n    builder.setRepeatedSint32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedSint32(0));\n    assertEquals(0, builder.getRepeatedSint32(0));\n    builder.clearRepeatedSint32();\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedSint64Count());\n    builder.setRepeatedSint64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedSint64(0));\n    assertEquals(0L, builder.getRepeatedSint64(0));\n    builder.clearRepeatedSint64();\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringCount());\n    builder.setRepeatedString(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedString(0));\n    assertEquals(\"\", builder.getRepeatedString(0));\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringCount());\n    builder.setRepeatedString(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedStringBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedStringBytes(0));\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringPieceCount());\n    builder.setRepeatedStringPiece(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedStringPiece(0));\n    assertEquals(\"\", builder.getRepeatedStringPiece(0));\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedStringPieceBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringPieceCount());\n    builder.setRepeatedStringPiece(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedStringPieceBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedStringPieceBytes(0));\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedUint32Count());\n    builder.setRepeatedUint32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedUint32(0));\n    assertEquals(0, builder.getRepeatedUint32(0));\n    builder.clearRepeatedUint32();\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedUint64Count());\n    builder.setRepeatedUint64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedUint64(0));\n    assertEquals(0L, builder.getRepeatedUint64(0));\n    builder.clearRepeatedUint64();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(true, builder.build().getOptionalBool());\n    builder.clearOptionalBool();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(true, builder.build().getOptionalBool());\n    builder.clear();\n    assertEquals(0, builder.build().getSerializedSize());\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeOptionalForeignMessage(foreignMessage);\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(foreignMessage.getC(), builder.build().getOptionalForeignMessage().getC());\n    builder.clearOptionalForeignMessage();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeOptionalLazyMessage(nestedMessage);\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(nestedMessage.getBb(), builder.build().getOptionalLazyMessage().getBb());\n    builder.clearOptionalLazyMessage();\n\n    message = builder.build();\n    builder.setOneofString(\"hi\");\n    assertEquals(OneofFieldCase.ONEOFFIELD_NOT_SET, message.getOneofFieldCase());\n    assertEquals(OneofFieldCase.ONEOF_STRING, builder.getOneofFieldCase());\n    assertEquals(\"hi\", builder.getOneofString());\n    messageAfterBuild = builder.build();\n    assertEquals(OneofFieldCase.ONEOF_STRING, messageAfterBuild.getOneofFieldCase());\n    assertEquals(\"hi\", messageAfterBuild.getOneofString());\n    builder.setOneofUint32(1);\n    assertEquals(OneofFieldCase.ONEOF_STRING, messageAfterBuild.getOneofFieldCase());\n    assertEquals(\"hi\", messageAfterBuild.getOneofString());\n    assertEquals(OneofFieldCase.ONEOF_UINT32, builder.getOneofFieldCase());\n    assertEquals(1, builder.getOneofUint32());\n    TestAllTypesLiteOrBuilder messageOrBuilder = builder;\n    assertEquals(OneofFieldCase.ONEOF_UINT32, messageOrBuilder.getOneofFieldCase());\n\n    TestAllExtensionsLite.Builder extendableMessageBuilder = TestAllExtensionsLite.newBuilder();\n    TestAllExtensionsLite extendableMessage = extendableMessageBuilder.build();\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 1);\n    assertFalse(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessage = extendableMessageBuilder.build();\n    assertEquals(\n        1, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(1, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 3);\n    assertEquals(\n        3, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(1, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessage = extendableMessageBuilder.build();\n    assertEquals(\n        3, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(3, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n\n    \r\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray());\n    assertFalse(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite));\n\n    extendableMessageBuilder = extendableMessage.toBuilder();\n    extendableMessageBuilder.mergeFrom(\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalFixed32ExtensionLite, 11)\n            .build());\n\n    extendableMessage = extendableMessageBuilder.build();\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray(), registry);\n\n    \r\n    assertEquals(3, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(\n        11, (int) extendableMessage.getExtension(UnittestLite.optionalFixed32ExtensionLite));\n  }\n","date":"2019-04-06 07:39:18","endLine":1318,"groupId":"1847","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSanityCopyOnWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/96/0b2037c1bad1f9bcd313819a2792728baa12b2.src","preCode":"  public void testSanityCopyOnWrite() throws InvalidProtocolBufferException {\n    \r\n    \r\n    \r\n\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite message = builder.build();\n    TestAllTypesLite messageAfterBuild;\n    builder.setOptionalBool(true);\n    assertEquals(false, message.getOptionalBool());\n    assertEquals(true, builder.getOptionalBool());\n    messageAfterBuild = builder.build();\n    assertEquals(true, messageAfterBuild.getOptionalBool());\n    assertEquals(false, message.getOptionalBool());\n    builder.clearOptionalBool();\n    assertEquals(false, builder.getOptionalBool());\n    assertEquals(true, messageAfterBuild.getOptionalBool());\n\n    message = builder.build();\n    builder.setOptionalBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), builder.getOptionalBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getOptionalBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    builder.clearOptionalBytes();\n    assertEquals(ByteString.EMPTY, builder.getOptionalBytes());\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getOptionalBytes());\n\n    message = builder.build();\n    builder.setOptionalCord(\"hi\");\n    assertEquals(\"\", message.getOptionalCord());\n    assertEquals(\"hi\", builder.getOptionalCord());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalCord());\n    assertEquals(\"\", message.getOptionalCord());\n    builder.clearOptionalCord();\n    assertEquals(\"\", builder.getOptionalCord());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalCord());\n\n    message = builder.build();\n    builder.setOptionalCordBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalCordBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalCordBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalCordBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalCordBytes());\n    builder.clearOptionalCord();\n    assertEquals(ByteString.EMPTY, builder.getOptionalCordBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalCordBytes());\n\n    message = builder.build();\n    builder.setOptionalDouble(1);\n    assertEquals(0D, message.getOptionalDouble(), 0.0);\n    assertEquals(1D, builder.getOptionalDouble(), 0.0);\n    messageAfterBuild = builder.build();\n    assertEquals(1D, messageAfterBuild.getOptionalDouble(), 0.0);\n    assertEquals(0D, message.getOptionalDouble(), 0.0);\n    builder.clearOptionalDouble();\n    assertEquals(0D, builder.getOptionalDouble(), 0.0);\n    assertEquals(1D, messageAfterBuild.getOptionalDouble(), 0.0);\n\n    message = builder.build();\n    builder.setOptionalFixed32(1);\n    assertEquals(0, message.getOptionalFixed32());\n    assertEquals(1, builder.getOptionalFixed32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalFixed32());\n    assertEquals(0, message.getOptionalFixed32());\n    builder.clearOptionalFixed32();\n    assertEquals(0, builder.getOptionalFixed32());\n    assertEquals(1, messageAfterBuild.getOptionalFixed32());\n\n    message = builder.build();\n    builder.setOptionalFixed64(1);\n    assertEquals(0L, message.getOptionalFixed64());\n    assertEquals(1L, builder.getOptionalFixed64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalFixed64());\n    assertEquals(0L, message.getOptionalFixed64());\n    builder.clearOptionalFixed64();\n    assertEquals(0L, builder.getOptionalFixed64());\n    assertEquals(1L, messageAfterBuild.getOptionalFixed64());\n\n    message = builder.build();\n    builder.setOptionalFloat(1);\n    assertEquals(0F, message.getOptionalFloat(), 0.0f);\n    assertEquals(1F, builder.getOptionalFloat(), 0.0f);\n    messageAfterBuild = builder.build();\n    assertEquals(1F, messageAfterBuild.getOptionalFloat(), 0.0f);\n    assertEquals(0F, message.getOptionalFloat(), 0.0f);\n    builder.clearOptionalFloat();\n    assertEquals(0F, builder.getOptionalFloat(), 0.0f);\n    assertEquals(1F, messageAfterBuild.getOptionalFloat(), 0.0f);\n\n    message = builder.build();\n    builder.setOptionalForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, message.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, builder.getOptionalForeignEnum());\n    messageAfterBuild = builder.build();\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, message.getOptionalForeignEnum());\n    builder.clearOptionalForeignEnum();\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, builder.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getOptionalForeignEnum());\n\n    message = builder.build();\n    ForeignMessageLite foreignMessage = ForeignMessageLite.newBuilder().setC(1).build();\n    builder.setOptionalForeignMessage(foreignMessage);\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    assertEquals(foreignMessage, builder.getOptionalForeignMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(foreignMessage, messageAfterBuild.getOptionalForeignMessage());\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    builder.clearOptionalForeignMessage();\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getOptionalForeignMessage());\n    assertEquals(foreignMessage, messageAfterBuild.getOptionalForeignMessage());\n\n    message = builder.build();\n    ForeignMessageLite foreignMessageC3 = ForeignMessageLite.newBuilder().setC(3).build();\n    builder.setOptionalForeignMessage(foreignMessageC3);\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    assertEquals(foreignMessageC3, builder.getOptionalForeignMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(foreignMessageC3, messageAfterBuild.getOptionalForeignMessage());\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    builder.clearOptionalForeignMessage();\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getOptionalForeignMessage());\n    assertEquals(foreignMessageC3, messageAfterBuild.getOptionalForeignMessage());\n\n    message = builder.build();\n    OptionalGroup optionalGroup = OptionalGroup.newBuilder().setA(1).build();\n    builder.setOptionalGroup(optionalGroup);\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    assertEquals(optionalGroup, builder.getOptionalGroup());\n    messageAfterBuild = builder.build();\n    assertEquals(optionalGroup, messageAfterBuild.getOptionalGroup());\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    builder.clearOptionalGroup();\n    assertEquals(OptionalGroup.getDefaultInstance(), builder.getOptionalGroup());\n    assertEquals(optionalGroup, messageAfterBuild.getOptionalGroup());\n\n    message = builder.build();\n    OptionalGroup.Builder optionalGroupBuilder = OptionalGroup.newBuilder().setA(3);\n    builder.setOptionalGroup(optionalGroupBuilder);\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    assertEquals(optionalGroupBuilder.build(), builder.getOptionalGroup());\n    messageAfterBuild = builder.build();\n    assertEquals(optionalGroupBuilder.build(), messageAfterBuild.getOptionalGroup());\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    builder.clearOptionalGroup();\n    assertEquals(OptionalGroup.getDefaultInstance(), builder.getOptionalGroup());\n    assertEquals(optionalGroupBuilder.build(), messageAfterBuild.getOptionalGroup());\n\n    message = builder.build();\n    builder.setOptionalInt32(1);\n    assertEquals(0, message.getOptionalInt32());\n    assertEquals(1, builder.getOptionalInt32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalInt32());\n    assertEquals(0, message.getOptionalInt32());\n    builder.clearOptionalInt32();\n    assertEquals(0, builder.getOptionalInt32());\n    assertEquals(1, messageAfterBuild.getOptionalInt32());\n\n    message = builder.build();\n    builder.setOptionalInt64(1);\n    assertEquals(0L, message.getOptionalInt64());\n    assertEquals(1L, builder.getOptionalInt64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalInt64());\n    assertEquals(0L, message.getOptionalInt64());\n    builder.clearOptionalInt64();\n    assertEquals(0L, builder.getOptionalInt64());\n    assertEquals(1L, messageAfterBuild.getOptionalInt64());\n\n    message = builder.build();\n    NestedMessage nestedMessage = NestedMessage.newBuilder().setBb(1).build();\n    builder.setOptionalLazyMessage(nestedMessage);\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    assertEquals(nestedMessage, builder.getOptionalLazyMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(nestedMessage, messageAfterBuild.getOptionalLazyMessage());\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    builder.clearOptionalLazyMessage();\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getOptionalLazyMessage());\n    assertEquals(nestedMessage, messageAfterBuild.getOptionalLazyMessage());\n\n    message = builder.build();\n    NestedMessage.Builder nestedMessageBuilder = NestedMessage.newBuilder().setBb(3);\n    builder.setOptionalLazyMessage(nestedMessageBuilder);\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    assertEquals(nestedMessageBuilder.build(), builder.getOptionalLazyMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getOptionalLazyMessage());\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    builder.clearOptionalLazyMessage();\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getOptionalLazyMessage());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getOptionalLazyMessage());\n\n    message = builder.build();\n    builder.setOptionalSfixed32(1);\n    assertEquals(0, message.getOptionalSfixed32());\n    assertEquals(1, builder.getOptionalSfixed32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalSfixed32());\n    assertEquals(0, message.getOptionalSfixed32());\n    builder.clearOptionalSfixed32();\n    assertEquals(0, builder.getOptionalSfixed32());\n    assertEquals(1, messageAfterBuild.getOptionalSfixed32());\n\n    message = builder.build();\n    builder.setOptionalSfixed64(1);\n    assertEquals(0L, message.getOptionalSfixed64());\n    assertEquals(1L, builder.getOptionalSfixed64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalSfixed64());\n    assertEquals(0L, message.getOptionalSfixed64());\n    builder.clearOptionalSfixed64();\n    assertEquals(0L, builder.getOptionalSfixed64());\n    assertEquals(1L, messageAfterBuild.getOptionalSfixed64());\n\n    message = builder.build();\n    builder.setOptionalSint32(1);\n    assertEquals(0, message.getOptionalSint32());\n    assertEquals(1, builder.getOptionalSint32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalSint32());\n    builder.clearOptionalSint32();\n    assertEquals(0, builder.getOptionalSint32());\n    assertEquals(1, messageAfterBuild.getOptionalSint32());\n\n    message = builder.build();\n    builder.setOptionalSint64(1);\n    assertEquals(0L, message.getOptionalSint64());\n    assertEquals(1L, builder.getOptionalSint64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalSint64());\n    assertEquals(0L, message.getOptionalSint64());\n    builder.clearOptionalSint64();\n    assertEquals(0L, builder.getOptionalSint64());\n    assertEquals(1L, messageAfterBuild.getOptionalSint64());\n\n    message = builder.build();\n    builder.setOptionalString(\"hi\");\n    assertEquals(\"\", message.getOptionalString());\n    assertEquals(\"hi\", builder.getOptionalString());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalString());\n    assertEquals(\"\", message.getOptionalString());\n    builder.clearOptionalString();\n    assertEquals(\"\", builder.getOptionalString());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalString());\n\n    message = builder.build();\n    builder.setOptionalStringBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalStringBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalStringBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalStringBytes());\n    builder.clearOptionalString();\n    assertEquals(ByteString.EMPTY, builder.getOptionalStringBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringBytes());\n\n    message = builder.build();\n    builder.setOptionalStringPiece(\"hi\");\n    assertEquals(\"\", message.getOptionalStringPiece());\n    assertEquals(\"hi\", builder.getOptionalStringPiece());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalStringPiece());\n    assertEquals(\"\", message.getOptionalStringPiece());\n    builder.clearOptionalStringPiece();\n    assertEquals(\"\", builder.getOptionalStringPiece());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalStringPiece());\n\n    message = builder.build();\n    builder.setOptionalStringPieceBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalStringPieceBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalStringPieceBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringPieceBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalStringPieceBytes());\n    builder.clearOptionalStringPiece();\n    assertEquals(ByteString.EMPTY, builder.getOptionalStringPieceBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringPieceBytes());\n\n    message = builder.build();\n    builder.setOptionalUint32(1);\n    assertEquals(0, message.getOptionalUint32());\n    assertEquals(1, builder.getOptionalUint32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalUint32());\n    assertEquals(0, message.getOptionalUint32());\n    builder.clearOptionalUint32();\n    assertEquals(0, builder.getOptionalUint32());\n    assertEquals(1, messageAfterBuild.getOptionalUint32());\n\n    message = builder.build();\n    builder.setOptionalUint64(1);\n    assertEquals(0L, message.getOptionalUint64());\n    assertEquals(1L, builder.getOptionalUint64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalUint64());\n    assertEquals(0L, message.getOptionalUint64());\n    builder.clearOptionalUint64();\n    assertEquals(0L, builder.getOptionalUint64());\n    assertEquals(1L, messageAfterBuild.getOptionalUint64());\n\n    message = builder.build();\n    builder.addAllRepeatedBool(singletonList(true));\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    assertEquals(singletonList(true), builder.getRepeatedBoolList());\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertEquals(emptyList(), builder.getRepeatedBoolList());\n    assertEquals(singletonList(true), messageAfterBuild.getRepeatedBoolList());\n\n    message = builder.build();\n    builder.addAllRepeatedBytes(singletonList(ByteString.copyFromUtf8(\"hi\")));\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    assertEquals(singletonList(ByteString.copyFromUtf8(\"hi\")), builder.getRepeatedBytesList());\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertEquals(emptyList(), builder.getRepeatedBytesList());\n    assertEquals(\n        singletonList(ByteString.copyFromUtf8(\"hi\")), messageAfterBuild.getRepeatedBytesList());\n\n    message = builder.build();\n    builder.addAllRepeatedCord(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedCordList());\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertEquals(emptyList(), builder.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedCordList());\n\n    message = builder.build();\n    builder.addAllRepeatedDouble(singletonList(1D));\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), builder.getRepeatedDoubleList());\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertEquals(emptyList(), builder.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), messageAfterBuild.getRepeatedDoubleList());\n\n    message = builder.build();\n    builder.addAllRepeatedFixed32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedFixed32List());\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertEquals(emptyList(), builder.getRepeatedFixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedFixed32List());\n\n    message = builder.build();\n    builder.addAllRepeatedFixed64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedFixed64List());\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertEquals(emptyList(), builder.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedFixed64List());\n\n    message = builder.build();\n    builder.addAllRepeatedFloat(singletonList(1F));\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    assertEquals(singletonList(1F), builder.getRepeatedFloatList());\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertEquals(emptyList(), builder.getRepeatedFloatList());\n    assertEquals(singletonList(1F), messageAfterBuild.getRepeatedFloatList());\n\n    message = builder.build();\n    builder.addAllRepeatedForeignEnum(singletonList(ForeignEnumLite.FOREIGN_LITE_BAR));\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR), builder.getRepeatedForeignEnumList());\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertEquals(emptyList(), builder.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR),\n        messageAfterBuild.getRepeatedForeignEnumList());\n\n    message = builder.build();\n    builder.addAllRepeatedForeignMessage(singletonList(foreignMessage));\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), builder.getRepeatedForeignMessageList());\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignMessage();\n    assertEquals(emptyList(), builder.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), messageAfterBuild.getRepeatedForeignMessageList());\n\n    message = builder.build();\n    builder.addAllRepeatedGroup(singletonList(RepeatedGroup.getDefaultInstance()));\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    assertEquals(singletonList(RepeatedGroup.getDefaultInstance()), builder.getRepeatedGroupList());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedGroup();\n    assertEquals(emptyList(), builder.getRepeatedGroupList());\n    assertEquals(\n        singletonList(RepeatedGroup.getDefaultInstance()),\n        messageAfterBuild.getRepeatedGroupList());\n\n    message = builder.build();\n    builder.addAllRepeatedInt32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    assertEquals(singletonList(1), builder.getRepeatedInt32List());\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertEquals(emptyList(), builder.getRepeatedInt32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedInt32List());\n\n    message = builder.build();\n    builder.addAllRepeatedInt64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    assertEquals(singletonList(1L), builder.getRepeatedInt64List());\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertEquals(emptyList(), builder.getRepeatedInt64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedInt64List());\n\n    message = builder.build();\n    builder.addAllRepeatedLazyMessage(singletonList(nestedMessage));\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), builder.getRepeatedLazyMessageList());\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedLazyMessage();\n    assertEquals(emptyList(), builder.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), messageAfterBuild.getRepeatedLazyMessageList());\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedSfixed32List());\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertEquals(emptyList(), builder.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSfixed32List());\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSfixed64List());\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertEquals(emptyList(), builder.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSfixed64List());\n\n    message = builder.build();\n    builder.addAllRepeatedSint32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    assertEquals(singletonList(1), builder.getRepeatedSint32List());\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertEquals(emptyList(), builder.getRepeatedSint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSint32List());\n\n    message = builder.build();\n    builder.addAllRepeatedSint64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSint64List());\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertEquals(emptyList(), builder.getRepeatedSint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSint64List());\n\n    message = builder.build();\n    builder.addAllRepeatedString(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringList());\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertEquals(emptyList(), builder.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringList());\n\n    message = builder.build();\n    builder.addAllRepeatedStringPiece(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringPieceList());\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertEquals(emptyList(), builder.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringPieceList());\n\n    message = builder.build();\n    builder.addAllRepeatedUint32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    assertEquals(singletonList(1), builder.getRepeatedUint32List());\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertEquals(emptyList(), builder.getRepeatedUint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedUint32List());\n\n    message = builder.build();\n    builder.addAllRepeatedUint64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedUint64List());\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertEquals(emptyList(), builder.getRepeatedUint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedUint64List());\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    assertEquals(singletonList(true), builder.getRepeatedBoolList());\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertEquals(emptyList(), builder.getRepeatedBoolList());\n    assertEquals(singletonList(true), messageAfterBuild.getRepeatedBoolList());\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    assertEquals(singletonList(ByteString.copyFromUtf8(\"hi\")), builder.getRepeatedBytesList());\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertEquals(emptyList(), builder.getRepeatedBytesList());\n    assertEquals(\n        singletonList(ByteString.copyFromUtf8(\"hi\")), messageAfterBuild.getRepeatedBytesList());\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedCordList());\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertEquals(emptyList(), builder.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedCordList());\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), builder.getRepeatedDoubleList());\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertEquals(emptyList(), builder.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), messageAfterBuild.getRepeatedDoubleList());\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedFixed32List());\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertEquals(emptyList(), builder.getRepeatedFixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedFixed32List());\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedFixed64List());\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertEquals(emptyList(), builder.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedFixed64List());\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    assertEquals(singletonList(1F), builder.getRepeatedFloatList());\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertEquals(emptyList(), builder.getRepeatedFloatList());\n    assertEquals(singletonList(1F), messageAfterBuild.getRepeatedFloatList());\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR), builder.getRepeatedForeignEnumList());\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertEquals(emptyList(), builder.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR),\n        messageAfterBuild.getRepeatedForeignEnumList());\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), builder.getRepeatedForeignMessageList());\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedForeignMessage(0);\n    assertEquals(emptyList(), builder.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), messageAfterBuild.getRepeatedForeignMessageList());\n\n    message = builder.build();\n    builder.addRepeatedGroup(RepeatedGroup.getDefaultInstance());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    assertEquals(singletonList(RepeatedGroup.getDefaultInstance()), builder.getRepeatedGroupList());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedGroup(0);\n    assertEquals(emptyList(), builder.getRepeatedGroupList());\n    assertEquals(\n        singletonList(RepeatedGroup.getDefaultInstance()),\n        messageAfterBuild.getRepeatedGroupList());\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    assertEquals(singletonList(1), builder.getRepeatedInt32List());\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertEquals(emptyList(), builder.getRepeatedInt32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedInt32List());\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    assertEquals(singletonList(1L), builder.getRepeatedInt64List());\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertEquals(emptyList(), builder.getRepeatedInt64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedInt64List());\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), builder.getRepeatedLazyMessageList());\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedLazyMessage(0);\n    assertEquals(emptyList(), builder.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), messageAfterBuild.getRepeatedLazyMessageList());\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedSfixed32List());\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertEquals(emptyList(), builder.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSfixed32List());\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSfixed64List());\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertEquals(emptyList(), builder.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSfixed64List());\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    assertEquals(singletonList(1), builder.getRepeatedSint32List());\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertEquals(emptyList(), builder.getRepeatedSint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSint32List());\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSint64List());\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertEquals(emptyList(), builder.getRepeatedSint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSint64List());\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringList());\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertEquals(emptyList(), builder.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringList());\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringPieceList());\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertEquals(emptyList(), builder.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringPieceList());\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    assertEquals(singletonList(1), builder.getRepeatedUint32List());\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertEquals(emptyList(), builder.getRepeatedUint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedUint32List());\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedUint64List());\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertEquals(emptyList(), builder.getRepeatedUint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedUint64List());\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedBoolCount());\n    builder.setRepeatedBool(0, false);\n    assertEquals(true, messageAfterBuild.getRepeatedBool(0));\n    assertEquals(false, builder.getRepeatedBool(0));\n    builder.clearRepeatedBool();\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedBytesCount());\n    builder.setRepeatedBytes(0, ByteString.EMPTY);\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedBytes(0));\n    builder.clearRepeatedBytes();\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedCordCount());\n    builder.setRepeatedCord(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedCord(0));\n    assertEquals(\"\", builder.getRepeatedCord(0));\n    builder.clearRepeatedCord();\n    message = builder.build();\n\n    builder.addRepeatedCordBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedCordCount());\n    builder.setRepeatedCord(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedCordBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedCordBytes(0));\n    builder.clearRepeatedCord();\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedDoubleCount());\n    builder.setRepeatedDouble(0, 0D);\n    assertEquals(1D, messageAfterBuild.getRepeatedDouble(0), 0.0);\n    assertEquals(0D, builder.getRepeatedDouble(0), 0.0);\n    builder.clearRepeatedDouble();\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFixed32Count());\n    builder.setRepeatedFixed32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedFixed32(0));\n    assertEquals(0, builder.getRepeatedFixed32(0));\n    builder.clearRepeatedFixed32();\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFixed64Count());\n    builder.setRepeatedFixed64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedFixed64(0));\n    assertEquals(0L, builder.getRepeatedFixed64(0));\n    builder.clearRepeatedFixed64();\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFloatCount());\n    builder.setRepeatedFloat(0, 0F);\n    assertEquals(1F, messageAfterBuild.getRepeatedFloat(0), 0.0f);\n    assertEquals(0F, builder.getRepeatedFloat(0), 0.0f);\n    builder.clearRepeatedFloat();\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignEnumCount());\n    builder.setRepeatedForeignEnum(0, ForeignEnumLite.FOREIGN_LITE_FOO);\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getRepeatedForeignEnum(0));\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, builder.getRepeatedForeignEnum(0));\n    builder.clearRepeatedForeignEnum();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertEquals(foreignMessage, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessageC3);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertEquals(foreignMessageC3, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(0, foreignMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, foreignMessageC3);\n    assertEquals(foreignMessage, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(foreignMessageC3, builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    RepeatedGroup repeatedGroup = RepeatedGroup.newBuilder().setA(1).build();\n    builder.addRepeatedGroup(repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroup, messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroup, messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    RepeatedGroup.Builder repeatedGroupBuilder = RepeatedGroup.newBuilder().setA(3);\n    builder.addRepeatedGroup(repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroupBuilder.build(), messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroupBuilder.build(), messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedInt32Count());\n    builder.setRepeatedInt32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedInt32(0));\n    assertEquals(0, builder.getRepeatedInt32(0));\n    builder.clearRepeatedInt32();\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedInt64Count());\n    builder.setRepeatedInt64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedInt64(0));\n    assertEquals(0L, builder.getRepeatedInt64(0));\n    builder.clearRepeatedInt64();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessage, messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessage, messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedSfixed32Count());\n    builder.setRepeatedSfixed32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedSfixed32(0));\n    assertEquals(0, builder.getRepeatedSfixed32(0));\n    builder.clearRepeatedSfixed32();\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedSfixed64Count());\n    builder.setRepeatedSfixed64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedSfixed64(0));\n    assertEquals(0L, builder.getRepeatedSfixed64(0));\n    builder.clearRepeatedSfixed64();\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedSint32Count());\n    builder.setRepeatedSint32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedSint32(0));\n    assertEquals(0, builder.getRepeatedSint32(0));\n    builder.clearRepeatedSint32();\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedSint64Count());\n    builder.setRepeatedSint64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedSint64(0));\n    assertEquals(0L, builder.getRepeatedSint64(0));\n    builder.clearRepeatedSint64();\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringCount());\n    builder.setRepeatedString(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedString(0));\n    assertEquals(\"\", builder.getRepeatedString(0));\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringCount());\n    builder.setRepeatedString(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedStringBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedStringBytes(0));\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringPieceCount());\n    builder.setRepeatedStringPiece(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedStringPiece(0));\n    assertEquals(\"\", builder.getRepeatedStringPiece(0));\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedStringPieceBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringPieceCount());\n    builder.setRepeatedStringPiece(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedStringPieceBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedStringPieceBytes(0));\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedUint32Count());\n    builder.setRepeatedUint32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedUint32(0));\n    assertEquals(0, builder.getRepeatedUint32(0));\n    builder.clearRepeatedUint32();\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedUint64Count());\n    builder.setRepeatedUint64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedUint64(0));\n    assertEquals(0L, builder.getRepeatedUint64(0));\n    builder.clearRepeatedUint64();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(true, builder.build().getOptionalBool());\n    builder.clearOptionalBool();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(true, builder.build().getOptionalBool());\n    builder.clear();\n    assertEquals(0, builder.build().getSerializedSize());\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeOptionalForeignMessage(foreignMessage);\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(foreignMessage.getC(), builder.build().getOptionalForeignMessage().getC());\n    builder.clearOptionalForeignMessage();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeOptionalLazyMessage(nestedMessage);\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(nestedMessage.getBb(), builder.build().getOptionalLazyMessage().getBb());\n    builder.clearOptionalLazyMessage();\n\n    message = builder.build();\n    builder.setOneofString(\"hi\");\n    assertEquals(OneofFieldCase.ONEOFFIELD_NOT_SET, message.getOneofFieldCase());\n    assertEquals(OneofFieldCase.ONEOF_STRING, builder.getOneofFieldCase());\n    assertEquals(\"hi\", builder.getOneofString());\n    messageAfterBuild = builder.build();\n    assertEquals(OneofFieldCase.ONEOF_STRING, messageAfterBuild.getOneofFieldCase());\n    assertEquals(\"hi\", messageAfterBuild.getOneofString());\n    builder.setOneofUint32(1);\n    assertEquals(OneofFieldCase.ONEOF_STRING, messageAfterBuild.getOneofFieldCase());\n    assertEquals(\"hi\", messageAfterBuild.getOneofString());\n    assertEquals(OneofFieldCase.ONEOF_UINT32, builder.getOneofFieldCase());\n    assertEquals(1, builder.getOneofUint32());\n    TestAllTypesLiteOrBuilder messageOrBuilder = builder;\n    assertEquals(OneofFieldCase.ONEOF_UINT32, messageOrBuilder.getOneofFieldCase());\n\n    TestAllExtensionsLite.Builder extendableMessageBuilder = TestAllExtensionsLite.newBuilder();\n    TestAllExtensionsLite extendableMessage = extendableMessageBuilder.build();\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 1);\n    assertFalse(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessage = extendableMessageBuilder.build();\n    assertEquals(\n        1, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(1, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 3);\n    assertEquals(\n        3, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(1, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessage = extendableMessageBuilder.build();\n    assertEquals(\n        3, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(3, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n\n    \r\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray());\n    assertFalse(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite));\n\n    extendableMessageBuilder = extendableMessage.toBuilder();\n    extendableMessageBuilder.mergeFrom(\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalFixed32ExtensionLite, 11)\n            .build());\n\n    extendableMessage = extendableMessageBuilder.build();\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray(), registry);\n\n    \r\n    assertEquals(3, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(\n        11, (int) extendableMessage.getExtension(UnittestLite.optionalFixed32ExtensionLite));\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"},{"authorDate":"2016-06-30 06:23:27","commitOrder":2,"curCode":"  public void testLazyField() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes message = builder.build();\n    assertFalse(message.hasOptionalLazyMessage());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(ByteString.EMPTY, message.toByteString());\n\n    \r\n    builder.setOptionalLazyMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    message = builder.build();\n    assertTrue(message.hasOptionalLazyMessage());\n    assertEquals(2, message.getSerializedSize());\n\n    \r\n    TestAllTypes parsed = TestAllTypes.parseFrom(message.toByteString());\n    assertTrue(parsed.hasOptionalLazyMessage());\n    assertEquals(message.getOptionalLazyMessage(), parsed.getOptionalLazyMessage());\n  }\n","date":"2016-06-30 06:38:03","endLine":173,"groupId":"275","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLazyField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/82/f4216b76bcf24b637450a5fdf38ac5859d17ca.src","preCode":"  public void testLazyField() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes message = builder.build();\n    assertFalse(message.hasOptionalLazyMessage());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(ByteString.EMPTY, message.toByteString());\n\n    \r\n    builder.setOptionalLazyMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    message = builder.build();\n    assertTrue(message.hasOptionalLazyMessage());\n    assertEquals(2, message.getSerializedSize());\n\n    \r\n    TestAllTypes parsed = TestAllTypes.parseFrom(message.toByteString());\n    assertTrue(parsed.hasOptionalLazyMessage());\n    assertEquals(message.getOptionalLazyMessage(), parsed.getOptionalLazyMessage());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FieldPresenceTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"NB"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"M","submitter":"Hao Nguyen"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testSanityCopyOnWrite() throws InvalidProtocolBufferException {\n    \r\n    \r\n    \r\n\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite message = builder.build();\n    TestAllTypesLite messageAfterBuild;\n    builder.setOptionalBool(true);\n    assertThat(message.getOptionalBool()).isFalse();\n    assertThat(builder.getOptionalBool()).isTrue();\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalBool()).isTrue();\n    assertThat(message.getOptionalBool()).isFalse();\n    builder.clearOptionalBool();\n    assertThat(builder.getOptionalBool()).isFalse();\n    assertThat(messageAfterBuild.getOptionalBool()).isTrue();\n\n    message = builder.build();\n    builder.setOptionalBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(message.getOptionalBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(builder.getOptionalBytes()).isEqualTo(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalBytes()).isEqualTo(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(message.getOptionalBytes()).isEqualTo(ByteString.EMPTY);\n    builder.clearOptionalBytes();\n    assertThat(builder.getOptionalBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(messageAfterBuild.getOptionalBytes()).isEqualTo(ByteString.copyFromUtf8(\"hi\"));\n\n    message = builder.build();\n    builder.setOptionalCord(\"hi\");\n    assertThat(message.getOptionalCord()).isEmpty();\n    assertThat(builder.getOptionalCord()).isEqualTo(\"hi\");\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalCord()).isEqualTo(\"hi\");\n    assertThat(message.getOptionalCord()).isEmpty();\n    builder.clearOptionalCord();\n    assertThat(builder.getOptionalCord()).isEmpty();\n    assertThat(messageAfterBuild.getOptionalCord()).isEqualTo(\"hi\");\n\n    message = builder.build();\n    builder.setOptionalCordBytes(ByteString.copyFromUtf8(\"no\"));\n    assertThat(message.getOptionalCordBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(builder.getOptionalCordBytes()).isEqualTo(ByteString.copyFromUtf8(\"no\"));\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalCordBytes()).isEqualTo(ByteString.copyFromUtf8(\"no\"));\n    assertThat(message.getOptionalCordBytes()).isEqualTo(ByteString.EMPTY);\n    builder.clearOptionalCord();\n    assertThat(builder.getOptionalCordBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(messageAfterBuild.getOptionalCordBytes()).isEqualTo(ByteString.copyFromUtf8(\"no\"));\n\n    message = builder.build();\n    builder.setOptionalDouble(1);\n    assertThat(message.getOptionalDouble()).isEqualTo(0D);\n    assertThat(builder.getOptionalDouble()).isEqualTo(1D);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalDouble()).isEqualTo(1D);\n    assertThat(message.getOptionalDouble()).isEqualTo(0D);\n    builder.clearOptionalDouble();\n    assertThat(builder.getOptionalDouble()).isEqualTo(0D);\n    assertThat(messageAfterBuild.getOptionalDouble()).isEqualTo(1D);\n\n    message = builder.build();\n    builder.setOptionalFixed32(1);\n    assertThat(message.getOptionalFixed32()).isEqualTo(0);\n    assertThat(builder.getOptionalFixed32()).isEqualTo(1);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalFixed32()).isEqualTo(1);\n    assertThat(message.getOptionalFixed32()).isEqualTo(0);\n    builder.clearOptionalFixed32();\n    assertThat(builder.getOptionalFixed32()).isEqualTo(0);\n    assertThat(messageAfterBuild.getOptionalFixed32()).isEqualTo(1);\n\n    message = builder.build();\n    builder.setOptionalFixed64(1);\n    assertThat(message.getOptionalFixed64()).isEqualTo(0L);\n    assertThat(builder.getOptionalFixed64()).isEqualTo(1L);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalFixed64()).isEqualTo(1L);\n    assertThat(message.getOptionalFixed64()).isEqualTo(0L);\n    builder.clearOptionalFixed64();\n    assertThat(builder.getOptionalFixed64()).isEqualTo(0L);\n    assertThat(messageAfterBuild.getOptionalFixed64()).isEqualTo(1L);\n\n    message = builder.build();\n    builder.setOptionalFloat(1);\n    assertThat(message.getOptionalFloat()).isEqualTo(0F);\n    assertThat(builder.getOptionalFloat()).isEqualTo(1F);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalFloat()).isEqualTo(1F);\n    assertThat(message.getOptionalFloat()).isEqualTo(0F);\n    builder.clearOptionalFloat();\n    assertThat(builder.getOptionalFloat()).isEqualTo(0F);\n    assertThat(messageAfterBuild.getOptionalFloat()).isEqualTo(1F);\n\n    message = builder.build();\n    builder.setOptionalForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertThat(message.getOptionalForeignEnum()).isEqualTo(ForeignEnumLite.FOREIGN_LITE_FOO);\n    assertThat(builder.getOptionalForeignEnum()).isEqualTo(ForeignEnumLite.FOREIGN_LITE_BAR);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalForeignEnum())\n        .isEqualTo(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertThat(message.getOptionalForeignEnum()).isEqualTo(ForeignEnumLite.FOREIGN_LITE_FOO);\n    builder.clearOptionalForeignEnum();\n    assertThat(builder.getOptionalForeignEnum()).isEqualTo(ForeignEnumLite.FOREIGN_LITE_FOO);\n    assertThat(messageAfterBuild.getOptionalForeignEnum())\n        .isEqualTo(ForeignEnumLite.FOREIGN_LITE_BAR);\n\n    message = builder.build();\n    ForeignMessageLite foreignMessage = ForeignMessageLite.newBuilder().setC(1).build();\n    builder.setOptionalForeignMessage(foreignMessage);\n    assertThat(message.getOptionalForeignMessage())\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    assertThat(builder.getOptionalForeignMessage()).isEqualTo(foreignMessage);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalForeignMessage()).isEqualTo(foreignMessage);\n    assertThat(message.getOptionalForeignMessage())\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    builder.clearOptionalForeignMessage();\n    assertThat(builder.getOptionalForeignMessage())\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    assertThat(messageAfterBuild.getOptionalForeignMessage()).isEqualTo(foreignMessage);\n\n    message = builder.build();\n    ForeignMessageLite foreignMessageC3 = ForeignMessageLite.newBuilder().setC(3).build();\n    builder.setOptionalForeignMessage(foreignMessageC3);\n    assertThat(message.getOptionalForeignMessage())\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    assertThat(builder.getOptionalForeignMessage()).isEqualTo(foreignMessageC3);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalForeignMessage()).isEqualTo(foreignMessageC3);\n    assertThat(message.getOptionalForeignMessage())\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    builder.clearOptionalForeignMessage();\n    assertThat(builder.getOptionalForeignMessage())\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    assertThat(messageAfterBuild.getOptionalForeignMessage()).isEqualTo(foreignMessageC3);\n\n    message = builder.build();\n    OptionalGroup optionalGroup = OptionalGroup.newBuilder().setA(1).build();\n    builder.setOptionalGroup(optionalGroup);\n    assertThat(message.getOptionalGroup()).isEqualTo(OptionalGroup.getDefaultInstance());\n    assertThat(builder.getOptionalGroup()).isEqualTo(optionalGroup);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalGroup()).isEqualTo(optionalGroup);\n    assertThat(message.getOptionalGroup()).isEqualTo(OptionalGroup.getDefaultInstance());\n    builder.clearOptionalGroup();\n    assertThat(builder.getOptionalGroup()).isEqualTo(OptionalGroup.getDefaultInstance());\n    assertThat(messageAfterBuild.getOptionalGroup()).isEqualTo(optionalGroup);\n\n    message = builder.build();\n    OptionalGroup.Builder optionalGroupBuilder = OptionalGroup.newBuilder().setA(3);\n    builder.setOptionalGroup(optionalGroupBuilder);\n    assertThat(message.getOptionalGroup()).isEqualTo(OptionalGroup.getDefaultInstance());\n    assertThat(builder.getOptionalGroup()).isEqualTo(optionalGroupBuilder.build());\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalGroup()).isEqualTo(optionalGroupBuilder.build());\n    assertThat(message.getOptionalGroup()).isEqualTo(OptionalGroup.getDefaultInstance());\n    builder.clearOptionalGroup();\n    assertThat(builder.getOptionalGroup()).isEqualTo(OptionalGroup.getDefaultInstance());\n    assertThat(messageAfterBuild.getOptionalGroup()).isEqualTo(optionalGroupBuilder.build());\n\n    message = builder.build();\n    builder.setOptionalInt32(1);\n    assertThat(message.getOptionalInt32()).isEqualTo(0);\n    assertThat(builder.getOptionalInt32()).isEqualTo(1);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalInt32()).isEqualTo(1);\n    assertThat(message.getOptionalInt32()).isEqualTo(0);\n    builder.clearOptionalInt32();\n    assertThat(builder.getOptionalInt32()).isEqualTo(0);\n    assertThat(messageAfterBuild.getOptionalInt32()).isEqualTo(1);\n\n    message = builder.build();\n    builder.setOptionalInt64(1);\n    assertThat(message.getOptionalInt64()).isEqualTo(0L);\n    assertThat(builder.getOptionalInt64()).isEqualTo(1L);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalInt64()).isEqualTo(1L);\n    assertThat(message.getOptionalInt64()).isEqualTo(0L);\n    builder.clearOptionalInt64();\n    assertThat(builder.getOptionalInt64()).isEqualTo(0L);\n    assertThat(messageAfterBuild.getOptionalInt64()).isEqualTo(1L);\n\n    message = builder.build();\n    NestedMessage nestedMessage = NestedMessage.newBuilder().setBb(1).build();\n    builder.setOptionalLazyMessage(nestedMessage);\n    assertThat(message.getOptionalLazyMessage()).isEqualTo(NestedMessage.getDefaultInstance());\n    assertThat(builder.getOptionalLazyMessage()).isEqualTo(nestedMessage);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalLazyMessage()).isEqualTo(nestedMessage);\n    assertThat(message.getOptionalLazyMessage()).isEqualTo(NestedMessage.getDefaultInstance());\n    builder.clearOptionalLazyMessage();\n    assertThat(builder.getOptionalLazyMessage()).isEqualTo(NestedMessage.getDefaultInstance());\n    assertThat(messageAfterBuild.getOptionalLazyMessage()).isEqualTo(nestedMessage);\n\n    message = builder.build();\n    NestedMessage.Builder nestedMessageBuilder = NestedMessage.newBuilder().setBb(3);\n    builder.setOptionalLazyMessage(nestedMessageBuilder);\n    assertThat(message.getOptionalLazyMessage()).isEqualTo(NestedMessage.getDefaultInstance());\n    assertThat(builder.getOptionalLazyMessage()).isEqualTo(nestedMessageBuilder.build());\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalLazyMessage()).isEqualTo(nestedMessageBuilder.build());\n    assertThat(message.getOptionalLazyMessage()).isEqualTo(NestedMessage.getDefaultInstance());\n    builder.clearOptionalLazyMessage();\n    assertThat(builder.getOptionalLazyMessage()).isEqualTo(NestedMessage.getDefaultInstance());\n    assertThat(messageAfterBuild.getOptionalLazyMessage()).isEqualTo(nestedMessageBuilder.build());\n\n    message = builder.build();\n    builder.setOptionalSfixed32(1);\n    assertThat(message.getOptionalSfixed32()).isEqualTo(0);\n    assertThat(builder.getOptionalSfixed32()).isEqualTo(1);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalSfixed32()).isEqualTo(1);\n    assertThat(message.getOptionalSfixed32()).isEqualTo(0);\n    builder.clearOptionalSfixed32();\n    assertThat(builder.getOptionalSfixed32()).isEqualTo(0);\n    assertThat(messageAfterBuild.getOptionalSfixed32()).isEqualTo(1);\n\n    message = builder.build();\n    builder.setOptionalSfixed64(1);\n    assertThat(message.getOptionalSfixed64()).isEqualTo(0L);\n    assertThat(builder.getOptionalSfixed64()).isEqualTo(1L);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalSfixed64()).isEqualTo(1L);\n    assertThat(message.getOptionalSfixed64()).isEqualTo(0L);\n    builder.clearOptionalSfixed64();\n    assertThat(builder.getOptionalSfixed64()).isEqualTo(0L);\n    assertThat(messageAfterBuild.getOptionalSfixed64()).isEqualTo(1L);\n\n    message = builder.build();\n    builder.setOptionalSint32(1);\n    assertThat(message.getOptionalSint32()).isEqualTo(0);\n    assertThat(builder.getOptionalSint32()).isEqualTo(1);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalSint32()).isEqualTo(1);\n    builder.clearOptionalSint32();\n    assertThat(builder.getOptionalSint32()).isEqualTo(0);\n    assertThat(messageAfterBuild.getOptionalSint32()).isEqualTo(1);\n\n    message = builder.build();\n    builder.setOptionalSint64(1);\n    assertThat(message.getOptionalSint64()).isEqualTo(0L);\n    assertThat(builder.getOptionalSint64()).isEqualTo(1L);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalSint64()).isEqualTo(1L);\n    assertThat(message.getOptionalSint64()).isEqualTo(0L);\n    builder.clearOptionalSint64();\n    assertThat(builder.getOptionalSint64()).isEqualTo(0L);\n    assertThat(messageAfterBuild.getOptionalSint64()).isEqualTo(1L);\n\n    message = builder.build();\n    builder.setOptionalString(\"hi\");\n    assertThat(message.getOptionalString()).isEmpty();\n    assertThat(builder.getOptionalString()).isEqualTo(\"hi\");\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalString()).isEqualTo(\"hi\");\n    assertThat(message.getOptionalString()).isEmpty();\n    builder.clearOptionalString();\n    assertThat(builder.getOptionalString()).isEmpty();\n    assertThat(messageAfterBuild.getOptionalString()).isEqualTo(\"hi\");\n\n    message = builder.build();\n    builder.setOptionalStringBytes(ByteString.copyFromUtf8(\"no\"));\n    assertThat(message.getOptionalStringBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(builder.getOptionalStringBytes()).isEqualTo(ByteString.copyFromUtf8(\"no\"));\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalStringBytes()).isEqualTo(ByteString.copyFromUtf8(\"no\"));\n    assertThat(message.getOptionalStringBytes()).isEqualTo(ByteString.EMPTY);\n    builder.clearOptionalString();\n    assertThat(builder.getOptionalStringBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(messageAfterBuild.getOptionalStringBytes()).isEqualTo(ByteString.copyFromUtf8(\"no\"));\n\n    message = builder.build();\n    builder.setOptionalStringPiece(\"hi\");\n    assertThat(message.getOptionalStringPiece()).isEmpty();\n    assertThat(builder.getOptionalStringPiece()).isEqualTo(\"hi\");\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalStringPiece()).isEqualTo(\"hi\");\n    assertThat(message.getOptionalStringPiece()).isEmpty();\n    builder.clearOptionalStringPiece();\n    assertThat(builder.getOptionalStringPiece()).isEmpty();\n    assertThat(messageAfterBuild.getOptionalStringPiece()).isEqualTo(\"hi\");\n\n    message = builder.build();\n    builder.setOptionalStringPieceBytes(ByteString.copyFromUtf8(\"no\"));\n    assertThat(message.getOptionalStringPieceBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(builder.getOptionalStringPieceBytes()).isEqualTo(ByteString.copyFromUtf8(\"no\"));\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalStringPieceBytes())\n        .isEqualTo(ByteString.copyFromUtf8(\"no\"));\n    assertThat(message.getOptionalStringPieceBytes()).isEqualTo(ByteString.EMPTY);\n    builder.clearOptionalStringPiece();\n    assertThat(builder.getOptionalStringPieceBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(messageAfterBuild.getOptionalStringPieceBytes())\n        .isEqualTo(ByteString.copyFromUtf8(\"no\"));\n\n    message = builder.build();\n    builder.setOptionalUint32(1);\n    assertThat(message.getOptionalUint32()).isEqualTo(0);\n    assertThat(builder.getOptionalUint32()).isEqualTo(1);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalUint32()).isEqualTo(1);\n    assertThat(message.getOptionalUint32()).isEqualTo(0);\n    builder.clearOptionalUint32();\n    assertThat(builder.getOptionalUint32()).isEqualTo(0);\n    assertThat(messageAfterBuild.getOptionalUint32()).isEqualTo(1);\n\n    message = builder.build();\n    builder.setOptionalUint64(1);\n    assertThat(message.getOptionalUint64()).isEqualTo(0L);\n    assertThat(builder.getOptionalUint64()).isEqualTo(1L);\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOptionalUint64()).isEqualTo(1L);\n    assertThat(message.getOptionalUint64()).isEqualTo(0L);\n    builder.clearOptionalUint64();\n    assertThat(builder.getOptionalUint64()).isEqualTo(0L);\n    assertThat(messageAfterBuild.getOptionalUint64()).isEqualTo(1L);\n\n    message = builder.build();\n    builder.addAllRepeatedBool(singletonList(true));\n    assertThat(message.getRepeatedBoolList()).isEmpty();\n    assertThat(builder.getRepeatedBoolList()).containsExactly(true);\n    assertThat(message.getRepeatedBoolList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertThat(builder.getRepeatedBoolList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedBoolList()).containsExactly(true);\n\n    message = builder.build();\n    builder.addAllRepeatedBytes(singletonList(ByteString.copyFromUtf8(\"hi\")));\n    assertThat(message.getRepeatedBytesList()).isEmpty();\n    assertThat(builder.getRepeatedBytesList()).containsExactly(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(message.getRepeatedBytesList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertThat(builder.getRepeatedBytesList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedBytesList())\n        .containsExactly(ByteString.copyFromUtf8(\"hi\"));\n\n    message = builder.build();\n    builder.addAllRepeatedCord(singletonList(\"hi\"));\n    assertThat(message.getRepeatedCordList()).isEmpty();\n    assertThat(builder.getRepeatedCordList()).containsExactly(\"hi\");\n    assertThat(message.getRepeatedCordList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertThat(builder.getRepeatedCordList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedCordList()).containsExactly(\"hi\");\n\n    message = builder.build();\n    builder.addAllRepeatedDouble(singletonList(1D));\n    assertThat(message.getRepeatedDoubleList()).isEmpty();\n    assertThat(builder.getRepeatedDoubleList()).containsExactly(1D);\n    assertThat(message.getRepeatedDoubleList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertThat(builder.getRepeatedDoubleList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedDoubleList()).containsExactly(1D);\n\n    message = builder.build();\n    builder.addAllRepeatedFixed32(singletonList(1));\n    assertThat(message.getRepeatedFixed32List()).isEmpty();\n    assertThat(builder.getRepeatedFixed32List()).containsExactly(1);\n    assertThat(message.getRepeatedFixed32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertThat(builder.getRepeatedFixed32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedFixed32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addAllRepeatedFixed64(singletonList(1L));\n    assertThat(message.getRepeatedFixed64List()).isEmpty();\n    assertThat(builder.getRepeatedFixed64List()).containsExactly(1L);\n    assertThat(message.getRepeatedFixed64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertThat(builder.getRepeatedFixed64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedFixed64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addAllRepeatedFloat(singletonList(1F));\n    assertThat(message.getRepeatedFloatList()).isEmpty();\n    assertThat(builder.getRepeatedFloatList()).containsExactly(1F);\n    assertThat(message.getRepeatedFloatList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertThat(builder.getRepeatedFloatList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedFloatList()).containsExactly(1F);\n\n    message = builder.build();\n    builder.addAllRepeatedForeignEnum(singletonList(ForeignEnumLite.FOREIGN_LITE_BAR));\n    assertThat(message.getRepeatedForeignEnumList()).isEmpty();\n    assertThat(builder.getRepeatedForeignEnumList())\n        .containsExactly(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertThat(message.getRepeatedForeignEnumList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertThat(builder.getRepeatedForeignEnumList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedForeignEnumList())\n        .containsExactly(ForeignEnumLite.FOREIGN_LITE_BAR);\n\n    message = builder.build();\n    builder.addAllRepeatedForeignMessage(singletonList(foreignMessage));\n    assertThat(message.getRepeatedForeignMessageList()).isEmpty();\n    assertThat(builder.getRepeatedForeignMessageList()).containsExactly(foreignMessage);\n    assertThat(message.getRepeatedForeignMessageList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignMessage();\n    assertThat(builder.getRepeatedForeignMessageList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedForeignMessageList()).containsExactly(foreignMessage);\n\n    message = builder.build();\n    builder.addAllRepeatedGroup(singletonList(RepeatedGroup.getDefaultInstance()));\n    assertThat(message.getRepeatedGroupList()).isEmpty();\n    assertThat(builder.getRepeatedGroupList()).containsExactly(RepeatedGroup.getDefaultInstance());\n    assertThat(message.getRepeatedGroupList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedGroup();\n    assertThat(builder.getRepeatedGroupList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedGroupList())\n        .containsExactly(RepeatedGroup.getDefaultInstance());\n\n    message = builder.build();\n    builder.addAllRepeatedInt32(singletonList(1));\n    assertThat(message.getRepeatedInt32List()).isEmpty();\n    assertThat(builder.getRepeatedInt32List()).containsExactly(1);\n    assertThat(message.getRepeatedInt32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertThat(builder.getRepeatedInt32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedInt32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addAllRepeatedInt64(singletonList(1L));\n    assertThat(message.getRepeatedInt64List()).isEmpty();\n    assertThat(builder.getRepeatedInt64List()).containsExactly(1L);\n    assertThat(message.getRepeatedInt64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertThat(builder.getRepeatedInt64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedInt64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addAllRepeatedLazyMessage(singletonList(nestedMessage));\n    assertThat(message.getRepeatedLazyMessageList()).isEmpty();\n    assertThat(builder.getRepeatedLazyMessageList()).containsExactly(nestedMessage);\n    assertThat(message.getRepeatedLazyMessageList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedLazyMessage();\n    assertThat(builder.getRepeatedLazyMessageList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedLazyMessageList()).containsExactly(nestedMessage);\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed32(singletonList(1));\n    assertThat(message.getRepeatedSfixed32List()).isEmpty();\n    assertThat(builder.getRepeatedSfixed32List()).containsExactly(1);\n    assertThat(message.getRepeatedSfixed32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertThat(builder.getRepeatedSfixed32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSfixed32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed64(singletonList(1L));\n    assertThat(message.getRepeatedSfixed64List()).isEmpty();\n    assertThat(builder.getRepeatedSfixed64List()).containsExactly(1L);\n    assertThat(message.getRepeatedSfixed64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertThat(builder.getRepeatedSfixed64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSfixed64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addAllRepeatedSint32(singletonList(1));\n    assertThat(message.getRepeatedSint32List()).isEmpty();\n    assertThat(builder.getRepeatedSint32List()).containsExactly(1);\n    assertThat(message.getRepeatedSint32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertThat(builder.getRepeatedSint32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSint32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addAllRepeatedSint64(singletonList(1L));\n    assertThat(message.getRepeatedSint64List()).isEmpty();\n    assertThat(builder.getRepeatedSint64List()).containsExactly(1L);\n    assertThat(message.getRepeatedSint64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertThat(builder.getRepeatedSint64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSint64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addAllRepeatedString(singletonList(\"hi\"));\n    assertThat(message.getRepeatedStringList()).isEmpty();\n    assertThat(builder.getRepeatedStringList()).containsExactly(\"hi\");\n    assertThat(message.getRepeatedStringList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertThat(builder.getRepeatedStringList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedStringList()).containsExactly(\"hi\");\n\n    message = builder.build();\n    builder.addAllRepeatedStringPiece(singletonList(\"hi\"));\n    assertThat(message.getRepeatedStringPieceList()).isEmpty();\n    assertThat(builder.getRepeatedStringPieceList()).containsExactly(\"hi\");\n    assertThat(message.getRepeatedStringPieceList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertThat(builder.getRepeatedStringPieceList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedStringPieceList()).containsExactly(\"hi\");\n\n    message = builder.build();\n    builder.addAllRepeatedUint32(singletonList(1));\n    assertThat(message.getRepeatedUint32List()).isEmpty();\n    assertThat(builder.getRepeatedUint32List()).containsExactly(1);\n    assertThat(message.getRepeatedUint32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertThat(builder.getRepeatedUint32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedUint32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addAllRepeatedUint64(singletonList(1L));\n    assertThat(message.getRepeatedUint64List()).isEmpty();\n    assertThat(builder.getRepeatedUint64List()).containsExactly(1L);\n    assertThat(message.getRepeatedUint64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertThat(builder.getRepeatedUint64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedUint64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    assertThat(message.getRepeatedBoolList()).isEmpty();\n    assertThat(builder.getRepeatedBoolList()).containsExactly(true);\n    assertThat(message.getRepeatedBoolList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertThat(builder.getRepeatedBoolList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedBoolList()).containsExactly(true);\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(message.getRepeatedBytesList()).isEmpty();\n    assertThat(builder.getRepeatedBytesList()).containsExactly(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(message.getRepeatedBytesList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertThat(builder.getRepeatedBytesList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedBytesList())\n        .containsExactly(ByteString.copyFromUtf8(\"hi\"));\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    assertThat(message.getRepeatedCordList()).isEmpty();\n    assertThat(builder.getRepeatedCordList()).containsExactly(\"hi\");\n    assertThat(message.getRepeatedCordList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertThat(builder.getRepeatedCordList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedCordList()).containsExactly(\"hi\");\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    assertThat(message.getRepeatedDoubleList()).isEmpty();\n    assertThat(builder.getRepeatedDoubleList()).containsExactly(1D);\n    assertThat(message.getRepeatedDoubleList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertThat(builder.getRepeatedDoubleList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedDoubleList()).containsExactly(1D);\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    assertThat(message.getRepeatedFixed32List()).isEmpty();\n    assertThat(builder.getRepeatedFixed32List()).containsExactly(1);\n    assertThat(message.getRepeatedFixed32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertThat(builder.getRepeatedFixed32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedFixed32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    assertThat(message.getRepeatedFixed64List()).isEmpty();\n    assertThat(builder.getRepeatedFixed64List()).containsExactly(1L);\n    assertThat(message.getRepeatedFixed64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertThat(builder.getRepeatedFixed64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedFixed64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    assertThat(message.getRepeatedFloatList()).isEmpty();\n    assertThat(builder.getRepeatedFloatList()).containsExactly(1F);\n    assertThat(message.getRepeatedFloatList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertThat(builder.getRepeatedFloatList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedFloatList()).containsExactly(1F);\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertThat(message.getRepeatedForeignEnumList()).isEmpty();\n    assertThat(builder.getRepeatedForeignEnumList())\n        .containsExactly(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertThat(message.getRepeatedForeignEnumList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertThat(builder.getRepeatedForeignEnumList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedForeignEnumList())\n        .containsExactly(ForeignEnumLite.FOREIGN_LITE_BAR);\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    assertThat(message.getRepeatedForeignMessageList()).isEmpty();\n    assertThat(builder.getRepeatedForeignMessageList()).containsExactly(foreignMessage);\n    assertThat(message.getRepeatedForeignMessageList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedForeignMessage(0);\n    assertThat(builder.getRepeatedForeignMessageList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedForeignMessageList()).containsExactly(foreignMessage);\n\n    message = builder.build();\n    builder.addRepeatedGroup(RepeatedGroup.getDefaultInstance());\n    assertThat(message.getRepeatedGroupList()).isEmpty();\n    assertThat(builder.getRepeatedGroupList()).containsExactly(RepeatedGroup.getDefaultInstance());\n    assertThat(message.getRepeatedGroupList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedGroup(0);\n    assertThat(builder.getRepeatedGroupList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedGroupList())\n        .containsExactly(RepeatedGroup.getDefaultInstance());\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    assertThat(message.getRepeatedInt32List()).isEmpty();\n    assertThat(builder.getRepeatedInt32List()).containsExactly(1);\n    assertThat(message.getRepeatedInt32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertThat(builder.getRepeatedInt32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedInt32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    assertThat(message.getRepeatedInt64List()).isEmpty();\n    assertThat(builder.getRepeatedInt64List()).containsExactly(1L);\n    assertThat(message.getRepeatedInt64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertThat(builder.getRepeatedInt64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedInt64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    assertThat(message.getRepeatedLazyMessageList()).isEmpty();\n    assertThat(builder.getRepeatedLazyMessageList()).containsExactly(nestedMessage);\n    assertThat(message.getRepeatedLazyMessageList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedLazyMessage(0);\n    assertThat(builder.getRepeatedLazyMessageList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedLazyMessageList()).containsExactly(nestedMessage);\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    assertThat(message.getRepeatedSfixed32List()).isEmpty();\n    assertThat(builder.getRepeatedSfixed32List()).containsExactly(1);\n    assertThat(message.getRepeatedSfixed32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertThat(builder.getRepeatedSfixed32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSfixed32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    assertThat(message.getRepeatedSfixed64List()).isEmpty();\n    assertThat(builder.getRepeatedSfixed64List()).containsExactly(1L);\n    assertThat(message.getRepeatedSfixed64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertThat(builder.getRepeatedSfixed64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSfixed64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    assertThat(message.getRepeatedSint32List()).isEmpty();\n    assertThat(builder.getRepeatedSint32List()).containsExactly(1);\n    assertThat(message.getRepeatedSint32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertThat(builder.getRepeatedSint32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSint32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    assertThat(message.getRepeatedSint64List()).isEmpty();\n    assertThat(builder.getRepeatedSint64List()).containsExactly(1L);\n    assertThat(message.getRepeatedSint64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertThat(builder.getRepeatedSint64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedSint64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    assertThat(message.getRepeatedStringList()).isEmpty();\n    assertThat(builder.getRepeatedStringList()).containsExactly(\"hi\");\n    assertThat(message.getRepeatedStringList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertThat(builder.getRepeatedStringList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedStringList()).containsExactly(\"hi\");\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    assertThat(message.getRepeatedStringPieceList()).isEmpty();\n    assertThat(builder.getRepeatedStringPieceList()).containsExactly(\"hi\");\n    assertThat(message.getRepeatedStringPieceList()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertThat(builder.getRepeatedStringPieceList()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedStringPieceList()).containsExactly(\"hi\");\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    assertThat(message.getRepeatedUint32List()).isEmpty();\n    assertThat(builder.getRepeatedUint32List()).containsExactly(1);\n    assertThat(message.getRepeatedUint32List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertThat(builder.getRepeatedUint32List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedUint32List()).containsExactly(1);\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    assertThat(message.getRepeatedUint64List()).isEmpty();\n    assertThat(builder.getRepeatedUint64List()).containsExactly(1L);\n    assertThat(message.getRepeatedUint64List()).isEmpty();\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertThat(builder.getRepeatedUint64List()).isEmpty();\n    assertThat(messageAfterBuild.getRepeatedUint64List()).containsExactly(1L);\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedBoolCount()).isEqualTo(0);\n    builder.setRepeatedBool(0, false);\n    assertThat(messageAfterBuild.getRepeatedBool(0)).isTrue();\n    assertThat(builder.getRepeatedBool(0)).isFalse();\n    builder.clearRepeatedBool();\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedBytesCount()).isEqualTo(0);\n    builder.setRepeatedBytes(0, ByteString.EMPTY);\n    assertThat(messageAfterBuild.getRepeatedBytes(0)).isEqualTo(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(builder.getRepeatedBytes(0)).isEqualTo(ByteString.EMPTY);\n    builder.clearRepeatedBytes();\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedCordCount()).isEqualTo(0);\n    builder.setRepeatedCord(0, \"\");\n    assertThat(messageAfterBuild.getRepeatedCord(0)).isEqualTo(\"hi\");\n    assertThat(builder.getRepeatedCord(0)).isEmpty();\n    builder.clearRepeatedCord();\n    message = builder.build();\n\n    builder.addRepeatedCordBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedCordCount()).isEqualTo(0);\n    builder.setRepeatedCord(0, \"\");\n    assertThat(messageAfterBuild.getRepeatedCordBytes(0)).isEqualTo(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(builder.getRepeatedCordBytes(0)).isEqualTo(ByteString.EMPTY);\n    builder.clearRepeatedCord();\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedDoubleCount()).isEqualTo(0);\n    builder.setRepeatedDouble(0, 0D);\n    assertThat(messageAfterBuild.getRepeatedDouble(0)).isEqualTo(1D);\n    assertThat(builder.getRepeatedDouble(0)).isEqualTo(0D);\n    builder.clearRepeatedDouble();\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedFixed32Count()).isEqualTo(0);\n    builder.setRepeatedFixed32(0, 0);\n    assertThat(messageAfterBuild.getRepeatedFixed32(0)).isEqualTo(1);\n    assertThat(builder.getRepeatedFixed32(0)).isEqualTo(0);\n    builder.clearRepeatedFixed32();\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedFixed64Count()).isEqualTo(0);\n    builder.setRepeatedFixed64(0, 0L);\n    assertThat(messageAfterBuild.getRepeatedFixed64(0)).isEqualTo(1L);\n    assertThat(builder.getRepeatedFixed64(0)).isEqualTo(0L);\n    builder.clearRepeatedFixed64();\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedFloatCount()).isEqualTo(0);\n    builder.setRepeatedFloat(0, 0F);\n    assertThat(messageAfterBuild.getRepeatedFloat(0)).isEqualTo(1F);\n    assertThat(builder.getRepeatedFloat(0)).isEqualTo(0F);\n    builder.clearRepeatedFloat();\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedForeignEnumCount()).isEqualTo(0);\n    builder.setRepeatedForeignEnum(0, ForeignEnumLite.FOREIGN_LITE_FOO);\n    assertThat(messageAfterBuild.getRepeatedForeignEnum(0))\n        .isEqualTo(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertThat(builder.getRepeatedForeignEnum(0)).isEqualTo(ForeignEnumLite.FOREIGN_LITE_FOO);\n    builder.clearRepeatedForeignEnum();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedForeignMessageCount()).isEqualTo(0);\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedForeignMessage(0)).isEqualTo(foreignMessage);\n    assertThat(builder.getRepeatedForeignMessage(0))\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessageC3);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedForeignMessageCount()).isEqualTo(0);\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedForeignMessage(0)).isEqualTo(foreignMessageC3);\n    assertThat(builder.getRepeatedForeignMessage(0))\n        .isEqualTo(ForeignMessageLite.getDefaultInstance());\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(0, foreignMessage);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedForeignMessageCount()).isEqualTo(0);\n    builder.setRepeatedForeignMessage(0, foreignMessageC3);\n    assertThat(messageAfterBuild.getRepeatedForeignMessage(0)).isEqualTo(foreignMessage);\n    assertThat(builder.getRepeatedForeignMessage(0)).isEqualTo(foreignMessageC3);\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    RepeatedGroup repeatedGroup = RepeatedGroup.newBuilder().setA(1).build();\n    builder.addRepeatedGroup(repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedGroupCount()).isEqualTo(0);\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedGroup(0)).isEqualTo(repeatedGroup);\n    assertThat(builder.getRepeatedGroup(0)).isEqualTo(RepeatedGroup.getDefaultInstance());\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedGroupCount()).isEqualTo(0);\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedGroup(0)).isEqualTo(repeatedGroup);\n    assertThat(builder.getRepeatedGroup(0)).isEqualTo(RepeatedGroup.getDefaultInstance());\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    RepeatedGroup.Builder repeatedGroupBuilder = RepeatedGroup.newBuilder().setA(3);\n    builder.addRepeatedGroup(repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedGroupCount()).isEqualTo(0);\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedGroup(0)).isEqualTo(repeatedGroupBuilder.build());\n    assertThat(builder.getRepeatedGroup(0)).isEqualTo(RepeatedGroup.getDefaultInstance());\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedGroupCount()).isEqualTo(0);\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedGroup(0)).isEqualTo(repeatedGroupBuilder.build());\n    assertThat(builder.getRepeatedGroup(0)).isEqualTo(RepeatedGroup.getDefaultInstance());\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedInt32Count()).isEqualTo(0);\n    builder.setRepeatedInt32(0, 0);\n    assertThat(messageAfterBuild.getRepeatedInt32(0)).isEqualTo(1);\n    assertThat(builder.getRepeatedInt32(0)).isEqualTo(0);\n    builder.clearRepeatedInt32();\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedInt64Count()).isEqualTo(0L);\n    builder.setRepeatedInt64(0, 0L);\n    assertThat(messageAfterBuild.getRepeatedInt64(0)).isEqualTo(1L);\n    assertThat(builder.getRepeatedInt64(0)).isEqualTo(0L);\n    builder.clearRepeatedInt64();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedLazyMessageCount()).isEqualTo(0);\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedLazyMessage(0)).isEqualTo(nestedMessage);\n    assertThat(builder.getRepeatedLazyMessage(0)).isEqualTo(NestedMessage.getDefaultInstance());\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessage);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedLazyMessageCount()).isEqualTo(0);\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedLazyMessage(0)).isEqualTo(nestedMessage);\n    assertThat(builder.getRepeatedLazyMessage(0)).isEqualTo(NestedMessage.getDefaultInstance());\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedLazyMessageCount()).isEqualTo(0);\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedLazyMessage(0)).isEqualTo(nestedMessageBuilder.build());\n    assertThat(builder.getRepeatedLazyMessage(0)).isEqualTo(NestedMessage.getDefaultInstance());\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedLazyMessageCount()).isEqualTo(0);\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertThat(messageAfterBuild.getRepeatedLazyMessage(0)).isEqualTo(nestedMessageBuilder.build());\n    assertThat(builder.getRepeatedLazyMessage(0)).isEqualTo(NestedMessage.getDefaultInstance());\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedSfixed32Count()).isEqualTo(0);\n    builder.setRepeatedSfixed32(0, 0);\n    assertThat(messageAfterBuild.getRepeatedSfixed32(0)).isEqualTo(1);\n    assertThat(builder.getRepeatedSfixed32(0)).isEqualTo(0);\n    builder.clearRepeatedSfixed32();\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedSfixed64Count()).isEqualTo(0L);\n    builder.setRepeatedSfixed64(0, 0L);\n    assertThat(messageAfterBuild.getRepeatedSfixed64(0)).isEqualTo(1L);\n    assertThat(builder.getRepeatedSfixed64(0)).isEqualTo(0L);\n    builder.clearRepeatedSfixed64();\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedSint32Count()).isEqualTo(0);\n    builder.setRepeatedSint32(0, 0);\n    assertThat(messageAfterBuild.getRepeatedSint32(0)).isEqualTo(1);\n    assertThat(builder.getRepeatedSint32(0)).isEqualTo(0);\n    builder.clearRepeatedSint32();\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedSint64Count()).isEqualTo(0L);\n    builder.setRepeatedSint64(0, 0L);\n    assertThat(messageAfterBuild.getRepeatedSint64(0)).isEqualTo(1L);\n    assertThat(builder.getRepeatedSint64(0)).isEqualTo(0L);\n    builder.clearRepeatedSint64();\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedStringCount()).isEqualTo(0L);\n    builder.setRepeatedString(0, \"\");\n    assertThat(messageAfterBuild.getRepeatedString(0)).isEqualTo(\"hi\");\n    assertThat(builder.getRepeatedString(0)).isEmpty();\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedStringCount()).isEqualTo(0L);\n    builder.setRepeatedString(0, \"\");\n    assertThat(messageAfterBuild.getRepeatedStringBytes(0))\n        .isEqualTo(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(builder.getRepeatedStringBytes(0)).isEqualTo(ByteString.EMPTY);\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedStringPieceCount()).isEqualTo(0L);\n    builder.setRepeatedStringPiece(0, \"\");\n    assertThat(messageAfterBuild.getRepeatedStringPiece(0)).isEqualTo(\"hi\");\n    assertThat(builder.getRepeatedStringPiece(0)).isEmpty();\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedStringPieceBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedStringPieceCount()).isEqualTo(0L);\n    builder.setRepeatedStringPiece(0, \"\");\n    assertThat(messageAfterBuild.getRepeatedStringPieceBytes(0))\n        .isEqualTo(ByteString.copyFromUtf8(\"hi\"));\n    assertThat(builder.getRepeatedStringPieceBytes(0)).isEqualTo(ByteString.EMPTY);\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedUint32Count()).isEqualTo(0);\n    builder.setRepeatedUint32(0, 0);\n    assertThat(messageAfterBuild.getRepeatedUint32(0)).isEqualTo(1);\n    assertThat(builder.getRepeatedUint32(0)).isEqualTo(0);\n    builder.clearRepeatedUint32();\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    messageAfterBuild = builder.build();\n    assertThat(message.getRepeatedUint64Count()).isEqualTo(0L);\n    builder.setRepeatedUint64(0, 0L);\n    assertThat(messageAfterBuild.getRepeatedUint64(0)).isEqualTo(1L);\n    assertThat(builder.getRepeatedUint64(0)).isEqualTo(0L);\n    builder.clearRepeatedUint64();\n\n    message = builder.build();\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    assertThat(builder.build().getOptionalBool()).isTrue();\n    builder.clearOptionalBool();\n\n    message = builder.build();\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    assertThat(builder.build().getOptionalBool()).isTrue();\n    builder.clear();\n    assertThat(builder.build().getSerializedSize()).isEqualTo(0);\n\n    message = builder.build();\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    builder.mergeOptionalForeignMessage(foreignMessage);\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    assertThat(builder.build().getOptionalForeignMessage().getC()).isEqualTo(foreignMessage.getC());\n    builder.clearOptionalForeignMessage();\n\n    message = builder.build();\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    builder.mergeOptionalLazyMessage(nestedMessage);\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    assertThat(builder.build().getOptionalLazyMessage().getBb()).isEqualTo(nestedMessage.getBb());\n    builder.clearOptionalLazyMessage();\n\n    message = builder.build();\n    builder.setOneofString(\"hi\");\n    assertThat(message.getOneofFieldCase()).isEqualTo(OneofFieldCase.ONEOFFIELD_NOT_SET);\n    assertThat(builder.getOneofFieldCase()).isEqualTo(OneofFieldCase.ONEOF_STRING);\n    assertThat(builder.getOneofString()).isEqualTo(\"hi\");\n    messageAfterBuild = builder.build();\n    assertThat(messageAfterBuild.getOneofFieldCase()).isEqualTo(OneofFieldCase.ONEOF_STRING);\n    assertThat(messageAfterBuild.getOneofString()).isEqualTo(\"hi\");\n    builder.setOneofUint32(1);\n    assertThat(messageAfterBuild.getOneofFieldCase()).isEqualTo(OneofFieldCase.ONEOF_STRING);\n    assertThat(messageAfterBuild.getOneofString()).isEqualTo(\"hi\");\n    assertThat(builder.getOneofFieldCase()).isEqualTo(OneofFieldCase.ONEOF_UINT32);\n    assertThat(builder.getOneofUint32()).isEqualTo(1);\n    TestAllTypesLiteOrBuilder messageOrBuilder = builder;\n    assertThat(messageOrBuilder.getOneofFieldCase()).isEqualTo(OneofFieldCase.ONEOF_UINT32);\n\n    TestAllExtensionsLite.Builder extendableMessageBuilder = TestAllExtensionsLite.newBuilder();\n    TestAllExtensionsLite extendableMessage = extendableMessageBuilder.build();\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 1);\n    assertThat(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite)).isFalse();\n    extendableMessage = extendableMessageBuilder.build();\n    assertThat((int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite))\n        .isEqualTo(1);\n    assertThat((int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite))\n        .isEqualTo(1);\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 3);\n    assertThat((int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite))\n        .isEqualTo(3);\n    assertThat((int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite))\n        .isEqualTo(1);\n    extendableMessage = extendableMessageBuilder.build();\n    assertThat((int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite))\n        .isEqualTo(3);\n    assertThat((int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite))\n        .isEqualTo(3);\n\n    \r\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray());\n    assertThat(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite)).isFalse();\n\n    extendableMessageBuilder = extendableMessage.toBuilder();\n    extendableMessageBuilder.mergeFrom(\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalFixed32ExtensionLite, 11)\n            .build());\n\n    extendableMessage = extendableMessageBuilder.build();\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray(), registry);\n\n    \r\n    assertThat((int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite))\n        .isEqualTo(3);\n    assertThat((int) extendableMessage.getExtension(UnittestLite.optionalFixed32ExtensionLite))\n        .isEqualTo(11);\n  }\n","date":"2021-08-10 06:55:00","endLine":1344,"groupId":"101","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSanityCopyOnWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testSanityCopyOnWrite() throws InvalidProtocolBufferException {\n    \r\n    \r\n    \r\n\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite message = builder.build();\n    TestAllTypesLite messageAfterBuild;\n    builder.setOptionalBool(true);\n    assertEquals(false, message.getOptionalBool());\n    assertEquals(true, builder.getOptionalBool());\n    messageAfterBuild = builder.build();\n    assertEquals(true, messageAfterBuild.getOptionalBool());\n    assertEquals(false, message.getOptionalBool());\n    builder.clearOptionalBool();\n    assertEquals(false, builder.getOptionalBool());\n    assertEquals(true, messageAfterBuild.getOptionalBool());\n\n    message = builder.build();\n    builder.setOptionalBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), builder.getOptionalBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getOptionalBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    builder.clearOptionalBytes();\n    assertEquals(ByteString.EMPTY, builder.getOptionalBytes());\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getOptionalBytes());\n\n    message = builder.build();\n    builder.setOptionalCord(\"hi\");\n    assertEquals(\"\", message.getOptionalCord());\n    assertEquals(\"hi\", builder.getOptionalCord());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalCord());\n    assertEquals(\"\", message.getOptionalCord());\n    builder.clearOptionalCord();\n    assertEquals(\"\", builder.getOptionalCord());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalCord());\n\n    message = builder.build();\n    builder.setOptionalCordBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalCordBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalCordBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalCordBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalCordBytes());\n    builder.clearOptionalCord();\n    assertEquals(ByteString.EMPTY, builder.getOptionalCordBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalCordBytes());\n\n    message = builder.build();\n    builder.setOptionalDouble(1);\n    assertEquals(0D, message.getOptionalDouble(), 0.0);\n    assertEquals(1D, builder.getOptionalDouble(), 0.0);\n    messageAfterBuild = builder.build();\n    assertEquals(1D, messageAfterBuild.getOptionalDouble(), 0.0);\n    assertEquals(0D, message.getOptionalDouble(), 0.0);\n    builder.clearOptionalDouble();\n    assertEquals(0D, builder.getOptionalDouble(), 0.0);\n    assertEquals(1D, messageAfterBuild.getOptionalDouble(), 0.0);\n\n    message = builder.build();\n    builder.setOptionalFixed32(1);\n    assertEquals(0, message.getOptionalFixed32());\n    assertEquals(1, builder.getOptionalFixed32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalFixed32());\n    assertEquals(0, message.getOptionalFixed32());\n    builder.clearOptionalFixed32();\n    assertEquals(0, builder.getOptionalFixed32());\n    assertEquals(1, messageAfterBuild.getOptionalFixed32());\n\n    message = builder.build();\n    builder.setOptionalFixed64(1);\n    assertEquals(0L, message.getOptionalFixed64());\n    assertEquals(1L, builder.getOptionalFixed64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalFixed64());\n    assertEquals(0L, message.getOptionalFixed64());\n    builder.clearOptionalFixed64();\n    assertEquals(0L, builder.getOptionalFixed64());\n    assertEquals(1L, messageAfterBuild.getOptionalFixed64());\n\n    message = builder.build();\n    builder.setOptionalFloat(1);\n    assertEquals(0F, message.getOptionalFloat(), 0.0f);\n    assertEquals(1F, builder.getOptionalFloat(), 0.0f);\n    messageAfterBuild = builder.build();\n    assertEquals(1F, messageAfterBuild.getOptionalFloat(), 0.0f);\n    assertEquals(0F, message.getOptionalFloat(), 0.0f);\n    builder.clearOptionalFloat();\n    assertEquals(0F, builder.getOptionalFloat(), 0.0f);\n    assertEquals(1F, messageAfterBuild.getOptionalFloat(), 0.0f);\n\n    message = builder.build();\n    builder.setOptionalForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, message.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, builder.getOptionalForeignEnum());\n    messageAfterBuild = builder.build();\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, message.getOptionalForeignEnum());\n    builder.clearOptionalForeignEnum();\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, builder.getOptionalForeignEnum());\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getOptionalForeignEnum());\n\n    message = builder.build();\n    ForeignMessageLite foreignMessage = ForeignMessageLite.newBuilder().setC(1).build();\n    builder.setOptionalForeignMessage(foreignMessage);\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    assertEquals(foreignMessage, builder.getOptionalForeignMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(foreignMessage, messageAfterBuild.getOptionalForeignMessage());\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    builder.clearOptionalForeignMessage();\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getOptionalForeignMessage());\n    assertEquals(foreignMessage, messageAfterBuild.getOptionalForeignMessage());\n\n    message = builder.build();\n    ForeignMessageLite foreignMessageC3 = ForeignMessageLite.newBuilder().setC(3).build();\n    builder.setOptionalForeignMessage(foreignMessageC3);\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    assertEquals(foreignMessageC3, builder.getOptionalForeignMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(foreignMessageC3, messageAfterBuild.getOptionalForeignMessage());\n    assertEquals(ForeignMessageLite.getDefaultInstance(), message.getOptionalForeignMessage());\n    builder.clearOptionalForeignMessage();\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getOptionalForeignMessage());\n    assertEquals(foreignMessageC3, messageAfterBuild.getOptionalForeignMessage());\n\n    message = builder.build();\n    OptionalGroup optionalGroup = OptionalGroup.newBuilder().setA(1).build();\n    builder.setOptionalGroup(optionalGroup);\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    assertEquals(optionalGroup, builder.getOptionalGroup());\n    messageAfterBuild = builder.build();\n    assertEquals(optionalGroup, messageAfterBuild.getOptionalGroup());\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    builder.clearOptionalGroup();\n    assertEquals(OptionalGroup.getDefaultInstance(), builder.getOptionalGroup());\n    assertEquals(optionalGroup, messageAfterBuild.getOptionalGroup());\n\n    message = builder.build();\n    OptionalGroup.Builder optionalGroupBuilder = OptionalGroup.newBuilder().setA(3);\n    builder.setOptionalGroup(optionalGroupBuilder);\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    assertEquals(optionalGroupBuilder.build(), builder.getOptionalGroup());\n    messageAfterBuild = builder.build();\n    assertEquals(optionalGroupBuilder.build(), messageAfterBuild.getOptionalGroup());\n    assertEquals(OptionalGroup.getDefaultInstance(), message.getOptionalGroup());\n    builder.clearOptionalGroup();\n    assertEquals(OptionalGroup.getDefaultInstance(), builder.getOptionalGroup());\n    assertEquals(optionalGroupBuilder.build(), messageAfterBuild.getOptionalGroup());\n\n    message = builder.build();\n    builder.setOptionalInt32(1);\n    assertEquals(0, message.getOptionalInt32());\n    assertEquals(1, builder.getOptionalInt32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalInt32());\n    assertEquals(0, message.getOptionalInt32());\n    builder.clearOptionalInt32();\n    assertEquals(0, builder.getOptionalInt32());\n    assertEquals(1, messageAfterBuild.getOptionalInt32());\n\n    message = builder.build();\n    builder.setOptionalInt64(1);\n    assertEquals(0L, message.getOptionalInt64());\n    assertEquals(1L, builder.getOptionalInt64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalInt64());\n    assertEquals(0L, message.getOptionalInt64());\n    builder.clearOptionalInt64();\n    assertEquals(0L, builder.getOptionalInt64());\n    assertEquals(1L, messageAfterBuild.getOptionalInt64());\n\n    message = builder.build();\n    NestedMessage nestedMessage = NestedMessage.newBuilder().setBb(1).build();\n    builder.setOptionalLazyMessage(nestedMessage);\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    assertEquals(nestedMessage, builder.getOptionalLazyMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(nestedMessage, messageAfterBuild.getOptionalLazyMessage());\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    builder.clearOptionalLazyMessage();\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getOptionalLazyMessage());\n    assertEquals(nestedMessage, messageAfterBuild.getOptionalLazyMessage());\n\n    message = builder.build();\n    NestedMessage.Builder nestedMessageBuilder = NestedMessage.newBuilder().setBb(3);\n    builder.setOptionalLazyMessage(nestedMessageBuilder);\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    assertEquals(nestedMessageBuilder.build(), builder.getOptionalLazyMessage());\n    messageAfterBuild = builder.build();\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getOptionalLazyMessage());\n    assertEquals(NestedMessage.getDefaultInstance(), message.getOptionalLazyMessage());\n    builder.clearOptionalLazyMessage();\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getOptionalLazyMessage());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getOptionalLazyMessage());\n\n    message = builder.build();\n    builder.setOptionalSfixed32(1);\n    assertEquals(0, message.getOptionalSfixed32());\n    assertEquals(1, builder.getOptionalSfixed32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalSfixed32());\n    assertEquals(0, message.getOptionalSfixed32());\n    builder.clearOptionalSfixed32();\n    assertEquals(0, builder.getOptionalSfixed32());\n    assertEquals(1, messageAfterBuild.getOptionalSfixed32());\n\n    message = builder.build();\n    builder.setOptionalSfixed64(1);\n    assertEquals(0L, message.getOptionalSfixed64());\n    assertEquals(1L, builder.getOptionalSfixed64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalSfixed64());\n    assertEquals(0L, message.getOptionalSfixed64());\n    builder.clearOptionalSfixed64();\n    assertEquals(0L, builder.getOptionalSfixed64());\n    assertEquals(1L, messageAfterBuild.getOptionalSfixed64());\n\n    message = builder.build();\n    builder.setOptionalSint32(1);\n    assertEquals(0, message.getOptionalSint32());\n    assertEquals(1, builder.getOptionalSint32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalSint32());\n    builder.clearOptionalSint32();\n    assertEquals(0, builder.getOptionalSint32());\n    assertEquals(1, messageAfterBuild.getOptionalSint32());\n\n    message = builder.build();\n    builder.setOptionalSint64(1);\n    assertEquals(0L, message.getOptionalSint64());\n    assertEquals(1L, builder.getOptionalSint64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalSint64());\n    assertEquals(0L, message.getOptionalSint64());\n    builder.clearOptionalSint64();\n    assertEquals(0L, builder.getOptionalSint64());\n    assertEquals(1L, messageAfterBuild.getOptionalSint64());\n\n    message = builder.build();\n    builder.setOptionalString(\"hi\");\n    assertEquals(\"\", message.getOptionalString());\n    assertEquals(\"hi\", builder.getOptionalString());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalString());\n    assertEquals(\"\", message.getOptionalString());\n    builder.clearOptionalString();\n    assertEquals(\"\", builder.getOptionalString());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalString());\n\n    message = builder.build();\n    builder.setOptionalStringBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalStringBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalStringBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalStringBytes());\n    builder.clearOptionalString();\n    assertEquals(ByteString.EMPTY, builder.getOptionalStringBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringBytes());\n\n    message = builder.build();\n    builder.setOptionalStringPiece(\"hi\");\n    assertEquals(\"\", message.getOptionalStringPiece());\n    assertEquals(\"hi\", builder.getOptionalStringPiece());\n    messageAfterBuild = builder.build();\n    assertEquals(\"hi\", messageAfterBuild.getOptionalStringPiece());\n    assertEquals(\"\", message.getOptionalStringPiece());\n    builder.clearOptionalStringPiece();\n    assertEquals(\"\", builder.getOptionalStringPiece());\n    assertEquals(\"hi\", messageAfterBuild.getOptionalStringPiece());\n\n    message = builder.build();\n    builder.setOptionalStringPieceBytes(ByteString.copyFromUtf8(\"no\"));\n    assertEquals(ByteString.EMPTY, message.getOptionalStringPieceBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), builder.getOptionalStringPieceBytes());\n    messageAfterBuild = builder.build();\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringPieceBytes());\n    assertEquals(ByteString.EMPTY, message.getOptionalStringPieceBytes());\n    builder.clearOptionalStringPiece();\n    assertEquals(ByteString.EMPTY, builder.getOptionalStringPieceBytes());\n    assertEquals(ByteString.copyFromUtf8(\"no\"), messageAfterBuild.getOptionalStringPieceBytes());\n\n    message = builder.build();\n    builder.setOptionalUint32(1);\n    assertEquals(0, message.getOptionalUint32());\n    assertEquals(1, builder.getOptionalUint32());\n    messageAfterBuild = builder.build();\n    assertEquals(1, messageAfterBuild.getOptionalUint32());\n    assertEquals(0, message.getOptionalUint32());\n    builder.clearOptionalUint32();\n    assertEquals(0, builder.getOptionalUint32());\n    assertEquals(1, messageAfterBuild.getOptionalUint32());\n\n    message = builder.build();\n    builder.setOptionalUint64(1);\n    assertEquals(0L, message.getOptionalUint64());\n    assertEquals(1L, builder.getOptionalUint64());\n    messageAfterBuild = builder.build();\n    assertEquals(1L, messageAfterBuild.getOptionalUint64());\n    assertEquals(0L, message.getOptionalUint64());\n    builder.clearOptionalUint64();\n    assertEquals(0L, builder.getOptionalUint64());\n    assertEquals(1L, messageAfterBuild.getOptionalUint64());\n\n    message = builder.build();\n    builder.addAllRepeatedBool(singletonList(true));\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    assertEquals(singletonList(true), builder.getRepeatedBoolList());\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertEquals(emptyList(), builder.getRepeatedBoolList());\n    assertEquals(singletonList(true), messageAfterBuild.getRepeatedBoolList());\n\n    message = builder.build();\n    builder.addAllRepeatedBytes(singletonList(ByteString.copyFromUtf8(\"hi\")));\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    assertEquals(singletonList(ByteString.copyFromUtf8(\"hi\")), builder.getRepeatedBytesList());\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertEquals(emptyList(), builder.getRepeatedBytesList());\n    assertEquals(\n        singletonList(ByteString.copyFromUtf8(\"hi\")), messageAfterBuild.getRepeatedBytesList());\n\n    message = builder.build();\n    builder.addAllRepeatedCord(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedCordList());\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertEquals(emptyList(), builder.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedCordList());\n\n    message = builder.build();\n    builder.addAllRepeatedDouble(singletonList(1D));\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), builder.getRepeatedDoubleList());\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertEquals(emptyList(), builder.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), messageAfterBuild.getRepeatedDoubleList());\n\n    message = builder.build();\n    builder.addAllRepeatedFixed32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedFixed32List());\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertEquals(emptyList(), builder.getRepeatedFixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedFixed32List());\n\n    message = builder.build();\n    builder.addAllRepeatedFixed64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedFixed64List());\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertEquals(emptyList(), builder.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedFixed64List());\n\n    message = builder.build();\n    builder.addAllRepeatedFloat(singletonList(1F));\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    assertEquals(singletonList(1F), builder.getRepeatedFloatList());\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertEquals(emptyList(), builder.getRepeatedFloatList());\n    assertEquals(singletonList(1F), messageAfterBuild.getRepeatedFloatList());\n\n    message = builder.build();\n    builder.addAllRepeatedForeignEnum(singletonList(ForeignEnumLite.FOREIGN_LITE_BAR));\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR), builder.getRepeatedForeignEnumList());\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertEquals(emptyList(), builder.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR),\n        messageAfterBuild.getRepeatedForeignEnumList());\n\n    message = builder.build();\n    builder.addAllRepeatedForeignMessage(singletonList(foreignMessage));\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), builder.getRepeatedForeignMessageList());\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignMessage();\n    assertEquals(emptyList(), builder.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), messageAfterBuild.getRepeatedForeignMessageList());\n\n    message = builder.build();\n    builder.addAllRepeatedGroup(singletonList(RepeatedGroup.getDefaultInstance()));\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    assertEquals(singletonList(RepeatedGroup.getDefaultInstance()), builder.getRepeatedGroupList());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedGroup();\n    assertEquals(emptyList(), builder.getRepeatedGroupList());\n    assertEquals(\n        singletonList(RepeatedGroup.getDefaultInstance()),\n        messageAfterBuild.getRepeatedGroupList());\n\n    message = builder.build();\n    builder.addAllRepeatedInt32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    assertEquals(singletonList(1), builder.getRepeatedInt32List());\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertEquals(emptyList(), builder.getRepeatedInt32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedInt32List());\n\n    message = builder.build();\n    builder.addAllRepeatedInt64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    assertEquals(singletonList(1L), builder.getRepeatedInt64List());\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertEquals(emptyList(), builder.getRepeatedInt64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedInt64List());\n\n    message = builder.build();\n    builder.addAllRepeatedLazyMessage(singletonList(nestedMessage));\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), builder.getRepeatedLazyMessageList());\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedLazyMessage();\n    assertEquals(emptyList(), builder.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), messageAfterBuild.getRepeatedLazyMessageList());\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedSfixed32List());\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertEquals(emptyList(), builder.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSfixed32List());\n\n    message = builder.build();\n    builder.addAllRepeatedSfixed64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSfixed64List());\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertEquals(emptyList(), builder.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSfixed64List());\n\n    message = builder.build();\n    builder.addAllRepeatedSint32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    assertEquals(singletonList(1), builder.getRepeatedSint32List());\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertEquals(emptyList(), builder.getRepeatedSint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSint32List());\n\n    message = builder.build();\n    builder.addAllRepeatedSint64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSint64List());\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertEquals(emptyList(), builder.getRepeatedSint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSint64List());\n\n    message = builder.build();\n    builder.addAllRepeatedString(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringList());\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertEquals(emptyList(), builder.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringList());\n\n    message = builder.build();\n    builder.addAllRepeatedStringPiece(singletonList(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringPieceList());\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertEquals(emptyList(), builder.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringPieceList());\n\n    message = builder.build();\n    builder.addAllRepeatedUint32(singletonList(1));\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    assertEquals(singletonList(1), builder.getRepeatedUint32List());\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertEquals(emptyList(), builder.getRepeatedUint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedUint32List());\n\n    message = builder.build();\n    builder.addAllRepeatedUint64(singletonList(1L));\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedUint64List());\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertEquals(emptyList(), builder.getRepeatedUint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedUint64List());\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    assertEquals(singletonList(true), builder.getRepeatedBoolList());\n    assertEquals(emptyList(), message.getRepeatedBoolList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBool();\n    assertEquals(emptyList(), builder.getRepeatedBoolList());\n    assertEquals(singletonList(true), messageAfterBuild.getRepeatedBoolList());\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    assertEquals(singletonList(ByteString.copyFromUtf8(\"hi\")), builder.getRepeatedBytesList());\n    assertEquals(emptyList(), message.getRepeatedBytesList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedBytes();\n    assertEquals(emptyList(), builder.getRepeatedBytesList());\n    assertEquals(\n        singletonList(ByteString.copyFromUtf8(\"hi\")), messageAfterBuild.getRepeatedBytesList());\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedCordList());\n    assertEquals(emptyList(), message.getRepeatedCordList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedCord();\n    assertEquals(emptyList(), builder.getRepeatedCordList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedCordList());\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), builder.getRepeatedDoubleList());\n    assertEquals(emptyList(), message.getRepeatedDoubleList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedDouble();\n    assertEquals(emptyList(), builder.getRepeatedDoubleList());\n    assertEquals(singletonList(1D), messageAfterBuild.getRepeatedDoubleList());\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedFixed32List());\n    assertEquals(emptyList(), message.getRepeatedFixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed32();\n    assertEquals(emptyList(), builder.getRepeatedFixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedFixed32List());\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedFixed64List());\n    assertEquals(emptyList(), message.getRepeatedFixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFixed64();\n    assertEquals(emptyList(), builder.getRepeatedFixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedFixed64List());\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    assertEquals(singletonList(1F), builder.getRepeatedFloatList());\n    assertEquals(emptyList(), message.getRepeatedFloatList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedFloat();\n    assertEquals(emptyList(), builder.getRepeatedFloatList());\n    assertEquals(singletonList(1F), messageAfterBuild.getRepeatedFloatList());\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR), builder.getRepeatedForeignEnumList());\n    assertEquals(emptyList(), message.getRepeatedForeignEnumList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedForeignEnum();\n    assertEquals(emptyList(), builder.getRepeatedForeignEnumList());\n    assertEquals(\n        singletonList(ForeignEnumLite.FOREIGN_LITE_BAR),\n        messageAfterBuild.getRepeatedForeignEnumList());\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), builder.getRepeatedForeignMessageList());\n    assertEquals(emptyList(), message.getRepeatedForeignMessageList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedForeignMessage(0);\n    assertEquals(emptyList(), builder.getRepeatedForeignMessageList());\n    assertEquals(singletonList(foreignMessage), messageAfterBuild.getRepeatedForeignMessageList());\n\n    message = builder.build();\n    builder.addRepeatedGroup(RepeatedGroup.getDefaultInstance());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    assertEquals(singletonList(RepeatedGroup.getDefaultInstance()), builder.getRepeatedGroupList());\n    assertEquals(emptyList(), message.getRepeatedGroupList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedGroup(0);\n    assertEquals(emptyList(), builder.getRepeatedGroupList());\n    assertEquals(\n        singletonList(RepeatedGroup.getDefaultInstance()),\n        messageAfterBuild.getRepeatedGroupList());\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    assertEquals(singletonList(1), builder.getRepeatedInt32List());\n    assertEquals(emptyList(), message.getRepeatedInt32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt32();\n    assertEquals(emptyList(), builder.getRepeatedInt32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedInt32List());\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    assertEquals(singletonList(1L), builder.getRepeatedInt64List());\n    assertEquals(emptyList(), message.getRepeatedInt64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedInt64();\n    assertEquals(emptyList(), builder.getRepeatedInt64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedInt64List());\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), builder.getRepeatedLazyMessageList());\n    assertEquals(emptyList(), message.getRepeatedLazyMessageList());\n    messageAfterBuild = builder.build();\n    builder.removeRepeatedLazyMessage(0);\n    assertEquals(emptyList(), builder.getRepeatedLazyMessageList());\n    assertEquals(singletonList(nestedMessage), messageAfterBuild.getRepeatedLazyMessageList());\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), builder.getRepeatedSfixed32List());\n    assertEquals(emptyList(), message.getRepeatedSfixed32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed32();\n    assertEquals(emptyList(), builder.getRepeatedSfixed32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSfixed32List());\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSfixed64List());\n    assertEquals(emptyList(), message.getRepeatedSfixed64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSfixed64();\n    assertEquals(emptyList(), builder.getRepeatedSfixed64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSfixed64List());\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    assertEquals(singletonList(1), builder.getRepeatedSint32List());\n    assertEquals(emptyList(), message.getRepeatedSint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint32();\n    assertEquals(emptyList(), builder.getRepeatedSint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedSint32List());\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedSint64List());\n    assertEquals(emptyList(), message.getRepeatedSint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedSint64();\n    assertEquals(emptyList(), builder.getRepeatedSint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedSint64List());\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringList());\n    assertEquals(emptyList(), message.getRepeatedStringList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedString();\n    assertEquals(emptyList(), builder.getRepeatedStringList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringList());\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), builder.getRepeatedStringPieceList());\n    assertEquals(emptyList(), message.getRepeatedStringPieceList());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedStringPiece();\n    assertEquals(emptyList(), builder.getRepeatedStringPieceList());\n    assertEquals(singletonList(\"hi\"), messageAfterBuild.getRepeatedStringPieceList());\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    assertEquals(singletonList(1), builder.getRepeatedUint32List());\n    assertEquals(emptyList(), message.getRepeatedUint32List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint32();\n    assertEquals(emptyList(), builder.getRepeatedUint32List());\n    assertEquals(singletonList(1), messageAfterBuild.getRepeatedUint32List());\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    assertEquals(singletonList(1L), builder.getRepeatedUint64List());\n    assertEquals(emptyList(), message.getRepeatedUint64List());\n    messageAfterBuild = builder.build();\n    builder.clearRepeatedUint64();\n    assertEquals(emptyList(), builder.getRepeatedUint64List());\n    assertEquals(singletonList(1L), messageAfterBuild.getRepeatedUint64List());\n\n    message = builder.build();\n    builder.addRepeatedBool(true);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedBoolCount());\n    builder.setRepeatedBool(0, false);\n    assertEquals(true, messageAfterBuild.getRepeatedBool(0));\n    assertEquals(false, builder.getRepeatedBool(0));\n    builder.clearRepeatedBool();\n\n    message = builder.build();\n    builder.addRepeatedBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedBytesCount());\n    builder.setRepeatedBytes(0, ByteString.EMPTY);\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedBytes(0));\n    builder.clearRepeatedBytes();\n\n    message = builder.build();\n    builder.addRepeatedCord(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedCordCount());\n    builder.setRepeatedCord(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedCord(0));\n    assertEquals(\"\", builder.getRepeatedCord(0));\n    builder.clearRepeatedCord();\n    message = builder.build();\n\n    builder.addRepeatedCordBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedCordCount());\n    builder.setRepeatedCord(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedCordBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedCordBytes(0));\n    builder.clearRepeatedCord();\n\n    message = builder.build();\n    builder.addRepeatedDouble(1D);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedDoubleCount());\n    builder.setRepeatedDouble(0, 0D);\n    assertEquals(1D, messageAfterBuild.getRepeatedDouble(0), 0.0);\n    assertEquals(0D, builder.getRepeatedDouble(0), 0.0);\n    builder.clearRepeatedDouble();\n\n    message = builder.build();\n    builder.addRepeatedFixed32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFixed32Count());\n    builder.setRepeatedFixed32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedFixed32(0));\n    assertEquals(0, builder.getRepeatedFixed32(0));\n    builder.clearRepeatedFixed32();\n\n    message = builder.build();\n    builder.addRepeatedFixed64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFixed64Count());\n    builder.setRepeatedFixed64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedFixed64(0));\n    assertEquals(0L, builder.getRepeatedFixed64(0));\n    builder.clearRepeatedFixed64();\n\n    message = builder.build();\n    builder.addRepeatedFloat(1F);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedFloatCount());\n    builder.setRepeatedFloat(0, 0F);\n    assertEquals(1F, messageAfterBuild.getRepeatedFloat(0), 0.0f);\n    assertEquals(0F, builder.getRepeatedFloat(0), 0.0f);\n    builder.clearRepeatedFloat();\n\n    message = builder.build();\n    builder.addRepeatedForeignEnum(ForeignEnumLite.FOREIGN_LITE_BAR);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignEnumCount());\n    builder.setRepeatedForeignEnum(0, ForeignEnumLite.FOREIGN_LITE_FOO);\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_BAR, messageAfterBuild.getRepeatedForeignEnum(0));\n    assertEquals(ForeignEnumLite.FOREIGN_LITE_FOO, builder.getRepeatedForeignEnum(0));\n    builder.clearRepeatedForeignEnum();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertEquals(foreignMessage, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(foreignMessageC3);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, ForeignMessageLite.getDefaultInstance());\n    assertEquals(foreignMessageC3, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(ForeignMessageLite.getDefaultInstance(), builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    builder.addRepeatedForeignMessage(0, foreignMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedForeignMessageCount());\n    builder.setRepeatedForeignMessage(0, foreignMessageC3);\n    assertEquals(foreignMessage, messageAfterBuild.getRepeatedForeignMessage(0));\n    assertEquals(foreignMessageC3, builder.getRepeatedForeignMessage(0));\n    builder.clearRepeatedForeignMessage();\n\n    message = builder.build();\n    RepeatedGroup repeatedGroup = RepeatedGroup.newBuilder().setA(1).build();\n    builder.addRepeatedGroup(repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroup, messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroup);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroup, messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    RepeatedGroup.Builder repeatedGroupBuilder = RepeatedGroup.newBuilder().setA(3);\n    builder.addRepeatedGroup(repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroupBuilder.build(), messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedGroup(0, repeatedGroupBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedGroupCount());\n    builder.setRepeatedGroup(0, RepeatedGroup.getDefaultInstance());\n    assertEquals(repeatedGroupBuilder.build(), messageAfterBuild.getRepeatedGroup(0));\n    assertEquals(RepeatedGroup.getDefaultInstance(), builder.getRepeatedGroup(0));\n    builder.clearRepeatedGroup();\n\n    message = builder.build();\n    builder.addRepeatedInt32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedInt32Count());\n    builder.setRepeatedInt32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedInt32(0));\n    assertEquals(0, builder.getRepeatedInt32(0));\n    builder.clearRepeatedInt32();\n\n    message = builder.build();\n    builder.addRepeatedInt64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedInt64Count());\n    builder.setRepeatedInt64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedInt64(0));\n    assertEquals(0L, builder.getRepeatedInt64(0));\n    builder.clearRepeatedInt64();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessage, messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessage);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessage, messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedLazyMessage(0, nestedMessageBuilder);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedLazyMessageCount());\n    builder.setRepeatedLazyMessage(0, NestedMessage.getDefaultInstance());\n    assertEquals(nestedMessageBuilder.build(), messageAfterBuild.getRepeatedLazyMessage(0));\n    assertEquals(NestedMessage.getDefaultInstance(), builder.getRepeatedLazyMessage(0));\n    builder.clearRepeatedLazyMessage();\n\n    message = builder.build();\n    builder.addRepeatedSfixed32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedSfixed32Count());\n    builder.setRepeatedSfixed32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedSfixed32(0));\n    assertEquals(0, builder.getRepeatedSfixed32(0));\n    builder.clearRepeatedSfixed32();\n\n    message = builder.build();\n    builder.addRepeatedSfixed64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedSfixed64Count());\n    builder.setRepeatedSfixed64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedSfixed64(0));\n    assertEquals(0L, builder.getRepeatedSfixed64(0));\n    builder.clearRepeatedSfixed64();\n\n    message = builder.build();\n    builder.addRepeatedSint32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedSint32Count());\n    builder.setRepeatedSint32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedSint32(0));\n    assertEquals(0, builder.getRepeatedSint32(0));\n    builder.clearRepeatedSint32();\n\n    message = builder.build();\n    builder.addRepeatedSint64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedSint64Count());\n    builder.setRepeatedSint64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedSint64(0));\n    assertEquals(0L, builder.getRepeatedSint64(0));\n    builder.clearRepeatedSint64();\n\n    message = builder.build();\n    builder.addRepeatedString(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringCount());\n    builder.setRepeatedString(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedString(0));\n    assertEquals(\"\", builder.getRepeatedString(0));\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringCount());\n    builder.setRepeatedString(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedStringBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedStringBytes(0));\n    builder.clearRepeatedString();\n\n    message = builder.build();\n    builder.addRepeatedStringPiece(\"hi\");\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringPieceCount());\n    builder.setRepeatedStringPiece(0, \"\");\n    assertEquals(\"hi\", messageAfterBuild.getRepeatedStringPiece(0));\n    assertEquals(\"\", builder.getRepeatedStringPiece(0));\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedStringPieceBytes(ByteString.copyFromUtf8(\"hi\"));\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedStringPieceCount());\n    builder.setRepeatedStringPiece(0, \"\");\n    assertEquals(ByteString.copyFromUtf8(\"hi\"), messageAfterBuild.getRepeatedStringPieceBytes(0));\n    assertEquals(ByteString.EMPTY, builder.getRepeatedStringPieceBytes(0));\n    builder.clearRepeatedStringPiece();\n\n    message = builder.build();\n    builder.addRepeatedUint32(1);\n    messageAfterBuild = builder.build();\n    assertEquals(0, message.getRepeatedUint32Count());\n    builder.setRepeatedUint32(0, 0);\n    assertEquals(1, messageAfterBuild.getRepeatedUint32(0));\n    assertEquals(0, builder.getRepeatedUint32(0));\n    builder.clearRepeatedUint32();\n\n    message = builder.build();\n    builder.addRepeatedUint64(1L);\n    messageAfterBuild = builder.build();\n    assertEquals(0L, message.getRepeatedUint64Count());\n    builder.setRepeatedUint64(0, 0L);\n    assertEquals(1L, messageAfterBuild.getRepeatedUint64(0));\n    assertEquals(0L, builder.getRepeatedUint64(0));\n    builder.clearRepeatedUint64();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(true, builder.build().getOptionalBool());\n    builder.clearOptionalBool();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeFrom(TestAllTypesLite.newBuilder().setOptionalBool(true).build());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(true, builder.build().getOptionalBool());\n    builder.clear();\n    assertEquals(0, builder.build().getSerializedSize());\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeOptionalForeignMessage(foreignMessage);\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(foreignMessage.getC(), builder.build().getOptionalForeignMessage().getC());\n    builder.clearOptionalForeignMessage();\n\n    message = builder.build();\n    assertEquals(0, message.getSerializedSize());\n    builder.mergeOptionalLazyMessage(nestedMessage);\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(nestedMessage.getBb(), builder.build().getOptionalLazyMessage().getBb());\n    builder.clearOptionalLazyMessage();\n\n    message = builder.build();\n    builder.setOneofString(\"hi\");\n    assertEquals(OneofFieldCase.ONEOFFIELD_NOT_SET, message.getOneofFieldCase());\n    assertEquals(OneofFieldCase.ONEOF_STRING, builder.getOneofFieldCase());\n    assertEquals(\"hi\", builder.getOneofString());\n    messageAfterBuild = builder.build();\n    assertEquals(OneofFieldCase.ONEOF_STRING, messageAfterBuild.getOneofFieldCase());\n    assertEquals(\"hi\", messageAfterBuild.getOneofString());\n    builder.setOneofUint32(1);\n    assertEquals(OneofFieldCase.ONEOF_STRING, messageAfterBuild.getOneofFieldCase());\n    assertEquals(\"hi\", messageAfterBuild.getOneofString());\n    assertEquals(OneofFieldCase.ONEOF_UINT32, builder.getOneofFieldCase());\n    assertEquals(1, builder.getOneofUint32());\n    TestAllTypesLiteOrBuilder messageOrBuilder = builder;\n    assertEquals(OneofFieldCase.ONEOF_UINT32, messageOrBuilder.getOneofFieldCase());\n\n    TestAllExtensionsLite.Builder extendableMessageBuilder = TestAllExtensionsLite.newBuilder();\n    TestAllExtensionsLite extendableMessage = extendableMessageBuilder.build();\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 1);\n    assertFalse(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessage = extendableMessageBuilder.build();\n    assertEquals(\n        1, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(1, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessageBuilder.setExtension(UnittestLite.optionalInt32ExtensionLite, 3);\n    assertEquals(\n        3, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(1, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    extendableMessage = extendableMessageBuilder.build();\n    assertEquals(\n        3, (int) extendableMessageBuilder.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(3, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n\n    \r\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray());\n    assertFalse(extendableMessage.hasExtension(UnittestLite.optionalInt32ExtensionLite));\n\n    extendableMessageBuilder = extendableMessage.toBuilder();\n    extendableMessageBuilder.mergeFrom(\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalFixed32ExtensionLite, 11)\n            .build());\n\n    extendableMessage = extendableMessageBuilder.build();\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    extendableMessage = TestAllExtensionsLite.parseFrom(extendableMessage.toByteArray(), registry);\n\n    \r\n    assertEquals(3, (int) extendableMessage.getExtension(UnittestLite.optionalInt32ExtensionLite));\n    assertEquals(\n        11, (int) extendableMessage.getExtension(UnittestLite.optionalFixed32ExtensionLite));\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testLazyField() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes message = builder.build();\n    assertThat(message.hasOptionalLazyMessage()).isFalse();\n    assertThat(message.getSerializedSize()).isEqualTo(0);\n    assertThat(message.toByteString()).isEqualTo(ByteString.EMPTY);\n\n    \r\n    builder.setOptionalLazyMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    message = builder.build();\n    assertThat(message.hasOptionalLazyMessage()).isTrue();\n    assertThat(message.getSerializedSize()).isEqualTo(2);\n\n    \r\n    TestAllTypes parsed = TestAllTypes.parseFrom(message.toByteString());\n    assertThat(parsed.hasOptionalLazyMessage()).isTrue();\n    assertThat(parsed.getOptionalLazyMessage()).isEqualTo(message.getOptionalLazyMessage());\n  }\n","date":"2021-08-10 06:55:00","endLine":258,"groupId":"101","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLazyField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c4/830af392c2e56a6813114f184f7113711487a5.src","preCode":"  public void testLazyField() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes message = builder.build();\n    assertFalse(message.hasOptionalLazyMessage());\n    assertEquals(0, message.getSerializedSize());\n    assertEquals(ByteString.EMPTY, message.toByteString());\n\n    \r\n    builder.setOptionalLazyMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    message = builder.build();\n    assertTrue(message.hasOptionalLazyMessage());\n    assertEquals(2, message.getSerializedSize());\n\n    \r\n    TestAllTypes parsed = TestAllTypes.parseFrom(message.toByteString());\n    assertTrue(parsed.hasOptionalLazyMessage());\n    assertEquals(message.getOptionalLazyMessage(), parsed.getOptionalLazyMessage());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FieldPresenceTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
