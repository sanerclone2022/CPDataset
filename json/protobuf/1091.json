[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testToString() throws UnsupportedEncodingException {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    LiteralByteString unicode = new LiteralByteString(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","date":"2016-01-14 03:22:18","endLine":73,"groupId":"422","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/2d/fae2e6f071f4b8f8bdbde2730511a8685d8b6b.src","preCode":"  public void testToString() throws UnsupportedEncodingException {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    LiteralByteString unicode = new LiteralByteString(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testCharsetToString() {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    LiteralByteString unicode = new LiteralByteString(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(Internal.UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","date":"2016-01-14 03:22:18","endLine":86,"groupId":"956","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCharsetToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/2d/fae2e6f071f4b8f8bdbde2730511a8685d8b6b.src","preCode":"  public void testCharsetToString() {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    LiteralByteString unicode = new LiteralByteString(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(Internal.UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2016-02-02 02:00:40","codes":[{"authorDate":"2016-02-02 02:00:40","commitOrder":2,"curCode":"  public void testToString() throws UnsupportedEncodingException {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString unicode = ByteString.wrap(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","date":"2016-02-02 02:00:40","endLine":73,"groupId":"422","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7a/8a0a5e79cc1ba8c9db651fa4bd07204cddb20f.src","preCode":"  public void testToString() throws UnsupportedEncodingException {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    LiteralByteString unicode = new LiteralByteString(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2016-02-02 02:00:40","commitOrder":2,"curCode":"  public void testCharsetToString() {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString unicode = ByteString.wrap(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(Internal.UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","date":"2016-02-02 02:00:40","endLine":86,"groupId":"956","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCharsetToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7a/8a0a5e79cc1ba8c9db651fa4bd07204cddb20f.src","preCode":"  public void testCharsetToString() {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    LiteralByteString unicode = new LiteralByteString(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(classUnderTest + \".substring() must have the expected type\",\n        classUnderTest, getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(Internal.UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6), roundTripString);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"110e31cbbc5eb744d934a9bccaaef3e4cdcd13d4","commitMessage":"@@@Merge pull request #1199 from google/google_integrate\n\nIntegrate google internal changes to master","date":"2016-02-02 02:00:40","modifiedFileCount":"9","status":"M","submitter":"Jisi Liu"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testToString() throws UnsupportedEncodingException {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString unicode = ByteString.wrap(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertWithMessage(\"%s.substring() must have the expected type\", classUnderTest)\n        .that(classUnderTest)\n        .isEqualTo(getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(UTF_8);\n    assertWithMessage(\"%s unicode bytes must match\", classUnderTest)\n        .that(testString.substring(2, testString.length() - 6))\n        .isEqualTo(roundTripString);\n  }\n","date":"2021-08-10 06:55:00","endLine":81,"groupId":"1091","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/65/6d2c3ab6db22472636381bc7ee0d90e3d46dc9.src","preCode":"  public void testToString() throws UnsupportedEncodingException {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString unicode = ByteString.wrap(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(\n        classUnderTest + \".substring() must have the expected type\",\n        classUnderTest,\n        getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(UTF_8);\n    assertEquals(\n        classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6),\n        roundTripString);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testCharsetToString() {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString unicode = ByteString.wrap(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertWithMessage(\"%s.substring() must have the expected type\", classUnderTest)\n        .that(classUnderTest)\n        .isEqualTo(getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(Internal.UTF_8);\n    assertWithMessage(\"%s unicode bytes must match\", classUnderTest)\n        .that(testString.substring(2, testString.length() - 6))\n        .isEqualTo(roundTripString);\n  }\n","date":"2021-08-10 06:55:00","endLine":97,"groupId":"1091","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testCharsetToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/65/6d2c3ab6db22472636381bc7ee0d90e3d46dc9.src","preCode":"  public void testCharsetToString() {\n    String testString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString unicode = ByteString.wrap(testString.getBytes(Internal.UTF_8));\n    ByteString chopped = unicode.substring(2, unicode.size() - 6);\n    assertEquals(\n        classUnderTest + \".substring() must have the expected type\",\n        classUnderTest,\n        getActualClassName(chopped));\n\n    String roundTripString = chopped.toString(Internal.UTF_8);\n    assertEquals(\n        classUnderTest + \" unicode bytes must match\",\n        testString.substring(2, testString.length() - 6),\n        roundTripString);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
