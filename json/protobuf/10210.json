[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertTrue(\"Didn't get a ByteString back\", o instanceof ByteString);\n    assertEquals(\"Should get an equal ByteString back\", stringUnderTest, o);\n  }\n","date":"2016-01-14 03:22:18","endLine":100,"groupId":"647","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJavaSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/2d/fae2e6f071f4b8f8bdbde2730511a8685d8b6b.src","preCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertTrue(\"Didn't get a ByteString back\", o instanceof ByteString);\n    assertEquals(\"Should get an equal ByteString back\", stringUnderTest, o);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertTrue(\"Didn't get a ByteString back\", o instanceof ByteString);\n    assertEquals(\"Should get an equal ByteString back\", stringUnderTest, o);\n  }\n","date":"2016-01-14 03:22:18","endLine":188,"groupId":"647","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJavaSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/4e/c3a409882cdd4f1e6503ca28b0e32076ca1f31.src","preCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertTrue(\"Didn't get a ByteString back\", o instanceof ByteString);\n    assertEquals(\"Should get an equal ByteString back\", stringUnderTest, o);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RopeByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertWithMessage(\"Didn't get a ByteString back\").that(o).isInstanceOf(ByteString.class);\n    assertWithMessage(\"Should get an equal ByteString back\").that(stringUnderTest).isEqualTo(o);\n  }\n","date":"2021-08-10 06:55:00","endLine":112,"groupId":"10210","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testJavaSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/65/6d2c3ab6db22472636381bc7ee0d90e3d46dc9.src","preCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertTrue(\"Didn't get a ByteString back\", o instanceof ByteString);\n    assertEquals(\"Should get an equal ByteString back\", stringUnderTest, o);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/BoundedByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertWithMessage(\"Didn't get a ByteString back\").that(o).isInstanceOf(ByteString.class);\n    assertWithMessage(\"Should get an equal ByteString back\").that(o).isEqualTo(stringUnderTest);\n  }\n","date":"2021-08-10 06:55:00","endLine":236,"groupId":"10210","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testJavaSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/bd/b8132020517bb56a75350ca6aad8062a55d035.src","preCode":"  public void testJavaSerialization() throws Exception {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(out);\n    oos.writeObject(stringUnderTest);\n    oos.close();\n    byte[] pickled = out.toByteArray();\n    InputStream in = new ByteArrayInputStream(pickled);\n    ObjectInputStream ois = new ObjectInputStream(in);\n    Object o = ois.readObject();\n    assertTrue(\"Didn't get a ByteString back\", o instanceof ByteString);\n    assertEquals(\"Should get an equal ByteString back\", stringUnderTest, o);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RopeByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
