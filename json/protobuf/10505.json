[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testOneofTypes() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooInt(), 0);\n      assertFalse(builder.hasFooInt());\n      assertTrue(builder.setFooInt(123).hasFooInt());\n      assertEquals(builder.getFooInt(), 123);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooInt());\n      assertEquals(message.getFooInt(), 123);\n\n      assertFalse(builder.clearFooInt().hasFooInt());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 0);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooEnum(), TestOneof2.NestedEnum.FOO);\n      assertTrue(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum());\n      assertEquals(builder.getFooEnum(), TestOneof2.NestedEnum.BAR);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooEnum());\n      assertEquals(message.getFooEnum(), TestOneof2.NestedEnum.BAR);\n\n      assertFalse(builder.clearFooEnum().hasFooEnum());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.FOO);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooString(), \"\");\n      builder.setFooString(\"foo\");\n      assertTrue(builder.hasFooString());\n      assertEquals(builder.getFooString(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooString());\n      assertEquals(message.getFooString(), \"foo\");\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooString().hasFooString());\n      TestOneof2 message2 = builder.buildPartial();\n      assertFalse(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"\");\n      assertEquals(message2.getFooStringBytes(), TestUtil.toBytes(\"\"));\n\n      \r\n      builder.setFooInt(123);\n      assertEquals(builder.getFooString(), \"\");\n      assertEquals(builder.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, builder.getFooInt());\n\n      message = builder.build();\n      assertEquals(message.getFooString(), \"\");\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, message.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooCord(), \"\");\n      builder.setFooCord(\"foo\");\n      assertTrue(builder.hasFooCord());\n      assertEquals(builder.getFooCord(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooCord());\n      assertEquals(message.getFooCord(), \"foo\");\n      assertEquals(message.getFooCordBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooCord().hasFooCord());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooCord());\n      assertEquals(message2.getFooCord(), \"\");\n      assertEquals(message2.getFooCordBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooStringPiece(), \"\");\n      builder.setFooStringPiece(\"foo\");\n      assertTrue(builder.hasFooStringPiece());\n      assertEquals(builder.getFooStringPiece(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooStringPiece());\n      assertEquals(message.getFooStringPiece(), \"foo\");\n      assertEquals(message.getFooStringPieceBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooStringPiece().hasFooStringPiece());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooStringPiece());\n      assertEquals(message2.getFooStringPiece(), \"\");\n      assertEquals(message2.getFooStringPieceBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      \r\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooMessage().getQuxInt(), 0);\n      builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build());\n      assertTrue(builder.hasFooMessage());\n      assertEquals(builder.getFooMessage().getQuxInt(), 234);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 234);\n\n      \r\n      assertFalse(builder.clearFooMessage().hasFooString());\n      message = builder.build();\n      assertFalse(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 0);\n\n      \r\n      builder = TestOneof2.newBuilder();\n      assertSame(builder.getFooMessageOrBuilder(),\n          TestOneof2.NestedMessage.getDefaultInstance());\n      assertFalse(builder.hasFooMessage());\n      builder.getFooMessageBuilder().setQuxInt(123);\n      assertTrue(builder.hasFooMessage());\n      assertEquals(builder.getFooMessage().getQuxInt(), 123);\n      message = builder.build();\n      assertTrue(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 123);\n    }\n\n    \r\n  }\n","date":"2016-01-14 03:22:18","endLine":1429,"groupId":"1699","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneofTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/70/812b953f57ff7335eb7c6e183eda8b414e8b44.src","preCode":"  public void testOneofTypes() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooInt(), 0);\n      assertFalse(builder.hasFooInt());\n      assertTrue(builder.setFooInt(123).hasFooInt());\n      assertEquals(builder.getFooInt(), 123);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooInt());\n      assertEquals(message.getFooInt(), 123);\n\n      assertFalse(builder.clearFooInt().hasFooInt());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 0);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooEnum(), TestOneof2.NestedEnum.FOO);\n      assertTrue(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum());\n      assertEquals(builder.getFooEnum(), TestOneof2.NestedEnum.BAR);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooEnum());\n      assertEquals(message.getFooEnum(), TestOneof2.NestedEnum.BAR);\n\n      assertFalse(builder.clearFooEnum().hasFooEnum());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.FOO);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooString(), \"\");\n      builder.setFooString(\"foo\");\n      assertTrue(builder.hasFooString());\n      assertEquals(builder.getFooString(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooString());\n      assertEquals(message.getFooString(), \"foo\");\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooString().hasFooString());\n      TestOneof2 message2 = builder.buildPartial();\n      assertFalse(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"\");\n      assertEquals(message2.getFooStringBytes(), TestUtil.toBytes(\"\"));\n\n      \r\n      builder.setFooInt(123);\n      assertEquals(builder.getFooString(), \"\");\n      assertEquals(builder.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, builder.getFooInt());\n\n      message = builder.build();\n      assertEquals(message.getFooString(), \"\");\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, message.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooCord(), \"\");\n      builder.setFooCord(\"foo\");\n      assertTrue(builder.hasFooCord());\n      assertEquals(builder.getFooCord(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooCord());\n      assertEquals(message.getFooCord(), \"foo\");\n      assertEquals(message.getFooCordBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooCord().hasFooCord());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooCord());\n      assertEquals(message2.getFooCord(), \"\");\n      assertEquals(message2.getFooCordBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooStringPiece(), \"\");\n      builder.setFooStringPiece(\"foo\");\n      assertTrue(builder.hasFooStringPiece());\n      assertEquals(builder.getFooStringPiece(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooStringPiece());\n      assertEquals(message.getFooStringPiece(), \"foo\");\n      assertEquals(message.getFooStringPieceBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooStringPiece().hasFooStringPiece());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooStringPiece());\n      assertEquals(message2.getFooStringPiece(), \"\");\n      assertEquals(message2.getFooStringPieceBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      \r\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooMessage().getQuxInt(), 0);\n      builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build());\n      assertTrue(builder.hasFooMessage());\n      assertEquals(builder.getFooMessage().getQuxInt(), 234);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 234);\n\n      \r\n      assertFalse(builder.clearFooMessage().hasFooString());\n      message = builder.build();\n      assertFalse(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 0);\n\n      \r\n      builder = TestOneof2.newBuilder();\n      assertSame(builder.getFooMessageOrBuilder(),\n          TestOneof2.NestedMessage.getDefaultInstance());\n      assertFalse(builder.hasFooMessage());\n      builder.getFooMessageBuilder().setQuxInt(123);\n      assertTrue(builder.hasFooMessage());\n      assertEquals(builder.getFooMessage().getQuxInt(), 123);\n      message = builder.build();\n      assertTrue(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 123);\n    }\n\n    \r\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(message2.getFooMessage().getQuxInt(), 234);\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":1511,"groupId":"1817","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneofSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/70/812b953f57ff7335eb7c6e183eda8b414e8b44.src","preCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(message2.getFooMessage().getQuxInt(), 234);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1470,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2017-08-22 01:39:27","codes":[{"authorDate":"2017-08-22 01:39:27","commitOrder":2,"curCode":"  public void testOneofTypes() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooInt(), 0);\n      assertFalse(builder.hasFooInt());\n      assertTrue(builder.setFooInt(123).hasFooInt());\n      assertEquals(builder.getFooInt(), 123);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooInt());\n      assertEquals(message.getFooInt(), 123);\n\n      assertFalse(builder.clearFooInt().hasFooInt());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooInt());\n      assertEquals(0, message2.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(TestOneof2.NestedEnum.FOO, builder.getFooEnum());\n      assertTrue(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, builder.getFooEnum());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, message.getFooEnum());\n\n      assertFalse(builder.clearFooEnum().hasFooEnum());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.FOO, message2.getFooEnum());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(\"\", builder.getFooString());\n      builder.setFooString(\"foo\");\n      assertTrue(builder.hasFooString());\n      assertEquals(\"foo\", builder.getFooString());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooString());\n      assertEquals(\"foo\", message.getFooString());\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooString().hasFooString());\n      TestOneof2 message2 = builder.buildPartial();\n      assertFalse(message2.hasFooString());\n      assertEquals(\"\", message2.getFooString());\n      assertEquals(message2.getFooStringBytes(), TestUtil.toBytes(\"\"));\n\n      \r\n      builder.setFooInt(123);\n      assertEquals(\"\", builder.getFooString());\n      assertEquals(builder.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, builder.getFooInt());\n\n      message = builder.build();\n      assertEquals(\"\", message.getFooString());\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, message.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(\"\", builder.getFooCord());\n      builder.setFooCord(\"foo\");\n      assertTrue(builder.hasFooCord());\n      assertEquals(\"foo\", builder.getFooCord());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooCord());\n      assertEquals(\"foo\", message.getFooCord());\n      assertEquals(message.getFooCordBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooCord().hasFooCord());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooCord());\n      assertEquals(\"\", message2.getFooCord());\n      assertEquals(message2.getFooCordBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(\"\", builder.getFooStringPiece());\n      builder.setFooStringPiece(\"foo\");\n      assertTrue(builder.hasFooStringPiece());\n      assertEquals(\"foo\", builder.getFooStringPiece());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooStringPiece());\n      assertEquals(\"foo\", message.getFooStringPiece());\n      assertEquals(message.getFooStringPieceBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooStringPiece().hasFooStringPiece());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooStringPiece());\n      assertEquals(\"\", message2.getFooStringPiece());\n      assertEquals(message2.getFooStringPieceBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      \r\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(0, builder.getFooMessage().getQuxInt());\n      builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build());\n      assertTrue(builder.hasFooMessage());\n      assertEquals(234, builder.getFooMessage().getQuxInt());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooMessage());\n      assertEquals(234, message.getFooMessage().getQuxInt());\n\n      \r\n      assertFalse(builder.clearFooMessage().hasFooString());\n      message = builder.build();\n      assertFalse(message.hasFooMessage());\n      assertEquals(0, message.getFooMessage().getQuxInt());\n\n      \r\n      builder = TestOneof2.newBuilder();\n      assertSame(builder.getFooMessageOrBuilder(),\n          TestOneof2.NestedMessage.getDefaultInstance());\n      assertFalse(builder.hasFooMessage());\n      builder.getFooMessageBuilder().setQuxInt(123);\n      assertTrue(builder.hasFooMessage());\n      assertEquals(123, builder.getFooMessage().getQuxInt());\n      message = builder.build();\n      assertTrue(message.hasFooMessage());\n      assertEquals(123, message.getFooMessage().getQuxInt());\n    }\n\n    \r\n  }\n","date":"2017-08-22 01:39:27","endLine":1436,"groupId":"1699","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneofTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a4/311d17dbe32f8de1d3cdb93a7fb2bdeabac9c3.src","preCode":"  public void testOneofTypes() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooInt(), 0);\n      assertFalse(builder.hasFooInt());\n      assertTrue(builder.setFooInt(123).hasFooInt());\n      assertEquals(builder.getFooInt(), 123);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooInt());\n      assertEquals(message.getFooInt(), 123);\n\n      assertFalse(builder.clearFooInt().hasFooInt());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 0);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooEnum(), TestOneof2.NestedEnum.FOO);\n      assertTrue(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum());\n      assertEquals(builder.getFooEnum(), TestOneof2.NestedEnum.BAR);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooEnum());\n      assertEquals(message.getFooEnum(), TestOneof2.NestedEnum.BAR);\n\n      assertFalse(builder.clearFooEnum().hasFooEnum());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.FOO);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooString(), \"\");\n      builder.setFooString(\"foo\");\n      assertTrue(builder.hasFooString());\n      assertEquals(builder.getFooString(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooString());\n      assertEquals(message.getFooString(), \"foo\");\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooString().hasFooString());\n      TestOneof2 message2 = builder.buildPartial();\n      assertFalse(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"\");\n      assertEquals(message2.getFooStringBytes(), TestUtil.toBytes(\"\"));\n\n      \r\n      builder.setFooInt(123);\n      assertEquals(builder.getFooString(), \"\");\n      assertEquals(builder.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, builder.getFooInt());\n\n      message = builder.build();\n      assertEquals(message.getFooString(), \"\");\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, message.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooCord(), \"\");\n      builder.setFooCord(\"foo\");\n      assertTrue(builder.hasFooCord());\n      assertEquals(builder.getFooCord(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooCord());\n      assertEquals(message.getFooCord(), \"foo\");\n      assertEquals(message.getFooCordBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooCord().hasFooCord());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooCord());\n      assertEquals(message2.getFooCord(), \"\");\n      assertEquals(message2.getFooCordBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooStringPiece(), \"\");\n      builder.setFooStringPiece(\"foo\");\n      assertTrue(builder.hasFooStringPiece());\n      assertEquals(builder.getFooStringPiece(), \"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooStringPiece());\n      assertEquals(message.getFooStringPiece(), \"foo\");\n      assertEquals(message.getFooStringPieceBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooStringPiece().hasFooStringPiece());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooStringPiece());\n      assertEquals(message2.getFooStringPiece(), \"\");\n      assertEquals(message2.getFooStringPieceBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      \r\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooMessage().getQuxInt(), 0);\n      builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build());\n      assertTrue(builder.hasFooMessage());\n      assertEquals(builder.getFooMessage().getQuxInt(), 234);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 234);\n\n      \r\n      assertFalse(builder.clearFooMessage().hasFooString());\n      message = builder.build();\n      assertFalse(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 0);\n\n      \r\n      builder = TestOneof2.newBuilder();\n      assertSame(builder.getFooMessageOrBuilder(),\n          TestOneof2.NestedMessage.getDefaultInstance());\n      assertFalse(builder.hasFooMessage());\n      builder.getFooMessageBuilder().setQuxInt(123);\n      assertTrue(builder.hasFooMessage());\n      assertEquals(builder.getFooMessage().getQuxInt(), 123);\n      message = builder.build();\n      assertTrue(message.hasFooMessage());\n      assertEquals(message.getFooMessage().getQuxInt(), 123);\n    }\n\n    \r\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"M"},{"authorDate":"2017-08-22 01:39:27","commitOrder":2,"curCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(123, message2.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(\"foo\", message2.getFooString());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, message2.getFooEnum());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(234, message2.getFooMessage().getQuxInt());\n    }\n  }\n","date":"2017-08-22 01:39:27","endLine":1518,"groupId":"1817","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneofSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a4/311d17dbe32f8de1d3cdb93a7fb2bdeabac9c3.src","preCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(message2.getFooInt(), 123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(message2.getFooString(), \"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(message2.getFooEnum(), TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooMessage(\n          TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(message2.getFooMessage().getQuxInt(), 234);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1477,"status":"M"}],"commitId":"ba4e54724d2e6a1881c4fe88664d81fbacaf8c08","commitMessage":"@@@Merge pull request #3529 from pherl/merge3.4.x\n\nMerge 3.4.x into master","date":"2017-08-22 01:39:27","modifiedFileCount":"32","status":"M","submitter":"Jisi Liu"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testOneofTypes() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertThat(builder.getFooInt()).isEqualTo(0);\n      assertThat(builder.hasFooInt()).isFalse();\n      assertThat(builder.setFooInt(123).hasFooInt()).isTrue();\n      assertThat(builder.getFooInt()).isEqualTo(123);\n      TestOneof2 message = builder.buildPartial();\n      assertThat(message.hasFooInt()).isTrue();\n      assertThat(123).isEqualTo(message.getFooInt());\n\n      assertThat(builder.clearFooInt().hasFooInt()).isFalse();\n      TestOneof2 message2 = builder.build();\n      assertThat(message2.hasFooInt()).isFalse();\n      assertThat(message2.getFooInt()).isEqualTo(0);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertThat(builder.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.FOO);\n      assertThat(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum()).isTrue();\n      assertThat(builder.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR);\n      TestOneof2 message = builder.buildPartial();\n      assertThat(message.hasFooEnum()).isTrue();\n      assertThat(message.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR);\n\n      assertThat(builder.clearFooEnum().hasFooEnum()).isFalse();\n      TestOneof2 message2 = builder.build();\n      assertThat(message2.hasFooEnum()).isFalse();\n      assertThat(message2.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.FOO);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertThat(builder.getFooString()).isEmpty();\n      builder.setFooString(\"foo\");\n      assertThat(builder.hasFooString()).isTrue();\n      assertThat(builder.getFooString()).isEqualTo(\"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertThat(message.hasFooString()).isTrue();\n      assertThat(message.getFooString()).isEqualTo(\"foo\");\n      assertThat(TestUtil.toBytes(\"foo\")).isEqualTo(message.getFooStringBytes());\n\n      assertThat(builder.clearFooString().hasFooString()).isFalse();\n      TestOneof2 message2 = builder.buildPartial();\n      assertThat(message2.hasFooString()).isFalse();\n      assertThat(message2.getFooString()).isEmpty();\n      assertThat(message2.getFooStringBytes()).isEqualTo(TestUtil.toBytes(\"\"));\n\n      \r\n      builder.setFooInt(123);\n      assertThat(builder.getFooString()).isEmpty();\n      assertThat(builder.getFooStringBytes()).isEqualTo(TestUtil.toBytes(\"\"));\n      assertThat(builder.getFooInt()).isEqualTo(123);\n\n      message = builder.build();\n      assertThat(message.getFooString()).isEmpty();\n      assertThat(TestUtil.toBytes(\"\")).isEqualTo(message.getFooStringBytes());\n      assertThat(message.getFooInt()).isEqualTo(123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertThat(builder.getFooCord()).isEmpty();\n      builder.setFooCord(\"foo\");\n      assertThat(builder.hasFooCord()).isTrue();\n      assertThat(builder.getFooCord()).isEqualTo(\"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertThat(message.hasFooCord()).isTrue();\n      assertThat(message.getFooCord()).isEqualTo(\"foo\");\n      assertThat(TestUtil.toBytes(\"foo\")).isEqualTo(message.getFooCordBytes());\n\n      assertThat(builder.clearFooCord().hasFooCord()).isFalse();\n      TestOneof2 message2 = builder.build();\n      assertThat(message2.hasFooCord()).isFalse();\n      assertThat(message2.getFooCord()).isEmpty();\n      assertThat(message2.getFooCordBytes()).isEqualTo(TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertThat(builder.getFooStringPiece()).isEmpty();\n      builder.setFooStringPiece(\"foo\");\n      assertThat(builder.hasFooStringPiece()).isTrue();\n      assertThat(builder.getFooStringPiece()).isEqualTo(\"foo\");\n      TestOneof2 message = builder.buildPartial();\n      assertThat(message.hasFooStringPiece()).isTrue();\n      assertThat(message.getFooStringPiece()).isEqualTo(\"foo\");\n      assertThat(TestUtil.toBytes(\"foo\")).isEqualTo(message.getFooStringPieceBytes());\n\n      assertThat(builder.clearFooStringPiece().hasFooStringPiece()).isFalse();\n      TestOneof2 message2 = builder.build();\n      assertThat(message2.hasFooStringPiece()).isFalse();\n      assertThat(message2.getFooStringPiece()).isEmpty();\n      assertThat(message2.getFooStringPieceBytes()).isEqualTo(TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      \r\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertThat(builder.getFooMessage().getQuxInt()).isEqualTo(0);\n      builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build());\n      assertThat(builder.hasFooMessage()).isTrue();\n      assertThat(builder.getFooMessage().getQuxInt()).isEqualTo(234);\n      TestOneof2 message = builder.buildPartial();\n      assertThat(message.hasFooMessage()).isTrue();\n      assertThat(message.getFooMessage().getQuxInt()).isEqualTo(234);\n\n      \r\n      assertThat(builder.clearFooMessage().hasFooString()).isFalse();\n      message = builder.build();\n      assertThat(message.hasFooMessage()).isFalse();\n      assertThat(message.getFooMessage().getQuxInt()).isEqualTo(0);\n\n      \r\n      builder = TestOneof2.newBuilder();\n      assertThat(builder.getFooMessageOrBuilder())\n          .isSameInstanceAs(TestOneof2.NestedMessage.getDefaultInstance());\n      assertThat(builder.hasFooMessage()).isFalse();\n      builder.getFooMessageBuilder().setQuxInt(123);\n      assertThat(builder.hasFooMessage()).isTrue();\n      assertThat(builder.getFooMessage().getQuxInt()).isEqualTo(123);\n      message = builder.build();\n      assertThat(message.hasFooMessage()).isTrue();\n      assertThat(message.getFooMessage().getQuxInt()).isEqualTo(123);\n    }\n\n    \r\n  }\n","date":"2021-08-10 06:55:00","endLine":1648,"groupId":"10505","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testOneofTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fb/ba612bd2a86e442aceac2543c138810d348cc0.src","preCode":"  public void testOneofTypes() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(builder.getFooInt(), 0);\n      assertFalse(builder.hasFooInt());\n      assertTrue(builder.setFooInt(123).hasFooInt());\n      assertEquals(builder.getFooInt(), 123);\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooInt());\n      assertEquals(message.getFooInt(), 123);\n\n      assertFalse(builder.clearFooInt().hasFooInt());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooInt());\n      assertEquals(0, message2.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(TestOneof2.NestedEnum.FOO, builder.getFooEnum());\n      assertTrue(builder.setFooEnum(TestOneof2.NestedEnum.BAR).hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, builder.getFooEnum());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, message.getFooEnum());\n\n      assertFalse(builder.clearFooEnum().hasFooEnum());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.FOO, message2.getFooEnum());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(\"\", builder.getFooString());\n      builder.setFooString(\"foo\");\n      assertTrue(builder.hasFooString());\n      assertEquals(\"foo\", builder.getFooString());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooString());\n      assertEquals(\"foo\", message.getFooString());\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooString().hasFooString());\n      TestOneof2 message2 = builder.buildPartial();\n      assertFalse(message2.hasFooString());\n      assertEquals(\"\", message2.getFooString());\n      assertEquals(message2.getFooStringBytes(), TestUtil.toBytes(\"\"));\n\n      \r\n      builder.setFooInt(123);\n      assertEquals(\"\", builder.getFooString());\n      assertEquals(builder.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, builder.getFooInt());\n\n      message = builder.build();\n      assertEquals(\"\", message.getFooString());\n      assertEquals(message.getFooStringBytes(), TestUtil.toBytes(\"\"));\n      assertEquals(123, message.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(\"\", builder.getFooCord());\n      builder.setFooCord(\"foo\");\n      assertTrue(builder.hasFooCord());\n      assertEquals(\"foo\", builder.getFooCord());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooCord());\n      assertEquals(\"foo\", message.getFooCord());\n      assertEquals(message.getFooCordBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooCord().hasFooCord());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooCord());\n      assertEquals(\"\", message2.getFooCord());\n      assertEquals(message2.getFooCordBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(\"\", builder.getFooStringPiece());\n      builder.setFooStringPiece(\"foo\");\n      assertTrue(builder.hasFooStringPiece());\n      assertEquals(\"foo\", builder.getFooStringPiece());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooStringPiece());\n      assertEquals(\"foo\", message.getFooStringPiece());\n      assertEquals(message.getFooStringPieceBytes(), TestUtil.toBytes(\"foo\"));\n\n      assertFalse(builder.clearFooStringPiece().hasFooStringPiece());\n      TestOneof2 message2 = builder.build();\n      assertFalse(message2.hasFooStringPiece());\n      assertEquals(\"\", message2.getFooStringPiece());\n      assertEquals(message2.getFooStringPieceBytes(), TestUtil.toBytes(\"\"));\n    }\n\n    \r\n    {\n      \r\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      assertEquals(0, builder.getFooMessage().getQuxInt());\n      builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build());\n      assertTrue(builder.hasFooMessage());\n      assertEquals(234, builder.getFooMessage().getQuxInt());\n      TestOneof2 message = builder.buildPartial();\n      assertTrue(message.hasFooMessage());\n      assertEquals(234, message.getFooMessage().getQuxInt());\n\n      \r\n      assertFalse(builder.clearFooMessage().hasFooString());\n      message = builder.build();\n      assertFalse(message.hasFooMessage());\n      assertEquals(0, message.getFooMessage().getQuxInt());\n\n      \r\n      builder = TestOneof2.newBuilder();\n      assertSame(builder.getFooMessageOrBuilder(), TestOneof2.NestedMessage.getDefaultInstance());\n      assertFalse(builder.hasFooMessage());\n      builder.getFooMessageBuilder().setQuxInt(123);\n      assertTrue(builder.hasFooMessage());\n      assertEquals(123, builder.getFooMessage().getQuxInt());\n      message = builder.build();\n      assertTrue(message.hasFooMessage());\n      assertEquals(123, message.getFooMessage().getQuxInt());\n    }\n\n    \r\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1514,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooInt()).isTrue();\n      assertThat(message2.getFooInt()).isEqualTo(123);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooString()).isTrue();\n      assertThat(message2.getFooString()).isEqualTo(\"foo\");\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooEnum()).isTrue();\n      assertThat(message2.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR);\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message =\n          builder\n              .setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build())\n              .build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertThat(message2.hasFooMessage()).isTrue();\n      assertThat(message2.getFooMessage().getQuxInt()).isEqualTo(234);\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":1736,"groupId":"10505","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testOneofSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fb/ba612bd2a86e442aceac2543c138810d348cc0.src","preCode":"  public void testOneofSerialization() throws Exception {\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooInt(123).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooInt());\n      assertEquals(123, message2.getFooInt());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooString(\"foo\").build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooString());\n      assertEquals(\"foo\", message2.getFooString());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooEnum());\n      assertEquals(TestOneof2.NestedEnum.BAR, message2.getFooEnum());\n    }\n\n    \r\n    {\n      TestOneof2.Builder builder = TestOneof2.newBuilder();\n      TestOneof2 message =\n          builder\n              .setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build())\n              .build();\n      ByteString serialized = message.toByteString();\n      TestOneof2 message2 = TestOneof2.parseFrom(serialized);\n      assertTrue(message2.hasFooMessage());\n      assertEquals(234, message2.getFooMessage().getQuxInt());\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1693,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
