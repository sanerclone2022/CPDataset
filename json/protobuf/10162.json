[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder();\n    builder.getMutableInt32ToInt32Field().put(1, 2);\n    builder.getMutableInt32ToInt32Field().put(3, 4);\n    builder.getMutableInt32ToMessageField().put(\n        11, MessageValue.newBuilder().setValue(22).build());\n    builder.getMutableInt32ToMessageField().put(\n        33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n    \n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n    \n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n    \n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n    \n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","date":"2016-01-14 03:22:18","endLine":536,"groupId":"960","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1f/a3cbdbae7748cbdc0c082229b7c3e75fcef2cb.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder();\n    builder.getMutableInt32ToInt32Field().put(1, 2);\n    builder.getMutableInt32ToInt32Field().put(3, 4);\n    builder.getMutableInt32ToMessageField().put(\n        11, MessageValue.newBuilder().setValue(22).build());\n    builder.getMutableInt32ToMessageField().put(\n        33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n    \n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n    \n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n    \n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n    \n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapForProto2Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder();\n    builder.getMutableInt32ToInt32Field().put(1, 2);\n    builder.getMutableInt32ToInt32Field().put(3, 4);\n    builder.getMutableInt32ToMessageField().put(\n        11, MessageValue.newBuilder().setValue(22).build());\n    builder.getMutableInt32ToMessageField().put(\n        33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","date":"2016-01-14 03:22:18","endLine":629,"groupId":"960","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/0e/5c12840c1630c4dc52a30c3be6173463e3befb.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder();\n    builder.getMutableInt32ToInt32Field().put(1, 2);\n    builder.getMutableInt32ToInt32Field().put(3, 4);\n    builder.getMutableInt32ToMessageField().put(\n        11, MessageValue.newBuilder().setValue(22).build());\n    builder.getMutableInt32ToMessageField().put(\n        33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2016-11-24 03:26:31","codes":[{"authorDate":"2016-11-24 03:26:31","commitOrder":2,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder()\n        .putInt32ToInt32Field(1, 2)\n        .putInt32ToInt32Field(3, 4)\n        .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n        .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","date":"2016-11-24 03:26:31","endLine":760,"groupId":"960","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/cf/e4c4536ea9525ee7e9b7c980b8217c57027ca3.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder();\n    builder.getMutableInt32ToInt32Field().put(1, 2);\n    builder.getMutableInt32ToInt32Field().put(3, 4);\n    builder.getMutableInt32ToMessageField().put(\n        11, MessageValue.newBuilder().setValue(22).build());\n    builder.getMutableInt32ToMessageField().put(\n        33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapForProto2Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":688,"status":"M"},{"authorDate":"2016-11-24 03:26:31","commitOrder":2,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder()\n        .putInt32ToInt32Field(1, 2)\n        .putInt32ToInt32Field(3, 4)\n        .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n        .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","date":"2016-11-24 03:26:31","endLine":871,"groupId":"960","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/81/e951ccf7e1b6d6a54ae9306ad40ddbf74d2cfd.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder = TestMap.newBuilder();\n    builder.getMutableInt32ToInt32Field().put(1, 2);\n    builder.getMutableInt32ToInt32Field().put(3, 4);\n    builder.getMutableInt32ToMessageField().put(\n        11, MessageValue.newBuilder().setValue(22).build());\n    builder.getMutableInt32ToMessageField().put(\n        33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\",\n        mapForValues(1, 2, 3, 4));\n    assertHasMapValues(message, \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\",\n        mapForValues(11, 22, 33, 44));\n    setMapValues(builder, \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(f(\"int32_to_int32_field\"),\n        newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(f(\"int32_to_message_field\"),\n        newMapEntry(builder, \"int32_to_message_field\", 555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":799,"status":"M"}],"commitId":"39f9b43219bc5718b659ed72a2130a7b2ce66108","commitMessage":"@@@Merge pull request #2403 from google/down-integrate-with-msvc-fix\n\nIntegrated internal changes from Google","date":"2016-11-24 03:26:31","modifiedFileCount":"26","status":"M","submitter":"Adam Cozzette"},{"authorTime":"2020-10-29 03:02:24","codes":[{"authorDate":"2020-10-29 03:02:24","commitOrder":3,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32FieldMap().size());\n    assertEquals(0, message.getInt32ToMessageFieldMap().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32FieldMap().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32FieldMap().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageFieldMap().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageFieldMap().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32FieldMap().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32FieldMap().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n  }\n","date":"2020-10-29 03:02:24","endLine":761,"groupId":"2125","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/b9/95802b4f0cbd7c1677648f74d695f74f5b7ff6.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapForProto2Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"M"},{"authorDate":"2020-10-29 03:02:24","commitOrder":3,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32FieldMap().size());\n    assertEquals(0, message.getInt32ToMessageFieldMap().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32FieldMap().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32FieldMap().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageFieldMap().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageFieldMap().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32FieldMap().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32FieldMap().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n  }\n","date":"2020-10-29 03:02:24","endLine":854,"groupId":"2125","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/f3/458dd2359531dc2578a8c3bbe052d5a11c0815.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32Field().size());\n    assertEquals(0, message.getInt32ToMessageField().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32Field().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32Field().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageField().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageField().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageField().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32Field().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32Field().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32Field().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"M"}],"commitId":"fdc35840b95f56c3aef44a3fc6ae5991f21620a5","commitMessage":"@@@Merge pull request #7925 from haberman/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2020-10-29 03:02:24","modifiedFileCount":"32","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":4,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap()).isEmpty();\n    assertThat(message.getInt32ToMessageFieldMap()).isEmpty();\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(11).intValue()).isEqualTo(22);\n    assertThat(message.getInt32ToInt32FieldMap().get(33).intValue()).isEqualTo(44);\n    assertThat(message.getInt32ToMessageFieldMap().get(111).getValue()).isEqualTo(222);\n    assertThat(message.getInt32ToMessageFieldMap().get(333).getValue()).isEqualTo(444);\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(66);\n    assertThat(message.getInt32ToMessageFieldMap().get(555).getValue()).isEqualTo(666);\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(55);\n    assertThat(message.getInt32ToMessageFieldMap().get(555).getValue()).isEqualTo(555);\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(22).intValue()).isEqualTo(11);\n    assertThat(message.getInt32ToInt32FieldMap().get(44).intValue()).isEqualTo(33);\n    assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(55);\n  }\n","date":"2021-08-10 06:55:00","endLine":778,"groupId":"10162","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/82/1b93cf28a62db01be87b4e44deabda15641cb3.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32FieldMap().size());\n    assertEquals(0, message.getInt32ToMessageFieldMap().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32FieldMap().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32FieldMap().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageFieldMap().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageFieldMap().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32FieldMap().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32FieldMap().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapForProto2Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":4,"curCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap()).isEmpty();\n    assertThat(message.getInt32ToMessageFieldMap()).isEmpty();\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(11).intValue()).isEqualTo(22);\n    assertThat(message.getInt32ToInt32FieldMap().get(33).intValue()).isEqualTo(44);\n    assertThat(message.getInt32ToMessageFieldMap().get(111).getValue()).isEqualTo(222);\n    assertThat(message.getInt32ToMessageFieldMap().get(333).getValue()).isEqualTo(444);\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(66);\n    assertThat(message.getInt32ToMessageFieldMap().get(555).getValue()).isEqualTo(666);\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(55);\n    assertThat(message.getInt32ToMessageFieldMap().get(555).getValue()).isEqualTo(555);\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertThat(message.getInt32ToInt32FieldMap().get(22).intValue()).isEqualTo(11);\n    assertThat(message.getInt32ToInt32FieldMap().get(44).intValue()).isEqualTo(33);\n    assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(55);\n  }\n","date":"2021-08-10 06:55:00","endLine":875,"groupId":"10162","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReflectionApi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/cc/7a1217dbd78eb4e65fd6d6e9ded575285fe7f4.src","preCode":"  public void testReflectionApi() throws Exception {\n    \r\n    TestMap.Builder builder =\n        TestMap.newBuilder()\n            .putInt32ToInt32Field(1, 2)\n            .putInt32ToInt32Field(3, 4)\n            .putInt32ToMessageField(11, MessageValue.newBuilder().setValue(22).build())\n            .putInt32ToMessageField(33, MessageValue.newBuilder().setValue(44).build());\n    TestMap message = builder.build();\n\n    \r\n    assertHasMapValues(message, \"int32_to_int32_field\", mapForValues(1, 2, 3, 4));\n    assertHasMapValues(\n        message,\n        \"int32_to_message_field\",\n        mapForValues(\n            11, MessageValue.newBuilder().setValue(22).build(),\n            33, MessageValue.newBuilder().setValue(44).build()));\n\n    \r\n    builder.clearField(f(\"int32_to_int32_field\"));\n    builder.clearField(f(\"int32_to_message_field\"));\n    message = builder.build();\n    assertEquals(0, message.getInt32ToInt32FieldMap().size());\n    assertEquals(0, message.getInt32ToMessageFieldMap().size());\n\n    \r\n    setMapValues(builder, \"int32_to_int32_field\", mapForValues(11, 22, 33, 44));\n    setMapValues(\n        builder,\n        \"int32_to_message_field\",\n        mapForValues(\n            111, MessageValue.newBuilder().setValue(222).build(),\n            333, MessageValue.newBuilder().setValue(444).build()));\n    message = builder.build();\n    assertEquals(22, message.getInt32ToInt32FieldMap().get(11).intValue());\n    assertEquals(44, message.getInt32ToInt32FieldMap().get(33).intValue());\n    assertEquals(222, message.getInt32ToMessageFieldMap().get(111).getValue());\n    assertEquals(444, message.getInt32ToMessageFieldMap().get(333).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 66));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(666).build()));\n    message = builder.build();\n    assertEquals(66, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(666, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    builder.addRepeatedField(\n        f(\"int32_to_int32_field\"), newMapEntry(builder, \"int32_to_int32_field\", 55, 55));\n    builder.addRepeatedField(\n        f(\"int32_to_message_field\"),\n        newMapEntry(\n            builder,\n            \"int32_to_message_field\",\n            555,\n            MessageValue.newBuilder().setValue(555).build()));\n    message = builder.build();\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n    assertEquals(555, message.getInt32ToMessageFieldMap().get(555).getValue());\n\n    \r\n    for (int i = 0; i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\")); i++) {\n      Message mapEntry = (Message) builder.getRepeatedField(f(\"int32_to_int32_field\"), i);\n      int oldKey = ((Integer) getFieldValue(mapEntry, \"key\")).intValue();\n      int oldValue = ((Integer) getFieldValue(mapEntry, \"value\")).intValue();\n      \r\n      Message.Builder mapEntryBuilder = mapEntry.toBuilder();\n      setFieldValue(mapEntryBuilder, \"key\", oldValue);\n      setFieldValue(mapEntryBuilder, \"value\", oldKey);\n      builder.setRepeatedField(f(\"int32_to_int32_field\"), i, mapEntryBuilder.build());\n    }\n    message = builder.build();\n    assertEquals(11, message.getInt32ToInt32FieldMap().get(22).intValue());\n    assertEquals(33, message.getInt32ToInt32FieldMap().get(44).intValue());\n    assertEquals(55, message.getInt32ToInt32FieldMap().get(55).intValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":792,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
