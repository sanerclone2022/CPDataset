[{"authorTime":"2019-04-06 07:39:18","codes":[{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  public void testParseLazy() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertEquals(11, message.getOptionalLazyMessage().getBb());\n    assertEquals(22L, message.getOptionalLazyMessage().getCc());\n  }\n","date":"2019-04-06 07:39:18","endLine":1563,"groupId":"127","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/96/0b2037c1bad1f9bcd313819a2792728baa12b2.src","preCode":"  public void testParseLazy() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertEquals(11, message.getOptionalLazyMessage().getBb());\n    assertEquals(22L, message.getOptionalLazyMessage().getCc());\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1546,"status":"B"},{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  public void testParseLazy_oneOf() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertEquals(11, message.getOneofLazyNestedMessage().getBb());\n    assertEquals(22L, message.getOneofLazyNestedMessage().getCc());\n  }\n","date":"2019-04-06 07:39:18","endLine":1582,"groupId":"127","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseLazy_oneOf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/96/0b2037c1bad1f9bcd313819a2792728baa12b2.src","preCode":"  public void testParseLazy_oneOf() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertEquals(11, message.getOneofLazyNestedMessage().getBb());\n    assertEquals(22L, message.getOneofLazyNestedMessage().getCc());\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"B"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"B","submitter":"Hao Nguyen"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testParseLazy() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertThat(message.getOptionalLazyMessage().getBb()).isEqualTo(11);\n    assertThat(message.getOptionalLazyMessage().getCc()).isEqualTo(22L);\n  }\n","date":"2021-08-10 06:55:00","endLine":1653,"groupId":"1016","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testParseLazy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testParseLazy() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOptionalLazyMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertEquals(11, message.getOptionalLazyMessage().getBb());\n    assertEquals(22L, message.getOptionalLazyMessage().getCc());\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1636,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testParseLazy_oneOf() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertThat(message.getOneofLazyNestedMessage().getBb()).isEqualTo(11);\n    assertThat(message.getOneofLazyNestedMessage().getCc()).isEqualTo(22L);\n  }\n","date":"2021-08-10 06:55:00","endLine":1673,"groupId":"1016","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testParseLazy_oneOf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testParseLazy_oneOf() throws Exception {\n    ByteString bb =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setBb(11).build())\n            .build()\n            .toByteString();\n    ByteString cc =\n        TestAllTypesLite.newBuilder()\n            .setOneofLazyNestedMessage(NestedMessage.newBuilder().setCc(22).build())\n            .build()\n            .toByteString();\n\n    ByteString concat = bb.concat(cc);\n    TestAllTypesLite message = TestAllTypesLite.parseFrom(concat);\n\n    assertEquals(11, message.getOneofLazyNestedMessage().getBb());\n    assertEquals(22L, message.getOneofLazyNestedMessage().getCc());\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1656,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
