[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public FieldSet<FieldDescriptorType> clone() {\n    \r\n    \r\n    FieldSet<FieldDescriptorType> clone = FieldSet.newFieldSet();\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      Map.Entry<FieldDescriptorType, Object> entry = fields.getArrayEntryAt(i);\n      FieldDescriptorType descriptor = entry.getKey();\n      clone.setField(descriptor, entry.getValue());\n    }\n    for (Map.Entry<FieldDescriptorType, Object> entry :\n             fields.getOverflowEntries()) {\n      FieldDescriptorType descriptor = entry.getKey();\n      clone.setField(descriptor, entry.getValue());\n    }\n    clone.hasLazyField = hasLazyField;\n    return clone;\n  }\n","date":"2016-01-14 03:22:18","endLine":147,"groupId":"808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"clone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/47/924b657c9112a5ecdfb65e9c26856eaf37e259.src","preCode":"  public FieldSet<FieldDescriptorType> clone() {\n    \r\n    \r\n    FieldSet<FieldDescriptorType> clone = FieldSet.newFieldSet();\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      Map.Entry<FieldDescriptorType, Object> entry = fields.getArrayEntryAt(i);\n      FieldDescriptorType descriptor = entry.getKey();\n      clone.setField(descriptor, entry.getValue());\n    }\n    for (Map.Entry<FieldDescriptorType, Object> entry :\n             fields.getOverflowEntries()) {\n      FieldDescriptorType descriptor = entry.getKey();\n      clone.setField(descriptor, entry.getValue());\n    }\n    clone.hasLazyField = hasLazyField;\n    return clone;\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/FieldSet.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void writeTo(final CodedOutputStream output)\n                      throws IOException {\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      final Map.Entry<FieldDescriptorType, Object> entry =\n          fields.getArrayEntryAt(i);\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n    for (final Map.Entry<FieldDescriptorType, Object> entry :\n         fields.getOverflowEntries()) {\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":578,"groupId":"1880","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeTo","params":"(finalCodedOutputStreamoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/47/924b657c9112a5ecdfb65e9c26856eaf37e259.src","preCode":"  public void writeTo(final CodedOutputStream output)\n                      throws IOException {\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      final Map.Entry<FieldDescriptorType, Object> entry =\n          fields.getArrayEntryAt(i);\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n    for (final Map.Entry<FieldDescriptorType, Object> entry :\n         fields.getOverflowEntries()) {\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/FieldSet.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":567,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2019-07-20 05:49:01","codes":[{"authorDate":"2019-07-20 05:49:01","commitOrder":2,"curCode":"  public FieldSet<T> clone() {\n    \r\n    \r\n    FieldSet<T> clone = FieldSet.newFieldSet();\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      Map.Entry<T, Object> entry = fields.getArrayEntryAt(i);\n      clone.setField(entry.getKey(), entry.getValue());\n    }\n    for (Map.Entry<T, Object> entry : fields.getOverflowEntries()) {\n      clone.setField(entry.getKey(), entry.getValue());\n    }\n    clone.hasLazyField = hasLazyField;\n    return clone;\n  }\n","date":"2019-07-20 05:49:01","endLine":180,"groupId":"10792","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"clone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/20/42dc93eb64817ce734a1eabc5cfc006d464a98.src","preCode":"  public FieldSet<FieldDescriptorType> clone() {\n    \r\n    \r\n    FieldSet<FieldDescriptorType> clone = FieldSet.newFieldSet();\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      Map.Entry<FieldDescriptorType, Object> entry = fields.getArrayEntryAt(i);\n      FieldDescriptorType descriptor = entry.getKey();\n      clone.setField(descriptor, entry.getValue());\n    }\n    for (Map.Entry<FieldDescriptorType, Object> entry : fields.getOverflowEntries()) {\n      FieldDescriptorType descriptor = entry.getKey();\n      clone.setField(descriptor, entry.getValue());\n    }\n    clone.hasLazyField = hasLazyField;\n    return clone;\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/FieldSet.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2019-07-20 05:49:01","commitOrder":2,"curCode":"  public void writeTo(final CodedOutputStream output) throws IOException {\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      final Map.Entry<T, Object> entry = fields.getArrayEntryAt(i);\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n    for (final Map.Entry<T, Object> entry : fields.getOverflowEntries()) {\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n  }\n","date":"2019-07-20 05:49:01","endLine":585,"groupId":"10792","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeTo","params":"(finalCodedOutputStreamoutput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/20/42dc93eb64817ce734a1eabc5cfc006d464a98.src","preCode":"  public void writeTo(final CodedOutputStream output) throws IOException {\n    for (int i = 0; i < fields.getNumArrayEntries(); i++) {\n      final Map.Entry<FieldDescriptorType, Object> entry = fields.getArrayEntryAt(i);\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n    for (final Map.Entry<FieldDescriptorType, Object> entry : fields.getOverflowEntries()) {\n      writeField(entry.getKey(), entry.getValue(), output);\n    }\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/FieldSet.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"M"}],"commitId":"7bff8393cab939bfbb9b5c69b3fe76b4d83c41ee","commitMessage":"@@@Down Integrate to GitHub (#6414)\n\n* Down integrate to GitHub\n\n* Fix broken tests\n","date":"2019-07-20 05:49:01","modifiedFileCount":"9","status":"M","submitter":"Paul Yang"}]
