[{"authorTime":"2017-08-22 01:39:27","codes":[{"authorDate":"2017-08-22 01:39:27","commitOrder":4,"curCode":"    private byte[] readRawBytesSlowPath(final int size) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","date":"2017-08-22 01:39:27","endLine":2860,"groupId":"104","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readRawBytesSlowPath","params":"(finalintsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/d6/a941b1c03d901f7fe2155fc334d7150f886801.src","preCode":"    private byte[] readRawBytesSlowPath(final int size) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2823,"status":"MB"},{"authorDate":"2017-08-22 01:39:27","commitOrder":4,"curCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ByteString.wrap(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      List<ByteString> byteStrings = new ArrayList<ByteString>(1 + chunks.size());\n      byteStrings.add(ByteString.copyFrom(buffer, originalBufferPos, bufferedBytes));\n      for (byte[] chunk : chunks) {\n        byteStrings.add(ByteString.wrap(chunk));\n      }\n      return ByteString.copyFrom(byteStrings);\n    }\n","date":"2017-08-22 01:39:27","endLine":2981,"groupId":"1061","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readBytesSlowPath","params":"(finalintsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/d6/a941b1c03d901f7fe2155fc334d7150f886801.src","preCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ByteString.wrap(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      List<ByteString> byteStrings = new ArrayList<ByteString>(1 + chunks.size());\n      byteStrings.add(ByteString.copyFrom(buffer, originalBufferPos, bufferedBytes));\n      for (byte[] chunk : chunks) {\n        byteStrings.add(ByteString.wrap(chunk));\n      }\n      return ByteString.copyFrom(byteStrings);\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2953,"status":"B"}],"commitId":"ba4e54724d2e6a1881c4fe88664d81fbacaf8c08","commitMessage":"@@@Merge pull request #3529 from pherl/merge3.4.x\n\nMerge 3.4.x into master","date":"2017-08-22 01:39:27","modifiedFileCount":"32","status":"M","submitter":"Jisi Liu"},{"authorTime":"2019-04-06 07:39:18","codes":[{"authorDate":"2019-04-06 07:39:18","commitOrder":5,"curCode":"    private byte[] readRawBytesSlowPath(\n        final int size, boolean ensureNoLeakedReferences) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ensureNoLeakedReferences ? result.clone() : result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","date":"2019-04-06 07:39:18","endLine":2872,"groupId":"104","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readRawBytesSlowPath","params":"(finalintsize@booleanensureNoLeakedReferences)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/87/c683725f6e7a516506ff26398bcf494bfd7ef2.src","preCode":"    private byte[] readRawBytesSlowPath(final int size) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2834,"status":"M"},{"authorDate":"2019-04-06 07:39:18","commitOrder":5,"curCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        \r\n        \r\n        return ByteString.copyFrom(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n      \n      return ByteString.wrap(bytes);\n    }\n","date":"2019-04-06 07:39:18","endLine":3008,"groupId":"104","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readBytesSlowPath","params":"(finalintsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/87/c683725f6e7a516506ff26398bcf494bfd7ef2.src","preCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ByteString.wrap(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      List<ByteString> byteStrings = new ArrayList<ByteString>(1 + chunks.size());\n      byteStrings.add(ByteString.copyFrom(buffer, originalBufferPos, bufferedBytes));\n      for (byte[] chunk : chunks) {\n        byteStrings.add(ByteString.wrap(chunk));\n      }\n      return ByteString.copyFrom(byteStrings);\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2971,"status":"M"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"M","submitter":"Hao Nguyen"},{"authorTime":"2019-04-06 08:09:42","codes":[{"authorDate":"2019-04-06 08:09:42","commitOrder":6,"curCode":"    private byte[] readRawBytesSlowPath(final int size) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","date":"2019-04-06 08:09:42","endLine":2860,"groupId":"104","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readRawBytesSlowPath","params":"(finalintsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/6c/ece058e21f380df94b603fb8af70c7ada8944a.src","preCode":"    private byte[] readRawBytesSlowPath(\n        final int size, boolean ensureNoLeakedReferences) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ensureNoLeakedReferences ? result.clone() : result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2823,"status":"M"},{"authorDate":"2019-04-06 08:09:42","commitOrder":6,"curCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ByteString.wrap(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      List<ByteString> byteStrings = new ArrayList<ByteString>(1 + chunks.size());\n      byteStrings.add(ByteString.copyFrom(buffer, originalBufferPos, bufferedBytes));\n      for (byte[] chunk : chunks) {\n        byteStrings.add(ByteString.wrap(chunk));\n      }\n      return ByteString.copyFrom(byteStrings);\n    }\n","date":"2019-04-06 08:09:42","endLine":2981,"groupId":"1061","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readBytesSlowPath","params":"(finalintsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/6c/ece058e21f380df94b603fb8af70c7ada8944a.src","preCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        \r\n        \r\n        return ByteString.copyFrom(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n      \n      return ByteString.wrap(bytes);\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2953,"status":"M"}],"commitId":"c163a2d1a431712c31916dadfbb5727f7c5cb4f5","commitMessage":"@@@Revert accidentally commit\n","date":"2019-04-06 08:09:42","modifiedFileCount":"20","status":"M","submitter":"Hao Nguyen"},{"authorTime":"2019-04-10 01:40:46","codes":[{"authorDate":"2019-04-10 01:40:46","commitOrder":7,"curCode":"    private byte[] readRawBytesSlowPath(\n        final int size, boolean ensureNoLeakedReferences) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ensureNoLeakedReferences ? result.clone() : result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","date":"2019-04-10 01:40:46","endLine":2872,"groupId":"10875","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"readRawBytesSlowPath","params":"(finalintsize@booleanensureNoLeakedReferences)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/87/c683725f6e7a516506ff26398bcf494bfd7ef2.src","preCode":"    private byte[] readRawBytesSlowPath(final int size) throws IOException {\n      \r\n      byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return result;\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n\n      \r\n      return bytes;\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2834,"status":"M"},{"authorDate":"2019-04-10 01:40:46","commitOrder":7,"curCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        \r\n        \r\n        return ByteString.copyFrom(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      final byte[] bytes = new byte[size];\n\n      \r\n      System.arraycopy(buffer, originalBufferPos, bytes, 0, bufferedBytes);\n\n      \r\n      int tempPos = bufferedBytes;\n      for (final byte[] chunk : chunks) {\n        System.arraycopy(chunk, 0, bytes, tempPos, chunk.length);\n        tempPos += chunk.length;\n      }\n      \n      return ByteString.wrap(bytes);\n    }\n","date":"2019-04-10 01:40:46","endLine":3008,"groupId":"10875","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"readBytesSlowPath","params":"(finalintsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/87/c683725f6e7a516506ff26398bcf494bfd7ef2.src","preCode":"    private ByteString readBytesSlowPath(final int size) throws IOException {\n      final byte[] result = readRawBytesSlowPathOneChunk(size);\n      if (result != null) {\n        return ByteString.wrap(result);\n      }\n\n      final int originalBufferPos = pos;\n      final int bufferedBytes = bufferSize - pos;\n\n      \r\n      totalBytesRetired += bufferSize;\n      pos = 0;\n      bufferSize = 0;\n\n      \r\n      int sizeLeft = size - bufferedBytes;\n\n      \r\n      \r\n      List<byte[]> chunks = readRawBytesSlowPathRemainingChunks(sizeLeft);\n\n      \r\n      List<ByteString> byteStrings = new ArrayList<ByteString>(1 + chunks.size());\n      byteStrings.add(ByteString.copyFrom(buffer, originalBufferPos, bufferedBytes));\n      for (byte[] chunk : chunks) {\n        byteStrings.add(ByteString.wrap(chunk));\n      }\n      return ByteString.copyFrom(byteStrings);\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/CodedInputStream.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2971,"status":"M"}],"commitId":"5b232b8ecbce13286be09e703997e887ae0d464d","commitMessage":"@@@Merge pull request #6001 from haon4/sync201904090622\n\nDown integrate to Github","date":"2019-04-10 01:40:46","modifiedFileCount":"21","status":"M","submitter":"Hao Nguyen"}]
