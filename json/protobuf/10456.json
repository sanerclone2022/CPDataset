[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testDependencyOrder() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder()\n        .setName(\"foo.proto\").build();\n    FileDescriptorProto barProto = FileDescriptorProto.newBuilder()\n        .setName(\"bar.proto\")\n        .addDependency(\"foo.proto\")\n        .build();\n    FileDescriptorProto bazProto = FileDescriptorProto.newBuilder()\n        .setName(\"baz.proto\")\n        .addDependency(\"foo.proto\")\n        .addDependency(\"bar.proto\")\n        .addPublicDependency(0)\n        .addPublicDependency(1)\n        .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto,\n        new FileDescriptor[0]);\n    FileDescriptor barFile = Descriptors.FileDescriptor.buildFrom(barProto,\n        new FileDescriptor[] {fooFile});\n\n    \r\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {fooFile, barFile});\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {barFile, fooFile});\n  }\n","date":"2016-01-14 03:22:18","endLine":554,"groupId":"15","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDependencyOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/82/ff34afe3ec0a1ef56e8613b56beeb65bb8577c.src","preCode":"  public void testDependencyOrder() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder()\n        .setName(\"foo.proto\").build();\n    FileDescriptorProto barProto = FileDescriptorProto.newBuilder()\n        .setName(\"bar.proto\")\n        .addDependency(\"foo.proto\")\n        .build();\n    FileDescriptorProto bazProto = FileDescriptorProto.newBuilder()\n        .setName(\"baz.proto\")\n        .addDependency(\"foo.proto\")\n        .addDependency(\"bar.proto\")\n        .addPublicDependency(0)\n        .addPublicDependency(1)\n        .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto,\n        new FileDescriptor[0]);\n    FileDescriptor barFile = Descriptors.FileDescriptor.buildFrom(barProto,\n        new FileDescriptor[] {fooFile});\n\n    \r\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {fooFile, barFile});\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {barFile, fooFile});\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DescriptorsTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testInvalidPublicDependency() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder()\n        .setName(\"foo.proto\").build();\n    FileDescriptorProto barProto = FileDescriptorProto.newBuilder()\n        .setName(\"boo.proto\")\n        .addDependency(\"foo.proto\")\n        .addPublicDependency(1)  \r\n        .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto,\n        new FileDescriptor[0]);\n    try {\n      Descriptors.FileDescriptor.buildFrom(barProto,\n          new FileDescriptor[] {fooFile});\n      fail(\"DescriptorValidationException expected\");\n    } catch (DescriptorValidationException e) {\n      assertTrue(\n          e.getMessage().indexOf(\"Invalid public dependency index.\") != -1);\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":574,"groupId":"1050","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidPublicDependency","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/82/ff34afe3ec0a1ef56e8613b56beeb65bb8577c.src","preCode":"  public void testInvalidPublicDependency() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder()\n        .setName(\"foo.proto\").build();\n    FileDescriptorProto barProto = FileDescriptorProto.newBuilder()\n        .setName(\"boo.proto\")\n        .addDependency(\"foo.proto\")\n        .addPublicDependency(1)  \r\n        .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto,\n        new FileDescriptor[0]);\n    try {\n      Descriptors.FileDescriptor.buildFrom(barProto,\n          new FileDescriptor[] {fooFile});\n      fail(\"DescriptorValidationException expected\");\n    } catch (DescriptorValidationException e) {\n      assertTrue(\n          e.getMessage().indexOf(\"Invalid public dependency index.\") != -1);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DescriptorsTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":556,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":2,"curCode":"  public void testDependencyOrder() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder()\n        .setName(\"foo.proto\").build();\n    FileDescriptorProto barProto = FileDescriptorProto.newBuilder()\n        .setName(\"bar.proto\")\n        .addDependency(\"foo.proto\")\n        .build();\n    FileDescriptorProto bazProto = FileDescriptorProto.newBuilder()\n        .setName(\"baz.proto\")\n        .addDependency(\"foo.proto\")\n        .addDependency(\"bar.proto\")\n        .addPublicDependency(0)\n        .addPublicDependency(1)\n        .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto,\n        new FileDescriptor[0]);\n    FileDescriptor barFile = Descriptors.FileDescriptor.buildFrom(barProto,\n        new FileDescriptor[] {fooFile});\n\n    \r\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {fooFile, barFile});\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {barFile, fooFile});\n  }\n","date":"2016-01-14 03:22:18","endLine":554,"groupId":"10456","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDependencyOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/82/ff34afe3ec0a1ef56e8613b56beeb65bb8577c.src","preCode":"  public void testDependencyOrder() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder()\n        .setName(\"foo.proto\").build();\n    FileDescriptorProto barProto = FileDescriptorProto.newBuilder()\n        .setName(\"bar.proto\")\n        .addDependency(\"foo.proto\")\n        .build();\n    FileDescriptorProto bazProto = FileDescriptorProto.newBuilder()\n        .setName(\"baz.proto\")\n        .addDependency(\"foo.proto\")\n        .addDependency(\"bar.proto\")\n        .addPublicDependency(0)\n        .addPublicDependency(1)\n        .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto,\n        new FileDescriptor[0]);\n    FileDescriptor barFile = Descriptors.FileDescriptor.buildFrom(barProto,\n        new FileDescriptor[] {fooFile});\n\n    \r\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {fooFile, barFile});\n    Descriptors.FileDescriptor.buildFrom(bazProto,\n        new FileDescriptor[] {barFile, fooFile});\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DescriptorsTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"N"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testInvalidPublicDependency() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder().setName(\"foo.proto\").build();\n    FileDescriptorProto barProto =\n        FileDescriptorProto.newBuilder()\n            .setName(\"boo.proto\")\n            .addDependency(\"foo.proto\")\n            .addPublicDependency(1) \r\n            .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto, new FileDescriptor[0]);\n    try {\n      Descriptors.FileDescriptor.buildFrom(barProto, new FileDescriptor[] {fooFile});\n      assertWithMessage(\"DescriptorValidationException expected\").fail();\n    } catch (DescriptorValidationException e) {\n      assertThat(e).hasMessageThat().contains(\"Invalid public dependency index.\");\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":556,"groupId":"10456","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testInvalidPublicDependency","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/6c/b0baebedb555d7eaab6bf944de11c970e32cb2.src","preCode":"  public void testInvalidPublicDependency() throws Exception {\n    FileDescriptorProto fooProto = FileDescriptorProto.newBuilder().setName(\"foo.proto\").build();\n    FileDescriptorProto barProto =\n        FileDescriptorProto.newBuilder()\n            .setName(\"boo.proto\")\n            .addDependency(\"foo.proto\")\n            .addPublicDependency(1) \r\n            .build();\n    FileDescriptor fooFile = Descriptors.FileDescriptor.buildFrom(fooProto, new FileDescriptor[0]);\n    try {\n      Descriptors.FileDescriptor.buildFrom(barProto, new FileDescriptor[] {fooFile});\n      fail(\"DescriptorValidationException expected\");\n    } catch (DescriptorValidationException e) {\n      assertTrue(e.getMessage().indexOf(\"Invalid public dependency index.\") != -1);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/DescriptorsTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
