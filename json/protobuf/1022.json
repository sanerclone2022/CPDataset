[{"authorTime":"2015-12-12 09:09:20","codes":[{"authorDate":"2016-04-12 14:37:42","commitOrder":4,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not suport Json Formant.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not suport Json Formant.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-04-12 14:37:42","endLine":87,"groupId":"1793","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/12/1dc7d1b6a1757b22537d00a2abcb485a081f91.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not suport Json Formant.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not suport Json Formant.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2015-12-12 09:09:20","commitOrder":4,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2015-12-12 09:10:28","endLine":102,"groupId":"1723","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a9/83ba3c8a6b1f37978daa84730b85e04eda8dc9.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"NB"}],"commitId":"814685ca2cd9280ca401e1842fd6311440921a0a","commitMessage":"@@@Merge pull request #1397 from google/internal-merge\n\nInternal merge","date":"2016-04-12 14:37:42","modifiedFileCount":"57","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2015-12-12 09:09:20","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":5,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not suport Json Formant.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not suport Json Formant.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2015-12-12 09:09:20","commitOrder":5,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2015-12-12 09:10:28","endLine":102,"groupId":"1723","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a9/83ba3c8a6b1f37978daa84730b85e04eda8dc9.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"0d5091ee8878484ccd407aa58cb80c9cac7e2d61","commitMessage":"@@@Merge pull request #1742 from ottok/fix-spelling\n\nFix spelling","date":"2016-07-07 06:44:34","modifiedFileCount":"5","status":"M","submitter":"Feng Xiao"},{"authorTime":"2016-11-24 03:26:31","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":6,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2016-11-24 03:26:31","commitOrder":6,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = parseBinary(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-11-24 03:26:31","endLine":274,"groupId":"1723","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/24/d206cbbaf09ac4db37a668e8092dad251c3436.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"39f9b43219bc5718b659ed72a2130a7b2ce66108","commitMessage":"@@@Merge pull request #2403 from google/down-integrate-with-msvc-fix\n\nIntegrated internal changes from Google","date":"2016-11-24 03:26:31","modifiedFileCount":"26","status":"M","submitter":"Adam Cozzette"},{"authorTime":"2016-12-04 00:51:25","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":7,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2016-12-04 00:51:25","commitOrder":7,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    TestMessagesProto3.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = parseBinary(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypes.Builder builder = TestMessagesProto3.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-12-04 00:51:25","endLine":275,"groupId":"1723","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7b/adf2a5f54236d4b4ca1c008ef1f55123253433.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = parseBinary(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"f1ce60e7b45c16affa4c8a92a9a129755c5fcfd5","commitMessage":"@@@Factored Conformance and Benchmark test messages into shared test schema. (#1971)\n\n* Factored Conformance test messages into shared test schema.\n\n* Updated benchmarks to use new proto3 message locations.\n\n* Fixed include path.\n\n* Conformance: fixed include of Python test messages.\n\n* Make maven in Rakefile use --batch-mode.\n\n* Revert changes to benchmarks.\n\nOn second thought I think a separate schema for\nCPU benchmarking makes sense.\n\n* Try regenerating C# protos for new test protos.\n\n* Removed benchmark messages from test proto.\n\n* Added Jon Skeet's fixes for C#.\n\n* Removed duplicate/old test messages C# file.\n\n* C# fixes for test schema move.\n\n* Fixed C# to use the correct TestAllTypes message.\n\n* Fixes for Objective C test schema move.\n\n* Added missing EXTRA_DIST file.\n","date":"2016-12-04 00:51:25","modifiedFileCount":"1","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2017-07-25 05:50:52","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":8,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2017-07-25 05:50:52","commitOrder":8,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder = \n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString(); \n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2017-07-25 05:50:52","endLine":277,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/59/6d113a9240bb38f445398c76cd7939f8c7d3b8.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    TestMessagesProto3.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = parseBinary(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypes.Builder builder = TestMessagesProto3.TestAllTypes.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"a713b73076f1d90bdc39ea8805b50421a59d7986","commitMessage":"@@@Merge pull request #3281 from BSBandme/ConformanceTestYilunChong\n\nProto2 test message support to conformance test","date":"2017-07-25 05:50:52","modifiedFileCount":"1","status":"M","submitter":"Yilun Chong"},{"authorTime":"2018-08-09 08:00:41","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":9,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2018-08-09 08:00:41","commitOrder":9,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          parser.merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString(); \n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2018-08-09 08:00:41","endLine":281,"groupId":"1716","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/d1/ce4059f62a9565c6d683233c39e3c5aeda60af.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder = \n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.parser().usingTypeRegistry(typeRegistry)\n              .merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString(); \n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"6bbe197e9c1b6fc38cbdc45e3bf83fa7ced792a3","commitMessage":"@@@Down-integrate from google3.\n","date":"2018-08-09 08:00:41","modifiedFileCount":"41","status":"M","submitter":"Feng Xiao"},{"authorTime":"2019-01-12 03:40:52","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":10,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2019-01-12 03:40:52","commitOrder":10,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          parser.merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case TEXT_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          TextFormat.merge(request.getTextPayload(), builder);\n          testMessage = builder.build();\n        } catch (TextFormat.ParseException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString(); \n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder().setTextPayload(\n            TextFormat.printToString(testMessage)).build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2019-01-12 03:40:52","endLine":297,"groupId":"1716","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/00/8f3bc7ae5634e31d74ebba5e7249ea7b4e8054.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          parser.merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString(); \n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"cb95a7f6a8b66315969b74fa00b439f8f259fc8c","commitMessage":"@@@Down-integrate internal changes to github. (#5566)\n\n* Down-integrate internal changes to github.\n\n* fix csharp conformance test\n\n* add comments in conformance.proto for text format\n\n* fix comments\n\n* fix comments.  re-generated csharp file\n\n* fix comments.  re-generated csharp file\n","date":"2019-01-12 03:40:52","modifiedFileCount":"1","status":"M","submitter":"Yilun Chong"},{"authorTime":"2019-02-27 14:11:08","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":11,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2019-02-27 14:11:08","commitOrder":11,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          parser.merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case TEXT_PAYLOAD: {\n        if (isProto3) {\n          try {\n            TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                TestMessagesProto3.TestAllTypesProto3.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else if (isProto2) {\n          try {\n            TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                TestMessagesProto2.TestAllTypesProto2.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString();\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder().setTextPayload(\n            TextFormat.printToString(testMessage)).build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2019-02-27 14:11:08","endLine":314,"groupId":"1716","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c5/b3f4e16345c47fceb0e019e004093c29f6c1e1.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          parser.merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case TEXT_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          TextFormat.merge(request.getTextPayload(), builder);\n          testMessage = builder.build();\n        } catch (TextFormat.ParseException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString();\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder().setTextPayload(\n            TextFormat.printToString(testMessage)).build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"bf32b36ab8aa9e56c031e00c0553db640d3627d4","commitMessage":"@@@Merge pull request #5765 from BSBandme/integration\n\ndown integration from internal","date":"2019-02-27 14:11:08","modifiedFileCount":"5","status":"M","submitter":"Paul Yang"},{"authorTime":"2020-05-14 08:28:26","codes":[{"authorDate":"2016-07-07 06:44:34","commitOrder":12,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2016-07-07 06:44:34","endLine":87,"groupId":"1793","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/01/6f79326fba7a0685f4f33b0cafcea4f6b2928c.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2020-05-14 08:28:26","commitOrder":12,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          if (isProto3) {\n            TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                TestMessagesProto3.TestAllTypesProto3.newBuilder();\n            parser.merge(request.getJsonPayload(), builder);\n            testMessage = builder.build();\n          } else if (isProto2) {\n            TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                TestMessagesProto2.TestAllTypesProto2.newBuilder();\n            parser.merge(request.getJsonPayload(), builder);\n            testMessage = builder.build();\n          } else {\n            throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n          }\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case TEXT_PAYLOAD: {\n        if (isProto3) {\n          try {\n            TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                TestMessagesProto3.TestAllTypesProto3.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else if (isProto2) {\n          try {\n            TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                TestMessagesProto2.TestAllTypesProto2.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString();\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder().setTextPayload(\n            TextFormat.printToString(testMessage)).build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","date":"2020-05-14 08:28:26","endLine":355,"groupId":"1077","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/53/1998262d72116307e27174ea68229bb6686ee5.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          TestMessagesProto3.TestAllTypesProto3.Builder builder =\n              TestMessagesProto3.TestAllTypesProto3.newBuilder();\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          parser.merge(request.getJsonPayload(), builder);\n          testMessage = builder.build();\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case TEXT_PAYLOAD: {\n        if (isProto3) {\n          try {\n            TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                TestMessagesProto3.TestAllTypesProto3.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else if (isProto2) {\n          try {\n            TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                TestMessagesProto2.TestAllTypesProto2.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString();\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder().setTextPayload(\n            TextFormat.printToString(testMessage)).build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"6935eae45c99926a000ecbef0be20dfd3d159e71","commitMessage":"@@@Merge pull request #7502 from haberman/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2020-05-14 08:28:26","modifiedFileCount":"2","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2021-04-17 00:52:23","codes":[{"authorDate":"2021-04-17 00:52:23","commitOrder":13,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.MessageLite testMessage;\n    boolean isProto3 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD:\n        {\n          if (isProto3) {\n            try {\n              ExtensionRegistryLite extensions = ExtensionRegistryLite.newInstance();\n              TestMessagesProto3.registerAllExtensions(extensions);\n              testMessage =\n                  parseBinary(\n                      request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n            } catch (InvalidProtocolBufferException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n            }\n          } else if (isProto2) {\n            try {\n              ExtensionRegistryLite extensions = ExtensionRegistryLite.newInstance();\n              TestMessagesProto2.registerAllExtensions(extensions);\n              testMessage =\n                  parseBinary(\n                      request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n            } catch (InvalidProtocolBufferException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n            }\n          } else {\n            throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n          }\n          break;\n        }\n      case JSON_PAYLOAD:\n        {\n          return Conformance.ConformanceResponse.newBuilder()\n              .setSkipped(\"Lite runtime does not support JSON format.\")\n              .build();\n        }\n      case TEXT_PAYLOAD:\n        {\n          return Conformance.ConformanceResponse.newBuilder()\n              .setSkipped(\"Lite runtime does not support Text format.\")\n              .build();\n        }\n      case PAYLOAD_NOT_SET:\n        {\n          throw new RuntimeException(\"Request didn't have payload.\");\n        }\n      default:\n        {\n          throw new RuntimeException(\"Unexpected payload case.\");\n        }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder()\n            .setProtobufPayload(testMessage.toByteString())\n            .build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder()\n            .setSkipped(\"Lite runtime does not support JSON format.\")\n            .build();\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder()\n            .setSkipped(\"Lite runtime does not support Text format.\")\n            .build();\n      default:\n        {\n          throw new RuntimeException(\"Unexpected request output.\");\n        }\n    }\n  }\n","date":"2021-04-17 00:52:23","endLine":313,"groupId":"1022","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/eb/3d06afc58ec2b370ebd22b64775e8d272a9b6a.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    Conformance.TestAllTypes testMessage;\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        try {\n          testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload());\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build();\n\n      case JSON:\n        return Conformance.ConformanceResponse.newBuilder().setSkipped(\n            \"Lite runtime does not support JSON format.\").build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJavaLite.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2021-04-17 00:52:23","commitOrder":13,"curCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD:\n        {\n          if (isProto3) {\n            try {\n              ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n              TestMessagesProto3.registerAllExtensions(extensions);\n              testMessage =\n                  parseBinary(\n                      request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n            } catch (InvalidProtocolBufferException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n            }\n          } else if (isProto2) {\n            try {\n              ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n              TestMessagesProto2.registerAllExtensions(extensions);\n              testMessage =\n                  parseBinary(\n                      request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n            } catch (InvalidProtocolBufferException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n            }\n          } else {\n            throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n          }\n          break;\n        }\n      case JSON_PAYLOAD:\n        {\n          try {\n            JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n            if (request.getTestCategory()\n                == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n              parser = parser.ignoringUnknownFields();\n            }\n            if (isProto3) {\n              TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                  TestMessagesProto3.TestAllTypesProto3.newBuilder();\n              parser.merge(request.getJsonPayload(), builder);\n              testMessage = builder.build();\n            } else if (isProto2) {\n              TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                  TestMessagesProto2.TestAllTypesProto2.newBuilder();\n              parser.merge(request.getJsonPayload(), builder);\n              testMessage = builder.build();\n            } else {\n              throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n            }\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder()\n                .setParseError(e.getMessage())\n                .build();\n          }\n          break;\n        }\n      case TEXT_PAYLOAD:\n        {\n          if (isProto3) {\n            try {\n              TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                  TestMessagesProto3.TestAllTypesProto3.newBuilder();\n              TextFormat.merge(request.getTextPayload(), builder);\n              testMessage = builder.build();\n            } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n            }\n          } else if (isProto2) {\n            try {\n              TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                  TestMessagesProto2.TestAllTypesProto2.newBuilder();\n              TextFormat.merge(request.getTextPayload(), builder);\n              testMessage = builder.build();\n            } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n            }\n          } else {\n            throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n          }\n          break;\n        }\n      case PAYLOAD_NOT_SET:\n        {\n          throw new RuntimeException(\"Request didn't have payload.\");\n        }\n\n      default:\n        {\n          throw new RuntimeException(\"Unexpected payload case.\");\n        }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF:\n        {\n          ByteString messageString = testMessage.toByteString();\n          return Conformance.ConformanceResponse.newBuilder()\n              .setProtobufPayload(messageString)\n              .build();\n        }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder()\n              .setJsonPayload(\n                  JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage))\n              .build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder()\n              .setSerializeError(e.getMessage())\n              .build();\n        }\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder()\n            .setTextPayload(TextFormat.printToString(testMessage))\n            .build();\n\n      default:\n        {\n          throw new RuntimeException(\"Unexpected request output.\");\n        }\n    }\n  }\n","date":"2021-04-17 00:52:23","endLine":372,"groupId":"1022","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"doTest","params":"(Conformance.ConformanceRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/10/0bec4b54f09f0ce09274cdbd242ee1bab0848a.src","preCode":"  private Conformance.ConformanceResponse doTest(Conformance.ConformanceRequest request) {\n    com.google.protobuf.AbstractMessage testMessage;\n    boolean isProto3 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\");\n    boolean isProto2 =\n        request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\");\n\n    switch (request.getPayloadCase()) {\n      case PROTOBUF_PAYLOAD: {\n        if (isProto3) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto3.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto3.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else if (isProto2) {\n          try {\n            ExtensionRegistry extensions = ExtensionRegistry.newInstance();\n            TestMessagesProto2.registerAllExtensions(extensions);\n            testMessage = parseBinary(request.getProtobufPayload(), TestAllTypesProto2.parser(), extensions);\n          } catch (InvalidProtocolBufferException e) {\n            return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case JSON_PAYLOAD: {\n        try {\n          JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry);\n          if (request.getTestCategory()\n              == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {\n            parser = parser.ignoringUnknownFields();\n          }\n          if (isProto3) {\n            TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                TestMessagesProto3.TestAllTypesProto3.newBuilder();\n            parser.merge(request.getJsonPayload(), builder);\n            testMessage = builder.build();\n          } else if (isProto2) {\n            TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                TestMessagesProto2.TestAllTypesProto2.newBuilder();\n            parser.merge(request.getJsonPayload(), builder);\n            testMessage = builder.build();\n          } else {\n            throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n          }\n        } catch (InvalidProtocolBufferException e) {\n          return Conformance.ConformanceResponse.newBuilder().setParseError(e.getMessage()).build();\n        }\n        break;\n      }\n      case TEXT_PAYLOAD: {\n        if (isProto3) {\n          try {\n            TestMessagesProto3.TestAllTypesProto3.Builder builder =\n                TestMessagesProto3.TestAllTypesProto3.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else if (isProto2) {\n          try {\n            TestMessagesProto2.TestAllTypesProto2.Builder builder =\n                TestMessagesProto2.TestAllTypesProto2.newBuilder();\n            TextFormat.merge(request.getTextPayload(), builder);\n            testMessage = builder.build();\n          } catch (TextFormat.ParseException e) {\n              return Conformance.ConformanceResponse.newBuilder()\n                  .setParseError(e.getMessage())\n                  .build();\n          }\n        } else {\n          throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\");\n        }\n        break;\n      }\n      case PAYLOAD_NOT_SET: {\n        throw new RuntimeException(\"Request didn't have payload.\");\n      }\n\n      default: {\n        throw new RuntimeException(\"Unexpected payload case.\");\n      }\n    }\n\n    switch (request.getRequestedOutputFormat()) {\n      case UNSPECIFIED:\n        throw new RuntimeException(\"Unspecified output format.\");\n\n      case PROTOBUF: {\n        ByteString MessageString = testMessage.toByteString();\n        return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build();\n      }\n\n      case JSON:\n        try {\n          return Conformance.ConformanceResponse.newBuilder().setJsonPayload(\n              JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build();\n        } catch (InvalidProtocolBufferException | IllegalArgumentException e) {\n          return Conformance.ConformanceResponse.newBuilder().setSerializeError(\n              e.getMessage()).build();\n        }\n\n      case TEXT_FORMAT:\n        return Conformance.ConformanceResponse.newBuilder().setTextPayload(\n            TextFormat.printToString(testMessage)).build();\n\n      default: {\n        throw new RuntimeException(\"Unexpected request output.\");\n      }\n    }\n  }\n","realPath":"conformance/ConformanceJava.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"6051341ab21b4e1f75e91710ab1a8cc8fadda521","commitMessage":"@@@Merge pull request #8499 from haberman/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-04-17 00:52:23","modifiedFileCount":"2","status":"M","submitter":"Joshua Haberman"}]
