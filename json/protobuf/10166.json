[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance =\n        DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n    \n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n    \n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n    \n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n    \n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertFalse(m1.equals(m2));\n    \r\n    \r\n  }\n","date":"2016-01-14 03:22:18","endLine":596,"groupId":"964","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReflectionEqualsAndHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/1f/a3cbdbae7748cbdc0c082229b7c3e75fcef2cb.src","preCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance =\n        DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n    \n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n    \n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n    \n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n    \n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertFalse(m1.equals(m2));\n    \r\n    \r\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapForProto2Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance =\n        DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n\n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n\n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertFalse(m1.equals(m2));\n    \r\n    \r\n  }\n","date":"2016-01-14 03:22:18","endLine":689,"groupId":"964","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReflectionEqualsAndHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/0e/5c12840c1630c4dc52a30c3be6173463e3befb.src","preCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance =\n        DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n\n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n\n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertFalse(m1.equals(m2));\n    \r\n    \r\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":659,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance = DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n\n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n\n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n\n    assertThat(m2).isEqualTo(m1);\n    assertThat(m2.hashCode()).isEqualTo(m1.hashCode());\n\n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertThat(m1.equals(m2)).isFalse();\n    \r\n    \r\n  }\n","date":"2021-08-10 06:55:00","endLine":861,"groupId":"10166","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReflectionEqualsAndHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/82/1b93cf28a62db01be87b4e44deabda15641cb3.src","preCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance = DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n\n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n\n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertFalse(m1.equals(m2));\n    \r\n    \r\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapForProto2Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":832,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance = DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n\n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n\n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n\n    assertThat(m2).isEqualTo(m1);\n    assertThat(m2.hashCode()).isEqualTo(m1.hashCode());\n\n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertThat(m1).isNotEqualTo(m2);\n    \r\n    \r\n  }\n","date":"2021-08-10 06:55:00","endLine":958,"groupId":"10166","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReflectionEqualsAndHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/cc/7a1217dbd78eb4e65fd6d6e9ded575285fe7f4.src","preCode":"  public void testReflectionEqualsAndHashCode() throws Exception {\n    \r\n    \r\n\n    \r\n    Message dynamicDefaultInstance = DynamicMessage.getDefaultInstance(TestMap.getDescriptor());\n    FieldDescriptor field = f(\"int32_to_int32_field\");\n\n    Message.Builder b1 = dynamicDefaultInstance.newBuilderForType();\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 1, 2));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 3, 4));\n    b1.addRepeatedField(field, newMapEntry(b1, \"int32_to_int32_field\", 5, 6));\n    Message m1 = b1.build();\n\n    Message.Builder b2 = dynamicDefaultInstance.newBuilderForType();\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 5, 6));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 1, 2));\n    b2.addRepeatedField(field, newMapEntry(b2, \"int32_to_int32_field\", 3, 4));\n    Message m2 = b2.build();\n\n    assertEquals(m1, m2);\n    assertEquals(m1.hashCode(), m2.hashCode());\n\n    \r\n    b2.setRepeatedField(field, 0, newMapEntry(b1, \"int32_to_int32_field\", 0, 0));\n    m2 = b2.build();\n    assertFalse(m1.equals(m2));\n    \r\n    \r\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/MapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":929,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
