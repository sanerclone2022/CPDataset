[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"    private void mergeField(final Tokenizer tokenizer,\n                            final ExtensionRegistry extensionRegistry,\n                            final MessageReflection.MergeTarget target)\n                            throws ParseException {\n      FieldDescriptor field = null;\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name =\n            new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(\n            extensionRegistry, name.toString());\n\n        if (extension == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          } else {\n            logger.warning(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          }\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" does not extend message type \\\"\"\n              + type.getFullName() + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.unknownFieldParseExceptionPreviousToken(\n              name,\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          } else {\n            logger.warning(\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          }\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\")\n            && !tokenizer.lookingAt(\"{\")\n            && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\");  \r\n      } else {\n        tokenizer.consume(\":\");  \r\n      }\n      \r\n      \r\n      if (field.isRepeated() && tokenizer.tryConsume(\"[\")) {\n        while (true) {\n          consumeFieldValue(tokenizer, extensionRegistry, target, field, extension);\n          if (tokenizer.tryConsume(\"]\")) {\n            \r\n            break;\n          }\n          tokenizer.consume(\",\");\n        }\n      } else {\n        consumeFieldValue(tokenizer, extensionRegistry, target, field, extension);\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-01-14 03:22:18","endLine":1498,"groupId":"1666","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeField","params":"(finalTokenizertokenizer@finalExtensionRegistryextensionRegistry@finalMessageReflection.MergeTargettarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c9/9b52851291e67fc2a1c2ef57a238d3dc47285c.src","preCode":"    private void mergeField(final Tokenizer tokenizer,\n                            final ExtensionRegistry extensionRegistry,\n                            final MessageReflection.MergeTarget target)\n                            throws ParseException {\n      FieldDescriptor field = null;\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name =\n            new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(\n            extensionRegistry, name.toString());\n\n        if (extension == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          } else {\n            logger.warning(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          }\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" does not extend message type \\\"\"\n              + type.getFullName() + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.unknownFieldParseExceptionPreviousToken(\n              name,\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          } else {\n            logger.warning(\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          }\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\")\n            && !tokenizer.lookingAt(\"{\")\n            && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\");  \r\n      } else {\n        tokenizer.consume(\":\");  \r\n      }\n      \r\n      \r\n      if (field.isRepeated() && tokenizer.tryConsume(\"[\")) {\n        while (true) {\n          consumeFieldValue(tokenizer, extensionRegistry, target, field, extension);\n          if (tokenizer.tryConsume(\"]\")) {\n            \r\n            break;\n          }\n          tokenizer.consume(\",\");\n        }\n      } else {\n        consumeFieldValue(tokenizer, extensionRegistry, target, field, extension);\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1379,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-01-14 03:22:18","endLine":1662,"groupId":"2040","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"skipField","params":"(Tokenizertokenizer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c9/9b52851291e67fc2a1c2ef57a238d3dc47285c.src","preCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-04-12 14:37:42","commitOrder":2,"curCode":"    private void mergeField(final Tokenizer tokenizer,\n                            final ExtensionRegistry extensionRegistry,\n                            final MessageReflection.MergeTarget target,\n                            TextFormatParseInfoTree.Builder parseTreeBuilder)\n                            throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name =\n            new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(\n            extensionRegistry, name.toString());\n\n        if (extension == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          } else {\n            logger.warning(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          }\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" does not extend message type \\\"\"\n              + type.getFullName() + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.unknownFieldParseExceptionPreviousToken(\n              name,\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          } else {\n            logger.warning(\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          }\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\")\n            && !tokenizer.lookingAt(\"{\")\n            && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\");  \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(tokenizer, extensionRegistry, target, field, extension,\n              childParseTreeBuilder);\n        } else {\n          consumeFieldValues(tokenizer, extensionRegistry, target, field, extension,\n              parseTreeBuilder);\n        }\n      } else {\n        tokenizer.consume(\":\");  \r\n        consumeFieldValues(\n            tokenizer, extensionRegistry, target, field, extension, parseTreeBuilder);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(\n            field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-04-12 14:37:42","endLine":1533,"groupId":"1666","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeField","params":"(finalTokenizertokenizer@finalExtensionRegistryextensionRegistry@finalMessageReflection.MergeTargettarget@TextFormatParseInfoTree.BuilderparseTreeBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/ed/f114fad793e98e75771462fa9f784fd12e2654.src","preCode":"    private void mergeField(final Tokenizer tokenizer,\n                            final ExtensionRegistry extensionRegistry,\n                            final MessageReflection.MergeTarget target)\n                            throws ParseException {\n      FieldDescriptor field = null;\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name =\n            new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(\n            extensionRegistry, name.toString());\n\n        if (extension == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          } else {\n            logger.warning(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          }\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" does not extend message type \\\"\"\n              + type.getFullName() + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.unknownFieldParseExceptionPreviousToken(\n              name,\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          } else {\n            logger.warning(\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          }\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\")\n            && !tokenizer.lookingAt(\"{\")\n            && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\");  \r\n      } else {\n        tokenizer.consume(\":\");  \r\n      }\n      \r\n      \r\n      if (field.isRepeated() && tokenizer.tryConsume(\"[\")) {\n        while (true) {\n          consumeFieldValue(tokenizer, extensionRegistry, target, field, extension);\n          if (tokenizer.tryConsume(\"]\")) {\n            \r\n            break;\n          }\n          tokenizer.consume(\",\");\n        }\n      } else {\n        consumeFieldValue(tokenizer, extensionRegistry, target, field, extension);\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1409,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":2,"curCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-01-14 03:22:18","endLine":1662,"groupId":"2040","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"skipField","params":"(Tokenizertokenizer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c9/9b52851291e67fc2a1c2ef57a238d3dc47285c.src","preCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"N"}],"commitId":"814685ca2cd9280ca401e1842fd6311440921a0a","commitMessage":"@@@Merge pull request #1397 from google/internal-merge\n\nInternal merge","date":"2016-04-12 14:37:42","modifiedFileCount":"57","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-06-30 06:23:27","commitOrder":3,"curCode":"    private void mergeField(final Tokenizer tokenizer,\n                            final ExtensionRegistry extensionRegistry,\n                            final MessageReflection.MergeTarget target,\n                            TextFormatParseInfoTree.Builder parseTreeBuilder,\n                            List<String> unknownFields)\n                            throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name =\n            new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(\n            extensionRegistry, name.toString());\n\n        if (extension == null) {\n          unknownFields.add((tokenizer.getPreviousLine() + 1) + \":\" +\n              (tokenizer.getPreviousColumn() + 1) + \":\\t\" +\n              type.getFullName() + \".[\" + name + \"]\");\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" does not extend message type \\\"\"\n              + type.getFullName() + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          unknownFields.add((tokenizer.getPreviousLine() + 1) + \":\" +\n              (tokenizer.getPreviousColumn() + 1) + \":\\t\" +\n              type.getFullName() + \".\" + name);\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\")\n            && !tokenizer.lookingAt(\"{\")\n            && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\");  \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(tokenizer, extensionRegistry, target, field, extension,\n              childParseTreeBuilder, unknownFields);\n        } else {\n          consumeFieldValues(tokenizer, extensionRegistry, target, field, extension,\n              parseTreeBuilder, unknownFields);\n        }\n      } else {\n        tokenizer.consume(\":\");  \r\n        consumeFieldValues(tokenizer, extensionRegistry, target, field,\n            extension, parseTreeBuilder, unknownFields);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(\n            field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-06-30 06:38:03","endLine":1561,"groupId":"1189","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeField","params":"(finalTokenizertokenizer@finalExtensionRegistryextensionRegistry@finalMessageReflection.MergeTargettarget@TextFormatParseInfoTree.BuilderparseTreeBuilder@List<String>unknownFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/ff/13675d618200a4ce793ff8ea94f5469f031a3c.src","preCode":"    private void mergeField(final Tokenizer tokenizer,\n                            final ExtensionRegistry extensionRegistry,\n                            final MessageReflection.MergeTarget target,\n                            TextFormatParseInfoTree.Builder parseTreeBuilder)\n                            throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name =\n            new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(\n            extensionRegistry, name.toString());\n\n        if (extension == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          } else {\n            logger.warning(\n              \"Extension \\\"\" + name + \"\\\" not found in the ExtensionRegistry.\");\n          }\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n              \"Extension \\\"\" + name + \"\\\" does not extend message type \\\"\"\n              + type.getFullName() + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          if (!allowUnknownFields) {\n            throw tokenizer.unknownFieldParseExceptionPreviousToken(\n              name,\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          } else {\n            logger.warning(\n              \"Message type \\\"\" + type.getFullName()\n              + \"\\\" has no field named \\\"\" + name + \"\\\".\");\n          }\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\")\n            && !tokenizer.lookingAt(\"{\")\n            && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\");  \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(tokenizer, extensionRegistry, target, field, extension,\n              childParseTreeBuilder);\n        } else {\n          consumeFieldValues(tokenizer, extensionRegistry, target, field, extension,\n              parseTreeBuilder);\n        }\n      } else {\n        tokenizer.consume(\":\");  \r\n        consumeFieldValues(\n            tokenizer, extensionRegistry, target, field, extension, parseTreeBuilder);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(\n            field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1447,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":3,"curCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-01-14 03:22:18","endLine":1662,"groupId":"2040","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"skipField","params":"(Tokenizertokenizer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c9/9b52851291e67fc2a1c2ef57a238d3dc47285c.src","preCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"N"}],"commitId":"d64a2d9941c36a7bc2a7959ea10ab8363192ac14","commitMessage":"@@@Integrated internal changes from Google\n\nThis includes all internal changes from around May 20 to now.\n","date":"2016-06-30 06:38:03","modifiedFileCount":"44","status":"M","submitter":"Adam Cozzette"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2018-11-13 05:55:00","commitOrder":4,"curCode":"    private void mergeField(\n        final Tokenizer tokenizer,\n        final ExtensionRegistry extensionRegistry,\n        final MessageReflection.MergeTarget target,\n        TextFormatParseInfoTree.Builder parseTreeBuilder,\n        final MergingStyle mergingStyle,\n        List<UnknownField> unknownFields)\n        throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name = new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(extensionRegistry, name.toString());\n\n        if (extension == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".[\"\n                           + name\n                           + \"]\";\n          unknownFields.add(new UnknownField(message, UnknownField.Type.EXTENSION));\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n                \"Extension \\\"\"\n                    + name\n                    + \"\\\" does not extend message type \\\"\"\n                    + type.getFullName()\n                    + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null\n            && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".\"\n                           + name;\n          unknownFields.add(new UnknownField(message, UnknownField.Type.FIELD));\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"{\") && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\"); \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              childParseTreeBuilder,\n              mergingStyle,\n              unknownFields);\n        } else {\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              parseTreeBuilder,\n              mergingStyle,\n              unknownFields);\n        }\n      } else {\n        tokenizer.consume(\":\"); \r\n        consumeFieldValues(\n            tokenizer,\n            extensionRegistry,\n            target,\n            field,\n            extension,\n            parseTreeBuilder,\n            mergingStyle,\n            unknownFields);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2018-11-13 05:55:00","endLine":1611,"groupId":"1200","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeField","params":"(finalTokenizertokenizer@finalExtensionRegistryextensionRegistry@finalMessageReflection.MergeTargettarget@TextFormatParseInfoTree.BuilderparseTreeBuilder@finalMergingStylemergingStyle@List<UnknownField>unknownFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/aa/ea0972c869496fc7cb65fd11320b5ef27aa5d7.src","preCode":"    private void mergeField(\n        final Tokenizer tokenizer,\n        final ExtensionRegistry extensionRegistry,\n        final MessageReflection.MergeTarget target,\n        TextFormatParseInfoTree.Builder parseTreeBuilder,\n        List<String> unknownFields)\n        throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name = new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(extensionRegistry, name.toString());\n\n        if (extension == null) {\n          unknownFields.add(\n              (tokenizer.getPreviousLine() + 1)\n                  + \":\"\n                  + (tokenizer.getPreviousColumn() + 1)\n                  + \":\\t\"\n                  + type.getFullName()\n                  + \".[\"\n                  + name\n                  + \"]\");\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n                \"Extension \\\"\"\n                    + name\n                    + \"\\\" does not extend message type \\\"\"\n                    + type.getFullName()\n                    + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null\n            && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          unknownFields.add(\n              (tokenizer.getPreviousLine() + 1)\n                  + \":\"\n                  + (tokenizer.getPreviousColumn() + 1)\n                  + \":\\t\"\n                  + type.getFullName()\n                  + \".\"\n                  + name);\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"{\") && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\"); \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              childParseTreeBuilder,\n              unknownFields);\n        } else {\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              parseTreeBuilder,\n              unknownFields);\n        }\n      } else {\n        tokenizer.consume(\":\"); \r\n        consumeFieldValues(\n            tokenizer,\n            extensionRegistry,\n            target,\n            field,\n            extension,\n            parseTreeBuilder,\n            unknownFields);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":4,"curCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-01-14 03:22:18","endLine":1662,"groupId":"2040","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"skipField","params":"(Tokenizertokenizer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c9/9b52851291e67fc2a1c2ef57a238d3dc47285c.src","preCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"N"}],"commitId":"46a48e49aa8357bbeee8040819a35e59880e329a","commitMessage":"@@@Merge pull request #5332 from acozzette/integrate\n\nIntegrated internal changes from Google","date":"2018-11-13 05:55:00","modifiedFileCount":"44","status":"M","submitter":"Adam Cozzette"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2018-12-21 08:27:26","commitOrder":5,"curCode":"    private void mergeField(\n        final Tokenizer tokenizer,\n        final ExtensionRegistry extensionRegistry,\n        final MessageReflection.MergeTarget target,\n        TextFormatParseInfoTree.Builder parseTreeBuilder,\n        List<UnknownField> unknownFields)\n        throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name = new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(extensionRegistry, name.toString());\n\n        if (extension == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".[\"\n                           + name\n                           + \"]\";\n          unknownFields.add(new UnknownField(message, UnknownField.Type.EXTENSION));\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n                \"Extension \\\"\"\n                    + name\n                    + \"\\\" does not extend message type \\\"\"\n                    + type.getFullName()\n                    + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null\n            && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".\"\n                           + name;\n          unknownFields.add(new UnknownField(message, UnknownField.Type.FIELD));\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"{\") && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\"); \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              childParseTreeBuilder,\n              unknownFields);\n        } else {\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              parseTreeBuilder,\n              unknownFields);\n        }\n      } else {\n        tokenizer.consume(\":\"); \r\n        consumeFieldValues(\n            tokenizer,\n            extensionRegistry,\n            target,\n            field,\n            extension,\n            parseTreeBuilder,\n            unknownFields);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2018-12-21 08:27:26","endLine":1570,"groupId":"1200","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeField","params":"(finalTokenizertokenizer@finalExtensionRegistryextensionRegistry@finalMessageReflection.MergeTargettarget@TextFormatParseInfoTree.BuilderparseTreeBuilder@List<UnknownField>unknownFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/f0/0c812fc525167b1e6e13deadc31062bdc6fab7.src","preCode":"    private void mergeField(\n        final Tokenizer tokenizer,\n        final ExtensionRegistry extensionRegistry,\n        final MessageReflection.MergeTarget target,\n        TextFormatParseInfoTree.Builder parseTreeBuilder,\n        final MergingStyle mergingStyle,\n        List<UnknownField> unknownFields)\n        throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name = new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(extensionRegistry, name.toString());\n\n        if (extension == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".[\"\n                           + name\n                           + \"]\";\n          unknownFields.add(new UnknownField(message, UnknownField.Type.EXTENSION));\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n                \"Extension \\\"\"\n                    + name\n                    + \"\\\" does not extend message type \\\"\"\n                    + type.getFullName()\n                    + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null\n            && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".\"\n                           + name;\n          unknownFields.add(new UnknownField(message, UnknownField.Type.FIELD));\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"{\") && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\"); \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              childParseTreeBuilder,\n              mergingStyle,\n              unknownFields);\n        } else {\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              parseTreeBuilder,\n              mergingStyle,\n              unknownFields);\n        }\n      } else {\n        tokenizer.consume(\":\"); \r\n        consumeFieldValues(\n            tokenizer,\n            extensionRegistry,\n            target,\n            field,\n            extension,\n            parseTreeBuilder,\n            mergingStyle,\n            unknownFields);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1427,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":5,"curCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2016-01-14 03:22:18","endLine":1662,"groupId":"2040","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"skipField","params":"(Tokenizertokenizer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c9/9b52851291e67fc2a1c2ef57a238d3dc47285c.src","preCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\")\n          && !tokenizer.lookingAt(\"<\")\n          && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"N"}],"commitId":"1354e469d447609b9e93c76f3e163d41a4799839","commitMessage":"@@@Merge pull request #5502 from TeBoring/github-sync\n\nDown-integrate internal changes to github.","date":"2018-12-21 08:27:26","modifiedFileCount":"13","status":"M","submitter":"Paul Yang"},{"authorTime":"2020-04-02 00:42:57","codes":[{"authorDate":"2020-04-02 00:42:57","commitOrder":6,"curCode":"    private void mergeField(\n        final Tokenizer tokenizer,\n        final ExtensionRegistry extensionRegistry,\n        final MessageReflection.MergeTarget target,\n        TextFormatParseInfoTree.Builder parseTreeBuilder,\n        List<UnknownField> unknownFields)\n        throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (\"google.protobuf.Any\".equals(type.getFullName()) && tokenizer.tryConsume(\"[\")) {\n        mergeAnyFieldValue(tokenizer, extensionRegistry, target, parseTreeBuilder, unknownFields,\n            type);\n        return;\n      }\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name = new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(extensionRegistry, name.toString());\n\n        if (extension == null) {\n          String message =\n              (tokenizer.getPreviousLine() + 1)\n                  + \":\"\n                  + (tokenizer.getPreviousColumn() + 1)\n                  + \":\\t\"\n                  + type.getFullName()\n                  + \".[\"\n                  + name\n                  + \"]\";\n          unknownFields.add(new UnknownField(message, UnknownField.Type.EXTENSION));\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n                \"Extension \\\"\"\n                    + name\n                    + \"\\\" does not extend message type \\\"\"\n                    + type.getFullName()\n                    + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null\n            && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".\"\n                           + name;\n          unknownFields.add(new UnknownField(message, UnknownField.Type.FIELD));\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"{\") && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\"); \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              childParseTreeBuilder,\n              unknownFields);\n        } else {\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              parseTreeBuilder,\n              unknownFields);\n        }\n      } else {\n        tokenizer.consume(\":\"); \r\n        consumeFieldValues(\n            tokenizer,\n            extensionRegistry,\n            target,\n            field,\n            extension,\n            parseTreeBuilder,\n            unknownFields);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2020-04-02 00:42:57","endLine":1948,"groupId":"10890","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeField","params":"(finalTokenizertokenizer@finalExtensionRegistryextensionRegistry@finalMessageReflection.MergeTargettarget@TextFormatParseInfoTree.BuilderparseTreeBuilder@List<UnknownField>unknownFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/67/3343d4ea052d045501629b67428ae8d6c6c130.src","preCode":"    private void mergeField(\n        final Tokenizer tokenizer,\n        final ExtensionRegistry extensionRegistry,\n        final MessageReflection.MergeTarget target,\n        TextFormatParseInfoTree.Builder parseTreeBuilder,\n        List<UnknownField> unknownFields)\n        throws ParseException {\n      FieldDescriptor field = null;\n      int startLine = tokenizer.getLine();\n      int startColumn = tokenizer.getColumn();\n      final Descriptor type = target.getDescriptorForType();\n      ExtensionRegistry.ExtensionInfo extension = null;\n\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        final StringBuilder name = new StringBuilder(tokenizer.consumeIdentifier());\n        while (tokenizer.tryConsume(\".\")) {\n          name.append('.');\n          name.append(tokenizer.consumeIdentifier());\n        }\n\n        extension = target.findExtensionByName(extensionRegistry, name.toString());\n\n        if (extension == null) {\n          String message =\n              (tokenizer.getPreviousLine() + 1)\n                  + \":\"\n                  + (tokenizer.getPreviousColumn() + 1)\n                  + \":\\t\"\n                  + type.getFullName()\n                  + \".[\"\n                  + name\n                  + \"]\";\n          unknownFields.add(new UnknownField(message, UnknownField.Type.EXTENSION));\n        } else {\n          if (extension.descriptor.getContainingType() != type) {\n            throw tokenizer.parseExceptionPreviousToken(\n                \"Extension \\\"\"\n                    + name\n                    + \"\\\" does not extend message type \\\"\"\n                    + type.getFullName()\n                    + \"\\\".\");\n          }\n          field = extension.descriptor;\n        }\n\n        tokenizer.consume(\"]\");\n      } else {\n        final String name = tokenizer.consumeIdentifier();\n        field = type.findFieldByName(name);\n\n        \r\n        \r\n        \r\n        if (field == null) {\n          \r\n          \r\n          final String lowerName = name.toLowerCase(Locale.US);\n          field = type.findFieldByName(lowerName);\n          \r\n          if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {\n            field = null;\n          }\n        }\n        \r\n        if (field != null\n            && field.getType() == FieldDescriptor.Type.GROUP\n            && !field.getMessageType().getName().equals(name)) {\n          field = null;\n        }\n\n        if (field == null) {\n          String message = (tokenizer.getPreviousLine() + 1)\n                           + \":\"\n                           + (tokenizer.getPreviousColumn() + 1)\n                           + \":\\t\"\n                           + type.getFullName()\n                           + \".\"\n                           + name;\n          unknownFields.add(new UnknownField(message, UnknownField.Type.FIELD));\n        }\n      }\n\n      \r\n      if (field == null) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"{\") && !tokenizer.lookingAt(\"<\")) {\n          skipFieldValue(tokenizer);\n        } else {\n          skipFieldMessage(tokenizer);\n        }\n        return;\n      }\n\n      \r\n      if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n        tokenizer.tryConsume(\":\"); \r\n        if (parseTreeBuilder != null) {\n          TextFormatParseInfoTree.Builder childParseTreeBuilder =\n              parseTreeBuilder.getBuilderForSubMessageField(field);\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              childParseTreeBuilder,\n              unknownFields);\n        } else {\n          consumeFieldValues(\n              tokenizer,\n              extensionRegistry,\n              target,\n              field,\n              extension,\n              parseTreeBuilder,\n              unknownFields);\n        }\n      } else {\n        tokenizer.consume(\":\"); \r\n        consumeFieldValues(\n            tokenizer,\n            extensionRegistry,\n            target,\n            field,\n            extension,\n            parseTreeBuilder,\n            unknownFields);\n      }\n\n      if (parseTreeBuilder != null) {\n        parseTreeBuilder.setLocation(field, TextFormatParseLocation.create(startLine, startColumn));\n      }\n\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1798,"status":"M"},{"authorDate":"2020-04-02 00:42:57","commitOrder":6,"curCode":"    private static void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"<\") && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","date":"2020-04-02 00:42:57","endLine":2252,"groupId":"10890","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"skipField","params":"(Tokenizertokenizer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/67/3343d4ea052d045501629b67428ae8d6c6c130.src","preCode":"    private void skipField(Tokenizer tokenizer) throws ParseException {\n      if (tokenizer.tryConsume(\"[\")) {\n        \r\n        do {\n          tokenizer.consumeIdentifier();\n        } while (tokenizer.tryConsume(\".\"));\n        tokenizer.consume(\"]\");\n      } else {\n        tokenizer.consumeIdentifier();\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      if (tokenizer.tryConsume(\":\") && !tokenizer.lookingAt(\"<\") && !tokenizer.lookingAt(\"{\")) {\n        skipFieldValue(tokenizer);\n      } else {\n        skipFieldMessage(tokenizer);\n      }\n      \r\n      \r\n      if (!tokenizer.tryConsume(\";\")) {\n        tokenizer.tryConsume(\",\");\n      }\n    }\n","realPath":"java/core/src/main/java/com/google/protobuf/TextFormat.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2225,"status":"M"}],"commitId":"e667bf6eaaa2fb1ba2987c6538df81f88500d030","commitMessage":"@@@Merge pull request #7344 from haberman/sync-integrate\n\nIntegrate from Piper @304070343 for C++.  Java.  and Python","date":"2020-04-02 00:42:57","modifiedFileCount":"28","status":"M","submitter":"Joshua Haberman"}]
