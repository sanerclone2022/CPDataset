[{"authorTime":"2019-04-06 07:39:18","codes":[{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedNestedEnum(TestAllTypes.NestedEnum.BAZ);\n    TestAllTypes message = builder.build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertEquals(WireFormat.WIRETYPE_LENGTH_DELIMITED, WireFormat.getTagWireType(tag));\n      in.skipField(tag);\n    }\n  }\n","date":"2019-04-06 07:39:18","endLine":2211,"groupId":"802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPackedSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/96/0b2037c1bad1f9bcd313819a2792728baa12b2.src","preCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedNestedEnum(TestAllTypes.NestedEnum.BAZ);\n    TestAllTypes message = builder.build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertEquals(WireFormat.WIRETYPE_LENGTH_DELIMITED, WireFormat.getTagWireType(tag));\n      in.skipField(tag);\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2198,"status":"B"},{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes message =\n        TestAllTypes.newBuilder()\n            .addRepeatedInt32(1234)\n            .addRepeatedNestedEnum(NestedEnum.BAR)\n            .build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertEquals(WireFormat.WIRETYPE_LENGTH_DELIMITED, WireFormat.getTagWireType(tag));\n      in.skipField(tag);\n    }\n  }\n","date":"2019-04-06 07:39:18","endLine":231,"groupId":"802","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPackedSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/23/97d2ebc354c09843bde205e611a6c071c04856.src","preCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes message =\n        TestAllTypes.newBuilder()\n            .addRepeatedInt32(1234)\n            .addRepeatedNestedEnum(NestedEnum.BAR)\n            .build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertEquals(WireFormat.WIRETYPE_LENGTH_DELIMITED, WireFormat.getTagWireType(tag));\n      in.skipField(tag);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/PackedFieldTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"B","submitter":"Hao Nguyen"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedNestedEnum(TestAllTypes.NestedEnum.BAZ);\n    TestAllTypes message = builder.build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertThat(WireFormat.getTagWireType(tag)).isEqualTo(WireFormat.WIRETYPE_LENGTH_DELIMITED);\n      in.skipField(tag);\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":2476,"groupId":"1036","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPackedSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedNestedEnum(TestAllTypes.NestedEnum.BAZ);\n    TestAllTypes message = builder.build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertEquals(WireFormat.WIRETYPE_LENGTH_DELIMITED, WireFormat.getTagWireType(tag));\n      in.skipField(tag);\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2463,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes message =\n        TestAllTypes.newBuilder()\n            .addRepeatedInt32(1234)\n            .addRepeatedNestedEnum(NestedEnum.BAR)\n            .build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertThat(WireFormat.getTagWireType(tag)).isEqualTo(WireFormat.WIRETYPE_LENGTH_DELIMITED);\n      in.skipField(tag);\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":241,"groupId":"1036","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPackedSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/ce/77baabeba51a30b83562b7baef20eb3bc7dec8.src","preCode":"  public void testPackedSerialization() throws Exception {\n    TestAllTypes message =\n        TestAllTypes.newBuilder()\n            .addRepeatedInt32(1234)\n            .addRepeatedNestedEnum(NestedEnum.BAR)\n            .build();\n\n    CodedInputStream in = CodedInputStream.newInstance(message.toByteArray());\n\n    while (!in.isAtEnd()) {\n      int tag = in.readTag();\n      assertEquals(WireFormat.WIRETYPE_LENGTH_DELIMITED, WireFormat.getTagWireType(tag));\n      in.skipField(tag);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/PackedFieldTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
