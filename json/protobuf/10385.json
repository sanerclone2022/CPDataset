[{"authorTime":"2016-04-12 14:37:42","codes":[{"authorDate":"2016-04-12 14:37:42","commitOrder":1,"curCode":"  public void testReadString() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    CodedInputStream input =\n        CodedInputStream.newInstance(\n            new ByteArrayInputStream(rawOutput.toByteString().toByteArray()));\n    assertEquals(tag, input.readTag());\n    String text = input.readString();\n    assertEquals(lorem, text);\n  }\n","date":"2016-04-12 14:37:42","endLine":573,"groupId":"2060","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a1/d6f1be8fd880edf245afca7bce80d34215d7db.src","preCode":"  public void testReadString() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    CodedInputStream input =\n        CodedInputStream.newInstance(\n            new ByteArrayInputStream(rawOutput.toByteString().toByteArray()));\n    assertEquals(tag, input.readTag());\n    String text = input.readString();\n    assertEquals(lorem, text);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"B"},{"authorDate":"2016-04-12 14:37:42","commitOrder":1,"curCode":"  public void testReadStringRequireUtf8() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    CodedInputStream input =\n        CodedInputStream.newInstance(\n            new ByteArrayInputStream(rawOutput.toByteString().toByteArray()));\n    assertEquals(tag, input.readTag());\n    String text = input.readStringRequireUtf8();\n    assertEquals(lorem, text);\n  }\n","date":"2016-04-12 14:37:42","endLine":598,"groupId":"2060","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadStringRequireUtf8","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a1/d6f1be8fd880edf245afca7bce80d34215d7db.src","preCode":"  public void testReadStringRequireUtf8() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    CodedInputStream input =\n        CodedInputStream.newInstance(\n            new ByteArrayInputStream(rawOutput.toByteString().toByteArray()));\n    assertEquals(tag, input.readTag());\n    String text = input.readStringRequireUtf8();\n    assertEquals(lorem, text);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"B"}],"commitId":"814685ca2cd9280ca401e1842fd6311440921a0a","commitMessage":"@@@Merge pull request #1397 from google/internal-merge\n\nInternal merge","date":"2016-04-12 14:37:42","modifiedFileCount":"57","status":"B","submitter":"Joshua Haberman"},{"authorTime":"2016-10-11 04:58:39","codes":[{"authorDate":"2016-10-11 04:58:39","commitOrder":2,"curCode":"  public void testReadString() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    byte[] rawInput = rawOutput.toByteString().toByteArray();\n    for (InputType inputType : InputType.values()) {\n      CodedInputStream input = inputType.newDecoder(rawInput);\n      assertEquals(inputType.name(), tag, input.readTag());\n      String text = input.readString();\n      assertEquals(inputType.name(), lorem, text);\n    }\n  }\n","date":"2016-10-11 04:58:39","endLine":586,"groupId":"2060","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/e2/ab0df998bbb3a683f9650866ccf589a205c2e9.src","preCode":"  public void testReadString() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    CodedInputStream input =\n        CodedInputStream.newInstance(\n            new ByteArrayInputStream(rawOutput.toByteString().toByteArray()));\n    assertEquals(tag, input.readTag());\n    String text = input.readString();\n    assertEquals(lorem, text);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"},{"authorDate":"2016-10-11 04:58:39","commitOrder":2,"curCode":"  public void testReadStringRequireUtf8() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    byte[] rawInput = rawOutput.toByteString().toByteArray();\n    for (InputType inputType : InputType.values()) {\n      CodedInputStream input = inputType.newDecoder(rawInput);\n      assertEquals(inputType.name(), tag, input.readTag());\n      String text = input.readStringRequireUtf8();\n      assertEquals(inputType.name(), lorem, text);\n    }\n  }\n","date":"2016-10-11 04:58:39","endLine":612,"groupId":"2060","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadStringRequireUtf8","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/e2/ab0df998bbb3a683f9650866ccf589a205c2e9.src","preCode":"  public void testReadStringRequireUtf8() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    CodedInputStream input =\n        CodedInputStream.newInstance(\n            new ByteArrayInputStream(rawOutput.toByteString().toByteArray()));\n    assertEquals(tag, input.readTag());\n    String text = input.readStringRequireUtf8();\n    assertEquals(lorem, text);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"M"}],"commitId":"fd046f6263fb17383cafdbb25c361e3451c31105","commitMessage":"@@@Merge pull request #2234 from TeBoring/master\n\nMerge 3.1.x branch into master.","date":"2016-10-11 04:58:39","modifiedFileCount":"60","status":"M","submitter":"Paul Yang"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testReadString() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    byte[] rawInput = rawOutput.toByteString().toByteArray();\n    for (InputType inputType : InputType.values()) {\n      CodedInputStream input = inputType.newDecoder(rawInput);\n      assertWithMessage(inputType.name()).that(tag).isEqualTo(input.readTag());\n      String text = input.readString();\n      assertWithMessage(inputType.name()).that(lorem).isEqualTo(text);\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":866,"groupId":"10385","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testReadString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/f5/bb31fdf4e56a7d7c9a0216487f8ea23213971b.src","preCode":"  public void testReadString() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    byte[] rawInput = rawOutput.toByteString().toByteArray();\n    for (InputType inputType : InputType.values()) {\n      CodedInputStream input = inputType.newDecoder(rawInput);\n      assertEquals(inputType.name(), tag, input.readTag());\n      String text = input.readString();\n      assertEquals(inputType.name(), lorem, text);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":842,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testReadStringRequireUtf8() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    byte[] rawInput = rawOutput.toByteString().toByteArray();\n    for (InputType inputType : InputType.values()) {\n      CodedInputStream input = inputType.newDecoder(rawInput);\n      assertWithMessage(inputType.name()).that(tag).isEqualTo(input.readTag());\n      String text = input.readStringRequireUtf8();\n      assertWithMessage(inputType.name()).that(lorem).isEqualTo(text);\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":893,"groupId":"10385","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testReadStringRequireUtf8","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/f5/bb31fdf4e56a7d7c9a0216487f8ea23213971b.src","preCode":"  public void testReadStringRequireUtf8() throws Exception {\n    String lorem = \"Lorem ipsum dolor sit amet \";\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < 4096; i += lorem.length()) {\n      builder.append(lorem);\n    }\n    lorem = builder.toString().substring(0, 4096);\n    byte[] bytes = lorem.getBytes(\"UTF-8\");\n    ByteString.Output rawOutput = ByteString.newOutput();\n    CodedOutputStream output = CodedOutputStream.newInstance(rawOutput, bytes.length);\n\n    int tag = WireFormat.makeTag(1, WireFormat.WIRETYPE_LENGTH_DELIMITED);\n    output.writeRawVarint32(tag);\n    output.writeRawVarint32(bytes.length);\n    output.writeRawBytes(bytes);\n    output.flush();\n\n    byte[] rawInput = rawOutput.toByteString().toByteArray();\n    for (InputType inputType : InputType.values()) {\n      CodedInputStream input = inputType.newDecoder(rawInput);\n      assertEquals(inputType.name(), tag, input.readTag());\n      String text = input.readStringRequireUtf8();\n      assertEquals(inputType.name(), lorem, text);\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":869,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
