[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testNewOutput_WriteChar() {\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {0, 1, 128, 256, length / 2,\n                         length - 1, length, length + 1,\n                         2 * length, 3 * length};\n    for (int bufferSize : bufferSizes) {\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      for (byte byteValue : bytes) {\n        output.write(byteValue);\n      }\n      ByteString byteString = output.toByteString();\n      assertTrue(\"String built from newOutput() must contain the expected bytes\",\n          isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length));\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":460,"groupId":"605","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNewOutput_WriteChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/f642515ce11b1551b0805851ceb2cf7b85b766.src","preCode":"  public void testNewOutput_WriteChar() {\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {0, 1, 128, 256, length / 2,\n                         length - 1, length, length + 1,\n                         2 * length, 3 * length};\n    for (int bufferSize : bufferSizes) {\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      for (byte byteValue : bytes) {\n        output.write(byteValue);\n      }\n      ByteString byteString = output.toByteString();\n      assertTrue(\"String built from newOutput() must contain the expected bytes\",\n          isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length));\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testNewOutput_Mixed() {\n    Random rng = new Random(1);\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {0, 1, 128, 256, length / 2,\n                         length - 1, length, length + 1,\n                         2 * length, 3 * length};\n\n    for (int bufferSize : bufferSizes) {\n      \r\n      \r\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      int position = 0;\n      while (position < bytes.length) {\n        if (rng.nextBoolean()) {\n          int count = 1 + rng.nextInt(bytes.length - position);\n          output.write(bytes, position, count);\n          position += count;\n        } else {\n          output.write(bytes[position]);\n          position++;\n        }\n        assertEquals(\"size() returns the right value\", position, output.size());\n        assertTrue(\"newOutput() substring must have correct bytes\",\n            isArrayRange(output.toByteString().toByteArray(),\n                bytes, 0, position));\n      }\n      ByteString byteString = output.toByteString();\n      assertTrue(\"String built from newOutput() must contain the expected bytes\",\n          isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length));\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":495,"groupId":"605","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewOutput_Mixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/f642515ce11b1551b0805851ceb2cf7b85b766.src","preCode":"  public void testNewOutput_Mixed() {\n    Random rng = new Random(1);\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {0, 1, 128, 256, length / 2,\n                         length - 1, length, length + 1,\n                         2 * length, 3 * length};\n\n    for (int bufferSize : bufferSizes) {\n      \r\n      \r\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      int position = 0;\n      while (position < bytes.length) {\n        if (rng.nextBoolean()) {\n          int count = 1 + rng.nextInt(bytes.length - position);\n          output.write(bytes, position, count);\n          position += count;\n        } else {\n          output.write(bytes[position]);\n          position++;\n        }\n        assertEquals(\"size() returns the right value\", position, output.size());\n        assertTrue(\"newOutput() substring must have correct bytes\",\n            isArrayRange(output.toByteString().toByteArray(),\n                bytes, 0, position));\n      }\n      ByteString byteString = output.toByteString();\n      assertTrue(\"String built from newOutput() must contain the expected bytes\",\n          isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length));\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testNewOutput_WriteChar() {\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {\n      0, 1, 128, 256, length / 2, length - 1, length, length + 1, 2 * length, 3 * length\n    };\n    for (int bufferSize : bufferSizes) {\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      for (byte byteValue : bytes) {\n        output.write(byteValue);\n      }\n      ByteString byteString = output.toByteString();\n      assertWithMessage(\"String built from newOutput() must contain the expected bytes\")\n          .that(isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length))\n          .isTrue();\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":605,"groupId":"10565","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testNewOutput_WriteChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/3f/97e3174ffe111ceaa228d2cf15b7893ac344b6.src","preCode":"  public void testNewOutput_WriteChar() {\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {\n      0, 1, 128, 256, length / 2, length - 1, length, length + 1, 2 * length, 3 * length\n    };\n    for (int bufferSize : bufferSizes) {\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      for (byte byteValue : bytes) {\n        output.write(byteValue);\n      }\n      ByteString byteString = output.toByteString();\n      assertTrue(\n          \"String built from newOutput() must contain the expected bytes\",\n          isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length));\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testNewOutput_Mixed() {\n    Random rng = new Random(1);\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {\n      0, 1, 128, 256, length / 2, length - 1, length, length + 1, 2 * length, 3 * length\n    };\n\n    for (int bufferSize : bufferSizes) {\n      \r\n      \r\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      int position = 0;\n      while (position < bytes.length) {\n        if (rng.nextBoolean()) {\n          int count = 1 + rng.nextInt(bytes.length - position);\n          output.write(bytes, position, count);\n          position += count;\n        } else {\n          output.write(bytes[position]);\n          position++;\n        }\n        assertWithMessage(\"size() returns the right value\").that(position).isEqualTo(output.size());\n        assertWithMessage(\"newOutput() substring must have correct bytes\")\n            .that(isArrayRange(output.toByteString().toByteArray(), bytes, 0, position))\n            .isTrue();\n      }\n      ByteString byteString = output.toByteString();\n      assertWithMessage(\"String built from newOutput() must contain the expected bytes\")\n          .that(isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length))\n          .isTrue();\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":642,"groupId":"10565","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testNewOutput_Mixed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/3f/97e3174ffe111ceaa228d2cf15b7893ac344b6.src","preCode":"  public void testNewOutput_Mixed() {\n    Random rng = new Random(1);\n    byte[] bytes = getTestBytes();\n    int length = bytes.length;\n    int[] bufferSizes = {\n      0, 1, 128, 256, length / 2, length - 1, length, length + 1, 2 * length, 3 * length\n    };\n\n    for (int bufferSize : bufferSizes) {\n      \r\n      \r\n      ByteString.Output output = ByteString.newOutput(bufferSize);\n      int position = 0;\n      while (position < bytes.length) {\n        if (rng.nextBoolean()) {\n          int count = 1 + rng.nextInt(bytes.length - position);\n          output.write(bytes, position, count);\n          position += count;\n        } else {\n          output.write(bytes[position]);\n          position++;\n        }\n        assertEquals(\"size() returns the right value\", position, output.size());\n        assertTrue(\n            \"newOutput() substring must have correct bytes\",\n            isArrayRange(output.toByteString().toByteArray(), bytes, 0, position));\n      }\n      ByteString byteString = output.toByteString();\n      assertTrue(\n          \"String built from newOutput() must contain the expected bytes\",\n          isArrayRange(bytes, byteString.toByteArray(), 0, bytes.length));\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
