[{"authorTime":"2019-04-06 07:39:18","codes":[{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  private int getSerializedSizeProto2(T message) {\n    int size = 0;\n\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int currentPresenceFieldOffset = -1;\n    int currentPresenceField = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int number = numberAt(i);\n\n      int fieldType = type(typeAndOffset);\n      int presenceMaskAndOffset = 0;\n      int presenceMask = 0;\n      if (fieldType <= 17) {\n        presenceMaskAndOffset = buffer[i + 2];\n        final int presenceFieldOffset = presenceMaskAndOffset & OFFSET_MASK;\n        presenceMask = 1 << (presenceMaskAndOffset >>> OFFSET_BITS);\n        if (presenceFieldOffset != currentPresenceFieldOffset) {\n          currentPresenceFieldOffset = presenceFieldOffset;\n          currentPresenceField = unsafe.getInt(message, (long) presenceFieldOffset);\n        }\n      } else if (useCachedSizeField\n          && fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n          && fieldType <= FieldType.SINT64_LIST_PACKED.id()) {\n        presenceMaskAndOffset = buffer[i + 2] & OFFSET_MASK;\n      }\n\n      final long offset = offset(typeAndOffset);\n\n      switch (fieldType) {\n        case 0: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            ByteString value = (ByteString) unsafe.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeEnumSize(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 19: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 23: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 24: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 25: \r\n          size +=\n              SchemaUtil.computeSizeBoolList(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 26: \r\n          size +=\n              SchemaUtil.computeSizeStringList(number, (List<?>) unsafe.getObject(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, (List<?>) unsafe.getObject(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) unsafe.getObject(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 31: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 32: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number,\n                  (List<MessageLite>) unsafe.getObject(message, offset),\n                  getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, unsafe.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) unsafe.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    if (hasExtensions) {\n      size += extensionSchema.getExtensions(message).getSerializedSize();\n    }\n\n    return size;\n  }\n","date":"2019-04-06 07:39:18","endLine":1981,"groupId":"1249","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedSizeProto2","params":"(Tmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/67/584ed413730fcf50498f47646295eda6343a1e.src","preCode":"  private int getSerializedSizeProto2(T message) {\n    int size = 0;\n\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int currentPresenceFieldOffset = -1;\n    int currentPresenceField = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int number = numberAt(i);\n\n      int fieldType = type(typeAndOffset);\n      int presenceMaskAndOffset = 0;\n      int presenceMask = 0;\n      if (fieldType <= 17) {\n        presenceMaskAndOffset = buffer[i + 2];\n        final int presenceFieldOffset = presenceMaskAndOffset & OFFSET_MASK;\n        presenceMask = 1 << (presenceMaskAndOffset >>> OFFSET_BITS);\n        if (presenceFieldOffset != currentPresenceFieldOffset) {\n          currentPresenceFieldOffset = presenceFieldOffset;\n          currentPresenceField = unsafe.getInt(message, (long) presenceFieldOffset);\n        }\n      } else if (useCachedSizeField\n          && fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n          && fieldType <= FieldType.SINT64_LIST_PACKED.id()) {\n        presenceMaskAndOffset = buffer[i + 2] & OFFSET_MASK;\n      }\n\n      final long offset = offset(typeAndOffset);\n\n      switch (fieldType) {\n        case 0: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            ByteString value = (ByteString) unsafe.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeEnumSize(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 19: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 23: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 24: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 25: \r\n          size +=\n              SchemaUtil.computeSizeBoolList(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 26: \r\n          size +=\n              SchemaUtil.computeSizeStringList(number, (List<?>) unsafe.getObject(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, (List<?>) unsafe.getObject(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) unsafe.getObject(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 31: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 32: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number,\n                  (List<MessageLite>) unsafe.getObject(message, offset),\n                  getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, unsafe.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) unsafe.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    if (hasExtensions) {\n      size += extensionSchema.getExtensions(message).getSerializedSize();\n    }\n\n    return size;\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/MessageSchema.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1415,"status":"B"},{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  private int getSerializedSizeProto3(T message) {\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int size = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int fieldType = type(typeAndOffset);\n      final int number = numberAt(i);\n\n      final long offset = offset(typeAndOffset);\n      final int cachedSizeOffset =\n          fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n                  && fieldType <= FieldType.SINT64_LIST_PACKED.id()\n              ? buffer[i + 2] & OFFSET_MASK\n              : 0;\n\n      switch (fieldType) {\n        case 0: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeUInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if (isFieldPresent(message, i)) {\n            ByteString value = (ByteString) UnsafeUtil.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeEnumSize(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeSInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 19: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 23: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 24: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 25: \r\n          size += SchemaUtil.computeSizeBoolList(number, listAt(message, offset), false);\n          break;\n        case 26: \r\n          size += SchemaUtil.computeSizeStringList(number, listAt(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) listAt(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 31: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 32: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number, (List<MessageLite>) listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, UnsafeUtil.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) UnsafeUtil.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    return size;\n  }\n","date":"2019-04-06 07:39:18","endLine":2513,"groupId":"1215","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedSizeProto3","params":"(Tmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/67/584ed413730fcf50498f47646295eda6343a1e.src","preCode":"  private int getSerializedSizeProto3(T message) {\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int size = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int fieldType = type(typeAndOffset);\n      final int number = numberAt(i);\n\n      final long offset = offset(typeAndOffset);\n      final int cachedSizeOffset =\n          fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n                  && fieldType <= FieldType.SINT64_LIST_PACKED.id()\n              ? buffer[i + 2] & OFFSET_MASK\n              : 0;\n\n      switch (fieldType) {\n        case 0: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeUInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if (isFieldPresent(message, i)) {\n            ByteString value = (ByteString) UnsafeUtil.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeEnumSize(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeSInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 19: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 23: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 24: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 25: \r\n          size += SchemaUtil.computeSizeBoolList(number, listAt(message, offset), false);\n          break;\n        case 26: \r\n          size += SchemaUtil.computeSizeStringList(number, listAt(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) listAt(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 31: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 32: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number, (List<MessageLite>) listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, UnsafeUtil.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) UnsafeUtil.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    return size;\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/MessageSchema.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1983,"status":"B"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"B","submitter":"Hao Nguyen"},{"authorTime":"2019-04-06 07:39:18","codes":[{"authorDate":"2020-04-02 00:42:57","commitOrder":2,"curCode":"  private int getSerializedSizeProto2(T message) {\n    int size = 0;\n\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int currentPresenceFieldOffset = NO_PRESENCE_SENTINEL;\n    int currentPresenceField = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int number = numberAt(i);\n\n      int fieldType = type(typeAndOffset);\n      int presenceMaskAndOffset = 0;\n      int presenceMask = 0;\n      if (fieldType <= 17) {\n        presenceMaskAndOffset = buffer[i + 2];\n        final int presenceFieldOffset = presenceMaskAndOffset & OFFSET_MASK;\n        presenceMask = 1 << (presenceMaskAndOffset >>> OFFSET_BITS);\n        if (presenceFieldOffset != currentPresenceFieldOffset) {\n          currentPresenceFieldOffset = presenceFieldOffset;\n          currentPresenceField = unsafe.getInt(message, (long) presenceFieldOffset);\n        }\n      } else if (useCachedSizeField\n          && fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n          && fieldType <= FieldType.SINT64_LIST_PACKED.id()) {\n        presenceMaskAndOffset = buffer[i + 2] & OFFSET_MASK;\n      }\n\n      final long offset = offset(typeAndOffset);\n\n      switch (fieldType) {\n        case 0: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            ByteString value = (ByteString) unsafe.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeEnumSize(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 19: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 23: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 24: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 25: \r\n          size +=\n              SchemaUtil.computeSizeBoolList(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 26: \r\n          size +=\n              SchemaUtil.computeSizeStringList(number, (List<?>) unsafe.getObject(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, (List<?>) unsafe.getObject(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) unsafe.getObject(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 31: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 32: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number,\n                  (List<MessageLite>) unsafe.getObject(message, offset),\n                  getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, unsafe.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) unsafe.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    if (hasExtensions) {\n      size += extensionSchema.getExtensions(message).getSerializedSize();\n    }\n\n    return size;\n  }\n","date":"2020-04-02 00:42:57","endLine":1990,"groupId":"10693","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedSizeProto2","params":"(Tmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/13/9e55a971428833355c674bd64498cc8b3a2f22.src","preCode":"  private int getSerializedSizeProto2(T message) {\n    int size = 0;\n\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int currentPresenceFieldOffset = -1;\n    int currentPresenceField = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int number = numberAt(i);\n\n      int fieldType = type(typeAndOffset);\n      int presenceMaskAndOffset = 0;\n      int presenceMask = 0;\n      if (fieldType <= 17) {\n        presenceMaskAndOffset = buffer[i + 2];\n        final int presenceFieldOffset = presenceMaskAndOffset & OFFSET_MASK;\n        presenceMask = 1 << (presenceMaskAndOffset >>> OFFSET_BITS);\n        if (presenceFieldOffset != currentPresenceFieldOffset) {\n          currentPresenceFieldOffset = presenceFieldOffset;\n          currentPresenceField = unsafe.getInt(message, (long) presenceFieldOffset);\n        }\n      } else if (useCachedSizeField\n          && fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n          && fieldType <= FieldType.SINT64_LIST_PACKED.id()) {\n        presenceMaskAndOffset = buffer[i + 2] & OFFSET_MASK;\n      }\n\n      final long offset = offset(typeAndOffset);\n\n      switch (fieldType) {\n        case 0: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            ByteString value = (ByteString) unsafe.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeUInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeEnumSize(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt32Size(number, unsafe.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size += CodedOutputStream.computeSInt64Size(number, unsafe.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if ((currentPresenceField & presenceMask) != 0) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 19: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 23: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 24: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 25: \r\n          size +=\n              SchemaUtil.computeSizeBoolList(\n                  number, (List<?>) unsafe.getObject(message, offset), false);\n          break;\n        case 26: \r\n          size +=\n              SchemaUtil.computeSizeStringList(number, (List<?>) unsafe.getObject(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, (List<?>) unsafe.getObject(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) unsafe.getObject(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 31: \r\n          size +=\n              SchemaUtil.computeSizeFixed32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 32: \r\n          size +=\n              SchemaUtil.computeSizeFixed64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) unsafe.getObject(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(\n                  number, (List<Long>) unsafe.getObject(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number,\n                  (List<MessageLite>) unsafe.getObject(message, offset),\n                  getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, unsafe.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = unsafe.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) unsafe.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) unsafe.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    if (hasExtensions) {\n      size += extensionSchema.getExtensions(message).getSerializedSize();\n    }\n\n    return size;\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/MessageSchema.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1424,"status":"M"},{"authorDate":"2019-04-06 07:39:18","commitOrder":2,"curCode":"  private int getSerializedSizeProto3(T message) {\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int size = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int fieldType = type(typeAndOffset);\n      final int number = numberAt(i);\n\n      final long offset = offset(typeAndOffset);\n      final int cachedSizeOffset =\n          fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n                  && fieldType <= FieldType.SINT64_LIST_PACKED.id()\n              ? buffer[i + 2] & OFFSET_MASK\n              : 0;\n\n      switch (fieldType) {\n        case 0: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeUInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if (isFieldPresent(message, i)) {\n            ByteString value = (ByteString) UnsafeUtil.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeEnumSize(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeSInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 19: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 23: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 24: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 25: \r\n          size += SchemaUtil.computeSizeBoolList(number, listAt(message, offset), false);\n          break;\n        case 26: \r\n          size += SchemaUtil.computeSizeStringList(number, listAt(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) listAt(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 31: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 32: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number, (List<MessageLite>) listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, UnsafeUtil.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) UnsafeUtil.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    return size;\n  }\n","date":"2019-04-06 07:39:18","endLine":2513,"groupId":"10693","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedSizeProto3","params":"(Tmessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/67/584ed413730fcf50498f47646295eda6343a1e.src","preCode":"  private int getSerializedSizeProto3(T message) {\n    final sun.misc.Unsafe unsafe = UNSAFE;\n    int size = 0;\n    for (int i = 0; i < buffer.length; i += INTS_PER_FIELD) {\n      final int typeAndOffset = typeAndOffsetAt(i);\n      final int fieldType = type(typeAndOffset);\n      final int number = numberAt(i);\n\n      final long offset = offset(typeAndOffset);\n      final int cachedSizeOffset =\n          fieldType >= FieldType.DOUBLE_LIST_PACKED.id()\n                  && fieldType <= FieldType.SINT64_LIST_PACKED.id()\n              ? buffer[i + 2] & OFFSET_MASK\n              : 0;\n\n      switch (fieldType) {\n        case 0: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 1: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 2: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 3: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeUInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 4: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 5: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 6: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 7: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 8: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 9: \r\n          if (isFieldPresent(message, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 10: \r\n          if (isFieldPresent(message, i)) {\n            ByteString value = (ByteString) UnsafeUtil.getObject(message, offset);\n            size += CodedOutputStream.computeBytesSize(number, value);\n          }\n          break;\n        case 11: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 12: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeEnumSize(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 13: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 14: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 15: \r\n          if (isFieldPresent(message, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, UnsafeUtil.getInt(message, offset));\n          }\n          break;\n        case 16: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeSInt64Size(number, UnsafeUtil.getLong(message, offset));\n          }\n          break;\n        case 17: \r\n          if (isFieldPresent(message, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        case 18: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 19: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 20: \r\n          size +=\n              SchemaUtil.computeSizeInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 21: \r\n          size +=\n              SchemaUtil.computeSizeUInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 22: \r\n          size +=\n              SchemaUtil.computeSizeInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 23: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 24: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 25: \r\n          size += SchemaUtil.computeSizeBoolList(number, listAt(message, offset), false);\n          break;\n        case 26: \r\n          size += SchemaUtil.computeSizeStringList(number, listAt(message, offset));\n          break;\n        case 27: \r\n          size +=\n              SchemaUtil.computeSizeMessageList(\n                  number, listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 28: \r\n          size +=\n              SchemaUtil.computeSizeByteStringList(\n                  number, (List<ByteString>) listAt(message, offset));\n          break;\n        case 29: \r\n          size +=\n              SchemaUtil.computeSizeUInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 30: \r\n          size +=\n              SchemaUtil.computeSizeEnumList(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 31: \r\n          size += SchemaUtil.computeSizeFixed32List(number, listAt(message, offset), false);\n          break;\n        case 32: \r\n          size += SchemaUtil.computeSizeFixed64List(number, listAt(message, offset), false);\n          break;\n        case 33: \r\n          size +=\n              SchemaUtil.computeSizeSInt32List(\n                  number, (List<Integer>) listAt(message, offset), false);\n          break;\n        case 34: \r\n          size +=\n              SchemaUtil.computeSizeSInt64List(number, (List<Long>) listAt(message, offset), false);\n          break;\n        case 35:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Double>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 36:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Float>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 37:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 38:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 39:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 40:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 41:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 42:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeBoolListNoTag(\n                    (List<Boolean>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 43:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeUInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 44:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeEnumListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 45:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 46:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeFixed64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 47:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt32ListNoTag(\n                    (List<Integer>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 48:\n          { \r\n            int fieldSize =\n                SchemaUtil.computeSizeSInt64ListNoTag(\n                    (List<Long>) unsafe.getObject(message, offset));\n            if (fieldSize > 0) {\n              if (useCachedSizeField) {\n                unsafe.putInt(message, (long) cachedSizeOffset, fieldSize);\n              }\n              size +=\n                  CodedOutputStream.computeTagSize(number)\n                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)\n                      + fieldSize;\n            }\n            break;\n          }\n        case 49: \r\n          size +=\n              SchemaUtil.computeSizeGroupList(\n                  number, (List<MessageLite>) listAt(message, offset), getMessageFieldSchema(i));\n          break;\n        case 50: \r\n          \r\n          size +=\n              mapFieldSchema.getSerializedSize(\n                  number, UnsafeUtil.getObject(message, offset), getMapFieldDefaultEntry(i));\n          break;\n        case 51: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeDoubleSize(number, 0);\n          }\n          break;\n        case 52: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFloatSize(number, 0);\n          }\n          break;\n        case 53: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 54: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 55: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 56: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed64Size(number, 0);\n          }\n          break;\n        case 57: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeFixed32Size(number, 0);\n          }\n          break;\n        case 58: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeBoolSize(number, true);\n          }\n          break;\n        case 59: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            if (value instanceof ByteString) {\n              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);\n            } else {\n              size += CodedOutputStream.computeStringSize(number, (String) value);\n            }\n          }\n          break;\n        case 60: \r\n          if (isOneofPresent(message, number, i)) {\n            Object value = UnsafeUtil.getObject(message, offset);\n            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));\n          }\n          break;\n        case 61: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeBytesSize(\n                    number, (ByteString) UnsafeUtil.getObject(message, offset));\n          }\n          break;\n        case 62: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 63: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 64: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed32Size(number, 0);\n          }\n          break;\n        case 65: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSFixed64Size(number, 0);\n          }\n          break;\n        case 66: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));\n          }\n          break;\n        case 67: \r\n          if (isOneofPresent(message, number, i)) {\n            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));\n          }\n          break;\n        case 68: \r\n          if (isOneofPresent(message, number, i)) {\n            size +=\n                CodedOutputStream.computeGroupSize(\n                    number,\n                    (MessageLite) UnsafeUtil.getObject(message, offset),\n                    getMessageFieldSchema(i));\n          }\n          break;\n        default:\n          \r\n      }\n    }\n\n    size += getUnknownFieldsSerializedSize(unknownFieldSchema, message);\n\n    return size;\n  }\n","realPath":"java/core/src/main/java/com/google/protobuf/MessageSchema.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1983,"status":"N"}],"commitId":"e667bf6eaaa2fb1ba2987c6538df81f88500d030","commitMessage":"@@@Merge pull request #7344 from haberman/sync-integrate\n\nIntegrate from Piper @304070343 for C++.  Java.  and Python","date":"2020-04-02 00:42:57","modifiedFileCount":"28","status":"M","submitter":"Joshua Haberman"}]
