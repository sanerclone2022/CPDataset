[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testSerializeAndParse() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    \r\n    \r\n    builder.setOneofInt32(0);\n    ByteString data = builder.build().toByteString();\n\n    TestAllTypes message = TestAllTypes.parseFrom(data);\n    assertEquals(1234, message.getOptionalInt32());\n    assertEquals(\"hello\", message.getOptionalString());\n    \r\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    assertEquals(TestAllTypes.NestedEnum.FOO, message.getOptionalNestedEnum());\n    \r\n    assertTrue(message.hasOptionalNestedMessage());\n    assertEquals(0, message.getOptionalNestedMessage().getValue());\n    \r\n    assertEquals(\n        TestAllTypes.OneofFieldCase.ONEOF_INT32, message.getOneofFieldCase());\n  }\n","date":"2016-01-14 03:22:18","endLine":282,"groupId":"1545","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializeAndParse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/ea/eec0b8aecc13073d05f89d9f587b0f21edc336.src","preCode":"  public void testSerializeAndParse() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    \r\n    \r\n    builder.setOneofInt32(0);\n    ByteString data = builder.build().toByteString();\n\n    TestAllTypes message = TestAllTypes.parseFrom(data);\n    assertEquals(1234, message.getOptionalInt32());\n    assertEquals(\"hello\", message.getOptionalString());\n    \r\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    assertEquals(TestAllTypes.NestedEnum.FOO, message.getOptionalNestedEnum());\n    \r\n    assertTrue(message.hasOptionalNestedMessage());\n    assertEquals(0, message.getOptionalNestedMessage().getValue());\n    \r\n    assertEquals(\n        TestAllTypes.OneofFieldCase.ONEOF_INT32, message.getOneofFieldCase());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FieldPresenceTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testRepeatedFields() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedString(\"world\");\n    builder.addRepeatedNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    ByteString data = builder.build().toByteString();\n\n    TestOptionalFieldsOnly optionalOnlyMessage = TestOptionalFieldsOnly.parseFrom(data);\n    assertEquals(1234, optionalOnlyMessage.getOptionalInt32());\n    assertEquals(\"hello\", optionalOnlyMessage.getOptionalString());\n    assertTrue(optionalOnlyMessage.hasOptionalNestedMessage());\n    assertEquals(0, optionalOnlyMessage.getOptionalNestedMessage().getValue());\n\n    TestRepeatedFieldsOnly repeatedOnlyMessage = TestRepeatedFieldsOnly.parseFrom(data);\n    assertEquals(1, repeatedOnlyMessage.getRepeatedInt32Count());\n    assertEquals(4321, repeatedOnlyMessage.getRepeatedInt32(0));\n    assertEquals(1, repeatedOnlyMessage.getRepeatedStringCount());\n    assertEquals(\"world\", repeatedOnlyMessage.getRepeatedString(0));\n    assertEquals(1, repeatedOnlyMessage.getRepeatedNestedMessageCount());\n    assertEquals(0, repeatedOnlyMessage.getRepeatedNestedMessage(0).getValue());\n  }\n","date":"2016-01-14 03:22:18","endLine":309,"groupId":"737","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepeatedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/ea/eec0b8aecc13073d05f89d9f587b0f21edc336.src","preCode":"  public void testRepeatedFields() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedString(\"world\");\n    builder.addRepeatedNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    ByteString data = builder.build().toByteString();\n\n    TestOptionalFieldsOnly optionalOnlyMessage = TestOptionalFieldsOnly.parseFrom(data);\n    assertEquals(1234, optionalOnlyMessage.getOptionalInt32());\n    assertEquals(\"hello\", optionalOnlyMessage.getOptionalString());\n    assertTrue(optionalOnlyMessage.hasOptionalNestedMessage());\n    assertEquals(0, optionalOnlyMessage.getOptionalNestedMessage().getValue());\n\n    TestRepeatedFieldsOnly repeatedOnlyMessage = TestRepeatedFieldsOnly.parseFrom(data);\n    assertEquals(1, repeatedOnlyMessage.getRepeatedInt32Count());\n    assertEquals(4321, repeatedOnlyMessage.getRepeatedInt32(0));\n    assertEquals(1, repeatedOnlyMessage.getRepeatedStringCount());\n    assertEquals(\"world\", repeatedOnlyMessage.getRepeatedString(0));\n    assertEquals(1, repeatedOnlyMessage.getRepeatedNestedMessageCount());\n    assertEquals(0, repeatedOnlyMessage.getRepeatedNestedMessage(0).getValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FieldPresenceTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testSerializeAndParse() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    \r\n    \r\n    builder.setOneofInt32(0);\n    ByteString data = builder.build().toByteString();\n\n    TestAllTypes message = TestAllTypes.parseFrom(data);\n    assertThat(message.getOptionalInt32()).isEqualTo(1234);\n    assertThat(message.getOptionalString()).isEqualTo(\"hello\");\n    \r\n    assertThat(message.getOptionalBytes()).isEqualTo(ByteString.EMPTY);\n    assertThat(message.getOptionalNestedEnum()).isEqualTo(TestAllTypes.NestedEnum.FOO);\n    \r\n    assertThat(message.hasOptionalNestedMessage()).isTrue();\n    assertThat(message.getOptionalNestedMessage().getValue()).isEqualTo(0);\n    \r\n    assertThat(message.getOneofFieldCase()).isEqualTo(TestAllTypes.OneofFieldCase.ONEOF_INT32);\n  }\n","date":"2021-08-10 06:55:00","endLine":442,"groupId":"1082","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSerializeAndParse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c4/830af392c2e56a6813114f184f7113711487a5.src","preCode":"  public void testSerializeAndParse() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    \r\n    \r\n    builder.setOneofInt32(0);\n    ByteString data = builder.build().toByteString();\n\n    TestAllTypes message = TestAllTypes.parseFrom(data);\n    assertEquals(1234, message.getOptionalInt32());\n    assertEquals(\"hello\", message.getOptionalString());\n    \r\n    assertEquals(ByteString.EMPTY, message.getOptionalBytes());\n    assertEquals(TestAllTypes.NestedEnum.FOO, message.getOptionalNestedEnum());\n    \r\n    assertTrue(message.hasOptionalNestedMessage());\n    assertEquals(0, message.getOptionalNestedMessage().getValue());\n    \r\n    assertEquals(TestAllTypes.OneofFieldCase.ONEOF_INT32, message.getOneofFieldCase());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FieldPresenceTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testRepeatedFields() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedString(\"world\");\n    builder.addRepeatedNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    ByteString data = builder.build().toByteString();\n\n    TestOptionalFieldsOnly optionalOnlyMessage = TestOptionalFieldsOnly.parseFrom(data);\n    assertThat(optionalOnlyMessage.getOptionalInt32()).isEqualTo(1234);\n    assertThat(optionalOnlyMessage.getOptionalString()).isEqualTo(\"hello\");\n    assertThat(optionalOnlyMessage.hasOptionalNestedMessage()).isTrue();\n    assertThat(optionalOnlyMessage.getOptionalNestedMessage().getValue()).isEqualTo(0);\n\n    TestRepeatedFieldsOnly repeatedOnlyMessage = TestRepeatedFieldsOnly.parseFrom(data);\n    assertThat(repeatedOnlyMessage.getRepeatedInt32Count()).isEqualTo(1);\n    assertThat(repeatedOnlyMessage.getRepeatedInt32(0)).isEqualTo(4321);\n    assertThat(repeatedOnlyMessage.getRepeatedStringCount()).isEqualTo(1);\n    assertThat(repeatedOnlyMessage.getRepeatedString(0)).isEqualTo(\"world\");\n    assertThat(repeatedOnlyMessage.getRepeatedNestedMessageCount()).isEqualTo(1);\n    assertThat(repeatedOnlyMessage.getRepeatedNestedMessage(0).getValue()).isEqualTo(0);\n  }\n","date":"2021-08-10 06:55:00","endLine":470,"groupId":"1082","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testRepeatedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c4/830af392c2e56a6813114f184f7113711487a5.src","preCode":"  public void testRepeatedFields() throws Exception {\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    builder.setOptionalInt32(1234);\n    builder.setOptionalString(\"hello\");\n    builder.setOptionalNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    builder.addRepeatedInt32(4321);\n    builder.addRepeatedString(\"world\");\n    builder.addRepeatedNestedMessage(TestAllTypes.NestedMessage.getDefaultInstance());\n    ByteString data = builder.build().toByteString();\n\n    TestOptionalFieldsOnly optionalOnlyMessage = TestOptionalFieldsOnly.parseFrom(data);\n    assertEquals(1234, optionalOnlyMessage.getOptionalInt32());\n    assertEquals(\"hello\", optionalOnlyMessage.getOptionalString());\n    assertTrue(optionalOnlyMessage.hasOptionalNestedMessage());\n    assertEquals(0, optionalOnlyMessage.getOptionalNestedMessage().getValue());\n\n    TestRepeatedFieldsOnly repeatedOnlyMessage = TestRepeatedFieldsOnly.parseFrom(data);\n    assertEquals(1, repeatedOnlyMessage.getRepeatedInt32Count());\n    assertEquals(4321, repeatedOnlyMessage.getRepeatedInt32(0));\n    assertEquals(1, repeatedOnlyMessage.getRepeatedStringCount());\n    assertEquals(\"world\", repeatedOnlyMessage.getRepeatedString(0));\n    assertEquals(1, repeatedOnlyMessage.getRepeatedNestedMessageCount());\n    assertEquals(0, repeatedOnlyMessage.getRepeatedNestedMessage(0).getValue());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/FieldPresenceTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
