[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testCopyFromList() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n    ByteString listString = ByteString.copyFrom(pieces);\n\n    assertTrue(\"Composite string must be equal to literal string\",\n        listString.equals(literalString));\n    assertEquals(\"Composite string must have same hashcode as literal string\",\n        literalString.hashCode(), listString.hashCode());\n  }\n","date":"2016-01-14 03:22:18","endLine":590,"groupId":"789","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyFromList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/f642515ce11b1551b0805851ceb2cf7b85b766.src","preCode":"  public void testCopyFromList() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n    ByteString listString = ByteString.copyFrom(pieces);\n\n    assertTrue(\"Composite string must be equal to literal string\",\n        listString.equals(literalString));\n    assertEquals(\"Composite string must have same hashcode as literal string\",\n        literalString.hashCode(), listString.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testConcat() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n\n    Iterator<ByteString> iter = pieces.iterator();\n    ByteString concatenatedString = iter.next();\n    while (iter.hasNext()) {\n      concatenatedString = concatenatedString.concat(iter.next());\n    }\n\n    assertTrue(\"Concatenated string must be equal to literal string\",\n        concatenatedString.equals(literalString));\n    assertEquals(\"Concatenated string must have same hashcode as literal string\",\n        literalString.hashCode(), concatenatedString.hashCode());\n  }\n","date":"2016-01-14 03:22:18","endLine":608,"groupId":"2036","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/f642515ce11b1551b0805851ceb2cf7b85b766.src","preCode":"  public void testConcat() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n\n    Iterator<ByteString> iter = pieces.iterator();\n    ByteString concatenatedString = iter.next();\n    while (iter.hasNext()) {\n      concatenatedString = concatenatedString.concat(iter.next());\n    }\n\n    assertTrue(\"Concatenated string must be equal to literal string\",\n        concatenatedString.equals(literalString));\n    assertEquals(\"Concatenated string must have same hashcode as literal string\",\n        literalString.hashCode(), concatenatedString.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2018-09-08 07:15:38","codes":[{"authorDate":"2018-09-08 07:15:38","commitOrder":2,"curCode":"  public void testCopyFromList() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n    ByteString listString = ByteString.copyFrom(pieces);\n\n    assertEquals(\"Composite string must be equal to literal string\", literalString, listString);\n    assertEquals(\n        \"Composite string must have same hashcode as literal string\",\n        literalString.hashCode(),\n        listString.hashCode());\n  }\n","date":"2018-09-08 07:15:38","endLine":684,"groupId":"235","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyFromList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/83/b343ada6062c134b6569f2f743f23f126ea54c.src","preCode":"  public void testCopyFromList() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n    ByteString listString = ByteString.copyFrom(pieces);\n\n    assertTrue(\"Composite string must be equal to literal string\",\n        listString.equals(literalString));\n    assertEquals(\"Composite string must have same hashcode as literal string\",\n        literalString.hashCode(), listString.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"M"},{"authorDate":"2018-09-08 07:15:38","commitOrder":2,"curCode":"  public void testConcat() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n\n    Iterator<ByteString> iter = pieces.iterator();\n    ByteString concatenatedString = iter.next();\n    while (iter.hasNext()) {\n      concatenatedString = concatenatedString.concat(iter.next());\n    }\n\n    assertEquals(\n        \"Concatenated string must be equal to literal string\", literalString, concatenatedString);\n    assertEquals(\n        \"Concatenated string must have same hashcode as literal string\",\n        literalString.hashCode(),\n        concatenatedString.hashCode());\n  }\n","date":"2018-09-08 07:15:38","endLine":704,"groupId":"2036","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/83/b343ada6062c134b6569f2f743f23f126ea54c.src","preCode":"  public void testConcat() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n\n    Iterator<ByteString> iter = pieces.iterator();\n    ByteString concatenatedString = iter.next();\n    while (iter.hasNext()) {\n      concatenatedString = concatenatedString.concat(iter.next());\n    }\n\n    assertTrue(\"Concatenated string must be equal to literal string\",\n        concatenatedString.equals(literalString));\n    assertEquals(\"Concatenated string must have same hashcode as literal string\",\n        literalString.hashCode(), concatenatedString.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"M"}],"commitId":"f9d8138376765d229a32635c9209061e4e4aed8c","commitMessage":"@@@Merge pull request #5109 from haberman/integrate\n\nDown-integrate from google3.","date":"2018-09-08 07:15:38","modifiedFileCount":"125","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testCopyFromList() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n    ByteString listString = ByteString.copyFrom(pieces);\n\n    assertWithMessage(\"Composite string must be equal to literal string\")\n        .that(literalString)\n        .isEqualTo(listString);\n    assertWithMessage(\"Composite string must have same hashcode as literal string\")\n        .that(literalString.hashCode())\n        .isEqualTo(listString.hashCode());\n  }\n","date":"2021-08-10 06:55:00","endLine":753,"groupId":"10566","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCopyFromList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/3f/97e3174ffe111ceaa228d2cf15b7893ac344b6.src","preCode":"  public void testCopyFromList() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n    ByteString listString = ByteString.copyFrom(pieces);\n\n    assertEquals(\"Composite string must be equal to literal string\", literalString, listString);\n    assertEquals(\n        \"Composite string must have same hashcode as literal string\",\n        literalString.hashCode(),\n        listString.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":740,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testConcat() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n\n    Iterator<ByteString> iter = pieces.iterator();\n    ByteString concatenatedString = iter.next();\n    while (iter.hasNext()) {\n      concatenatedString = concatenatedString.concat(iter.next());\n    }\n\n    assertWithMessage(\"Concatenated string must be equal to literal string\")\n        .that(literalString)\n        .isEqualTo(concatenatedString);\n    assertWithMessage(\"Concatenated string must have same hashcode as literal string\")\n        .that(literalString.hashCode())\n        .isEqualTo(concatenatedString.hashCode());\n  }\n","date":"2021-08-10 06:55:00","endLine":774,"groupId":"10566","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/3f/97e3174ffe111ceaa228d2cf15b7893ac344b6.src","preCode":"  public void testConcat() {\n    byte[] referenceBytes = getTestBytes(77748, 113344L);\n    ByteString literalString = ByteString.copyFrom(referenceBytes);\n\n    List<ByteString> pieces = makeConcretePieces(referenceBytes);\n\n    Iterator<ByteString> iter = pieces.iterator();\n    ByteString concatenatedString = iter.next();\n    while (iter.hasNext()) {\n      concatenatedString = concatenatedString.concat(iter.next());\n    }\n\n    assertEquals(\n        \"Concatenated string must be equal to literal string\", literalString, concatenatedString);\n    assertEquals(\n        \"Concatenated string must have same hashcode as literal string\",\n        literalString.hashCode(),\n        concatenatedString.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":756,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
