[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testGetFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor =\n        descriptor.findFieldByName(\"optional_nested_message\");\n    FieldDescriptor foreignFieldDescriptor =\n        descriptor.findFieldByName(\"optional_foreign_message\");\n    FieldDescriptor importFieldDescriptor =\n        descriptor.findFieldByName(\"optional_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 = builder1.newBuilderForField(fieldDescriptor)\n        .mergeFrom((Message) builder1.getField(fieldDescriptor));\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.setField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 = builder1.newBuilderForField(\n        foreignFieldDescriptor)\n        .mergeFrom((Message) builder1.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.setField(foreignFieldDescriptor, foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 = builder1.newBuilderForField(\n        importFieldDescriptor)\n        .mergeFrom((Message) builder1.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.setField(importFieldDescriptor, importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder2 = builder2.getFieldBuilder(fieldDescriptor);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n    builder2.setField(fieldDescriptor, fieldBuilder2.build());\n\n    \r\n    Message.Builder foreignFieldBuilder2 = builder2.newBuilderForField(\n        foreignFieldDescriptor)\n        .mergeFrom((Message) builder2.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.setField(foreignFieldDescriptor, foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 = builder2.newBuilderForField(\n        importFieldDescriptor)\n        .mergeFrom((Message) builder2.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.setField(importFieldDescriptor, importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertEquals(newMessage1, newMessage2);\n  }\n","date":"2016-01-14 03:22:18","endLine":1159,"groupId":"1810","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/70/812b953f57ff7335eb7c6e183eda8b414e8b44.src","preCode":"  public void testGetFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor =\n        descriptor.findFieldByName(\"optional_nested_message\");\n    FieldDescriptor foreignFieldDescriptor =\n        descriptor.findFieldByName(\"optional_foreign_message\");\n    FieldDescriptor importFieldDescriptor =\n        descriptor.findFieldByName(\"optional_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 = builder1.newBuilderForField(fieldDescriptor)\n        .mergeFrom((Message) builder1.getField(fieldDescriptor));\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.setField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 = builder1.newBuilderForField(\n        foreignFieldDescriptor)\n        .mergeFrom((Message) builder1.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.setField(foreignFieldDescriptor, foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 = builder1.newBuilderForField(\n        importFieldDescriptor)\n        .mergeFrom((Message) builder1.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.setField(importFieldDescriptor, importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder2 = builder2.getFieldBuilder(fieldDescriptor);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n    builder2.setField(fieldDescriptor, fieldBuilder2.build());\n\n    \r\n    Message.Builder foreignFieldBuilder2 = builder2.newBuilderForField(\n        foreignFieldDescriptor)\n        .mergeFrom((Message) builder2.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.setField(foreignFieldDescriptor, foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 = builder2.newBuilderForField(\n        importFieldDescriptor)\n        .mergeFrom((Message) builder2.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.setField(importFieldDescriptor, importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertEquals(newMessage1, newMessage2);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1088,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testGetRepeatedFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor =\n        descriptor.findFieldByName(\"repeated_nested_message\");\n    FieldDescriptor foreignFieldDescriptor =\n        descriptor.findFieldByName(\"repeated_foreign_message\");\n    FieldDescriptor importFieldDescriptor =\n        descriptor.findFieldByName(\"repeated_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 = builder1.newBuilderForField(\n        fieldDescriptor);\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.addRepeatedField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 = builder1.newBuilderForField(\n        foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.addRepeatedField(foreignFieldDescriptor,\n        foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 = builder1.newBuilderForField(\n        importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.addRepeatedField(importFieldDescriptor,\n        importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    builder2.addRepeatedNestedMessageBuilder();\n    Message.Builder fieldBuilder2 = builder2.getRepeatedFieldBuilder(\n        fieldDescriptor, 0);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n\n    \r\n    Message.Builder foreignFieldBuilder2 = builder2.newBuilderForField(\n        foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.addRepeatedField(foreignFieldDescriptor,\n        foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 = builder2.newBuilderForField(\n        importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.addRepeatedField(importFieldDescriptor,\n        importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertEquals(newMessage1, newMessage2);\n  }\n","date":"2016-01-14 03:22:18","endLine":1596,"groupId":"1810","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetRepeatedFieldBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/70/812b953f57ff7335eb7c6e183eda8b414e8b44.src","preCode":"  public void testGetRepeatedFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor =\n        descriptor.findFieldByName(\"repeated_nested_message\");\n    FieldDescriptor foreignFieldDescriptor =\n        descriptor.findFieldByName(\"repeated_foreign_message\");\n    FieldDescriptor importFieldDescriptor =\n        descriptor.findFieldByName(\"repeated_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 = builder1.newBuilderForField(\n        fieldDescriptor);\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.addRepeatedField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 = builder1.newBuilderForField(\n        foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.addRepeatedField(foreignFieldDescriptor,\n        foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 = builder1.newBuilderForField(\n        importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.addRepeatedField(importFieldDescriptor,\n        importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    builder2.addRepeatedNestedMessageBuilder();\n    Message.Builder fieldBuilder2 = builder2.getRepeatedFieldBuilder(\n        fieldDescriptor, 0);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n\n    \r\n    Message.Builder foreignFieldBuilder2 = builder2.newBuilderForField(\n        foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.addRepeatedField(foreignFieldDescriptor,\n        foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 = builder2.newBuilderForField(\n        importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.addRepeatedField(importFieldDescriptor,\n        importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertEquals(newMessage1, newMessage2);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1524,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testGetFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor = descriptor.findFieldByName(\"optional_nested_message\");\n    FieldDescriptor foreignFieldDescriptor = descriptor.findFieldByName(\"optional_foreign_message\");\n    FieldDescriptor importFieldDescriptor = descriptor.findFieldByName(\"optional_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 =\n        builder1\n            .newBuilderForField(fieldDescriptor)\n            .mergeFrom((Message) builder1.getField(fieldDescriptor));\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.setField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 =\n        builder1\n            .newBuilderForField(foreignFieldDescriptor)\n            .mergeFrom((Message) builder1.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.setField(foreignFieldDescriptor, foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 =\n        builder1\n            .newBuilderForField(importFieldDescriptor)\n            .mergeFrom((Message) builder1.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.setField(importFieldDescriptor, importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder2 = builder2.getFieldBuilder(fieldDescriptor);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n    builder2.setField(fieldDescriptor, fieldBuilder2.build());\n\n    \r\n    Message.Builder foreignFieldBuilder2 =\n        builder2\n            .newBuilderForField(foreignFieldDescriptor)\n            .mergeFrom((Message) builder2.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.setField(foreignFieldDescriptor, foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 =\n        builder2\n            .newBuilderForField(importFieldDescriptor)\n            .mergeFrom((Message) builder2.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.setField(importFieldDescriptor, importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertThat(newMessage1).isEqualTo(newMessage2);\n  }\n","date":"2021-08-10 06:55:00","endLine":1378,"groupId":"10501","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetFieldBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fb/ba612bd2a86e442aceac2543c138810d348cc0.src","preCode":"  public void testGetFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor = descriptor.findFieldByName(\"optional_nested_message\");\n    FieldDescriptor foreignFieldDescriptor = descriptor.findFieldByName(\"optional_foreign_message\");\n    FieldDescriptor importFieldDescriptor = descriptor.findFieldByName(\"optional_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 =\n        builder1\n            .newBuilderForField(fieldDescriptor)\n            .mergeFrom((Message) builder1.getField(fieldDescriptor));\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.setField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 =\n        builder1\n            .newBuilderForField(foreignFieldDescriptor)\n            .mergeFrom((Message) builder1.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.setField(foreignFieldDescriptor, foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 =\n        builder1\n            .newBuilderForField(importFieldDescriptor)\n            .mergeFrom((Message) builder1.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.setField(importFieldDescriptor, importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder2 = builder2.getFieldBuilder(fieldDescriptor);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n    builder2.setField(fieldDescriptor, fieldBuilder2.build());\n\n    \r\n    Message.Builder foreignFieldBuilder2 =\n        builder2\n            .newBuilderForField(foreignFieldDescriptor)\n            .mergeFrom((Message) builder2.getField(foreignFieldDescriptor));\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.setField(foreignFieldDescriptor, foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 =\n        builder2\n            .newBuilderForField(importFieldDescriptor)\n            .mergeFrom((Message) builder2.getField(importFieldDescriptor));\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.setField(importFieldDescriptor, importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertEquals(newMessage1, newMessage2);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1304,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testGetRepeatedFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor = descriptor.findFieldByName(\"repeated_nested_message\");\n    FieldDescriptor foreignFieldDescriptor = descriptor.findFieldByName(\"repeated_foreign_message\");\n    FieldDescriptor importFieldDescriptor = descriptor.findFieldByName(\"repeated_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 = builder1.newBuilderForField(fieldDescriptor);\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.addRepeatedField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 = builder1.newBuilderForField(foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.addRepeatedField(foreignFieldDescriptor, foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 = builder1.newBuilderForField(importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.addRepeatedField(importFieldDescriptor, importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    builder2.addRepeatedNestedMessageBuilder();\n    Message.Builder fieldBuilder2 = builder2.getRepeatedFieldBuilder(fieldDescriptor, 0);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n\n    \r\n    Message.Builder foreignFieldBuilder2 = builder2.newBuilderForField(foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.addRepeatedField(foreignFieldDescriptor, foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 = builder2.newBuilderForField(importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.addRepeatedField(importFieldDescriptor, importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertThat(newMessage1).isEqualTo(newMessage2);\n  }\n","date":"2021-08-10 06:55:00","endLine":1810,"groupId":"10501","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetRepeatedFieldBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fb/ba612bd2a86e442aceac2543c138810d348cc0.src","preCode":"  public void testGetRepeatedFieldBuilder() {\n    Descriptor descriptor = TestAllTypes.getDescriptor();\n\n    FieldDescriptor fieldDescriptor = descriptor.findFieldByName(\"repeated_nested_message\");\n    FieldDescriptor foreignFieldDescriptor = descriptor.findFieldByName(\"repeated_foreign_message\");\n    FieldDescriptor importFieldDescriptor = descriptor.findFieldByName(\"repeated_import_message\");\n\n    \r\n    \r\n    TestAllTypes.Builder builder1 = TestAllTypes.newBuilder();\n    Message.Builder fieldBuilder1 = builder1.newBuilderForField(fieldDescriptor);\n    FieldDescriptor subFieldDescriptor1 =\n        fieldBuilder1.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder1.setField(subFieldDescriptor1, 1);\n    builder1.addRepeatedField(fieldDescriptor, fieldBuilder1.build());\n\n    \r\n    Message.Builder foreignFieldBuilder1 = builder1.newBuilderForField(foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor1 =\n        foreignFieldBuilder1.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder1.setField(subForeignFieldDescriptor1, 2);\n    builder1.addRepeatedField(foreignFieldDescriptor, foreignFieldBuilder1.build());\n\n    \r\n    Message.Builder importFieldBuilder1 = builder1.newBuilderForField(importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor1 =\n        importFieldBuilder1.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder1.setField(subImportFieldDescriptor1, 3);\n    builder1.addRepeatedField(importFieldDescriptor, importFieldBuilder1.build());\n\n    Message newMessage1 = builder1.build();\n\n    \r\n    \r\n    TestAllTypes.Builder builder2 = TestAllTypes.newBuilder();\n    builder2.addRepeatedNestedMessageBuilder();\n    Message.Builder fieldBuilder2 = builder2.getRepeatedFieldBuilder(fieldDescriptor, 0);\n    FieldDescriptor subFieldDescriptor2 =\n        fieldBuilder2.getDescriptorForType().findFieldByName(\"bb\");\n    fieldBuilder2.setField(subFieldDescriptor2, 1);\n\n    \r\n    Message.Builder foreignFieldBuilder2 = builder2.newBuilderForField(foreignFieldDescriptor);\n    FieldDescriptor subForeignFieldDescriptor2 =\n        foreignFieldBuilder2.getDescriptorForType().findFieldByName(\"c\");\n    foreignFieldBuilder2.setField(subForeignFieldDescriptor2, 2);\n    builder2.addRepeatedField(foreignFieldDescriptor, foreignFieldBuilder2.build());\n\n    \r\n    Message.Builder importFieldBuilder2 = builder2.newBuilderForField(importFieldDescriptor);\n    FieldDescriptor subImportFieldDescriptor2 =\n        importFieldBuilder2.getDescriptorForType().findFieldByName(\"d\");\n    importFieldBuilder2.setField(subImportFieldDescriptor2, 3);\n    builder2.addRepeatedField(importFieldDescriptor, importFieldBuilder2.build());\n\n    Message newMessage2 = builder2.build();\n\n    \r\n    assertEquals(newMessage1, newMessage2);\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/GeneratedMessageTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1751,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
