[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testReplacingPut() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    for (int i = 0; i < 6; i++) {\n      assertNull(map.put(i, i + 1));\n      assertNull(map.remove(i + 1));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(new Integer(i + 1), map.put(i, i + 2));\n    }\n  }\n","date":"2016-01-14 03:22:18","endLine":155,"groupId":"1454","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplacingPut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/6086d30c9e7ee5a2473baa203ea23be7524be3.src","preCode":"  public void testReplacingPut() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    for (int i = 0; i < 6; i++) {\n      assertNull(map.put(i, i + 1));\n      assertNull(map.remove(i + 1));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(new Integer(i + 1), map.put(i, i + 2));\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/SmallSortedMapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testEntrySetAdd() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    Set<Map.Entry<Integer, Integer>> entrySet = map.entrySet();\n    for (int i = 0; i < 6; i++) {\n      Map.Entry<Integer, Integer> entry =\n          new SimpleEntry<Integer, Integer>(i, i + 1);\n      assertTrue(entrySet.add(entry));\n      assertFalse(entrySet.add(entry));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(new Integer(i + 1), map.get(i));\n    }\n    assertEquals(3, map.getNumArrayEntries());\n    assertEquals(3, map.getNumOverflowEntries());\n    assertEquals(6, map.size());\n  }\n","date":"2016-01-14 03:22:18","endLine":260,"groupId":"1458","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEntrySetAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/6086d30c9e7ee5a2473baa203ea23be7524be3.src","preCode":"  public void testEntrySetAdd() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    Set<Map.Entry<Integer, Integer>> entrySet = map.entrySet();\n    for (int i = 0; i < 6; i++) {\n      Map.Entry<Integer, Integer> entry =\n          new SimpleEntry<Integer, Integer>(i, i + 1);\n      assertTrue(entrySet.add(entry));\n      assertFalse(entrySet.add(entry));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(new Integer(i + 1), map.get(i));\n    }\n    assertEquals(3, map.getNumArrayEntries());\n    assertEquals(3, map.getNumOverflowEntries());\n    assertEquals(6, map.size());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/SmallSortedMapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2018-09-08 07:15:38","codes":[{"authorDate":"2018-09-08 07:15:38","commitOrder":2,"curCode":"  public void testReplacingPut() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    for (int i = 0; i < 6; i++) {\n      assertNull(map.put(i, i + 1));\n      assertNull(map.remove(i + 1));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(Integer.valueOf(i + 1), map.put(i, i + 2));\n    }\n  }\n","date":"2018-09-08 07:15:38","endLine":151,"groupId":"1454","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplacingPut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a1/a7194b433f95cea16e89c55066a05e0c1db983.src","preCode":"  public void testReplacingPut() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    for (int i = 0; i < 6; i++) {\n      assertNull(map.put(i, i + 1));\n      assertNull(map.remove(i + 1));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(new Integer(i + 1), map.put(i, i + 2));\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/SmallSortedMapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-09-08 07:15:38","commitOrder":2,"curCode":"  public void testEntrySetAdd() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    Set<Map.Entry<Integer, Integer>> entrySet = map.entrySet();\n    for (int i = 0; i < 6; i++) {\n      Map.Entry<Integer, Integer> entry = new SimpleEntry<Integer, Integer>(i, i + 1);\n      assertTrue(entrySet.add(entry));\n      assertFalse(entrySet.add(entry));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(Integer.valueOf(i + 1), map.get(i));\n    }\n    assertEquals(3, map.getNumArrayEntries());\n    assertEquals(3, map.getNumOverflowEntries());\n    assertEquals(6, map.size());\n  }\n","date":"2018-09-08 07:15:38","endLine":252,"groupId":"1458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEntrySetAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/a1/a7194b433f95cea16e89c55066a05e0c1db983.src","preCode":"  public void testEntrySetAdd() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    Set<Map.Entry<Integer, Integer>> entrySet = map.entrySet();\n    for (int i = 0; i < 6; i++) {\n      Map.Entry<Integer, Integer> entry =\n          new SimpleEntry<Integer, Integer>(i, i + 1);\n      assertTrue(entrySet.add(entry));\n      assertFalse(entrySet.add(entry));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(new Integer(i + 1), map.get(i));\n    }\n    assertEquals(3, map.getNumArrayEntries());\n    assertEquals(3, map.getNumOverflowEntries());\n    assertEquals(6, map.size());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/SmallSortedMapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"f9d8138376765d229a32635c9209061e4e4aed8c","commitMessage":"@@@Merge pull request #5109 from haberman/integrate\n\nDown-integrate from google3.","date":"2018-09-08 07:15:38","modifiedFileCount":"125","status":"M","submitter":"Joshua Haberman"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testReplacingPut() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    for (int i = 0; i < 6; i++) {\n      assertThat(map.put(i, i + 1)).isNull();\n      assertThat(map.remove(i + 1)).isNull();\n    }\n    for (int i = 0; i < 6; i++) {\n      assertThat(map.put(i, i + 2)).isEqualTo(Integer.valueOf(i + 1));\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":159,"groupId":"1086","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testReplacingPut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fd/eccc2f447e55dc6229fd80c902e0d464567646.src","preCode":"  public void testReplacingPut() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    for (int i = 0; i < 6; i++) {\n      assertNull(map.put(i, i + 1));\n      assertNull(map.remove(i + 1));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(Integer.valueOf(i + 1), map.put(i, i + 2));\n    }\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/SmallSortedMapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testEntrySetAdd() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    Set<Map.Entry<Integer, Integer>> entrySet = map.entrySet();\n    for (int i = 0; i < 6; i++) {\n      Map.Entry<Integer, Integer> entry = new SimpleEntry<>(i, i + 1);\n      assertThat(entrySet.add(entry)).isTrue();\n      assertThat(entrySet.add(entry)).isFalse();\n    }\n    for (int i = 0; i < 6; i++) {\n      assertThat(map).containsEntry(i, Integer.valueOf(i + 1));\n    }\n    assertThat(map.getNumArrayEntries()).isEqualTo(3);\n    assertThat(map.getNumOverflowEntries()).isEqualTo(3);\n    assertThat(map).hasSize(6);\n  }\n","date":"2021-08-10 06:55:00","endLine":265,"groupId":"1086","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testEntrySetAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fd/eccc2f447e55dc6229fd80c902e0d464567646.src","preCode":"  public void testEntrySetAdd() {\n    SmallSortedMap<Integer, Integer> map = SmallSortedMap.newInstanceForTest(3);\n    Set<Map.Entry<Integer, Integer>> entrySet = map.entrySet();\n    for (int i = 0; i < 6; i++) {\n      Map.Entry<Integer, Integer> entry = new SimpleEntry<Integer, Integer>(i, i + 1);\n      assertTrue(entrySet.add(entry));\n      assertFalse(entrySet.add(entry));\n    }\n    for (int i = 0; i < 6; i++) {\n      assertEquals(Integer.valueOf(i + 1), map.get(i));\n    }\n    assertEquals(3, map.getNumArrayEntries());\n    assertEquals(3, map.getNumOverflowEntries());\n    assertEquals(6, map.size());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/SmallSortedMapTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
