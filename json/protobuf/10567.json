[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testStartsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertTrue(string.startsWith(ByteString.EMPTY));\n    assertTrue(string.startsWith(string));\n    assertTrue(string.startsWith(prefix));\n    assertFalse(string.startsWith(suffix));\n    assertFalse(prefix.startsWith(suffix));\n    assertFalse(suffix.startsWith(prefix));\n    assertFalse(ByteString.EMPTY.startsWith(prefix));\n    assertTrue(ByteString.EMPTY.startsWith(ByteString.EMPTY));\n  }\n","date":"2016-01-14 03:22:18","endLine":679,"groupId":"1774","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStartsWith","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/f642515ce11b1551b0805851ceb2cf7b85b766.src","preCode":"  public void testStartsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertTrue(string.startsWith(ByteString.EMPTY));\n    assertTrue(string.startsWith(string));\n    assertTrue(string.startsWith(prefix));\n    assertFalse(string.startsWith(suffix));\n    assertFalse(prefix.startsWith(suffix));\n    assertFalse(suffix.startsWith(prefix));\n    assertFalse(ByteString.EMPTY.startsWith(prefix));\n    assertTrue(ByteString.EMPTY.startsWith(ByteString.EMPTY));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testEndsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertTrue(string.endsWith(ByteString.EMPTY));\n    assertTrue(string.endsWith(string));\n    assertTrue(string.endsWith(suffix));\n    assertFalse(string.endsWith(prefix));\n    assertFalse(suffix.endsWith(prefix));\n    assertFalse(prefix.endsWith(suffix));\n    assertFalse(ByteString.EMPTY.endsWith(suffix));\n    assertTrue(ByteString.EMPTY.endsWith(ByteString.EMPTY));\n  }\n","date":"2016-01-14 03:22:18","endLine":694,"groupId":"1774","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEndsWith","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/36/f642515ce11b1551b0805851ceb2cf7b85b766.src","preCode":"  public void testEndsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertTrue(string.endsWith(ByteString.EMPTY));\n    assertTrue(string.endsWith(string));\n    assertTrue(string.endsWith(suffix));\n    assertFalse(string.endsWith(prefix));\n    assertFalse(suffix.endsWith(prefix));\n    assertFalse(prefix.endsWith(suffix));\n    assertFalse(ByteString.EMPTY.endsWith(suffix));\n    assertTrue(ByteString.EMPTY.endsWith(ByteString.EMPTY));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testStartsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertThat(string.startsWith(ByteString.EMPTY)).isTrue();\n    assertThat(string.startsWith(string)).isTrue();\n    assertThat(string.startsWith(prefix)).isTrue();\n    assertThat(string.startsWith(suffix)).isFalse();\n    assertThat(prefix.startsWith(suffix)).isFalse();\n    assertThat(suffix.startsWith(prefix)).isFalse();\n    assertThat(ByteString.EMPTY.startsWith(prefix)).isFalse();\n    assertThat(ByteString.EMPTY.startsWith(ByteString.EMPTY)).isTrue();\n  }\n","date":"2021-08-10 06:55:00","endLine":852,"groupId":"10567","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testStartsWith","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/3f/97e3174ffe111ceaa228d2cf15b7893ac344b6.src","preCode":"  public void testStartsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertTrue(string.startsWith(ByteString.EMPTY));\n    assertTrue(string.startsWith(string));\n    assertTrue(string.startsWith(prefix));\n    assertFalse(string.startsWith(suffix));\n    assertFalse(prefix.startsWith(suffix));\n    assertFalse(suffix.startsWith(prefix));\n    assertFalse(ByteString.EMPTY.startsWith(prefix));\n    assertTrue(ByteString.EMPTY.startsWith(ByteString.EMPTY));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":839,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testEndsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertThat(string.endsWith(ByteString.EMPTY)).isTrue();\n    assertThat(string.endsWith(string)).isTrue();\n    assertThat(string.endsWith(suffix)).isTrue();\n    assertThat(string.endsWith(prefix)).isFalse();\n    assertThat(suffix.endsWith(prefix)).isFalse();\n    assertThat(prefix.endsWith(suffix)).isFalse();\n    assertThat(ByteString.EMPTY.endsWith(suffix)).isFalse();\n    assertThat(ByteString.EMPTY.endsWith(ByteString.EMPTY)).isTrue();\n  }\n","date":"2021-08-10 06:55:00","endLine":868,"groupId":"10567","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testEndsWith","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/3f/97e3174ffe111ceaa228d2cf15b7893ac344b6.src","preCode":"  public void testEndsWith() {\n    byte[] bytes = getTestBytes(1000, 1234L);\n    ByteString string = ByteString.copyFrom(bytes);\n    ByteString prefix = ByteString.copyFrom(bytes, 0, 500);\n    ByteString suffix = ByteString.copyFrom(bytes, 400, 600);\n    assertTrue(string.endsWith(ByteString.EMPTY));\n    assertTrue(string.endsWith(string));\n    assertTrue(string.endsWith(suffix));\n    assertFalse(string.endsWith(prefix));\n    assertFalse(suffix.endsWith(prefix));\n    assertFalse(prefix.endsWith(suffix));\n    assertFalse(ByteString.EMPTY.endsWith(suffix));\n    assertTrue(ByteString.EMPTY.endsWith(ByteString.EMPTY));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ByteStringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":855,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
