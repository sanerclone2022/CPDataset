[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2019-04-06 07:39:18","commitOrder":2,"curCode":"  public void testEquals() throws Exception {\n    \r\n    Foo foo1a = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo1b = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo2 = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo2\")).build();\n\n    \r\n    assertEquals(foo1a, foo1b);\n    assertEquals(foo1a.hashCode(), foo1b.hashCode());\n\n    \r\n    assertFalse(foo1a.equals(foo2));\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertFalse(bar.equals(barPrime));\n  }\n","date":"2019-04-06 07:39:18","endLine":2008,"groupId":"130","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/96/0b2037c1bad1f9bcd313819a2792728baa12b2.src","preCode":"  public void testEquals() throws Exception {\n    \r\n    Foo foo1a = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo1b = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo2 = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo2\")).build();\n\n    \r\n    assertEquals(foo1a, foo1b);\n    assertEquals(foo1a.hashCode(), foo1b.hashCode());\n\n    \r\n    assertFalse(foo1a.equals(foo2));\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertFalse(bar.equals(barPrime));\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":1990,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":2,"curCode":"  public void testEquals() throws Exception {\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    \r\n\n    \r\n    \r\n\n    \r\n    Foo foo1a = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo1b = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo2 = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo2\"))\n        .build();\n\n    \r\n    assertEquals(foo1a, foo1b);\n    assertEquals(foo1a.hashCode(), foo1b.hashCode());\n\n    \r\n    assertFalse(foo1a.equals(foo2));\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertFalse(bar.equals(barPrime));\n  }\n","date":"2016-01-14 03:22:18","endLine":84,"groupId":"130","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/03/5917c83d62f656223f264f65a9c9f929e01c66.src","preCode":"  public void testEquals() throws Exception {\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    \r\n\n    \r\n    \r\n\n    \r\n    Foo foo1a = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo1b = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo2 = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo2\"))\n        .build();\n\n    \r\n    assertEquals(foo1a, foo1b);\n    assertEquals(foo1a.hashCode(), foo1b.hashCode());\n\n    \r\n    assertFalse(foo1a.equals(foo2));\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertFalse(bar.equals(barPrime));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LiteEqualsAndHashTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"M","submitter":"Hao Nguyen"},{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testEquals() throws Exception {\n    \r\n    Foo foo1a = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo1b = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo2 = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo2\")).build();\n\n    \r\n    assertThat(foo1a).isEqualTo(foo1b);\n    assertThat(foo1a.hashCode()).isEqualTo(foo1b.hashCode());\n\n    \r\n    assertThat(foo1a.equals(foo2)).isFalse();\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertThat(bar).isNotEqualTo((Object) barPrime); \r\n  }\n","date":"2021-08-10 06:55:00","endLine":2263,"groupId":"1025","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testEquals() throws Exception {\n    \r\n    Foo foo1a = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo1b = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build();\n    Foo foo2 = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo2\")).build();\n\n    \r\n    assertEquals(foo1a, foo1b);\n    assertEquals(foo1a.hashCode(), foo1b.hashCode());\n\n    \r\n    assertFalse(foo1a.equals(foo2));\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertFalse(bar.equals(barPrime));\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2245,"status":"M"},{"authorDate":"2016-01-14 03:22:18","commitOrder":3,"curCode":"  public void testEquals() throws Exception {\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    \r\n\n    \r\n    \r\n\n    \r\n    Foo foo1a = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo1b = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo2 = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo2\"))\n        .build();\n\n    \r\n    assertEquals(foo1a, foo1b);\n    assertEquals(foo1a.hashCode(), foo1b.hashCode());\n\n    \r\n    assertFalse(foo1a.equals(foo2));\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertFalse(bar.equals(barPrime));\n  }\n","date":"2016-01-14 03:22:18","endLine":84,"groupId":"1025","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/03/5917c83d62f656223f264f65a9c9f929e01c66.src","preCode":"  public void testEquals() throws Exception {\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    \r\n\n    \r\n    \r\n\n    \r\n    Foo foo1a = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo1b = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo1\"))\n        .build();\n    Foo foo2 = Foo.newBuilder()\n        .setValue(1)\n        .addBar(Bar.newBuilder().setName(\"foo2\"))\n        .build();\n\n    \r\n    assertEquals(foo1a, foo1b);\n    assertEquals(foo1a.hashCode(), foo1b.hashCode());\n\n    \r\n    assertFalse(foo1a.equals(foo2));\n\n    \r\n    \r\n    Bar bar = Bar.newBuilder().setName(\"bar\").build();\n    BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build();\n    assertFalse(bar.equals(barPrime));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/LiteEqualsAndHashTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
