[{"authorTime":"2019-04-06 07:39:18","codes":[{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  public void testParseFromByteBufferThrows() {\n    try {\n      TestAllTypesLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}));\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllTypesLite message =\n        TestAllTypesLite.newBuilder().setOptionalInt32(123).addRepeatedString(\"hello\").build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllTypesLite.parseFrom(buffer);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertEquals(\n          TestAllTypesLite.newBuilder().setOptionalInt32(123).build(),\n          expected.getUnfinishedMessage());\n    }\n  }\n","date":"2019-04-06 07:39:18","endLine":2146,"groupId":"133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseFromByteBufferThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/96/0b2037c1bad1f9bcd313819a2792728baa12b2.src","preCode":"  public void testParseFromByteBufferThrows() {\n    try {\n      TestAllTypesLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}));\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllTypesLite message =\n        TestAllTypesLite.newBuilder().setOptionalInt32(123).addRepeatedString(\"hello\").build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllTypesLite.parseFrom(buffer);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertEquals(\n          TestAllTypesLite.newBuilder().setOptionalInt32(123).build(),\n          expected.getUnfinishedMessage());\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2127,"status":"B"},{"authorDate":"2019-04-06 07:39:18","commitOrder":1,"curCode":"  public void testParseFromByteBufferThrows_extensions() {\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    try {\n      TestAllExtensionsLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}), registry);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllExtensionsLite message =\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n            .addExtension(UnittestLite.repeatedStringExtensionLite, \"hello\")\n            .build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllExtensionsLite.parseFrom(buffer, registry);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertEquals(\n          TestAllExtensionsLite.newBuilder()\n              .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n              .build(),\n          expected.getUnfinishedMessage());\n    }\n  }\n","date":"2019-04-06 07:39:18","endLine":2195,"groupId":"1492","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseFromByteBufferThrows_extensions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/96/0b2037c1bad1f9bcd313819a2792728baa12b2.src","preCode":"  public void testParseFromByteBufferThrows_extensions() {\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    try {\n      TestAllExtensionsLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}), registry);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllExtensionsLite message =\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n            .addExtension(UnittestLite.repeatedStringExtensionLite, \"hello\")\n            .build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllExtensionsLite.parseFrom(buffer, registry);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertEquals(\n          TestAllExtensionsLite.newBuilder()\n              .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n              .build(),\n          expected.getUnfinishedMessage());\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2169,"status":"B"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"B","submitter":"Hao Nguyen"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testParseFromByteBufferThrows() {\n    try {\n      TestAllTypesLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}));\n      assertWithMessage(\"expected exception\").fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllTypesLite message =\n        TestAllTypesLite.newBuilder().setOptionalInt32(123).addRepeatedString(\"hello\").build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllTypesLite.parseFrom(buffer);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertThat(TestAllTypesLite.newBuilder().setOptionalInt32(123).build())\n          .isEqualTo(expected.getUnfinishedMessage());\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":2409,"groupId":"1035","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testParseFromByteBufferThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testParseFromByteBufferThrows() {\n    try {\n      TestAllTypesLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}));\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllTypesLite message =\n        TestAllTypesLite.newBuilder().setOptionalInt32(123).addRepeatedString(\"hello\").build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllTypesLite.parseFrom(buffer);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertEquals(\n          TestAllTypesLite.newBuilder().setOptionalInt32(123).build(),\n          expected.getUnfinishedMessage());\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2391,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testParseFromByteBufferThrows_extensions() {\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    try {\n      TestAllExtensionsLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}), registry);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllExtensionsLite message =\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n            .addExtension(UnittestLite.repeatedStringExtensionLite, \"hello\")\n            .build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllExtensionsLite.parseFrom(buffer, registry);\n      assertWithMessage(\"expected exception\").fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertThat(\n              TestAllExtensionsLite.newBuilder()\n                  .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n                  .build())\n          .isEqualTo(expected.getUnfinishedMessage());\n    }\n  }\n","date":"2021-08-10 06:55:00","endLine":2459,"groupId":"1035","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testParseFromByteBufferThrows_extensions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/7c/bc764fb7aef6ea7d25ee4b2281113abd2dd612.src","preCode":"  public void testParseFromByteBufferThrows_extensions() {\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    try {\n      TestAllExtensionsLite.parseFrom(ByteBuffer.wrap(new byte[] {0x5}), registry);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n    }\n\n    TestAllExtensionsLite message =\n        TestAllExtensionsLite.newBuilder()\n            .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n            .addExtension(UnittestLite.repeatedStringExtensionLite, \"hello\")\n            .build();\n\n    ByteBuffer buffer = ByteBuffer.wrap(message.toByteArray(), 0, message.getSerializedSize() - 1);\n    try {\n      TestAllExtensionsLite.parseFrom(buffer, registry);\n      fail();\n    } catch (InvalidProtocolBufferException expected) {\n      assertEquals(\n          TestAllExtensionsLite.newBuilder()\n              .setExtension(UnittestLite.optionalInt32ExtensionLite, 123)\n              .build(),\n          expected.getUnfinishedMessage());\n    }\n  }\n","realPath":"java/lite/src/test/java/com/google/protobuf/LiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":2433,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
