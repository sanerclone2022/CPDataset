[{"authorTime":"2016-01-14 03:22:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testToString() throws UnsupportedEncodingException {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertEquals(classUnderTest + \" from string must have the expected type\",\n        classUnderTest, getActualClassName(unicode));\n    String roundTripString = unicode.toString(UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString, roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertEquals(classUnderTest + \" string must equal the flat string\", flatString, unicode);\n    assertEquals(classUnderTest + \" string must must have same hashCode as the flat string\",\n        flatString.hashCode(), unicode.hashCode());\n  }\n","date":"2016-01-14 03:22:18","endLine":96,"groupId":"502","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/dc/56f2e9ac2ac53c269461af06b38fcfe6734223.src","preCode":"  public void testToString() throws UnsupportedEncodingException {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertEquals(classUnderTest + \" from string must have the expected type\",\n        classUnderTest, getActualClassName(unicode));\n    String roundTripString = unicode.toString(UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString, roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertEquals(classUnderTest + \" string must equal the flat string\", flatString, unicode);\n    assertEquals(classUnderTest + \" string must must have same hashCode as the flat string\",\n        flatString.hashCode(), unicode.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RopeByteStringSubstringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2016-01-14 03:22:18","commitOrder":1,"curCode":"  public void testCharsetToString() {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertEquals(classUnderTest + \" from string must have the expected type\",\n        classUnderTest, getActualClassName(unicode));\n    String roundTripString = unicode.toString(Internal.UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString, roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertEquals(classUnderTest + \" string must equal the flat string\", flatString, unicode);\n    assertEquals(classUnderTest + \" string must must have same hashCode as the flat string\",\n        flatString.hashCode(), unicode.hashCode());\n  }\n","date":"2016-01-14 03:22:18","endLine":126,"groupId":"502","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCharsetToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/dc/56f2e9ac2ac53c269461af06b38fcfe6734223.src","preCode":"  public void testCharsetToString() {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertEquals(classUnderTest + \" from string must have the expected type\",\n        classUnderTest, getActualClassName(unicode));\n    String roundTripString = unicode.toString(Internal.UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\",\n        testString, roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertEquals(classUnderTest + \" string must equal the flat string\", flatString, unicode);\n    assertEquals(classUnderTest + \" string must must have same hashCode as the flat string\",\n        flatString.hashCode(), unicode.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RopeByteStringSubstringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"}],"commitId":"b6ef4015d7eccc6f63dab3dc46e76f9f9f2217ab","commitMessage":"@@@Merge pull request #1121 from nmittler/restructure\n\nRestructuring protobuf to multiple modules","date":"2016-01-14 03:22:18","modifiedFileCount":"0","status":"B","submitter":"Feng Xiao"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testToString() throws UnsupportedEncodingException {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertWithMessage(\"%s from string must have the expected type\", classUnderTest)\n        .that(classUnderTest)\n        .isEqualTo(getActualClassName(unicode));\n    String roundTripString = unicode.toString(UTF_8);\n    assertWithMessage(\"%s unicode bytes must match\", classUnderTest)\n        .that(testString)\n        .isEqualTo(roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertWithMessage(\"%s string must equal the flat string\", classUnderTest)\n        .that(flatString)\n        .isEqualTo(unicode);\n    assertWithMessage(\"%s string must must have same hashCode as the flat string\", classUnderTest)\n        .that(flatString.hashCode())\n        .isEqualTo(unicode.hashCode());\n  }\n","date":"2021-08-10 06:55:00","endLine":110,"groupId":"10101","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/0b/fc0beaa3551544d2b04f071e4e504a20b6cb6f.src","preCode":"  public void testToString() throws UnsupportedEncodingException {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertEquals(\n        classUnderTest + \" from string must have the expected type\",\n        classUnderTest,\n        getActualClassName(unicode));\n    String roundTripString = unicode.toString(UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\", testString, roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertEquals(classUnderTest + \" string must equal the flat string\", flatString, unicode);\n    assertEquals(\n        classUnderTest + \" string must must have same hashCode as the flat string\",\n        flatString.hashCode(),\n        unicode.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RopeByteStringSubstringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testCharsetToString() {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertWithMessage(\"%s from string must have the expected type\", classUnderTest)\n        .that(classUnderTest)\n        .isEqualTo(getActualClassName(unicode));\n    String roundTripString = unicode.toString(Internal.UTF_8);\n    assertWithMessage(\"%s unicode bytes must match\", classUnderTest)\n        .that(testString)\n        .isEqualTo(roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertWithMessage(\"%s string must equal the flat string\", classUnderTest)\n        .that(flatString)\n        .isEqualTo(unicode);\n    assertWithMessage(\"%s string must must have same hashCode as the flat string\", classUnderTest)\n        .that(flatString.hashCode())\n        .isEqualTo(unicode.hashCode());\n  }\n","date":"2021-08-10 06:55:00","endLine":146,"groupId":"10101","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testCharsetToString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/0b/fc0beaa3551544d2b04f071e4e504a20b6cb6f.src","preCode":"  public void testCharsetToString() {\n    String sourceString = \"I love unicode \\u1234\\u5678 characters\";\n    ByteString sourceByteString = ByteString.copyFromUtf8(sourceString);\n    int copies = 250;\n\n    \r\n    StringBuilder builder = new StringBuilder(copies * sourceString.length());\n    ByteString unicode = ByteString.EMPTY;\n    for (int i = 0; i < copies; ++i) {\n      builder.append(sourceString);\n      unicode = RopeByteString.concatenate(unicode, sourceByteString);\n    }\n    String testString = builder.toString();\n\n    \r\n    testString = testString.substring(2, testString.length() - 6);\n    unicode = unicode.substring(2, unicode.size() - 6);\n\n    assertEquals(\n        classUnderTest + \" from string must have the expected type\",\n        classUnderTest,\n        getActualClassName(unicode));\n    String roundTripString = unicode.toString(Internal.UTF_8);\n    assertEquals(classUnderTest + \" unicode bytes must match\", testString, roundTripString);\n    ByteString flatString = ByteString.copyFromUtf8(testString);\n    assertEquals(classUnderTest + \" string must equal the flat string\", flatString, unicode);\n    assertEquals(\n        classUnderTest + \" string must must have same hashCode as the flat string\",\n        flatString.hashCode(),\n        unicode.hashCode());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RopeByteStringSubstringTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
