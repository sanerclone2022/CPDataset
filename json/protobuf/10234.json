[{"authorTime":"2019-04-06 07:39:18","codes":[{"authorDate":"2016-01-14 03:22:18","commitOrder":2,"curCode":"  public void testParsingMerge() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypes msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypes msg3 = builder.setOptionalInt32(3)\n        .setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder()\n        .setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder()\n        .setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder()\n        .setField1(msg3).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder()\n        .setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder()\n        .setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder()\n        .setField1(msg3).build();\n\n    \r\n    ByteString data = TestParsingMerge.RepeatedFieldsGenerator.newBuilder()\n        .addField1(msg1).addField1(msg2).addField1(msg3)\n        .addField2(msg1).addField2(msg2).addField2(msg3)\n        .addField3(msg1).addField3(msg2).addField3(msg3)\n        .addGroup1(optionalG1).addGroup1(optionalG2).addGroup1(optionalG3)\n        .addGroup2(repeatedG1).addGroup2(repeatedG2).addGroup2(repeatedG3)\n        .addExt1(msg1).addExt1(msg2).addExt1(msg3)\n        .addExt2(msg1).addExt2(msg2).addExt2(msg3)\n        .build().toByteString();\n\n    \r\n    ExtensionRegistry registry = ExtensionRegistry.newInstance();\n    UnittestProto.registerAllExtensions(registry);\n    TestParsingMerge parsingMerge = TestParsingMerge.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(\n        parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(\n        TestParsingMerge.optionalExt));\n\n    \r\n    assertEquals(3, parsingMerge.getRepeatedAllTypesCount());\n    assertEquals(3, parsingMerge.getRepeatedGroupCount());\n    assertEquals(3, parsingMerge.getExtensionCount(\n        TestParsingMerge.repeatedExt));\n  }\n","date":"2016-01-14 03:22:18","endLine":314,"groupId":"728","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParsingMerge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/5a/92bacfbf53533b2aa3317f2d2bee06491b6065.src","preCode":"  public void testParsingMerge() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypes msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypes msg3 = builder.setOptionalInt32(3)\n        .setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder()\n        .setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder()\n        .setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder()\n        .setField1(msg3).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder()\n        .setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder()\n        .setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder()\n        .setField1(msg3).build();\n\n    \r\n    ByteString data = TestParsingMerge.RepeatedFieldsGenerator.newBuilder()\n        .addField1(msg1).addField1(msg2).addField1(msg3)\n        .addField2(msg1).addField2(msg2).addField2(msg3)\n        .addField3(msg1).addField3(msg2).addField3(msg3)\n        .addGroup1(optionalG1).addGroup1(optionalG2).addGroup1(optionalG3)\n        .addGroup2(repeatedG1).addGroup2(repeatedG2).addGroup2(repeatedG3)\n        .addExt1(msg1).addExt1(msg2).addExt1(msg3)\n        .addExt2(msg1).addExt2(msg2).addExt2(msg3)\n        .build().toByteString();\n\n    \r\n    ExtensionRegistry registry = ExtensionRegistry.newInstance();\n    UnittestProto.registerAllExtensions(registry);\n    TestParsingMerge parsingMerge = TestParsingMerge.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(\n        parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(\n        TestParsingMerge.optionalExt));\n\n    \r\n    assertEquals(3, parsingMerge.getRepeatedAllTypesCount());\n    assertEquals(3, parsingMerge.getRepeatedGroupCount());\n    assertEquals(3, parsingMerge.getExtensionCount(\n        TestParsingMerge.repeatedExt));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ParserTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"NB"},{"authorDate":"2019-04-06 07:39:18","commitOrder":2,"curCode":"  public void testParsingMergeLite() throws Exception {\n    \r\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypesLite msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypesLite msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build();\n\n    \r\n    ByteString data =\n        TestParsingMergeLite.RepeatedFieldsGenerator.newBuilder()\n            .addField1(msg1)\n            .addField1(msg2)\n            .addField1(msg3)\n            .addField2(msg1)\n            .addField2(msg2)\n            .addField2(msg3)\n            .addField3(msg1)\n            .addField3(msg2)\n            .addField3(msg3)\n            .addGroup1(optionalG1)\n            .addGroup1(optionalG2)\n            .addGroup1(optionalG3)\n            .addGroup2(repeatedG1)\n            .addGroup2(repeatedG2)\n            .addGroup2(repeatedG3)\n            .addExt1(msg1)\n            .addExt1(msg2)\n            .addExt1(msg3)\n            .addExt2(msg1)\n            .addExt2(msg2)\n            .addExt2(msg3)\n            .build()\n            .toByteString();\n\n    \r\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    TestParsingMergeLite parsingMerge = TestParsingMergeLite.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(TestParsingMergeLite.optionalExt));\n\n    \r\n    assertEquals(3, parsingMerge.getRepeatedAllTypesCount());\n    assertEquals(3, parsingMerge.getRepeatedGroupCount());\n    assertEquals(3, parsingMerge.getExtensionCount(TestParsingMergeLite.repeatedExt));\n  }\n","date":"2019-04-06 07:39:18","endLine":190,"groupId":"1327","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParsingMergeLite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/eb/2dc3dd24b04f2820294a179edab613f8733436.src","preCode":"  public void testParsingMergeLite() throws Exception {\n    \r\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypesLite msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypesLite msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build();\n\n    \r\n    ByteString data =\n        TestParsingMergeLite.RepeatedFieldsGenerator.newBuilder()\n            .addField1(msg1)\n            .addField1(msg2)\n            .addField1(msg3)\n            .addField2(msg1)\n            .addField2(msg2)\n            .addField2(msg3)\n            .addField3(msg1)\n            .addField3(msg2)\n            .addField3(msg3)\n            .addGroup1(optionalG1)\n            .addGroup1(optionalG2)\n            .addGroup1(optionalG3)\n            .addGroup2(repeatedG1)\n            .addGroup2(repeatedG2)\n            .addGroup2(repeatedG3)\n            .addExt1(msg1)\n            .addExt1(msg2)\n            .addExt1(msg3)\n            .addExt2(msg1)\n            .addExt2(msg2)\n            .addExt2(msg3)\n            .build()\n            .toByteString();\n\n    \r\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    TestParsingMergeLite parsingMerge = TestParsingMergeLite.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(TestParsingMergeLite.optionalExt));\n\n    \r\n    assertEquals(3, parsingMerge.getRepeatedAllTypesCount());\n    assertEquals(3, parsingMerge.getRepeatedGroupCount());\n    assertEquals(3, parsingMerge.getExtensionCount(TestParsingMergeLite.repeatedExt));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ParserLiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"}],"commitId":"a48a574f7e890436363ca8ac71d866252b216052","commitMessage":"@@@Down integrate to Github\n","date":"2019-04-06 07:39:18","modifiedFileCount":"20","status":"M","submitter":"Hao Nguyen"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testParsingMerge() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypes msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypes msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build();\n\n    \r\n    ByteString data =\n        TestParsingMerge.RepeatedFieldsGenerator.newBuilder()\n            .addField1(msg1)\n            .addField1(msg2)\n            .addField1(msg3)\n            .addField2(msg1)\n            .addField2(msg2)\n            .addField2(msg3)\n            .addField3(msg1)\n            .addField3(msg2)\n            .addField3(msg3)\n            .addGroup1(optionalG1)\n            .addGroup1(optionalG2)\n            .addGroup1(optionalG3)\n            .addGroup2(repeatedG1)\n            .addGroup2(repeatedG2)\n            .addGroup2(repeatedG3)\n            .addExt1(msg1)\n            .addExt1(msg2)\n            .addExt1(msg3)\n            .addExt2(msg1)\n            .addExt2(msg2)\n            .addExt2(msg3)\n            .build()\n            .toByteString();\n\n    \r\n    ExtensionRegistry registry = ExtensionRegistry.newInstance();\n    UnittestProto.registerAllExtensions(registry);\n    TestParsingMerge parsingMerge = TestParsingMerge.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(TestParsingMerge.optionalExt));\n\n    \r\n    assertThat(parsingMerge.getRepeatedAllTypesCount()).isEqualTo(3);\n    assertThat(parsingMerge.getRepeatedGroupCount()).isEqualTo(3);\n    assertThat(parsingMerge.getExtensionCount(TestParsingMerge.repeatedExt)).isEqualTo(3);\n  }\n","date":"2021-08-10 06:55:00","endLine":292,"groupId":"10234","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testParsingMerge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/e7/8c671c0ee718612bd4af8a6c809049de0c5aeb.src","preCode":"  public void testParsingMerge() throws Exception {\n    \r\n    TestAllTypes.Builder builder = TestAllTypes.newBuilder();\n    TestAllTypes msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypes msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypes msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build();\n    TestParsingMerge.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMerge.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build();\n\n    \r\n    ByteString data =\n        TestParsingMerge.RepeatedFieldsGenerator.newBuilder()\n            .addField1(msg1)\n            .addField1(msg2)\n            .addField1(msg3)\n            .addField2(msg1)\n            .addField2(msg2)\n            .addField2(msg3)\n            .addField3(msg1)\n            .addField3(msg2)\n            .addField3(msg3)\n            .addGroup1(optionalG1)\n            .addGroup1(optionalG2)\n            .addGroup1(optionalG3)\n            .addGroup2(repeatedG1)\n            .addGroup2(repeatedG2)\n            .addGroup2(repeatedG3)\n            .addExt1(msg1)\n            .addExt1(msg2)\n            .addExt1(msg3)\n            .addExt2(msg1)\n            .addExt2(msg2)\n            .addExt2(msg3)\n            .build()\n            .toByteString();\n\n    \r\n    ExtensionRegistry registry = ExtensionRegistry.newInstance();\n    UnittestProto.registerAllExtensions(registry);\n    TestParsingMerge parsingMerge = TestParsingMerge.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(TestParsingMerge.optionalExt));\n\n    \r\n    assertEquals(3, parsingMerge.getRepeatedAllTypesCount());\n    assertEquals(3, parsingMerge.getRepeatedGroupCount());\n    assertEquals(3, parsingMerge.getExtensionCount(TestParsingMerge.repeatedExt));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ParserTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"  public void testParsingMergeLite() throws Exception {\n    \r\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypesLite msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypesLite msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build();\n\n    \r\n    ByteString data =\n        TestParsingMergeLite.RepeatedFieldsGenerator.newBuilder()\n            .addField1(msg1)\n            .addField1(msg2)\n            .addField1(msg3)\n            .addField2(msg1)\n            .addField2(msg2)\n            .addField2(msg3)\n            .addField3(msg1)\n            .addField3(msg2)\n            .addField3(msg3)\n            .addGroup1(optionalG1)\n            .addGroup1(optionalG2)\n            .addGroup1(optionalG3)\n            .addGroup2(repeatedG1)\n            .addGroup2(repeatedG2)\n            .addGroup2(repeatedG3)\n            .addExt1(msg1)\n            .addExt1(msg2)\n            .addExt1(msg3)\n            .addExt2(msg1)\n            .addExt2(msg2)\n            .addExt2(msg3)\n            .build()\n            .toByteString();\n\n    \r\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    TestParsingMergeLite parsingMerge = TestParsingMergeLite.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(TestParsingMergeLite.optionalExt));\n\n    \r\n    assertThat(parsingMerge.getRepeatedAllTypesCount()).isEqualTo(3);\n    assertThat(parsingMerge.getRepeatedGroupCount()).isEqualTo(3);\n    assertThat(parsingMerge.getExtensionCount(TestParsingMergeLite.repeatedExt)).isEqualTo(3);\n  }\n","date":"2021-08-10 06:55:00","endLine":202,"groupId":"10234","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testParsingMergeLite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/fd/0bf45a93739fd6e33929e0f14d37f7f0ec6ffb.src","preCode":"  public void testParsingMergeLite() throws Exception {\n    \r\n    TestAllTypesLite.Builder builder = TestAllTypesLite.newBuilder();\n    TestAllTypesLite msg1 = builder.setOptionalInt32(1).build();\n    builder.clear();\n    TestAllTypesLite msg2 = builder.setOptionalInt64(2).build();\n    builder.clear();\n    TestAllTypesLite msg3 = builder.setOptionalInt32(3).setOptionalString(\"hello\").build();\n\n    \r\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group1 optionalG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group1.newBuilder().setField1(msg3).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG1 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg1).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG2 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg2).build();\n    TestParsingMergeLite.RepeatedFieldsGenerator.Group2 repeatedG3 =\n        TestParsingMergeLite.RepeatedFieldsGenerator.Group2.newBuilder().setField1(msg3).build();\n\n    \r\n    ByteString data =\n        TestParsingMergeLite.RepeatedFieldsGenerator.newBuilder()\n            .addField1(msg1)\n            .addField1(msg2)\n            .addField1(msg3)\n            .addField2(msg1)\n            .addField2(msg2)\n            .addField2(msg3)\n            .addField3(msg1)\n            .addField3(msg2)\n            .addField3(msg3)\n            .addGroup1(optionalG1)\n            .addGroup1(optionalG2)\n            .addGroup1(optionalG3)\n            .addGroup2(repeatedG1)\n            .addGroup2(repeatedG2)\n            .addGroup2(repeatedG3)\n            .addExt1(msg1)\n            .addExt1(msg2)\n            .addExt1(msg3)\n            .addExt2(msg1)\n            .addExt2(msg2)\n            .addExt2(msg3)\n            .build()\n            .toByteString();\n\n    \r\n    ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n    UnittestLite.registerAllExtensions(registry);\n    TestParsingMergeLite parsingMerge = TestParsingMergeLite.parser().parseFrom(data, registry);\n\n    \r\n    assertMessageMerged(parsingMerge.getRequiredAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalAllTypes());\n    assertMessageMerged(parsingMerge.getOptionalGroup().getOptionalGroupAllTypes());\n    assertMessageMerged(parsingMerge.getExtension(TestParsingMergeLite.optionalExt));\n\n    \r\n    assertEquals(3, parsingMerge.getRepeatedAllTypesCount());\n    assertEquals(3, parsingMerge.getRepeatedGroupCount());\n    assertEquals(3, parsingMerge.getExtensionCount(TestParsingMergeLite.repeatedExt));\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/ParserLiteTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
