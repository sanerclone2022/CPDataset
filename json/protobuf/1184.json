[{"authorTime":"2016-06-30 06:23:27","codes":[{"authorDate":"2016-06-30 06:23:27","commitOrder":1,"curCode":"    public void testAdd() {\n      ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry1);\n      registry1.add(NonNestedExtensionLite.nonNestedExtensionLite);\n\n      ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance();\n      NonNestedExtension.registerAllExtensions((ExtensionRegistry) registry2);\n      registry2.add(NonNestedExtension.nonNestedExtension);\n\n      ExtensionRegistry fullRegistry1 = (ExtensionRegistry) registry1;\n      ExtensionRegistry fullRegistry2 = (ExtensionRegistry) registry2;\n\n      assertTrue(\"Test is using a non-lite extension\",\n          GeneratedMessageLite.GeneratedExtension.class.isAssignableFrom(\n              NonNestedExtensionLite.nonNestedExtensionLite.getClass()));\n      assertNull(\"Extension is not registered in masqueraded full registry\",\n          fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n      extension = registry1.findLiteExtensionByNumber(\n          NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension registered in lite registry\", extension);\n\n      assertTrue(\"Test is using a non-lite extension\",\n          GeneratedMessage.GeneratedExtension.class.isAssignableFrom(\n          NonNestedExtension.nonNestedExtension.getClass()));\n      assertNotNull(\"Extension is registered in masqueraded full registry\",\n          fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n    }\n","date":"2016-06-30 06:38:03","endLine":127,"groupId":"1032","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c1/246782c11f8bab163240c293ce9c1bf2813e3c.src","preCode":"    public void testAdd() {\n      ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry1);\n      registry1.add(NonNestedExtensionLite.nonNestedExtensionLite);\n\n      ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance();\n      NonNestedExtension.registerAllExtensions((ExtensionRegistry) registry2);\n      registry2.add(NonNestedExtension.nonNestedExtension);\n\n      ExtensionRegistry fullRegistry1 = (ExtensionRegistry) registry1;\n      ExtensionRegistry fullRegistry2 = (ExtensionRegistry) registry2;\n\n      assertTrue(\"Test is using a non-lite extension\",\n          GeneratedMessageLite.GeneratedExtension.class.isAssignableFrom(\n              NonNestedExtensionLite.nonNestedExtensionLite.getClass()));\n      assertNull(\"Extension is not registered in masqueraded full registry\",\n          fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n      extension = registry1.findLiteExtensionByNumber(\n          NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension registered in lite registry\", extension);\n\n      assertTrue(\"Test is using a non-lite extension\",\n          GeneratedMessage.GeneratedExtension.class.isAssignableFrom(\n          NonNestedExtension.nonNestedExtension.getClass()));\n      assertNotNull(\"Extension is registered in masqueraded full registry\",\n          fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n    }\n","realPath":"java/core/src/test/java/com/google/protobuf/ExtensionRegistryFactoryTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2016-06-30 06:23:27","commitOrder":1,"curCode":"    public void testAdd() {\n      ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry);\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension = registry.findLiteExtensionByNumber(\n              NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension is registered in Lite registry\", extension);\n    }\n","date":"2016-06-30 06:38:03","endLine":164,"groupId":"1034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c1/246782c11f8bab163240c293ce9c1bf2813e3c.src","preCode":"    public void testAdd() {\n      ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry);\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension = registry.findLiteExtensionByNumber(\n              NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension is registered in Lite registry\", extension);\n    }\n","realPath":"java/core/src/test/java/com/google/protobuf/ExtensionRegistryFactoryTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"d64a2d9941c36a7bc2a7959ea10ab8363192ac14","commitMessage":"@@@Integrated internal changes from Google\n\nThis includes all internal changes from around May 20 to now.\n","date":"2016-06-30 06:38:03","modifiedFileCount":"44","status":"B","submitter":"Adam Cozzette"},{"authorTime":"2016-06-30 06:23:27","codes":[{"authorDate":"2019-05-04 08:03:32","commitOrder":2,"curCode":"    public void testAdd() {\n      ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry1);\n      registry1.add(NonNestedExtensionLite.nonNestedExtensionLite);\n\n      ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance();\n      NonNestedExtension.registerAllExtensions((ExtensionRegistry) registry2);\n      registry2.add(NonNestedExtension.nonNestedExtension);\n\n      ExtensionRegistry fullRegistry1 = (ExtensionRegistry) registry1;\n      ExtensionRegistry fullRegistry2 = (ExtensionRegistry) registry2;\n\n      assertTrue(\n          \"Test is using a non-lite extension\",\n          GeneratedMessageLite.GeneratedExtension.class.isAssignableFrom(\n              NonNestedExtensionLite.nonNestedExtensionLite.getClass()));\n      assertNull(\n          \"Extension is not registered in masqueraded full registry\",\n          fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension =\n              registry1.findLiteExtensionByNumber(\n                  NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension registered in lite registry\", extension);\n\n      assertTrue(\n          \"Test is using a non-lite extension\",\n          Extension.class.isAssignableFrom(NonNestedExtension.nonNestedExtension.getClass()));\n      assertNotNull(\n          \"Extension is registered in masqueraded full registry\",\n          fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n    }\n","date":"2019-05-04 08:03:32","endLine":130,"groupId":"1032","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c6/aed074feb3318e29b243be6c6d0e89735754ef.src","preCode":"    public void testAdd() {\n      ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry1);\n      registry1.add(NonNestedExtensionLite.nonNestedExtensionLite);\n\n      ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance();\n      NonNestedExtension.registerAllExtensions((ExtensionRegistry) registry2);\n      registry2.add(NonNestedExtension.nonNestedExtension);\n\n      ExtensionRegistry fullRegistry1 = (ExtensionRegistry) registry1;\n      ExtensionRegistry fullRegistry2 = (ExtensionRegistry) registry2;\n\n      assertTrue(\n          \"Test is using a non-lite extension\",\n          GeneratedMessageLite.GeneratedExtension.class.isAssignableFrom(\n              NonNestedExtensionLite.nonNestedExtensionLite.getClass()));\n      assertNull(\n          \"Extension is not registered in masqueraded full registry\",\n          fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension =\n              registry1.findLiteExtensionByNumber(\n                  NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension registered in lite registry\", extension);\n\n      assertTrue(\n          \"Test is using a non-lite extension\",\n          GeneratedMessage.GeneratedExtension.class.isAssignableFrom(\n              NonNestedExtension.nonNestedExtension.getClass()));\n      assertNotNull(\n          \"Extension is registered in masqueraded full registry\",\n          fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n    }\n","realPath":"java/core/src/test/java/com/google/protobuf/ExtensionRegistryFactoryTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2016-06-30 06:23:27","commitOrder":2,"curCode":"    public void testAdd() {\n      ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry);\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension = registry.findLiteExtensionByNumber(\n              NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension is registered in Lite registry\", extension);\n    }\n","date":"2016-06-30 06:38:03","endLine":164,"groupId":"1034","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/c1/246782c11f8bab163240c293ce9c1bf2813e3c.src","preCode":"    public void testAdd() {\n      ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry);\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension = registry.findLiteExtensionByNumber(\n              NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension is registered in Lite registry\", extension);\n    }\n","realPath":"java/core/src/test/java/com/google/protobuf/ExtensionRegistryFactoryTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"b06fd483aebfdbf804fbec15df3ebbe01e62138c","commitMessage":"@@@Merge pull request #6097 from haon4/201905031433\n\nDown integrate to GitHub","date":"2019-05-04 08:03:32","modifiedFileCount":"1","status":"M","submitter":"Hao Nguyen"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"    public void testAdd() {\n      ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry1);\n      registry1.add(NonNestedExtensionLite.nonNestedExtensionLite);\n\n      ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance();\n      NonNestedExtension.registerAllExtensions((ExtensionRegistry) registry2);\n      registry2.add(NonNestedExtension.nonNestedExtension);\n\n      ExtensionRegistry fullRegistry1 = (ExtensionRegistry) registry1;\n      ExtensionRegistry fullRegistry2 = (ExtensionRegistry) registry2;\n\n      assertWithMessage(\"Test is using a non-lite extension\")\n          .that(NonNestedExtensionLite.nonNestedExtensionLite.getClass())\n          .isInstanceOf(GeneratedMessageLite.GeneratedExtension.class);\n      assertWithMessage(\"Extension is not registered in masqueraded full registry\")\n          .that(fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"))\n          .isNull();\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension =\n              registry1.findLiteExtensionByNumber(\n                  NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertWithMessage(\"Extension registered in lite registry\").that(extension).isNotNull();\n\n      assertWithMessage(\"Test is using a non-lite extension\")\n          .that(Extension.class.isAssignableFrom(NonNestedExtension.nonNestedExtension.getClass()))\n          .isTrue();\n      assertWithMessage(\"Extension is registered in masqueraded full registry\")\n          .that(fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"))\n          .isNotNull();\n    }\n","date":"2021-08-10 06:55:00","endLine":138,"groupId":"1184","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/bc/84595d92e9476d783d5b4dfa2c747459fb35a7.src","preCode":"    public void testAdd() {\n      ExtensionRegistryLite registry1 = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry1);\n      registry1.add(NonNestedExtensionLite.nonNestedExtensionLite);\n\n      ExtensionRegistryLite registry2 = ExtensionRegistryLite.newInstance();\n      NonNestedExtension.registerAllExtensions((ExtensionRegistry) registry2);\n      registry2.add(NonNestedExtension.nonNestedExtension);\n\n      ExtensionRegistry fullRegistry1 = (ExtensionRegistry) registry1;\n      ExtensionRegistry fullRegistry2 = (ExtensionRegistry) registry2;\n\n      assertTrue(\n          \"Test is using a non-lite extension\",\n          GeneratedMessageLite.GeneratedExtension.class.isAssignableFrom(\n              NonNestedExtensionLite.nonNestedExtensionLite.getClass()));\n      assertNull(\n          \"Extension is not registered in masqueraded full registry\",\n          fullRegistry1.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension =\n              registry1.findLiteExtensionByNumber(\n                  NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension registered in lite registry\", extension);\n\n      assertTrue(\n          \"Test is using a non-lite extension\",\n          Extension.class.isAssignableFrom(NonNestedExtension.nonNestedExtension.getClass()));\n      assertNotNull(\n          \"Extension is registered in masqueraded full registry\",\n          fullRegistry2.findImmutableExtensionByName(\"protobuf_unittest.nonNestedExtension\"));\n    }\n","realPath":"java/core/src/test/java/com/google/protobuf/ExtensionRegistryFactoryTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":3,"curCode":"    public void testAdd() {\n      ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry);\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension =\n              registry.findLiteExtensionByNumber(\n                  NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertWithMessage(\"Extension is registered in Lite registry\").that(extension).isNotNull();\n    }\n","date":"2021-08-10 06:55:00","endLine":201,"groupId":"1184","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/bc/84595d92e9476d783d5b4dfa2c747459fb35a7.src","preCode":"    public void testAdd() {\n      ExtensionRegistryLite registry = ExtensionRegistryLite.newInstance();\n      NonNestedExtensionLite.registerAllExtensions(registry);\n      GeneratedMessageLite.GeneratedExtension<NonNestedExtensionLite.MessageLiteToBeExtended, ?>\n          extension =\n              registry.findLiteExtensionByNumber(\n                  NonNestedExtensionLite.MessageLiteToBeExtended.getDefaultInstance(), 1);\n      assertNotNull(\"Extension is registered in Lite registry\", extension);\n    }\n","realPath":"java/core/src/test/java/com/google/protobuf/ExtensionRegistryFactoryTest.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
