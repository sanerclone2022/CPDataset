[{"authorTime":"2016-06-30 06:23:27","codes":[{"authorDate":"2016-06-30 06:23:27","commitOrder":1,"curCode":"  public void testBasicUse() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder,\n        TestAllTypesOrBuilder> builder = newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertEquals(0, builder.getMessage(0).getOptionalInt32());\n    assertEquals(1, builder.getMessage(1).getOptionalInt32());\n\n    List<TestAllTypes> list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n\n    \r\n    List<TestAllTypes> list2 = builder.build();\n    assertSame(list, list2);\n    assertEquals(0, mockParent.getInvalidationCount());\n  }\n","date":"2016-06-30 06:38:03","endLine":69,"groupId":"2186","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicUse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/24/1a4354f95dbdd4a8aad961e2bf52bd8bccf370.src","preCode":"  public void testBasicUse() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder,\n        TestAllTypesOrBuilder> builder = newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertEquals(0, builder.getMessage(0).getOptionalInt32());\n    assertEquals(1, builder.getMessage(1).getOptionalInt32());\n\n    List<TestAllTypes> list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n\n    \r\n    List<TestAllTypes> list2 = builder.build();\n    assertSame(list, list2);\n    assertEquals(0, mockParent.getInvalidationCount());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RepeatedFieldBuilderV3Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2016-06-30 06:23:27","commitOrder":1,"curCode":"  public void testGoingBackAndForth() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder,\n        TestAllTypesOrBuilder> builder = newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertEquals(0, builder.getMessage(0).getOptionalInt32());\n    assertEquals(1, builder.getMessage(1).getOptionalInt32());\n\n    \r\n    List<TestAllTypes> list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n\n    \r\n    assertEquals(0, mockParent.getInvalidationCount());\n    builder.getBuilder(0).setOptionalString(\"foo\");\n    assertEquals(1, mockParent.getInvalidationCount());\n    list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n      assertEquals(\"foo\", list.get(0).getOptionalString());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n    assertEquals(1, mockParent.getInvalidationCount());\n  }\n","date":"2016-06-30 06:38:03","endLine":98,"groupId":"2186","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGoingBackAndForth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/24/1a4354f95dbdd4a8aad961e2bf52bd8bccf370.src","preCode":"  public void testGoingBackAndForth() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder,\n        TestAllTypesOrBuilder> builder = newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertEquals(0, builder.getMessage(0).getOptionalInt32());\n    assertEquals(1, builder.getMessage(1).getOptionalInt32());\n\n    \r\n    List<TestAllTypes> list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n\n    \r\n    assertEquals(0, mockParent.getInvalidationCount());\n    builder.getBuilder(0).setOptionalString(\"foo\");\n    assertEquals(1, mockParent.getInvalidationCount());\n    list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n      assertEquals(\"foo\", list.get(0).getOptionalString());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n    assertEquals(1, mockParent.getInvalidationCount());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RepeatedFieldBuilderV3Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"d64a2d9941c36a7bc2a7959ea10ab8363192ac14","commitMessage":"@@@Integrated internal changes from Google\n\nThis includes all internal changes from around May 20 to now.\n","date":"2016-06-30 06:38:03","modifiedFileCount":"44","status":"B","submitter":"Adam Cozzette"},{"authorTime":"2021-08-10 06:55:00","codes":[{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testBasicUse() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder, TestAllTypesOrBuilder> builder =\n        newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertThat(builder.getMessage(0).getOptionalInt32()).isEqualTo(0);\n    assertThat(builder.getMessage(1).getOptionalInt32()).isEqualTo(1);\n\n    List<TestAllTypes> list = builder.build();\n    assertThat(list).hasSize(2);\n    assertThat(list.get(0).getOptionalInt32()).isEqualTo(0);\n    assertThat(list.get(1).getOptionalInt32()).isEqualTo(1);\n    assertIsUnmodifiable(list);\n\n    \r\n    List<TestAllTypes> list2 = builder.build();\n    assertThat(list).isSameInstanceAs(list2);\n    assertThat(mockParent.getInvalidationCount()).isEqualTo(0);\n  }\n","date":"2021-08-10 06:55:00","endLine":71,"groupId":"1089","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicUse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/18/d90fe9d81d1e8967a800bc38c6fcab7b9cc998.src","preCode":"  public void testBasicUse() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder, TestAllTypesOrBuilder> builder =\n        newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertEquals(0, builder.getMessage(0).getOptionalInt32());\n    assertEquals(1, builder.getMessage(1).getOptionalInt32());\n\n    List<TestAllTypes> list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n\n    \r\n    List<TestAllTypes> list2 = builder.build();\n    assertSame(list, list2);\n    assertEquals(0, mockParent.getInvalidationCount());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RepeatedFieldBuilderV3Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-08-10 06:55:00","commitOrder":2,"curCode":"  public void testGoingBackAndForth() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder, TestAllTypesOrBuilder> builder =\n        newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertThat(builder.getMessage(0).getOptionalInt32()).isEqualTo(0);\n    assertThat(builder.getMessage(1).getOptionalInt32()).isEqualTo(1);\n\n    \r\n    List<TestAllTypes> list = builder.build();\n    assertThat(list).hasSize(2);\n    assertThat(list.get(0).getOptionalInt32()).isEqualTo(0);\n    assertThat(list.get(1).getOptionalInt32()).isEqualTo(1);\n    assertIsUnmodifiable(list);\n\n    \r\n    assertThat(mockParent.getInvalidationCount()).isEqualTo(0);\n    builder.getBuilder(0).setOptionalString(\"foo\");\n    assertThat(mockParent.getInvalidationCount()).isEqualTo(1);\n    list = builder.build();\n    assertThat(list).hasSize(2);\n    assertThat(list.get(0).getOptionalInt32()).isEqualTo(0);\n    assertThat(list.get(0).getOptionalString()).isEqualTo(\"foo\");\n    assertThat(list.get(1).getOptionalInt32()).isEqualTo(1);\n    assertIsUnmodifiable(list);\n    assertThat(mockParent.getInvalidationCount()).isEqualTo(1);\n  }\n","date":"2021-08-10 06:55:00","endLine":101,"groupId":"1089","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGoingBackAndForth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-protobuf-10-0.7/blobInfo/CC_OUT/blobs/18/d90fe9d81d1e8967a800bc38c6fcab7b9cc998.src","preCode":"  public void testGoingBackAndForth() {\n    TestUtil.MockBuilderParent mockParent = new TestUtil.MockBuilderParent();\n    RepeatedFieldBuilderV3<TestAllTypes, TestAllTypes.Builder, TestAllTypesOrBuilder> builder =\n        newRepeatedFieldBuilderV3(mockParent);\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(0).build());\n    builder.addMessage(TestAllTypes.newBuilder().setOptionalInt32(1).build());\n    assertEquals(0, builder.getMessage(0).getOptionalInt32());\n    assertEquals(1, builder.getMessage(1).getOptionalInt32());\n\n    \r\n    List<TestAllTypes> list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n\n    \r\n    assertEquals(0, mockParent.getInvalidationCount());\n    builder.getBuilder(0).setOptionalString(\"foo\");\n    assertEquals(1, mockParent.getInvalidationCount());\n    list = builder.build();\n    assertEquals(2, list.size());\n    assertEquals(0, list.get(0).getOptionalInt32());\n    assertEquals(\"foo\", list.get(0).getOptionalString());\n    assertEquals(1, list.get(1).getOptionalInt32());\n    assertIsUnmodifiable(list);\n    assertEquals(1, mockParent.getInvalidationCount());\n  }\n","realPath":"java/core/src/test/java/com/google/protobuf/RepeatedFieldBuilderV3Test.java","repoName":"protobuf","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"8a3c4948a49d3b38effea499fd9dee66f28cb0c4","commitMessage":"@@@Merge pull request #8858 from acozzette/sync-stage\n\nIntegrate from Piper for C++.  Java.  and Python","date":"2021-08-10 06:55:00","modifiedFileCount":"84","status":"M","submitter":"Adam Cozzette"}]
