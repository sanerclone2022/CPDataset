[{"authorTime":"2015-08-26 02:44:50","codes":[{"authorDate":"2015-08-26 02:44:50","commitOrder":1,"curCode":"    public void testDesignNoConnectivityInOffering() {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        final DeploymentPlan plan = mock(DeploymentPlan.class);\n        final Network network = mock(Network.class);\n        final Account account = mock(Account.class);\n\n        final Network designednetwork = guru.design(offering, plan, network, account);\n        assertTrue(designednetwork == null);\n    }\n","date":"2015-08-26 02:44:52","endLine":244,"groupId":"10488","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDesignNoConnectivityInOffering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/e4643401e82cdbec2838cadb7bc38dd2f41362.src","preCode":"    public void testDesignNoConnectivityInOffering() {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        final DeploymentPlan plan = mock(DeploymentPlan.class);\n        final Network network = mock(Network.class);\n        final Account account = mock(Account.class);\n\n        final Network designednetwork = guru.design(offering, plan, network, account);\n        assertTrue(designednetwork == null);\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuruTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"B"},{"authorDate":"2015-08-26 02:44:50","commitOrder":1,"curCode":"    public void testShutdown() throws InsufficientVirtualNetworkCapacityException, URISyntaxException {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        mock(DeploymentPlan.class);\n\n        final NetworkVO network = mock(NetworkVO.class);\n        when(network.getName()).thenReturn(\"testnetwork\");\n        when(network.getState()).thenReturn(State.Implementing);\n        when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);\n        when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));\n        when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n        when(netdao.findById(NETWORK_ID)).thenReturn(network);\n\n        final DeployDestination dest = mock(DeployDestination.class);\n\n        final DataCenter dc = mock(DataCenter.class);\n        when(dest.getDataCenter()).thenReturn(dc);\n\n        final HostVO niciraHost = mock(HostVO.class);\n        when(hostdao.findById(anyLong())).thenReturn(niciraHost);\n        when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");\n        when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");\n        when(niciraHost.getId()).thenReturn(NETWORK_ID);\n\n        when(netmodel.findPhysicalNetworkId(anyLong(), (String)any(), (TrafficType)any())).thenReturn(NETWORK_ID);\n        final Domain dom = mock(Domain.class);\n        when(dom.getName()).thenReturn(\"domain\");\n        final Account acc = mock(Account.class);\n        when(acc.getAccountName()).thenReturn(\"accountname\");\n        final ReservationContext res = mock(ReservationContext.class);\n        when(res.getDomain()).thenReturn(dom);\n        when(res.getAccount()).thenReturn(acc);\n\n        final DeleteLogicalSwitchAnswer answer = mock(DeleteLogicalSwitchAnswer.class);\n        when(answer.getResult()).thenReturn(true);\n        when(agentmgr.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n\n        final NetworkProfile implementednetwork = mock(NetworkProfile.class);\n        when(implementednetwork.getId()).thenReturn(NETWORK_ID);\n        when(implementednetwork.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaa\"));\n        when(offering.getSpecifyVlan()).thenReturn(false);\n\n        guru.shutdown(implementednetwork, offering);\n        verify(agentmgr, times(1)).easySend(eq(NETWORK_ID), (Command)any());\n        verify(implementednetwork, times(1)).setBroadcastUri(null);\n    }\n","date":"2015-08-26 02:44:52","endLine":475,"groupId":"10488","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/e4643401e82cdbec2838cadb7bc38dd2f41362.src","preCode":"    public void testShutdown() throws InsufficientVirtualNetworkCapacityException, URISyntaxException {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        mock(DeploymentPlan.class);\n\n        final NetworkVO network = mock(NetworkVO.class);\n        when(network.getName()).thenReturn(\"testnetwork\");\n        when(network.getState()).thenReturn(State.Implementing);\n        when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);\n        when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));\n        when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n        when(netdao.findById(NETWORK_ID)).thenReturn(network);\n\n        final DeployDestination dest = mock(DeployDestination.class);\n\n        final DataCenter dc = mock(DataCenter.class);\n        when(dest.getDataCenter()).thenReturn(dc);\n\n        final HostVO niciraHost = mock(HostVO.class);\n        when(hostdao.findById(anyLong())).thenReturn(niciraHost);\n        when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");\n        when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");\n        when(niciraHost.getId()).thenReturn(NETWORK_ID);\n\n        when(netmodel.findPhysicalNetworkId(anyLong(), (String)any(), (TrafficType)any())).thenReturn(NETWORK_ID);\n        final Domain dom = mock(Domain.class);\n        when(dom.getName()).thenReturn(\"domain\");\n        final Account acc = mock(Account.class);\n        when(acc.getAccountName()).thenReturn(\"accountname\");\n        final ReservationContext res = mock(ReservationContext.class);\n        when(res.getDomain()).thenReturn(dom);\n        when(res.getAccount()).thenReturn(acc);\n\n        final DeleteLogicalSwitchAnswer answer = mock(DeleteLogicalSwitchAnswer.class);\n        when(answer.getResult()).thenReturn(true);\n        when(agentmgr.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n\n        final NetworkProfile implementednetwork = mock(NetworkProfile.class);\n        when(implementednetwork.getId()).thenReturn(NETWORK_ID);\n        when(implementednetwork.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaa\"));\n        when(offering.getSpecifyVlan()).thenReturn(false);\n\n        guru.shutdown(implementednetwork, offering);\n        verify(agentmgr, times(1)).easySend(eq(NETWORK_ID), (Command)any());\n        verify(implementednetwork, times(1)).setBroadcastUri(null);\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuruTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"B"}],"commitId":"44ba14d17ba3b8fa00cd05c97eaceed49367816c","commitMessage":"@@@Merge pull request #737 from miguelaferreira/feature/mferreira/ncx-follow-redirects-gardened-rebase\n\nCLOUDSTACK-8758: Handle redirects in communication with NXS controller (a.k.a. Nicira NVP)When an NSX controller node is part of a cluster it will redirect API calls to the master controller. Because the ACS management server does not follow such redirects.  if there is a change of master within a NSX cluster.  the NSX device (a.k.a.  NiciraNvp) needs to be reconfigured (via the management server DB).\n\nThe goal of this PR is to enable ACS management server to follow HTTP redirects sent by NSX controllers. However.  other changes were made to the cloud-utils module that provides the REST client that the NSX plugin uses.\n\nCosmetic changes:\n* Upgrade maven module structure for cloud-utils and cloud-plugin-netowkr-nvp to comply with maven default\n* Several refactorings on both modules to consistently format the code.  remove unused code.  declare final when possible.  remove auto generated comments.  etc\n\nOther changes:\n* Upgrade HTTP library used in REST client to version 4.5 of Apache HTTP Components\n* Implement generic REST client that supports HTTP redirects\n* Implement NSX specific REST client\n* Simplify NSX api implementation\n* Previously existing unit tests for both the REST client and NSX api were either maintained in the same test classes.  moved to new test classes (because code under tests also moved).  or removed (because code under tests was also removed)\n* New Marvin tests for NSX controllers\n\nTesting:\n* Ran all unit tests present in the project\n* Ran Java Integration tests for NSX api targeting both a master and a slave controller\n* Ran new Marvin test for NSX controller\n* Manual inspection of logs to confirm redirection is taking place\n\n* pr/737:\n  Use NSX specific RestClient in API implementation (NiciraNvpApi)\n  Refactor NSX api implementation (NiciraNvpApi)\n  Add NSX specific RestClient implementation\n  Delegate HTTP protocol activity in RESTServiceConnector to RestClient\n  Add basic RestClient implentation based on HTTP Components 4.5\n  Code clean up in cloud-plugin-network-nvp project\n  Code clean up in cloud-utils project\n  Refactor cloud-plugin-network-nvp project into Maven default structure\n  Refactor cloud-utils project into Maven default structure\n  Fix unit-test library dependencies\n  Add Marvin test for Nicira NVP plugin\n  Create Nicira NVP devices and enable plugin at deploy\n\nSigned-off-by: Remi Bergsma <github@remi.nl>\n","date":"2015-08-26 02:44:52","modifiedFileCount":"0","status":"B","submitter":"Remi Bergsma"},{"authorTime":"2018-09-22 23:20:48","codes":[{"authorDate":"2015-08-26 02:44:50","commitOrder":2,"curCode":"    public void testDesignNoConnectivityInOffering() {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        final DeploymentPlan plan = mock(DeploymentPlan.class);\n        final Network network = mock(Network.class);\n        final Account account = mock(Account.class);\n\n        final Network designednetwork = guru.design(offering, plan, network, account);\n        assertTrue(designednetwork == null);\n    }\n","date":"2015-08-26 02:44:52","endLine":244,"groupId":"104015","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDesignNoConnectivityInOffering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/e4643401e82cdbec2838cadb7bc38dd2f41362.src","preCode":"    public void testDesignNoConnectivityInOffering() {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        final DeploymentPlan plan = mock(DeploymentPlan.class);\n        final Network network = mock(Network.class);\n        final Account account = mock(Account.class);\n\n        final Network designednetwork = guru.design(offering, plan, network, account);\n        assertTrue(designednetwork == null);\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuruTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2018-09-22 23:20:48","commitOrder":2,"curCode":"    public void testShutdown() throws InsufficientVirtualNetworkCapacityException, URISyntaxException {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        mock(DeploymentPlan.class);\n\n        final NetworkVO network = mock(NetworkVO.class);\n        when(network.getName()).thenReturn(\"testnetwork\");\n        when(network.getState()).thenReturn(State.Implementing);\n        when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);\n        when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));\n        when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n        when(netdao.findById(NETWORK_ID)).thenReturn(network);\n\n        final DeployDestination dest = mock(DeployDestination.class);\n\n        final DataCenter dc = mock(DataCenter.class);\n        when(dest.getDataCenter()).thenReturn(dc);\n\n        final HostVO niciraHost = mock(HostVO.class);\n        when(hostdao.findById(anyLong())).thenReturn(niciraHost);\n        when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");\n        when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");\n        when(niciraHost.getId()).thenReturn(NETWORK_ID);\n\n        when(netmodel.findPhysicalNetworkId(anyLong(), (String)any(), (TrafficType)any())).thenReturn(NETWORK_ID);\n        final Domain dom = mock(Domain.class);\n        when(dom.getName()).thenReturn(\"domain\");\n        final Account acc = mock(Account.class);\n        when(acc.getAccountName()).thenReturn(\"accountname\");\n        final ReservationContext res = mock(ReservationContext.class);\n        when(res.getDomain()).thenReturn(dom);\n        when(res.getAccount()).thenReturn(acc);\n\n        final DeleteLogicalSwitchAnswer answer = mock(DeleteLogicalSwitchAnswer.class);\n        when(answer.getResult()).thenReturn(true);\n        when(agentmgr.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n\n        final NetworkProfile implementednetwork = mock(NetworkProfile.class);\n        when(implementednetwork.getId()).thenReturn(NETWORK_ID);\n        when(implementednetwork.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaa\"));\n        when(offering.isSpecifyVlan()).thenReturn(false);\n\n        guru.shutdown(implementednetwork, offering);\n        verify(agentmgr, times(1)).easySend(eq(NETWORK_ID), (Command)any());\n        verify(implementednetwork, times(1)).setBroadcastUri(null);\n    }\n","date":"2018-09-22 23:20:48","endLine":477,"groupId":"104015","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/c000ad9d337fe8a323550023cc3b7c27271ef0.src","preCode":"    public void testShutdown() throws InsufficientVirtualNetworkCapacityException, URISyntaxException {\n        final PhysicalNetworkVO physnet = mock(PhysicalNetworkVO.class);\n        when(physnetdao.findById((Long)any())).thenReturn(physnet);\n        when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String[] {\"STT\", \"VXLAN\"}));\n        when(physnet.getId()).thenReturn(NETWORK_ID);\n\n        final NiciraNvpDeviceVO device = mock(NiciraNvpDeviceVO.class);\n        when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO[] {device}));\n        when(device.getId()).thenReturn(1L);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID, Service.Connectivity)).thenReturn(false);\n\n        mock(DeploymentPlan.class);\n\n        final NetworkVO network = mock(NetworkVO.class);\n        when(network.getName()).thenReturn(\"testnetwork\");\n        when(network.getState()).thenReturn(State.Implementing);\n        when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);\n        when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));\n        when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);\n        when(netdao.findById(NETWORK_ID)).thenReturn(network);\n\n        final DeployDestination dest = mock(DeployDestination.class);\n\n        final DataCenter dc = mock(DataCenter.class);\n        when(dest.getDataCenter()).thenReturn(dc);\n\n        final HostVO niciraHost = mock(HostVO.class);\n        when(hostdao.findById(anyLong())).thenReturn(niciraHost);\n        when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");\n        when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");\n        when(niciraHost.getId()).thenReturn(NETWORK_ID);\n\n        when(netmodel.findPhysicalNetworkId(anyLong(), (String)any(), (TrafficType)any())).thenReturn(NETWORK_ID);\n        final Domain dom = mock(Domain.class);\n        when(dom.getName()).thenReturn(\"domain\");\n        final Account acc = mock(Account.class);\n        when(acc.getAccountName()).thenReturn(\"accountname\");\n        final ReservationContext res = mock(ReservationContext.class);\n        when(res.getDomain()).thenReturn(dom);\n        when(res.getAccount()).thenReturn(acc);\n\n        final DeleteLogicalSwitchAnswer answer = mock(DeleteLogicalSwitchAnswer.class);\n        when(answer.getResult()).thenReturn(true);\n        when(agentmgr.easySend(eq(NETWORK_ID), (Command)any())).thenReturn(answer);\n\n        final NetworkProfile implementednetwork = mock(NetworkProfile.class);\n        when(implementednetwork.getId()).thenReturn(NETWORK_ID);\n        when(implementednetwork.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaa\"));\n        when(offering.getSpecifyVlan()).thenReturn(false);\n\n        guru.shutdown(implementednetwork, offering);\n        verify(agentmgr, times(1)).easySend(eq(NETWORK_ID), (Command)any());\n        verify(implementednetwork, times(1)).setBroadcastUri(null);\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/guru/NiciraNvpGuestNetworkGuruTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"}]
