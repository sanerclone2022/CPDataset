[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, (DataStore)destPool);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1010,"groupId":"4490","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"migrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/2fdc495f9b5b891e53b7718e224d5f4b8d28d3.src","preCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, (DataStore)destPool);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":987,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, (DataStore)destPool);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2155,"groupId":"13483","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"liveMigrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/be/a9b4ad5bfb40d1fc2f11f88b454aac2e518b50.src","preCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, (DataStore)destPool);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2138,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-04-27 07:05:55","codes":[{"authorDate":"2018-04-27 07:05:55","commitOrder":2,"curCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2018-04-27 07:05:55","endLine":983,"groupId":"4490","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"migrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/82/9a4d26fcb96ec1602a9cbd01410d87e995cb6d.src","preCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, (DataStore)destPool);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":958,"status":"M"},{"authorDate":"2018-04-27 07:05:55","commitOrder":2,"curCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2018-04-27 07:05:55","endLine":2204,"groupId":"13483","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"liveMigrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2c/aeaec3b79f656d42ea48d36ac46f9bace5fa3b.src","preCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, (DataStore)destPool);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2185,"status":"M"}],"commitId":"d6cbd774b76a044efbdbc531acd5c8c1925cc1d2","commitMessage":"@@@[CLOUDSTACK-10323] Allow changing disk offering during volume migration  (#2486)\n\n* [CLOUDSTACK-10323] Allow changing disk offering during volume migration\n\nThis is a continuation of work developed on PR #2425 (CLOUDSTACK-10240).  which provided root admins an override mechanism to move volumes between storage systems types (local/shared) even when the disk offering would not allow such operation. To complete the work.  we will now provide a way for administrators to enter a new disk offering that can reflect the new placement of the volume. We will add an extra parameter to allow the root admin inform a new disk offering for the volume. Therefore.  when the volume is being migrated.  it will be possible to replace the disk offering to reflect the new placement of the volume.\n\nThe API method will have the following parameters:\n\n* storageid (required)\n* volumeid (required)\n* livemigrate(optional)\n* newdiskofferingid (optional) ? this is the new parameter\n\nThe expected behavior is the following:\n\n* If ?newdiskofferingid? is not provided the current behavior is maintained. Override mechanism will also keep working as we have seen so far.\n* If the ?newdiskofferingid? is provided by the admin.  we will execute the following checks\n** new disk offering mode (local/shared) must match the target storage mode. If it does not match.  an exception will be thrown and the operator will receive a message indicating the problem.\n** we will check if the new disk offering tags match the target storage tags. If it does not match.  an exception will be thrown and the operator will receive a message indicating the problem.\n** check if the target storage has the capacity for the new volume. If it does not have enough space.  then an exception is thrown and the operator will receive a message indicating the problem.\n** check if the size of the volume is the same as the size of the new disk offering. If it is not the same.  we will ALLOW the change of the service offering.  and a warning message will be logged.\n\nWe execute the change of the Disk offering as soon as the migration of the volume finishes. Therefore.  if an error happens during the migration and the volume remains in the original storage system.  the disk offering will keep reflecting this situation.\n\n* Code formatting\n\n* Adding a test to cover migration with new disk offering (#4)\n\n* Adding a test to cover migration with new disk offering\n\n* Update test_volumes.py\n\n* Update test_volumes.py\n\n* fix test_11_migrate_volume_and_change_offering\n\n* Fix typo in Java doc\n","date":"2018-04-27 07:05:55","modifiedFileCount":"10","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-04-27 07:05:55","codes":[{"authorDate":"2019-01-25 20:05:13","commitOrder":3,"curCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        if (vol == null){\n            throw new CloudRuntimeException(\"Migrate volume failed because volume object of volume \" + volume.getName()+ \"is null\");\n        }\n        if (destPool == null) {\n            throw new CloudRuntimeException(\"Migrate volume failed because destination storage pool is not available!!\");\n        }\n\n        checkConcurrentJobsPerDatastoreThreshhold(destPool);\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2019-01-25 20:05:13","endLine":1006,"groupId":"4490","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"migrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6e/71864c4473741d0ff7842e7133a348fd76cb29.src","preCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":973,"status":"M"},{"authorDate":"2018-04-27 07:05:55","commitOrder":3,"curCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2018-04-27 07:05:55","endLine":2204,"groupId":"13483","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"liveMigrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2c/aeaec3b79f656d42ea48d36ac46f9bace5fa3b.src","preCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2185,"status":"N"}],"commitId":"b363fd49f70ac2092ebe6226a72a3d911dc99e1f","commitMessage":"@@@Vmware offline migration (#2848)\n\n* - Offline VM and Volume migration on Vmware hypervisor hosts\n- Also add VM disk consolidation call on successful VM migrations\n\n* Fix indentation of marvin test file and reformat against PEP8\n\n* * Fix few comment typos\n* Refactor debug messages to use String.format() when debug log level is enabled.\n\n* Send list of commands returned by hypervisor Guru instead of explicitly selecting the first one\n\n* Fix unhandled NPE during VM migration\n\n* Revert back to distinct event descriptions for VM to host or storage pool migration\n\n* Reformat test_primary_storage file against PEP-8 and Remove unused imports\n\n* Revert back the deprecation messages in the custom StringUtils class to favour the use of the ApacheUtils\n","date":"2019-01-25 20:05:13","modifiedFileCount":"35","status":"M","submitter":"dahn"},{"authorTime":"2018-04-27 07:05:55","codes":[{"authorDate":"2021-02-24 17:28:33","commitOrder":4,"curCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        if (vol == null){\n            throw new CloudRuntimeException(\"Migrate volume failed because volume object of volume \" + volume.getName()+ \"is null\");\n        }\n        if (destPool == null) {\n            throw new CloudRuntimeException(\"Migrate volume failed because destination storage pool is not available!!\");\n        }\n\n        checkConcurrentJobsPerDatastoreThreshhold(destPool);\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                if (result.getResult() != null && result.getResult().contains(\"[UNSUPPORTED]\")) {\n                    throw new CloudRuntimeException(\"Migrate volume failed: \" + result.getResult());\n                }\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2021-02-24 17:28:33","endLine":1202,"groupId":"10644","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"migrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e6/260b851ecc1508cb4f1a51d66bbd1fd4036703.src","preCode":"    public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n        if (vol == null){\n            throw new CloudRuntimeException(\"Migrate volume failed because volume object of volume \" + volume.getName()+ \"is null\");\n        }\n        if (destPool == null) {\n            throw new CloudRuntimeException(\"Migrate volume failed because destination storage pool is not available!!\");\n        }\n\n        checkConcurrentJobsPerDatastoreThreshhold(destPool);\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.error(\"Migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            } else {\n                \r\n                if (!_snapshotDao.listByVolumeId(vol.getId()).isEmpty()) {\n                    _snapshotDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                    _snapshotDataStoreDao.updateVolumeIds(vol.getId(), result.getVolume().getId());\n                }\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"M"},{"authorDate":"2018-04-27 07:05:55","commitOrder":4,"curCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","date":"2018-04-27 07:05:55","endLine":2204,"groupId":"10644","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"liveMigrateVolume","params":"(Volumevolume@StoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2c/aeaec3b79f656d42ea48d36ac46f9bace5fa3b.src","preCode":"    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n        VolumeInfo vol = volFactory.getVolume(volume.getId());\n\n        DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n        AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, dataStoreTarget);\n        try {\n            VolumeApiResult result = future.get();\n            if (result.isFailed()) {\n                s_logger.debug(\"migrate volume failed:\" + result.getResult());\n                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n            }\n            return result.getVolume();\n        } catch (InterruptedException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        } catch (ExecutionException e) {\n            s_logger.debug(\"migrate volume failed\", e);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2185,"status":"N"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"}]
