[{"authorTime":"2020-03-06 15:51:23","codes":[{"authorDate":"2020-03-06 15:51:23","commitOrder":1,"curCode":"    public boolean startKubernetesCluster(long kubernetesClusterId, boolean onCreate) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is already deleted\", kubernetesCluster.getUuid()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Running)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is in running state\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Starting)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is already in starting state\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n        KubernetesClusterStartWorker startWorker =\n                new KubernetesClusterStartWorker(kubernetesCluster, this);\n        startWorker = ComponentContext.inject(startWorker);\n        if (onCreate) {\n            \r\n            return startWorker.startKubernetesClusterOnCreate();\n        } else {\n            \r\n            return startWorker.startStoppedKubernetesCluster();\n        }\n    }\n","date":"2020-03-06 15:51:23","endLine":1062,"groupId":"7018","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startKubernetesCluster","params":"(longkubernetesClusterId@booleanonCreate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/8fa034a8ba19c25ff80ea5a512ad96d333cf35.src","preCode":"    public boolean startKubernetesCluster(long kubernetesClusterId, boolean onCreate) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is already deleted\", kubernetesCluster.getUuid()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Running)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is in running state\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Starting)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is already in starting state\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n        KubernetesClusterStartWorker startWorker =\n                new KubernetesClusterStartWorker(kubernetesCluster, this);\n        startWorker = ComponentContext.inject(startWorker);\n        if (onCreate) {\n            \r\n            return startWorker.startKubernetesClusterOnCreate();\n        } else {\n            \r\n            return startWorker.startStoppedKubernetesCluster();\n        }\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1024,"status":"B"},{"authorDate":"2020-03-06 15:51:23","commitOrder":1,"curCode":"    public boolean stopKubernetesCluster(long kubernetesClusterId) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is already deleted\", kubernetesCluster.getUuid()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is already stopped\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopping)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is getting stopped\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        KubernetesClusterStopWorker stopWorker = new KubernetesClusterStopWorker(kubernetesCluster, this);\n        stopWorker = ComponentContext.inject(stopWorker);\n        return stopWorker.stop();\n    }\n","date":"2020-03-06 15:51:23","endLine":1092,"groupId":"7254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stopKubernetesCluster","params":"(longkubernetesClusterId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/8fa034a8ba19c25ff80ea5a512ad96d333cf35.src","preCode":"    public boolean stopKubernetesCluster(long kubernetesClusterId) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is already deleted\", kubernetesCluster.getUuid()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is already stopped\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopping)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is getting stopped\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        KubernetesClusterStopWorker stopWorker = new KubernetesClusterStopWorker(kubernetesCluster, this);\n        stopWorker = ComponentContext.inject(stopWorker);\n        return stopWorker.stop();\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1065,"status":"B"}],"commitId":"8cc70c7d8725319ba5455c5fe17ede275e372f1c","commitMessage":"@@@CloudStack Kubernetes Service (#3680)\n\n","date":"2020-03-06 15:51:23","modifiedFileCount":"10","status":"B","submitter":"Abhishek Kumar"},{"authorTime":"2020-10-27 14:45:43","codes":[{"authorDate":"2020-10-27 14:45:43","commitOrder":2,"curCode":"    public boolean startKubernetesCluster(long kubernetesClusterId, boolean onCreate) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s is already deleted\", kubernetesCluster.getName()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Running)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is in running state\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Starting)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is already in starting state\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster : %s\", kubernetesCluster.getName()));\n        }\n        KubernetesClusterStartWorker startWorker =\n                new KubernetesClusterStartWorker(kubernetesCluster, this);\n        startWorker = ComponentContext.inject(startWorker);\n        if (onCreate) {\n            \r\n            return startWorker.startKubernetesClusterOnCreate();\n        } else {\n            \r\n            return startWorker.startStoppedKubernetesCluster();\n        }\n    }\n","date":"2020-10-27 14:45:43","endLine":1077,"groupId":"7018","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startKubernetesCluster","params":"(longkubernetesClusterId@booleanonCreate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/ac555b79a4b7f7a7d6004454fbaf942bcc1125.src","preCode":"    public boolean startKubernetesCluster(long kubernetesClusterId, boolean onCreate) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is already deleted\", kubernetesCluster.getUuid()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Running)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is in running state\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Starting)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is already in starting state\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n        KubernetesClusterStartWorker startWorker =\n                new KubernetesClusterStartWorker(kubernetesCluster, this);\n        startWorker = ComponentContext.inject(startWorker);\n        if (onCreate) {\n            \r\n            return startWorker.startKubernetesClusterOnCreate();\n        } else {\n            \r\n            return startWorker.startStoppedKubernetesCluster();\n        }\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1039,"status":"M"},{"authorDate":"2020-10-27 14:45:43","commitOrder":2,"curCode":"    public boolean stopKubernetesCluster(long kubernetesClusterId) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s is already deleted\", kubernetesCluster.getName()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is already stopped\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopping)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is getting stopped\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        KubernetesClusterStopWorker stopWorker = new KubernetesClusterStopWorker(kubernetesCluster, this);\n        stopWorker = ComponentContext.inject(stopWorker);\n        return stopWorker.stop();\n    }\n","date":"2020-10-27 14:45:43","endLine":1107,"groupId":"7020","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"stopKubernetesCluster","params":"(longkubernetesClusterId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/ac555b79a4b7f7a7d6004454fbaf942bcc1125.src","preCode":"    public boolean stopKubernetesCluster(long kubernetesClusterId) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is already deleted\", kubernetesCluster.getUuid()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is already stopped\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopping)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster ID: %s is getting stopped\", kubernetesCluster.getUuid()));\n            }\n            return true;\n        }\n        KubernetesClusterStopWorker stopWorker = new KubernetesClusterStopWorker(kubernetesCluster, this);\n        stopWorker = ComponentContext.inject(stopWorker);\n        return stopWorker.stop();\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1080,"status":"M"}],"commitId":"86f2b796cfd4d6758dff322ce31ae880a9c4e02b","commitMessage":"@@@CKS : More log changes from uuid to name (#4415)\n\n","date":"2020-10-27 14:45:43","modifiedFileCount":"9","status":"M","submitter":"davidjumani"},{"authorTime":"2020-10-27 14:45:43","codes":[{"authorDate":"2021-08-09 17:15:20","commitOrder":3,"curCode":"    public boolean startKubernetesCluster(long kubernetesClusterId, boolean onCreate) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s is already deleted\", kubernetesCluster.getName()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Running)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is in running state\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Starting)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is already in starting state\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster : %s\", kubernetesCluster.getName()));\n        }\n        KubernetesClusterStartWorker startWorker =\n                new KubernetesClusterStartWorker(kubernetesCluster, this);\n        startWorker = ComponentContext.inject(startWorker);\n        if (onCreate) {\n            \r\n            Account owner = accountService.getActiveAccountById(kubernetesCluster.getAccountId());\n            String[] keys = getServiceUserKeys(owner);\n            startWorker.setKeys(keys);\n            return startWorker.startKubernetesClusterOnCreate();\n        } else {\n            \r\n            return startWorker.startStoppedKubernetesCluster();\n        }\n    }\n","date":"2021-08-09 17:15:20","endLine":1124,"groupId":"104226","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startKubernetesCluster","params":"(longkubernetesClusterId@booleanonCreate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7e/52d98bcc4b9d5dab938df320830032dfe327ec.src","preCode":"    public boolean startKubernetesCluster(long kubernetesClusterId, boolean onCreate) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s is already deleted\", kubernetesCluster.getName()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Running)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is in running state\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Starting)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is already in starting state\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster : %s\", kubernetesCluster.getName()));\n        }\n        KubernetesClusterStartWorker startWorker =\n                new KubernetesClusterStartWorker(kubernetesCluster, this);\n        startWorker = ComponentContext.inject(startWorker);\n        if (onCreate) {\n            \r\n            return startWorker.startKubernetesClusterOnCreate();\n        } else {\n            \r\n            return startWorker.startStoppedKubernetesCluster();\n        }\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1083,"status":"M"},{"authorDate":"2020-10-27 14:45:43","commitOrder":3,"curCode":"    public boolean stopKubernetesCluster(long kubernetesClusterId) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s is already deleted\", kubernetesCluster.getName()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is already stopped\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopping)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is getting stopped\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        KubernetesClusterStopWorker stopWorker = new KubernetesClusterStopWorker(kubernetesCluster, this);\n        stopWorker = ComponentContext.inject(stopWorker);\n        return stopWorker.stop();\n    }\n","date":"2020-10-27 14:45:43","endLine":1107,"groupId":"104226","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"stopKubernetesCluster","params":"(longkubernetesClusterId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/ac555b79a4b7f7a7d6004454fbaf942bcc1125.src","preCode":"    public boolean stopKubernetesCluster(long kubernetesClusterId) throws CloudRuntimeException {\n        if (!KubernetesServiceEnabled.value()) {\n            logAndThrow(Level.ERROR, \"Kubernetes Service plugin is disabled\");\n        }\n        final KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null) {\n            throw new InvalidParameterValueException(\"Failed to find Kubernetes cluster with given ID\");\n        }\n        if (kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s is already deleted\", kubernetesCluster.getName()));\n        }\n        accountManager.checkAccess(CallContext.current().getCallingAccount(), SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is already stopped\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopping)) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(String.format(\"Kubernetes cluster : %s is getting stopped\", kubernetesCluster.getName()));\n            }\n            return true;\n        }\n        KubernetesClusterStopWorker stopWorker = new KubernetesClusterStopWorker(kubernetesCluster, this);\n        stopWorker = ComponentContext.inject(stopWorker);\n        return stopWorker.stop();\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1080,"status":"N"}],"commitId":"3c8c704df3e132472a2b42306b9f4814451c5854","commitMessage":"@@@kubernetes: Deploy kubernetes-provider when creating a cluster (#5254)\n\n* kubernetes: Deploy kubernetes-provider when creating a cluster\n\nCo-authored-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-08-09 17:15:20","modifiedFileCount":"9","status":"M","submitter":"davidjumani"}]
