[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private HostVO getHost(Long zoneId, HypervisorType hypervisorType, boolean computeClusterMustSupportResign) {\n        if (zoneId == null) {\n            throw new CloudRuntimeException(\"Zone ID cannot be null.\");\n        }\n\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, new Long(0), Long.MAX_VALUE, hypervisorType.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = _hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (host.getResourceState() == ResourceState.Enabled) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return host;\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return host;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":1222,"groupId":"12877","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getHost","params":"(LongzoneId@HypervisorTypehypervisorType@booleancomputeClusterMustSupportResign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/313058e9249fbef2dc1715afeb5d8b7c2c3cf4.src","preCode":"    private HostVO getHost(Long zoneId, HypervisorType hypervisorType, boolean computeClusterMustSupportResign) {\n        if (zoneId == null) {\n            throw new CloudRuntimeException(\"Zone ID cannot be null.\");\n        }\n\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, new Long(0), Long.MAX_VALUE, hypervisorType.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = _hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (host.getResourceState() == ResourceState.Enabled) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return host;\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return host;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1180,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Optional<HostVO> getHost(long zoneId, boolean computeClusterMustSupportResign) {\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, 0L, Long.MAX_VALUE, HypervisorType.XenServer.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (host.getResourceState() == ResourceState.Enabled) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return Optional.of(host);\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return Optional.of(host);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return Optional.absent();\n    }\n","date":"2018-01-20 05:49:27","endLine":890,"groupId":"12877","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getHost","params":"(longzoneId@booleancomputeClusterMustSupportResign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/c385b4e617584a9920c5f4486623c8cdff5619.src","preCode":"    private Optional<HostVO> getHost(long zoneId, boolean computeClusterMustSupportResign) {\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, 0L, Long.MAX_VALUE, HypervisorType.XenServer.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (host.getResourceState() == ResourceState.Enabled) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return Optional.of(host);\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return Optional.of(host);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return Optional.absent();\n    }\n","realPath":"engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/StorageSystemSnapshotStrategy.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-03-30 18:51:06","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private HostVO getHost(Long zoneId, HypervisorType hypervisorType, boolean computeClusterMustSupportResign) {\n        if (zoneId == null) {\n            throw new CloudRuntimeException(\"Zone ID cannot be null.\");\n        }\n\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, new Long(0), Long.MAX_VALUE, hypervisorType.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = _hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (host.getResourceState() == ResourceState.Enabled) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return host;\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return host;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":1222,"groupId":"12672","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getHost","params":"(LongzoneId@HypervisorTypehypervisorType@booleancomputeClusterMustSupportResign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/313058e9249fbef2dc1715afeb5d8b7c2c3cf4.src","preCode":"    private HostVO getHost(Long zoneId, HypervisorType hypervisorType, boolean computeClusterMustSupportResign) {\n        if (zoneId == null) {\n            throw new CloudRuntimeException(\"Zone ID cannot be null.\");\n        }\n\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, new Long(0), Long.MAX_VALUE, hypervisorType.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = _hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (host.getResourceState() == ResourceState.Enabled) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return host;\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return host;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1180,"status":"N"},{"authorDate":"2018-03-30 18:51:06","commitOrder":2,"curCode":"    private Optional<HostVO> getHost(long zoneId, boolean computeClusterMustSupportResign) {\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, 0L, Long.MAX_VALUE, HypervisorType.XenServer.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (ResourceState.Enabled.equals(host.getResourceState())) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return Optional.of(host);\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return Optional.of(host);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return Optional.empty();\n    }\n","date":"2018-03-30 18:51:06","endLine":881,"groupId":"12672","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getHost","params":"(longzoneId@booleancomputeClusterMustSupportResign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a6/fe50e258198da00666d5e33c7c6222038d81e1.src","preCode":"    private Optional<HostVO> getHost(long zoneId, boolean computeClusterMustSupportResign) {\n        List<? extends Cluster> clusters = mgr.searchForClusters(zoneId, 0L, Long.MAX_VALUE, HypervisorType.XenServer.toString());\n\n        if (clusters == null) {\n            clusters = new ArrayList<>();\n        }\n\n        Collections.shuffle(clusters, new Random(System.nanoTime()));\n\n        clusters:\n        for (Cluster cluster : clusters) {\n            if (cluster.getAllocationState() == AllocationState.Enabled) {\n                List<HostVO> hosts = hostDao.findByClusterId(cluster.getId());\n\n                if (hosts != null) {\n                    Collections.shuffle(hosts, new Random(System.nanoTime()));\n\n                    for (HostVO host : hosts) {\n                        if (host.getResourceState() == ResourceState.Enabled) {\n                            if (computeClusterMustSupportResign) {\n                                if (clusterDao.getSupportsResigning(cluster.getId())) {\n                                    return Optional.of(host);\n                                }\n                                else {\n                                    \r\n                                    continue clusters;\n                                }\n                            }\n                            else {\n                                return Optional.of(host);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return Optional.absent();\n    }\n","realPath":"engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/StorageSystemSnapshotStrategy.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":843,"status":"M"}],"commitId":"41895561a79c980966583ba27798cf46114de2c5","commitMessage":"@@@Merge branch '4.11'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-03-30 18:51:06","modifiedFileCount":"2","status":"M","submitter":"Rohit Yadav"}]
