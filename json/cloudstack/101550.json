[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Pair<List<DataCenterJoinVO>, Integer> listDataCentersInternal(ListZonesCmd cmd) {\n        Account account = CallContext.current().getCallingAccount();\n        Long domainId = cmd.getDomainId();\n        Long id = cmd.getId();\n        String keyword = cmd.getKeyword();\n        String name = cmd.getName();\n        String networkType = cmd.getNetworkType();\n        Map<String, String> resourceTags = cmd.getTags();\n\n        SearchBuilder<DataCenterJoinVO> sb = _dcJoinDao.createSearchBuilder();\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            SearchBuilder<ResourceTagVO> tagSearch = _resourceTagDao.createSearchBuilder();\n            for (int count = 0; count < resourceTags.size(); count++) {\n                tagSearch.or().op(\"key\" + String.valueOf(count), tagSearch.entity().getKey(), SearchCriteria.Op.EQ);\n                tagSearch.and(\"value\" + String.valueOf(count), tagSearch.entity().getValue(), SearchCriteria.Op.EQ);\n                tagSearch.cp();\n            }\n            tagSearch.and(\"resourceType\", tagSearch.entity().getResourceType(), SearchCriteria.Op.EQ);\n            sb.groupBy(sb.entity().getId());\n            sb.join(\"tagSearch\", tagSearch, sb.entity().getId(), tagSearch.entity().getResourceId(), JoinBuilder.JoinType.INNER);\n        }\n\n        Filter searchFilter = new Filter(DataCenterJoinVO.class, null, false, cmd.getStartIndex(), cmd.getPageSizeVal());\n        SearchCriteria<DataCenterJoinVO> sc = sb.create();\n\n        if (networkType != null) {\n            sc.addAnd(\"networkType\", SearchCriteria.Op.EQ, networkType);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        } else if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        } else {\n            if (keyword != null) {\n                SearchCriteria<DataCenterJoinVO> ssc = _dcJoinDao.createSearchCriteria();\n                ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                ssc.addOr(\"description\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n            }\n\n            \r\n\r\n\r\n\n            if (domainId != null) { \r\n                \r\n                \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n\n                if (_accountMgr.isNormalUser(account.getId())) {\n                    \r\n                    \r\n                    SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                    sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc);\n                }\n\n            } else if (_accountMgr.isNormalUser(account.getId())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc2 = _dcJoinDao.createSearchCriteria();\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc2);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n\n            } else if (_accountMgr.isDomainAdmin(account.getId())\n                    || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n                \r\n                \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                \r\n                List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n                for (DomainVO domain : allChildDomains) {\n                    domainIds.add(domain.getId());\n                }\n                \r\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n            }\n\n            \r\n            \r\n            Boolean available = cmd.isAvailable();\n            if (account != null) {\n                if ((available != null) && Boolean.FALSE.equals(available)) {\n                    Set<Long> dcIds = new HashSet<Long>(); \r\n                    \r\n                    \r\n                    List<DomainRouterVO> routers = _routerDao.listBy(account.getId());\n                    for (DomainRouterVO router : routers) {\n                        dcIds.add(router.getDataCenterId());\n                    }\n                    if (dcIds.size() == 0) {\n                        return new Pair<List<DataCenterJoinVO>, Integer>(new ArrayList<DataCenterJoinVO>(), 0);\n                    } else {\n                        sc.addAnd(\"id\", SearchCriteria.Op.IN, dcIds.toArray());\n                    }\n\n                }\n            }\n        }\n\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            int count = 0;\n            sc.setJoinParameters(\"tagSearch\", \"resourceType\", ResourceObjectType.Zone.toString());\n            for (Map.Entry<String,String> entry : resourceTags.entrySet()) {\n                sc.setJoinParameters(\"tagSearch\", \"key\" + String.valueOf(count), entry.getKey());\n                sc.setJoinParameters(\"tagSearch\", \"value\" + String.valueOf(count), entry.getValue());\n                count++;\n            }\n        }\n\n        return _dcJoinDao.searchAndCount(sc, searchFilter);\n    }\n","date":"2018-01-20 05:49:27","endLine":3035,"groupId":"22512","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listDataCentersInternal","params":"(ListZonesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9c/728ef0f78a89a60fa81fa6bfab723232623813.src","preCode":"    private Pair<List<DataCenterJoinVO>, Integer> listDataCentersInternal(ListZonesCmd cmd) {\n        Account account = CallContext.current().getCallingAccount();\n        Long domainId = cmd.getDomainId();\n        Long id = cmd.getId();\n        String keyword = cmd.getKeyword();\n        String name = cmd.getName();\n        String networkType = cmd.getNetworkType();\n        Map<String, String> resourceTags = cmd.getTags();\n\n        SearchBuilder<DataCenterJoinVO> sb = _dcJoinDao.createSearchBuilder();\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            SearchBuilder<ResourceTagVO> tagSearch = _resourceTagDao.createSearchBuilder();\n            for (int count = 0; count < resourceTags.size(); count++) {\n                tagSearch.or().op(\"key\" + String.valueOf(count), tagSearch.entity().getKey(), SearchCriteria.Op.EQ);\n                tagSearch.and(\"value\" + String.valueOf(count), tagSearch.entity().getValue(), SearchCriteria.Op.EQ);\n                tagSearch.cp();\n            }\n            tagSearch.and(\"resourceType\", tagSearch.entity().getResourceType(), SearchCriteria.Op.EQ);\n            sb.groupBy(sb.entity().getId());\n            sb.join(\"tagSearch\", tagSearch, sb.entity().getId(), tagSearch.entity().getResourceId(), JoinBuilder.JoinType.INNER);\n        }\n\n        Filter searchFilter = new Filter(DataCenterJoinVO.class, null, false, cmd.getStartIndex(), cmd.getPageSizeVal());\n        SearchCriteria<DataCenterJoinVO> sc = sb.create();\n\n        if (networkType != null) {\n            sc.addAnd(\"networkType\", SearchCriteria.Op.EQ, networkType);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        } else if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        } else {\n            if (keyword != null) {\n                SearchCriteria<DataCenterJoinVO> ssc = _dcJoinDao.createSearchCriteria();\n                ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                ssc.addOr(\"description\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n            }\n\n            \r\n\r\n\r\n\n            if (domainId != null) { \r\n                \r\n                \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n\n                if (_accountMgr.isNormalUser(account.getId())) {\n                    \r\n                    \r\n                    SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                    sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc);\n                }\n\n            } else if (_accountMgr.isNormalUser(account.getId())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc2 = _dcJoinDao.createSearchCriteria();\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc2);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n\n            } else if (_accountMgr.isDomainAdmin(account.getId())\n                    || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n                \r\n                \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                \r\n                List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n                for (DomainVO domain : allChildDomains) {\n                    domainIds.add(domain.getId());\n                }\n                \r\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n            }\n\n            \r\n            \r\n            Boolean available = cmd.isAvailable();\n            if (account != null) {\n                if ((available != null) && Boolean.FALSE.equals(available)) {\n                    Set<Long> dcIds = new HashSet<Long>(); \r\n                    \r\n                    \r\n                    List<DomainRouterVO> routers = _routerDao.listBy(account.getId());\n                    for (DomainRouterVO router : routers) {\n                        dcIds.add(router.getDataCenterId());\n                    }\n                    if (dcIds.size() == 0) {\n                        return new Pair<List<DataCenterJoinVO>, Integer>(new ArrayList<DataCenterJoinVO>(), 0);\n                    } else {\n                        sc.addAnd(\"id\", SearchCriteria.Op.IN, dcIds.toArray());\n                    }\n\n                }\n            }\n        }\n\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            int count = 0;\n            sc.setJoinParameters(\"tagSearch\", \"resourceType\", ResourceObjectType.Zone.toString());\n            for (Map.Entry<String,String> entry : resourceTags.entrySet()) {\n                sc.setJoinParameters(\"tagSearch\", \"key\" + String.valueOf(count), entry.getKey());\n                sc.setJoinParameters(\"tagSearch\", \"value\" + String.valueOf(count), entry.getValue());\n                count++;\n            }\n        }\n\n        return _dcJoinDao.searchAndCount(sc, searchFilter);\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2856,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private List<Long> getDomainChildIds(long domainId) {\n        DomainVO domainRecord = _domainDao.findById(domainId);\n        List<Long> domainIds = new ArrayList<Long>();\n        domainIds.add(domainRecord.getId());\n        \r\n        List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n        for (DomainVO domain : allChildDomains) {\n            domainIds.add(domain.getId());\n        }\n        return domainIds;\n    }\n","date":"2018-01-20 05:49:27","endLine":717,"groupId":"18225","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDomainChildIds","params":"(longdomainId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7c/f193d49beb440c46cb1780d669145df750f25d.src","preCode":"    private List<Long> getDomainChildIds(long domainId) {\n        DomainVO domainRecord = _domainDao.findById(domainId);\n        List<Long> domainIds = new ArrayList<Long>();\n        domainIds.add(domainRecord.getId());\n        \r\n        List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n        for (DomainVO domain : allChildDomains) {\n            domainIds.add(domain.getId());\n        }\n        return domainIds;\n    }\n","realPath":"plugins/dedicated-resources/src/main/java/org/apache/cloudstack/dedicated/DedicatedResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-19 20:33:56","commitOrder":2,"curCode":"    private Pair<List<DataCenterJoinVO>, Integer> listDataCentersInternal(ListZonesCmd cmd) {\n        Account account = CallContext.current().getCallingAccount();\n        Long domainId = cmd.getDomainId();\n        Long id = cmd.getId();\n        String keyword = cmd.getKeyword();\n        String name = cmd.getName();\n        String networkType = cmd.getNetworkType();\n        Map<String, String> resourceTags = cmd.getTags();\n\n        SearchBuilder<DataCenterJoinVO> sb = _dcJoinDao.createSearchBuilder();\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            SearchBuilder<ResourceTagVO> tagSearch = _resourceTagDao.createSearchBuilder();\n            for (int count = 0; count < resourceTags.size(); count++) {\n                tagSearch.or().op(\"key\" + String.valueOf(count), tagSearch.entity().getKey(), SearchCriteria.Op.EQ);\n                tagSearch.and(\"value\" + String.valueOf(count), tagSearch.entity().getValue(), SearchCriteria.Op.EQ);\n                tagSearch.cp();\n            }\n            tagSearch.and(\"resourceType\", tagSearch.entity().getResourceType(), SearchCriteria.Op.EQ);\n            sb.groupBy(sb.entity().getId());\n            sb.join(\"tagSearch\", tagSearch, sb.entity().getId(), tagSearch.entity().getResourceId(), JoinBuilder.JoinType.INNER);\n        }\n\n        Filter searchFilter = new Filter(DataCenterJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        SearchCriteria<DataCenterJoinVO> sc = sb.create();\n\n        if (networkType != null) {\n            sc.addAnd(\"networkType\", SearchCriteria.Op.EQ, networkType);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        } else if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        } else {\n            if (keyword != null) {\n                SearchCriteria<DataCenterJoinVO> ssc = _dcJoinDao.createSearchCriteria();\n                ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                ssc.addOr(\"description\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n            }\n\n            \r\n\r\n\r\n\n            if (domainId != null) { \r\n                \r\n                \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n\n                if (_accountMgr.isNormalUser(account.getId())) {\n                    \r\n                    \r\n                    SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                    sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc);\n                }\n\n            } else if (_accountMgr.isNormalUser(account.getId())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc2 = _dcJoinDao.createSearchCriteria();\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc2);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n\n            } else if (_accountMgr.isDomainAdmin(account.getId()) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n                \r\n                \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                \r\n                List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n                for (DomainVO domain : allChildDomains) {\n                    domainIds.add(domain.getId());\n                }\n                \r\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n            }\n\n            \r\n            \r\n            Boolean available = cmd.isAvailable();\n            if (account != null) {\n                if ((available != null) && Boolean.FALSE.equals(available)) {\n                    Set<Long> dcIds = new HashSet<Long>(); \r\n                    \r\n                    \r\n                    List<DomainRouterVO> routers = _routerDao.listBy(account.getId());\n                    for (DomainRouterVO router : routers) {\n                        dcIds.add(router.getDataCenterId());\n                    }\n                    if (dcIds.size() == 0) {\n                        return new Pair<List<DataCenterJoinVO>, Integer>(new ArrayList<DataCenterJoinVO>(), 0);\n                    } else {\n                        sc.addAnd(\"id\", SearchCriteria.Op.IN, dcIds.toArray());\n                    }\n\n                }\n            }\n        }\n\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            int count = 0;\n            sc.setJoinParameters(\"tagSearch\", \"resourceType\", ResourceObjectType.Zone.toString());\n            for (Map.Entry<String, String> entry : resourceTags.entrySet()) {\n                sc.setJoinParameters(\"tagSearch\", \"key\" + String.valueOf(count), entry.getKey());\n                sc.setJoinParameters(\"tagSearch\", \"value\" + String.valueOf(count), entry.getValue());\n                count++;\n            }\n        }\n\n        return _dcJoinDao.searchAndCount(sc, searchFilter);\n    }\n","date":"2019-06-19 20:33:56","endLine":2969,"groupId":"22512","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listDataCentersInternal","params":"(ListZonesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/003185da26c67e2f84c7b5a878ea1599bf1940.src","preCode":"    private Pair<List<DataCenterJoinVO>, Integer> listDataCentersInternal(ListZonesCmd cmd) {\n        Account account = CallContext.current().getCallingAccount();\n        Long domainId = cmd.getDomainId();\n        Long id = cmd.getId();\n        String keyword = cmd.getKeyword();\n        String name = cmd.getName();\n        String networkType = cmd.getNetworkType();\n        Map<String, String> resourceTags = cmd.getTags();\n\n        SearchBuilder<DataCenterJoinVO> sb = _dcJoinDao.createSearchBuilder();\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            SearchBuilder<ResourceTagVO> tagSearch = _resourceTagDao.createSearchBuilder();\n            for (int count = 0; count < resourceTags.size(); count++) {\n                tagSearch.or().op(\"key\" + String.valueOf(count), tagSearch.entity().getKey(), SearchCriteria.Op.EQ);\n                tagSearch.and(\"value\" + String.valueOf(count), tagSearch.entity().getValue(), SearchCriteria.Op.EQ);\n                tagSearch.cp();\n            }\n            tagSearch.and(\"resourceType\", tagSearch.entity().getResourceType(), SearchCriteria.Op.EQ);\n            sb.groupBy(sb.entity().getId());\n            sb.join(\"tagSearch\", tagSearch, sb.entity().getId(), tagSearch.entity().getResourceId(), JoinBuilder.JoinType.INNER);\n        }\n\n        Filter searchFilter = new Filter(DataCenterJoinVO.class, null, false, cmd.getStartIndex(), cmd.getPageSizeVal());\n        SearchCriteria<DataCenterJoinVO> sc = sb.create();\n\n        if (networkType != null) {\n            sc.addAnd(\"networkType\", SearchCriteria.Op.EQ, networkType);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        } else if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        } else {\n            if (keyword != null) {\n                SearchCriteria<DataCenterJoinVO> ssc = _dcJoinDao.createSearchCriteria();\n                ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                ssc.addOr(\"description\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n            }\n\n            \r\n\r\n\r\n\n            if (domainId != null) { \r\n                \r\n                \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n\n                if (_accountMgr.isNormalUser(account.getId())) {\n                    \r\n                    \r\n                    SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                    sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc);\n                }\n\n            } else if (_accountMgr.isNormalUser(account.getId())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc2 = _dcJoinDao.createSearchCriteria();\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc2);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n\n            } else if (_accountMgr.isDomainAdmin(account.getId()) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n                \r\n                \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                \r\n                List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n                for (DomainVO domain : allChildDomains) {\n                    domainIds.add(domain.getId());\n                }\n                \r\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n            }\n\n            \r\n            \r\n            Boolean available = cmd.isAvailable();\n            if (account != null) {\n                if ((available != null) && Boolean.FALSE.equals(available)) {\n                    Set<Long> dcIds = new HashSet<Long>(); \r\n                    \r\n                    \r\n                    List<DomainRouterVO> routers = _routerDao.listBy(account.getId());\n                    for (DomainRouterVO router : routers) {\n                        dcIds.add(router.getDataCenterId());\n                    }\n                    if (dcIds.size() == 0) {\n                        return new Pair<List<DataCenterJoinVO>, Integer>(new ArrayList<DataCenterJoinVO>(), 0);\n                    } else {\n                        sc.addAnd(\"id\", SearchCriteria.Op.IN, dcIds.toArray());\n                    }\n\n                }\n            }\n        }\n\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            int count = 0;\n            sc.setJoinParameters(\"tagSearch\", \"resourceType\", ResourceObjectType.Zone.toString());\n            for (Map.Entry<String, String> entry : resourceTags.entrySet()) {\n                sc.setJoinParameters(\"tagSearch\", \"key\" + String.valueOf(count), entry.getKey());\n                sc.setJoinParameters(\"tagSearch\", \"value\" + String.valueOf(count), entry.getValue());\n                count++;\n            }\n        }\n\n        return _dcJoinDao.searchAndCount(sc, searchFilter);\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2791,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private List<Long> getDomainChildIds(long domainId) {\n        DomainVO domainRecord = _domainDao.findById(domainId);\n        List<Long> domainIds = new ArrayList<Long>();\n        domainIds.add(domainRecord.getId());\n        \r\n        List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n        for (DomainVO domain : allChildDomains) {\n            domainIds.add(domain.getId());\n        }\n        return domainIds;\n    }\n","date":"2018-01-20 05:49:27","endLine":717,"groupId":"18225","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDomainChildIds","params":"(longdomainId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7c/f193d49beb440c46cb1780d669145df750f25d.src","preCode":"    private List<Long> getDomainChildIds(long domainId) {\n        DomainVO domainRecord = _domainDao.findById(domainId);\n        List<Long> domainIds = new ArrayList<Long>();\n        domainIds.add(domainRecord.getId());\n        \r\n        List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n        for (DomainVO domain : allChildDomains) {\n            domainIds.add(domain.getId());\n        }\n        return domainIds;\n    }\n","realPath":"plugins/dedicated-resources/src/main/java/org/apache/cloudstack/dedicated/DedicatedResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"N"}],"commitId":"90cd8aa73d1efec3db39fea6d25ca969c3e3152a","commitMessage":"@@@server: add support for sorting zones in UI/API (#3242)\n\nProblem: Not able to configure a sort order for the zones that are listed in various views in the UI.\n\nRoot Cause: There is no mechanism to accept sort key for existing zones or UI widget.  that would allow to listing zones in the UI in a certain order.\n\nSolution: The order of zones in listed in various views in the UI can now be configured through the newly added ?sort_key? field added for the zone. It can be set using updateZone API by providing ?sort_key? parameter for a zone.  or by reordering the items in the zones list in the UI. UI has been updated to show ordering controls in zones list view. Database changes include updating table ?data_center? by adding ?sort_key? column (containing integer values and defaults to zero).\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-06-19 20:33:56","modifiedFileCount":"9","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-08-18 19:22:25","commitOrder":3,"curCode":"    private Pair<List<DataCenterJoinVO>, Integer> listDataCentersInternal(ListZonesCmd cmd) {\n        Account account = CallContext.current().getCallingAccount();\n        Long domainId = cmd.getDomainId();\n        Long id = cmd.getId();\n        String keyword = cmd.getKeyword();\n        String name = cmd.getName();\n        String networkType = cmd.getNetworkType();\n        Map<String, String> resourceTags = cmd.getTags();\n\n        SearchBuilder<DataCenterJoinVO> sb = _dcJoinDao.createSearchBuilder();\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            SearchBuilder<ResourceTagVO> tagSearch = _resourceTagDao.createSearchBuilder();\n            for (int count = 0; count < resourceTags.size(); count++) {\n                tagSearch.or().op(\"key\" + String.valueOf(count), tagSearch.entity().getKey(), SearchCriteria.Op.EQ);\n                tagSearch.and(\"value\" + String.valueOf(count), tagSearch.entity().getValue(), SearchCriteria.Op.EQ);\n                tagSearch.cp();\n            }\n            tagSearch.and(\"resourceType\", tagSearch.entity().getResourceType(), SearchCriteria.Op.EQ);\n            sb.groupBy(sb.entity().getId());\n            sb.join(\"tagSearch\", tagSearch, sb.entity().getId(), tagSearch.entity().getResourceId(), JoinBuilder.JoinType.INNER);\n        }\n\n        Filter searchFilter = new Filter(DataCenterJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        searchFilter.addOrderBy(DataCenterJoinVO.class, \"id\", true);\n        SearchCriteria<DataCenterJoinVO> sc = sb.create();\n\n        if (networkType != null) {\n            sc.addAnd(\"networkType\", SearchCriteria.Op.EQ, networkType);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        } else if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        } else {\n            if (keyword != null) {\n                SearchCriteria<DataCenterJoinVO> ssc = _dcJoinDao.createSearchCriteria();\n                ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                ssc.addOr(\"description\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n            }\n\n            \r\n\r\n\r\n\n            if (domainId != null) { \r\n                \r\n                \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n\n                if (_accountMgr.isNormalUser(account.getId())) {\n                    \r\n                    \r\n                    SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                    sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc);\n                }\n\n            } else if (_accountMgr.isNormalUser(account.getId())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc2 = _dcJoinDao.createSearchCriteria();\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc2);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n\n            } else if (_accountMgr.isDomainAdmin(account.getId()) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n                \r\n                \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                \r\n                List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n                for (DomainVO domain : allChildDomains) {\n                    domainIds.add(domain.getId());\n                }\n                \r\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n            }\n\n            \r\n            \r\n            Boolean available = cmd.isAvailable();\n            if (account != null) {\n                if ((available != null) && Boolean.FALSE.equals(available)) {\n                    Set<Long> dcIds = new HashSet<Long>(); \r\n                    \r\n                    \r\n                    List<DomainRouterVO> routers = _routerDao.listBy(account.getId());\n                    for (DomainRouterVO router : routers) {\n                        dcIds.add(router.getDataCenterId());\n                    }\n                    if (dcIds.size() == 0) {\n                        return new Pair<List<DataCenterJoinVO>, Integer>(new ArrayList<DataCenterJoinVO>(), 0);\n                    } else {\n                        sc.addAnd(\"id\", SearchCriteria.Op.IN, dcIds.toArray());\n                    }\n\n                }\n            }\n        }\n\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            int count = 0;\n            sc.setJoinParameters(\"tagSearch\", \"resourceType\", ResourceObjectType.Zone.toString());\n            for (Map.Entry<String, String> entry : resourceTags.entrySet()) {\n                sc.setJoinParameters(\"tagSearch\", \"key\" + String.valueOf(count), entry.getKey());\n                sc.setJoinParameters(\"tagSearch\", \"value\" + String.valueOf(count), entry.getValue());\n                count++;\n            }\n        }\n\n        return _dcJoinDao.searchAndCount(sc, searchFilter);\n    }\n","date":"2021-08-18 19:22:25","endLine":3343,"groupId":"101550","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"listDataCentersInternal","params":"(ListZonesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6e/fe2e8a4171d49f068666b2d2a1f245b984e7a7.src","preCode":"    private Pair<List<DataCenterJoinVO>, Integer> listDataCentersInternal(ListZonesCmd cmd) {\n        Account account = CallContext.current().getCallingAccount();\n        Long domainId = cmd.getDomainId();\n        Long id = cmd.getId();\n        String keyword = cmd.getKeyword();\n        String name = cmd.getName();\n        String networkType = cmd.getNetworkType();\n        Map<String, String> resourceTags = cmd.getTags();\n\n        SearchBuilder<DataCenterJoinVO> sb = _dcJoinDao.createSearchBuilder();\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            SearchBuilder<ResourceTagVO> tagSearch = _resourceTagDao.createSearchBuilder();\n            for (int count = 0; count < resourceTags.size(); count++) {\n                tagSearch.or().op(\"key\" + String.valueOf(count), tagSearch.entity().getKey(), SearchCriteria.Op.EQ);\n                tagSearch.and(\"value\" + String.valueOf(count), tagSearch.entity().getValue(), SearchCriteria.Op.EQ);\n                tagSearch.cp();\n            }\n            tagSearch.and(\"resourceType\", tagSearch.entity().getResourceType(), SearchCriteria.Op.EQ);\n            sb.groupBy(sb.entity().getId());\n            sb.join(\"tagSearch\", tagSearch, sb.entity().getId(), tagSearch.entity().getResourceId(), JoinBuilder.JoinType.INNER);\n        }\n\n        Filter searchFilter = new Filter(DataCenterJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        SearchCriteria<DataCenterJoinVO> sc = sb.create();\n\n        if (networkType != null) {\n            sc.addAnd(\"networkType\", SearchCriteria.Op.EQ, networkType);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        } else if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        } else {\n            if (keyword != null) {\n                SearchCriteria<DataCenterJoinVO> ssc = _dcJoinDao.createSearchCriteria();\n                ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                ssc.addOr(\"description\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n                sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n            }\n\n            \r\n\r\n\r\n\n            if (domainId != null) { \r\n                \r\n                \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n\n                if (_accountMgr.isNormalUser(account.getId())) {\n                    \r\n                    \r\n                    SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                    sdc.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                    sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc);\n                }\n\n            } else if (_accountMgr.isNormalUser(account.getId())) {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc2 = _dcJoinDao.createSearchCriteria();\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n                sdc2.addOr(\"accountId\", SearchCriteria.Op.NULL);\n\n                sc.addAnd(\"accountId\", SearchCriteria.Op.SC, sdc2);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n\n            } else if (_accountMgr.isDomainAdmin(account.getId()) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n                \r\n                \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord = _domainDao.findById(account.getDomainId());\n                if (domainRecord == null) {\n                    s_logger.error(\"Could not find the domainId for account:\" + account.getAccountName());\n                    throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + account.getAccountName());\n                }\n                domainIds.add(domainRecord.getId());\n                \r\n                List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n                for (DomainVO domain : allChildDomains) {\n                    domainIds.add(domain.getId());\n                }\n                \r\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                \r\n                \r\n                SearchCriteria<DataCenterJoinVO> sdc = _dcJoinDao.createSearchCriteria();\n                sdc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                sdc.addOr(\"domainId\", SearchCriteria.Op.NULL);\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, sdc);\n\n                \r\n                sc.addAnd(\"allocationState\", SearchCriteria.Op.NEQ, Grouping.AllocationState.Disabled);\n\n                \r\n                \r\n                List<Long> dedicatedZoneIds = removeDedicatedZoneNotSuitabe(domainIds);\n                if (!dedicatedZoneIds.isEmpty()) {\n                    sdc.addAnd(\"id\", SearchCriteria.Op.NIN, dedicatedZoneIds.toArray(new Object[dedicatedZoneIds.size()]));\n                }\n            }\n\n            \r\n            \r\n            Boolean available = cmd.isAvailable();\n            if (account != null) {\n                if ((available != null) && Boolean.FALSE.equals(available)) {\n                    Set<Long> dcIds = new HashSet<Long>(); \r\n                    \r\n                    \r\n                    List<DomainRouterVO> routers = _routerDao.listBy(account.getId());\n                    for (DomainRouterVO router : routers) {\n                        dcIds.add(router.getDataCenterId());\n                    }\n                    if (dcIds.size() == 0) {\n                        return new Pair<List<DataCenterJoinVO>, Integer>(new ArrayList<DataCenterJoinVO>(), 0);\n                    } else {\n                        sc.addAnd(\"id\", SearchCriteria.Op.IN, dcIds.toArray());\n                    }\n\n                }\n            }\n        }\n\n        if (resourceTags != null && !resourceTags.isEmpty()) {\n            int count = 0;\n            sc.setJoinParameters(\"tagSearch\", \"resourceType\", ResourceObjectType.Zone.toString());\n            for (Map.Entry<String, String> entry : resourceTags.entrySet()) {\n                sc.setJoinParameters(\"tagSearch\", \"key\" + String.valueOf(count), entry.getKey());\n                sc.setJoinParameters(\"tagSearch\", \"value\" + String.valueOf(count), entry.getValue());\n                count++;\n            }\n        }\n\n        return _dcJoinDao.searchAndCount(sc, searchFilter);\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3164,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private List<Long> getDomainChildIds(long domainId) {\n        DomainVO domainRecord = _domainDao.findById(domainId);\n        List<Long> domainIds = new ArrayList<Long>();\n        domainIds.add(domainRecord.getId());\n        \r\n        List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n        for (DomainVO domain : allChildDomains) {\n            domainIds.add(domain.getId());\n        }\n        return domainIds;\n    }\n","date":"2018-01-20 05:49:27","endLine":717,"groupId":"101550","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getDomainChildIds","params":"(longdomainId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7c/f193d49beb440c46cb1780d669145df750f25d.src","preCode":"    private List<Long> getDomainChildIds(long domainId) {\n        DomainVO domainRecord = _domainDao.findById(domainId);\n        List<Long> domainIds = new ArrayList<Long>();\n        domainIds.add(domainRecord.getId());\n        \r\n        List<DomainVO> allChildDomains = _domainDao.findAllChildren(domainRecord.getPath(), domainRecord.getId());\n        for (DomainVO domain : allChildDomains) {\n            domainIds.add(domain.getId());\n        }\n        return domainIds;\n    }\n","realPath":"plugins/dedicated-resources/src/main/java/org/apache/cloudstack/dedicated/DedicatedResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"N"}],"commitId":"7bfc7f04fed4d32d135d4bac24cfd3de0c4271a9","commitMessage":"@@@server: use id column as secondary sort criteria with sortKey (#5320)\n\nFor tables that use sort_key field.  incorrect results can be returned by the list* APIs while using pagination and with the same values for sort-key field. (Default value for sort_key field remains 0).\nThis change adds id column as secondary sort criteria in such cases.\n\nFixes #5316\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-08-18 19:22:25","modifiedFileCount":"4","status":"M","submitter":"Abhishek Kumar"}]
