[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void runDeleteSslCertValid() throws Exception {\n\n        TransactionLegacy.open(\"runDeleteSslCertValid\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n        final long certId = 1;\n\n        \r\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(Matchers.anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(Matchers.anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(Matchers.anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(Matchers.anyLong())).thenReturn(new SslCertVO());\n\n        \r\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(Matchers.anyLong())).thenReturn(null);\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        certService.deleteSslCert(deleteCmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":649,"groupId":"12151","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runDeleteSslCertValid","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/b0b691d5794852742a11560b710fb94eed074f.src","preCode":"    public void runDeleteSslCertValid() throws Exception {\n\n        TransactionLegacy.open(\"runDeleteSslCertValid\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n        final long certId = 1;\n\n        \r\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(Matchers.anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(Matchers.anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(Matchers.anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(Matchers.anyLong())).thenReturn(new SslCertVO());\n\n        \r\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(Matchers.anyLong())).thenReturn(null);\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        certService.deleteSslCert(deleteCmd);\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/network/ssl/CertServiceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void runDeleteSslCertBoundCert() throws NoSuchFieldException, IllegalAccessException {\n\n        TransactionLegacy.open(\"runDeleteSslCertBoundCert\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n\n        \r\n        final long certId = 1;\n\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(Matchers.anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(Matchers.anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(Matchers.anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(Matchers.anyLong())).thenReturn(new SslCertVO());\n\n        \r\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n\n        final List<LoadBalancerCertMapVO> lbMapList = new ArrayList<>();\n        lbMapList.add(new LoadBalancerCertMapVO());\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(Matchers.anyLong())).thenReturn(lbMapList);\n\n        certService._entityMgr = Mockito.mock(EntityManager.class);\n        when(certService._entityMgr.findById(Matchers.eq(LoadBalancerVO.class), Matchers.anyLong())).thenReturn(new LoadBalancerVO());\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        try {\n            certService.deleteSslCert(deleteCmd);\n            Assert.fail(\"Delete with a cert id bound to a lb should fail\");\n        } catch (final Exception e) {\n            Assert.assertTrue(e.getMessage().contains(\"Certificate in use by a loadbalancer\"));\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":700,"groupId":"12151","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runDeleteSslCertBoundCert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/b0b691d5794852742a11560b710fb94eed074f.src","preCode":"    public void runDeleteSslCertBoundCert() throws NoSuchFieldException, IllegalAccessException {\n\n        TransactionLegacy.open(\"runDeleteSslCertBoundCert\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n\n        \r\n        final long certId = 1;\n\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(Matchers.anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(Matchers.anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(Matchers.anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(Matchers.anyLong())).thenReturn(new SslCertVO());\n\n        \r\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n\n        final List<LoadBalancerCertMapVO> lbMapList = new ArrayList<>();\n        lbMapList.add(new LoadBalancerCertMapVO());\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(Matchers.anyLong())).thenReturn(lbMapList);\n\n        certService._entityMgr = Mockito.mock(EntityManager.class);\n        when(certService._entityMgr.findById(Matchers.eq(LoadBalancerVO.class), Matchers.anyLong())).thenReturn(new LoadBalancerVO());\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        try {\n            certService.deleteSslCert(deleteCmd);\n            Assert.fail(\"Delete with a cert id bound to a lb should fail\");\n        } catch (final Exception e) {\n            Assert.assertTrue(e.getMessage().contains(\"Certificate in use by a loadbalancer\"));\n        }\n\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/network/ssl/CertServiceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":652,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void runDeleteSslCertValid() throws Exception {\n\n        TransactionLegacy.open(\"runDeleteSslCertValid\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n        final long certId = 1;\n\n        \r\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(anyLong())).thenReturn(new SslCertVO());\n\n        \r\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(anyLong())).thenReturn(null);\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        certService.deleteSslCert(deleteCmd);\n    }\n","date":"2020-02-12 15:28:25","endLine":653,"groupId":"101242","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runDeleteSslCertValid","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a8/514f915db07b6735cfa766473539ef612db7b2.src","preCode":"    public void runDeleteSslCertValid() throws Exception {\n\n        TransactionLegacy.open(\"runDeleteSslCertValid\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n        final long certId = 1;\n\n        \r\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(Matchers.anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(Matchers.anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(Matchers.anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(Matchers.anyLong())).thenReturn(new SslCertVO());\n\n        \r\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(Matchers.anyLong())).thenReturn(null);\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        certService.deleteSslCert(deleteCmd);\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/network/ssl/CertServiceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void runDeleteSslCertBoundCert() throws NoSuchFieldException, IllegalAccessException {\n\n        TransactionLegacy.open(\"runDeleteSslCertBoundCert\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n\n        \r\n        final long certId = 1;\n\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(anyLong())).thenReturn(new SslCertVO());\n\n        \r\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n\n        final List<LoadBalancerCertMapVO> lbMapList = new ArrayList<>();\n        lbMapList.add(new LoadBalancerCertMapVO());\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(anyLong())).thenReturn(lbMapList);\n\n\n        certService._entityMgr = Mockito.mock(EntityManager.class);\n        when(certService._entityMgr.findById(eq(LoadBalancerVO.class), nullable(Long.class))).thenReturn(new LoadBalancerVO());\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        try {\n            certService.deleteSslCert(deleteCmd);\n            Assert.fail(\"Delete with a cert id bound to a lb should fail\");\n        } catch (final Exception e) {\n            Assert.assertTrue(e.getMessage().contains(\"Certificate in use by a loadbalancer\"));\n        }\n\n    }\n","date":"2020-02-12 15:28:25","endLine":705,"groupId":"101242","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runDeleteSslCertBoundCert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a8/514f915db07b6735cfa766473539ef612db7b2.src","preCode":"    public void runDeleteSslCertBoundCert() throws NoSuchFieldException, IllegalAccessException {\n\n        TransactionLegacy.open(\"runDeleteSslCertBoundCert\");\n\n        final CertServiceImpl certService = new CertServiceImpl();\n\n        \r\n        final long certId = 1;\n\n        certService._accountMgr = Mockito.mock(AccountManager.class);\n        final Account account = new AccountVO(\"testaccount\", 1, \"networkdomain\", (short)0, UUID.randomUUID().toString());\n        when(certService._accountMgr.getAccount(Matchers.anyLong())).thenReturn(account);\n\n        certService._domainDao = Mockito.mock(DomainDao.class);\n        final DomainVO domain = new DomainVO(\"networkdomain\", 1L, 1L, \"networkdomain\");\n        when(certService._domainDao.findByIdIncludingRemoved(Matchers.anyLong())).thenReturn(domain);\n\n        certService._sslCertDao = Mockito.mock(SslCertDao.class);\n        when(certService._sslCertDao.remove(Matchers.anyLong())).thenReturn(true);\n        when(certService._sslCertDao.findById(Matchers.anyLong())).thenReturn(new SslCertVO());\n\n        \r\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n\n        final List<LoadBalancerCertMapVO> lbMapList = new ArrayList<>();\n        lbMapList.add(new LoadBalancerCertMapVO());\n\n        certService._lbCertDao = Mockito.mock(LoadBalancerCertMapDao.class);\n        when(certService._lbCertDao.listByCertId(Matchers.anyLong())).thenReturn(lbMapList);\n\n        certService._entityMgr = Mockito.mock(EntityManager.class);\n        when(certService._entityMgr.findById(Matchers.eq(LoadBalancerVO.class), Matchers.anyLong())).thenReturn(new LoadBalancerVO());\n\n        \r\n        final DeleteSslCertCmd deleteCmd = new DeleteSslCertCmdExtn();\n        final Class<?> klazz = deleteCmd.getClass().getSuperclass();\n\n        final Field certField = klazz.getDeclaredField(\"id\");\n        certField.setAccessible(true);\n        certField.set(deleteCmd, certId);\n\n        try {\n            certService.deleteSslCert(deleteCmd);\n            Assert.fail(\"Delete with a cert id bound to a lb should fail\");\n        } catch (final Exception e) {\n            Assert.assertTrue(e.getMessage().contains(\"Certificate in use by a loadbalancer\"));\n        }\n\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/network/ssl/CertServiceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":656,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
