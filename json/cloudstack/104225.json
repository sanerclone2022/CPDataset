[{"authorTime":"2020-03-06 15:51:23","codes":[{"authorDate":"2020-03-06 15:51:23","commitOrder":1,"curCode":"    private boolean validateServiceOffering(final ServiceOffering serviceOffering, final KubernetesSupportedVersion version) {\n        if (serviceOffering.isDynamic()) {\n            throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for creating clusters, service offering ID: %s\", serviceOffering.getUuid()));\n        }\n        if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\", serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n        }\n        if (serviceOffering.getCpu() < version.getMinimumCpu()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes version ID: %s needs minimum %d vCPUs\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumCpu()));\n        }\n        if (serviceOffering.getRamSize() < version.getMinimumRamSize()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumRamSize()));\n        }\n        return true;\n    }\n","date":"2020-03-06 15:51:23","endLine":476,"groupId":"6885","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateServiceOffering","params":"(finalServiceOfferingserviceOffering@finalKubernetesSupportedVersionversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/8fa034a8ba19c25ff80ea5a512ad96d333cf35.src","preCode":"    private boolean validateServiceOffering(final ServiceOffering serviceOffering, final KubernetesSupportedVersion version) {\n        if (serviceOffering.isDynamic()) {\n            throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for creating clusters, service offering ID: %s\", serviceOffering.getUuid()));\n        }\n        if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\", serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n        }\n        if (serviceOffering.getCpu() < version.getMinimumCpu()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes version ID: %s needs minimum %d vCPUs\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumCpu()));\n        }\n        if (serviceOffering.getRamSize() < version.getMinimumRamSize()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumRamSize()));\n        }\n        return true;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"B"},{"authorDate":"2020-03-06 15:51:23","commitOrder":1,"curCode":"    private void validateKubernetesClusterScaleParameters(ScaleKubernetesClusterCmd cmd) {\n        final Long kubernetesClusterId = cmd.getId();\n        final Long serviceOfferingId = cmd.getServiceOfferingId();\n        final Long clusterSize = cmd.getClusterSize();\n        if (kubernetesClusterId == null || kubernetesClusterId < 1L) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null || kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        Account caller = CallContext.current().getCallingAccount();\n        accountManager.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n\n        if (serviceOfferingId == null && clusterSize == null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled, either a new service offering or a new cluster size must be passed\", kubernetesCluster.getUuid()));\n        }\n\n        final KubernetesSupportedVersion clusterVersion = kubernetesSupportedVersionDao.findById(kubernetesCluster.getKubernetesVersionId());\n        if (clusterVersion == null) {\n            throw new CloudRuntimeException(String.format(\"Invalid Kubernetes version associated with Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        ServiceOffering serviceOffering = null;\n        if (serviceOfferingId != null) {\n            serviceOffering = serviceOfferingDao.findById(serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Failed to find service offering ID: \" + serviceOfferingId);\n            } else {\n                if (serviceOffering.isDynamic()) {\n                    throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for Kubernetes clusters. Kubernetes cluster ID: %s, service offering ID: %s\", kubernetesCluster.getUuid(), serviceOffering.getUuid()));\n                }\n                if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n                }\n                if (serviceOffering.getCpu() < clusterVersion.getMinimumCpu()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d vCPUs\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumCpu()));\n                }\n                if (serviceOffering.getRamSize() < clusterVersion.getMinimumRamSize()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumRamSize()));\n                }\n            }\n            final ServiceOffering existingServiceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n            if (serviceOffering.getRamSize() < existingServiceOffering.getRamSize() ||\n                    serviceOffering.getCpu() * serviceOffering.getSpeed() < existingServiceOffering.getCpu() * existingServiceOffering.getSpeed()) {\n                logAndThrow(Level.WARN, String.format(\"Kubernetes cluster cannot be scaled down for service offering. Service offering ID: %s offers lesser resources as compared to service offering ID: %s of Kubernetes cluster ID: %s\",\n                        serviceOffering.getUuid(), existingServiceOffering.getUuid(), kubernetesCluster.getUuid()));\n            }\n        }\n\n        if (!(kubernetesCluster.getState().equals(KubernetesCluster.State.Created) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Running) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped))) {\n            throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n        }\n\n        if (clusterSize != null) {\n            if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) { \r\n                throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n            }\n            if (clusterSize < 1) {\n                throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled for size, %d\", kubernetesCluster.getUuid(), clusterSize));\n            }\n        }\n    }\n","date":"2020-03-06 15:51:23","endLine":891,"groupId":"6885","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateKubernetesClusterScaleParameters","params":"(ScaleKubernetesClusterCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/8fa034a8ba19c25ff80ea5a512ad96d333cf35.src","preCode":"    private void validateKubernetesClusterScaleParameters(ScaleKubernetesClusterCmd cmd) {\n        final Long kubernetesClusterId = cmd.getId();\n        final Long serviceOfferingId = cmd.getServiceOfferingId();\n        final Long clusterSize = cmd.getClusterSize();\n        if (kubernetesClusterId == null || kubernetesClusterId < 1L) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null || kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        Account caller = CallContext.current().getCallingAccount();\n        accountManager.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n\n        if (serviceOfferingId == null && clusterSize == null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled, either a new service offering or a new cluster size must be passed\", kubernetesCluster.getUuid()));\n        }\n\n        final KubernetesSupportedVersion clusterVersion = kubernetesSupportedVersionDao.findById(kubernetesCluster.getKubernetesVersionId());\n        if (clusterVersion == null) {\n            throw new CloudRuntimeException(String.format(\"Invalid Kubernetes version associated with Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        ServiceOffering serviceOffering = null;\n        if (serviceOfferingId != null) {\n            serviceOffering = serviceOfferingDao.findById(serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Failed to find service offering ID: \" + serviceOfferingId);\n            } else {\n                if (serviceOffering.isDynamic()) {\n                    throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for Kubernetes clusters. Kubernetes cluster ID: %s, service offering ID: %s\", kubernetesCluster.getUuid(), serviceOffering.getUuid()));\n                }\n                if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n                }\n                if (serviceOffering.getCpu() < clusterVersion.getMinimumCpu()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d vCPUs\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumCpu()));\n                }\n                if (serviceOffering.getRamSize() < clusterVersion.getMinimumRamSize()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumRamSize()));\n                }\n            }\n            final ServiceOffering existingServiceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n            if (serviceOffering.getRamSize() < existingServiceOffering.getRamSize() ||\n                    serviceOffering.getCpu() * serviceOffering.getSpeed() < existingServiceOffering.getCpu() * existingServiceOffering.getSpeed()) {\n                logAndThrow(Level.WARN, String.format(\"Kubernetes cluster cannot be scaled down for service offering. Service offering ID: %s offers lesser resources as compared to service offering ID: %s of Kubernetes cluster ID: %s\",\n                        serviceOffering.getUuid(), existingServiceOffering.getUuid(), kubernetesCluster.getUuid()));\n            }\n        }\n\n        if (!(kubernetesCluster.getState().equals(KubernetesCluster.State.Created) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Running) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped))) {\n            throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n        }\n\n        if (clusterSize != null) {\n            if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) { \r\n                throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n            }\n            if (clusterSize < 1) {\n                throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled for size, %d\", kubernetesCluster.getUuid(), clusterSize));\n            }\n        }\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"B"}],"commitId":"8cc70c7d8725319ba5455c5fe17ede275e372f1c","commitMessage":"@@@CloudStack Kubernetes Service (#3680)\n\n","date":"2020-03-06 15:51:23","modifiedFileCount":"10","status":"B","submitter":"Abhishek Kumar"},{"authorTime":"2020-08-04 13:58:43","codes":[{"authorDate":"2020-03-06 15:51:23","commitOrder":2,"curCode":"    private boolean validateServiceOffering(final ServiceOffering serviceOffering, final KubernetesSupportedVersion version) {\n        if (serviceOffering.isDynamic()) {\n            throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for creating clusters, service offering ID: %s\", serviceOffering.getUuid()));\n        }\n        if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\", serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n        }\n        if (serviceOffering.getCpu() < version.getMinimumCpu()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes version ID: %s needs minimum %d vCPUs\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumCpu()));\n        }\n        if (serviceOffering.getRamSize() < version.getMinimumRamSize()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumRamSize()));\n        }\n        return true;\n    }\n","date":"2020-03-06 15:51:23","endLine":476,"groupId":"6885","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateServiceOffering","params":"(finalServiceOfferingserviceOffering@finalKubernetesSupportedVersionversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/8fa034a8ba19c25ff80ea5a512ad96d333cf35.src","preCode":"    private boolean validateServiceOffering(final ServiceOffering serviceOffering, final KubernetesSupportedVersion version) {\n        if (serviceOffering.isDynamic()) {\n            throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for creating clusters, service offering ID: %s\", serviceOffering.getUuid()));\n        }\n        if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\", serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n        }\n        if (serviceOffering.getCpu() < version.getMinimumCpu()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes version ID: %s needs minimum %d vCPUs\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumCpu()));\n        }\n        if (serviceOffering.getRamSize() < version.getMinimumRamSize()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumRamSize()));\n        }\n        return true;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"N"},{"authorDate":"2020-08-04 13:58:43","commitOrder":2,"curCode":"    private void validateKubernetesClusterScaleParameters(ScaleKubernetesClusterCmd cmd) {\n        final Long kubernetesClusterId = cmd.getId();\n        final Long serviceOfferingId = cmd.getServiceOfferingId();\n        final Long clusterSize = cmd.getClusterSize();\n        if (kubernetesClusterId == null || kubernetesClusterId < 1L) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null || kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        Account caller = CallContext.current().getCallingAccount();\n        accountManager.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n\n        if (serviceOfferingId == null && clusterSize == null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled, either a new service offering or a new cluster size must be passed\", kubernetesCluster.getUuid()));\n        }\n\n        final KubernetesSupportedVersion clusterVersion = kubernetesSupportedVersionDao.findById(kubernetesCluster.getKubernetesVersionId());\n        if (clusterVersion == null) {\n            throw new CloudRuntimeException(String.format(\"Invalid Kubernetes version associated with Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        ServiceOffering serviceOffering = null;\n        if (serviceOfferingId != null) {\n            serviceOffering = serviceOfferingDao.findById(serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Failed to find service offering ID: \" + serviceOfferingId);\n            } else {\n                if (serviceOffering.isDynamic()) {\n                    throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for Kubernetes clusters. Kubernetes cluster ID: %s, service offering ID: %s\", kubernetesCluster.getUuid(), serviceOffering.getUuid()));\n                }\n                if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n                }\n                if (serviceOffering.getCpu() < clusterVersion.getMinimumCpu()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d vCPUs\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumCpu()));\n                }\n                if (serviceOffering.getRamSize() < clusterVersion.getMinimumRamSize()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumRamSize()));\n                }\n            }\n            final ServiceOffering existingServiceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n            if (serviceOffering.getRamSize() < existingServiceOffering.getRamSize() ||\n                    serviceOffering.getCpu() * serviceOffering.getSpeed() < existingServiceOffering.getCpu() * existingServiceOffering.getSpeed()) {\n                logAndThrow(Level.WARN, String.format(\"Kubernetes cluster cannot be scaled down for service offering. Service offering ID: %s offers lesser resources as compared to service offering ID: %s of Kubernetes cluster ID: %s\",\n                        serviceOffering.getUuid(), existingServiceOffering.getUuid(), kubernetesCluster.getUuid()));\n            }\n        }\n\n        if (!(kubernetesCluster.getState().equals(KubernetesCluster.State.Created) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Running) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped))) {\n            throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n        }\n\n        if (clusterSize != null) {\n            if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) { \r\n                throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n            }\n            if (clusterSize < 1) {\n                throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled for size, %d\", kubernetesCluster.getUuid(), clusterSize));\n            }\n            if (clusterSize > kubernetesCluster.getNodeCount()) { \r\n                VMTemplateVO template = templateDao.findById(kubernetesCluster.getTemplateId());\n                if (template == null) {\n                    throw new InvalidParameterValueException(String.format(\"Invalid template associated with Kubernetes cluster ID: %s\",  kubernetesCluster.getUuid()));\n                }\n                if (CollectionUtils.isEmpty(templateJoinDao.newTemplateView(template, zone.getId(), true))) {\n                    throw new InvalidParameterValueException(String.format(\"Template ID: %s associated with Kubernetes cluster ID: %s is not in Ready state for datacenter ID: %s\", template.getUuid(), kubernetesCluster.getUuid(), zone.getUuid()));\n                }\n            }\n        }\n    }\n","date":"2020-08-04 13:58:43","endLine":900,"groupId":"6885","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateKubernetesClusterScaleParameters","params":"(ScaleKubernetesClusterCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/20/4f2d7b83da366fef9bd4d0fb83589c75fa527b.src","preCode":"    private void validateKubernetesClusterScaleParameters(ScaleKubernetesClusterCmd cmd) {\n        final Long kubernetesClusterId = cmd.getId();\n        final Long serviceOfferingId = cmd.getServiceOfferingId();\n        final Long clusterSize = cmd.getClusterSize();\n        if (kubernetesClusterId == null || kubernetesClusterId < 1L) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null || kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        Account caller = CallContext.current().getCallingAccount();\n        accountManager.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n\n        if (serviceOfferingId == null && clusterSize == null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled, either a new service offering or a new cluster size must be passed\", kubernetesCluster.getUuid()));\n        }\n\n        final KubernetesSupportedVersion clusterVersion = kubernetesSupportedVersionDao.findById(kubernetesCluster.getKubernetesVersionId());\n        if (clusterVersion == null) {\n            throw new CloudRuntimeException(String.format(\"Invalid Kubernetes version associated with Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        ServiceOffering serviceOffering = null;\n        if (serviceOfferingId != null) {\n            serviceOffering = serviceOfferingDao.findById(serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Failed to find service offering ID: \" + serviceOfferingId);\n            } else {\n                if (serviceOffering.isDynamic()) {\n                    throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for Kubernetes clusters. Kubernetes cluster ID: %s, service offering ID: %s\", kubernetesCluster.getUuid(), serviceOffering.getUuid()));\n                }\n                if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n                }\n                if (serviceOffering.getCpu() < clusterVersion.getMinimumCpu()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d vCPUs\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumCpu()));\n                }\n                if (serviceOffering.getRamSize() < clusterVersion.getMinimumRamSize()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumRamSize()));\n                }\n            }\n            final ServiceOffering existingServiceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n            if (serviceOffering.getRamSize() < existingServiceOffering.getRamSize() ||\n                    serviceOffering.getCpu() * serviceOffering.getSpeed() < existingServiceOffering.getCpu() * existingServiceOffering.getSpeed()) {\n                logAndThrow(Level.WARN, String.format(\"Kubernetes cluster cannot be scaled down for service offering. Service offering ID: %s offers lesser resources as compared to service offering ID: %s of Kubernetes cluster ID: %s\",\n                        serviceOffering.getUuid(), existingServiceOffering.getUuid(), kubernetesCluster.getUuid()));\n            }\n        }\n\n        if (!(kubernetesCluster.getState().equals(KubernetesCluster.State.Created) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Running) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped))) {\n            throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n        }\n\n        if (clusterSize != null) {\n            if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) { \r\n                throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n            }\n            if (clusterSize < 1) {\n                throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled for size, %d\", kubernetesCluster.getUuid(), clusterSize));\n            }\n        }\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"M"}],"commitId":"9ae1170b29fa001e712abf746e000898a71a5511","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-08-04 13:58:43","modifiedFileCount":"10","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-10-27 14:45:43","codes":[{"authorDate":"2020-03-06 15:51:23","commitOrder":3,"curCode":"    private boolean validateServiceOffering(final ServiceOffering serviceOffering, final KubernetesSupportedVersion version) {\n        if (serviceOffering.isDynamic()) {\n            throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for creating clusters, service offering ID: %s\", serviceOffering.getUuid()));\n        }\n        if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\", serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n        }\n        if (serviceOffering.getCpu() < version.getMinimumCpu()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes version ID: %s needs minimum %d vCPUs\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumCpu()));\n        }\n        if (serviceOffering.getRamSize() < version.getMinimumRamSize()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumRamSize()));\n        }\n        return true;\n    }\n","date":"2020-03-06 15:51:23","endLine":476,"groupId":"104225","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateServiceOffering","params":"(finalServiceOfferingserviceOffering@finalKubernetesSupportedVersionversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/8fa034a8ba19c25ff80ea5a512ad96d333cf35.src","preCode":"    private boolean validateServiceOffering(final ServiceOffering serviceOffering, final KubernetesSupportedVersion version) {\n        if (serviceOffering.isDynamic()) {\n            throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for creating clusters, service offering ID: %s\", serviceOffering.getUuid()));\n        }\n        if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\", serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n        }\n        if (serviceOffering.getCpu() < version.getMinimumCpu()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, Kubernetes version ID: %s needs minimum %d vCPUs\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumCpu()));\n        }\n        if (serviceOffering.getRamSize() < version.getMinimumRamSize()) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster cannot be created with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\", serviceOffering.getUuid(), version.getUuid(), version.getMinimumRamSize()));\n        }\n        return true;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"N"},{"authorDate":"2020-10-27 14:45:43","commitOrder":3,"curCode":"    private void validateKubernetesClusterScaleParameters(ScaleKubernetesClusterCmd cmd) {\n        final Long kubernetesClusterId = cmd.getId();\n        final Long serviceOfferingId = cmd.getServiceOfferingId();\n        final Long clusterSize = cmd.getClusterSize();\n        if (kubernetesClusterId == null || kubernetesClusterId < 1L) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null || kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster : %s\", kubernetesCluster.getName()));\n        }\n\n        Account caller = CallContext.current().getCallingAccount();\n        accountManager.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n\n        if (serviceOfferingId == null && clusterSize == null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s cannot be scaled, either a new service offering or a new cluster size must be passed\", kubernetesCluster.getName()));\n        }\n\n        final KubernetesSupportedVersion clusterVersion = kubernetesSupportedVersionDao.findById(kubernetesCluster.getKubernetesVersionId());\n        if (clusterVersion == null) {\n            throw new CloudRuntimeException(String.format(\"Invalid Kubernetes version associated with Kubernetes cluster : %s\", kubernetesCluster.getName()));\n        }\n\n        ServiceOffering serviceOffering = null;\n        if (serviceOfferingId != null) {\n            serviceOffering = serviceOfferingDao.findById(serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Failed to find service offering ID: \" + serviceOfferingId);\n            } else {\n                if (serviceOffering.isDynamic()) {\n                    throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for Kubernetes clusters. Kubernetes cluster : %s, service offering : %s\", kubernetesCluster.getName(), serviceOffering.getName()));\n                }\n                if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s cannot be scaled with service offering : %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\",\n                            kubernetesCluster.getName(), serviceOffering.getName(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n                }\n                if (serviceOffering.getCpu() < clusterVersion.getMinimumCpu()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s cannot be scaled with service offering : %s, associated Kubernetes version : %s needs minimum %d vCPUs\",\n                            kubernetesCluster.getName(), serviceOffering.getName(), clusterVersion.getName(), clusterVersion.getMinimumCpu()));\n                }\n                if (serviceOffering.getRamSize() < clusterVersion.getMinimumRamSize()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s cannot be scaled with service offering : %s, associated Kubernetes version : %s needs minimum %d MB RAM\",\n                            kubernetesCluster.getName(), serviceOffering.getName(), clusterVersion.getName(), clusterVersion.getMinimumRamSize()));\n                }\n            }\n            final ServiceOffering existingServiceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n            if (serviceOffering.getRamSize() < existingServiceOffering.getRamSize() ||\n                    serviceOffering.getCpu() * serviceOffering.getSpeed() < existingServiceOffering.getCpu() * existingServiceOffering.getSpeed()) {\n                logAndThrow(Level.WARN, String.format(\"Kubernetes cluster cannot be scaled down for service offering. Service offering : %s offers lesser resources as compared to service offering : %s of Kubernetes cluster : %s\",\n                        serviceOffering.getName(), existingServiceOffering.getName(), kubernetesCluster.getName()));\n            }\n        }\n\n        if (!(kubernetesCluster.getState().equals(KubernetesCluster.State.Created) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Running) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped))) {\n            throw new PermissionDeniedException(String.format(\"Kubernetes cluster : %s is in %s state\", kubernetesCluster.getName(), kubernetesCluster.getState().toString()));\n        }\n\n        if (clusterSize != null) {\n            if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) { \r\n                throw new PermissionDeniedException(String.format(\"Kubernetes cluster : %s is in %s state\", kubernetesCluster.getName(), kubernetesCluster.getState().toString()));\n            }\n            if (clusterSize < 1) {\n                throw new InvalidParameterValueException(String.format(\"Kubernetes cluster : %s cannot be scaled for size, %d\", kubernetesCluster.getName(), clusterSize));\n            }\n            if (clusterSize > kubernetesCluster.getNodeCount()) { \r\n                VMTemplateVO template = templateDao.findById(kubernetesCluster.getTemplateId());\n                if (template == null) {\n                    throw new InvalidParameterValueException(String.format(\"Invalid template associated with Kubernetes cluster : %s\",  kubernetesCluster.getName()));\n                }\n                if (CollectionUtils.isEmpty(templateJoinDao.newTemplateView(template, zone.getId(), true))) {\n                    throw new InvalidParameterValueException(String.format(\"Template : %s associated with Kubernetes cluster : %s is not in Ready state for datacenter : %s\", template.getName(), kubernetesCluster.getName(), zone.getName()));\n                }\n            }\n        }\n    }\n","date":"2020-10-27 14:45:43","endLine":902,"groupId":"104225","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateKubernetesClusterScaleParameters","params":"(ScaleKubernetesClusterCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/ac555b79a4b7f7a7d6004454fbaf942bcc1125.src","preCode":"    private void validateKubernetesClusterScaleParameters(ScaleKubernetesClusterCmd cmd) {\n        final Long kubernetesClusterId = cmd.getId();\n        final Long serviceOfferingId = cmd.getServiceOfferingId();\n        final Long clusterSize = cmd.getClusterSize();\n        if (kubernetesClusterId == null || kubernetesClusterId < 1L) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        KubernetesClusterVO kubernetesCluster = kubernetesClusterDao.findById(kubernetesClusterId);\n        if (kubernetesCluster == null || kubernetesCluster.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Invalid Kubernetes cluster ID\");\n        }\n        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        if (zone == null) {\n            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        Account caller = CallContext.current().getCallingAccount();\n        accountManager.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, false, kubernetesCluster);\n\n        if (serviceOfferingId == null && clusterSize == null) {\n            throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled, either a new service offering or a new cluster size must be passed\", kubernetesCluster.getUuid()));\n        }\n\n        final KubernetesSupportedVersion clusterVersion = kubernetesSupportedVersionDao.findById(kubernetesCluster.getKubernetesVersionId());\n        if (clusterVersion == null) {\n            throw new CloudRuntimeException(String.format(\"Invalid Kubernetes version associated with Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));\n        }\n\n        ServiceOffering serviceOffering = null;\n        if (serviceOfferingId != null) {\n            serviceOffering = serviceOfferingDao.findById(serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Failed to find service offering ID: \" + serviceOfferingId);\n            } else {\n                if (serviceOffering.isDynamic()) {\n                    throw new InvalidParameterValueException(String.format(\"Custom service offerings are not supported for Kubernetes clusters. Kubernetes cluster ID: %s, service offering ID: %s\", kubernetesCluster.getUuid(), serviceOffering.getUuid()));\n                }\n                if (serviceOffering.getCpu() < MIN_KUBERNETES_CLUSTER_NODE_CPU || serviceOffering.getRamSize() < MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, Kubernetes cluster template(CoreOS) needs minimum %d vCPUs and %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), MIN_KUBERNETES_CLUSTER_NODE_CPU, MIN_KUBERNETES_CLUSTER_NODE_RAM_SIZE));\n                }\n                if (serviceOffering.getCpu() < clusterVersion.getMinimumCpu()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d vCPUs\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumCpu()));\n                }\n                if (serviceOffering.getRamSize() < clusterVersion.getMinimumRamSize()) {\n                    throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled with service offering ID: %s, associated Kubernetes version ID: %s needs minimum %d MB RAM\",\n                            kubernetesCluster.getUuid(), serviceOffering.getUuid(), clusterVersion.getUuid(), clusterVersion.getMinimumRamSize()));\n                }\n            }\n            final ServiceOffering existingServiceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n            if (serviceOffering.getRamSize() < existingServiceOffering.getRamSize() ||\n                    serviceOffering.getCpu() * serviceOffering.getSpeed() < existingServiceOffering.getCpu() * existingServiceOffering.getSpeed()) {\n                logAndThrow(Level.WARN, String.format(\"Kubernetes cluster cannot be scaled down for service offering. Service offering ID: %s offers lesser resources as compared to service offering ID: %s of Kubernetes cluster ID: %s\",\n                        serviceOffering.getUuid(), existingServiceOffering.getUuid(), kubernetesCluster.getUuid()));\n            }\n        }\n\n        if (!(kubernetesCluster.getState().equals(KubernetesCluster.State.Created) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Running) ||\n                kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped))) {\n            throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n        }\n\n        if (clusterSize != null) {\n            if (kubernetesCluster.getState().equals(KubernetesCluster.State.Stopped)) { \r\n                throw new PermissionDeniedException(String.format(\"Kubernetes cluster ID: %s is in %s state\", kubernetesCluster.getUuid(), kubernetesCluster.getState().toString()));\n            }\n            if (clusterSize < 1) {\n                throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s cannot be scaled for size, %d\", kubernetesCluster.getUuid(), clusterSize));\n            }\n            if (clusterSize > kubernetesCluster.getNodeCount()) { \r\n                VMTemplateVO template = templateDao.findById(kubernetesCluster.getTemplateId());\n                if (template == null) {\n                    throw new InvalidParameterValueException(String.format(\"Invalid template associated with Kubernetes cluster ID: %s\",  kubernetesCluster.getUuid()));\n                }\n                if (CollectionUtils.isEmpty(templateJoinDao.newTemplateView(template, zone.getId(), true))) {\n                    throw new InvalidParameterValueException(String.format(\"Template ID: %s associated with Kubernetes cluster ID: %s is not in Ready state for datacenter ID: %s\", template.getUuid(), kubernetesCluster.getUuid(), zone.getUuid()));\n                }\n            }\n        }\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"M"}],"commitId":"86f2b796cfd4d6758dff322ce31ae880a9c4e02b","commitMessage":"@@@CKS : More log changes from uuid to name (#4415)\n\n","date":"2020-10-27 14:45:43","modifiedFileCount":"9","status":"M","submitter":"davidjumani"}]
