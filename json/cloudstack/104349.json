[{"authorTime":"2018-07-17 06:39:08","codes":[{"authorDate":"2018-07-17 06:39:08","commitOrder":1,"curCode":"    private static void handleVagForHost(SolidFireUtil.SolidFireConnection sfConnection, List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            int numVags = 0;\n\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId()) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        numVags++;\n\n                        \r\n                        \r\n                        \r\n                        if (numVags > MAX_NUM_VAGS_PER_VOLUME) {\n                            throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (>)\");\n                        }\n\n                        if (sfVag.getInitiators().length < MAX_NUM_INITIATORS_PER_VAG) {\n                            if (!hostSupports_iScsi(host)) {\n                                String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                                LOGGER.warn(errMsg);\n\n                                throw new CloudRuntimeException(errMsg);\n                            }\n\n                            addInitiatorsToSolidFireVag(sfConnection, sfVag.getId(), new String[] { host.getStorageUrl() });\n\n                            return;\n                        }\n                    }\n                }\n            }\n\n            if (numVags == MAX_NUM_VAGS_PER_VOLUME) {\n                throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (==)\");\n            }\n\n            if (numVags > 0) {\n                if (!hostSupports_iScsi(host)) {\n                    String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                    LOGGER.warn(errMsg);\n\n                    throw new CloudRuntimeException(errMsg);\n                }\n\n                SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + UUID.randomUUID().toString(),\n                        new String[]{host.getStorageUrl()}, getVolumeIds(sfConnection, sfVags, host, hostDao));\n            }\n        }\n    }\n","date":"2018-07-17 06:39:08","endLine":572,"groupId":"3402","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleVagForHost","params":"(SolidFireUtil.SolidFireConnectionsfConnection@List<SolidFireUtil.SolidFireVag>sfVags@Hosthost@HostDaohostDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/8a2885945cf654ef1a367e1cdc822dd8df6600.src","preCode":"    private static void handleVagForHost(SolidFireUtil.SolidFireConnection sfConnection, List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            int numVags = 0;\n\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId()) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        numVags++;\n\n                        \r\n                        \r\n                        \r\n                        if (numVags > MAX_NUM_VAGS_PER_VOLUME) {\n                            throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (>)\");\n                        }\n\n                        if (sfVag.getInitiators().length < MAX_NUM_INITIATORS_PER_VAG) {\n                            if (!hostSupports_iScsi(host)) {\n                                String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                                LOGGER.warn(errMsg);\n\n                                throw new CloudRuntimeException(errMsg);\n                            }\n\n                            addInitiatorsToSolidFireVag(sfConnection, sfVag.getId(), new String[] { host.getStorageUrl() });\n\n                            return;\n                        }\n                    }\n                }\n            }\n\n            if (numVags == MAX_NUM_VAGS_PER_VOLUME) {\n                throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (==)\");\n            }\n\n            if (numVags > 0) {\n                if (!hostSupports_iScsi(host)) {\n                    String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                    LOGGER.warn(errMsg);\n\n                    throw new CloudRuntimeException(errMsg);\n                }\n\n                SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + UUID.randomUUID().toString(),\n                        new String[]{host.getStorageUrl()}, getVolumeIds(sfConnection, sfVags, host, hostDao));\n            }\n        }\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"B"},{"authorDate":"2018-07-17 06:39:08","commitOrder":1,"curCode":"    private static SolidFireVag getVagForRandomHostInCluster(List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId() && hostSupports_iScsi(hostVO)) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        return sfVag;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2018-07-17 06:39:08","endLine":684,"groupId":"3402","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getVagForRandomHostInCluster","params":"(List<SolidFireUtil.SolidFireVag>sfVags@Hosthost@HostDaohostDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/8a2885945cf654ef1a367e1cdc822dd8df6600.src","preCode":"    private static SolidFireVag getVagForRandomHostInCluster(List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId() && hostSupports_iScsi(hostVO)) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        return sfVag;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"B"}],"commitId":"99bc0e6677f88a7ac063496d8932bda9b996d356","commitMessage":"@@@Merge pull request #2503 from mike-tutkowski/multi-sf-vags\n\nSupport multiple volume access groups per compute cluster","date":"2018-07-17 06:39:08","modifiedFileCount":"10","status":"B","submitter":"Mike Tutkowski"},{"authorTime":"2018-07-17 06:39:08","codes":[{"authorDate":"2020-06-03 02:58:20","commitOrder":2,"curCode":"    private static void handleVagForHost(SolidFireUtil.SolidFireConnection sfConnection, List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao, ClusterDao clusterDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            int numVags = 0;\n\n            addInitiatorsToExistingVag(clusterDao, host, sfVags, sfConnection);\n\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId()) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        numVags++;\n\n                        \r\n                        \r\n                        \r\n                        if (numVags > MAX_NUM_VAGS_PER_VOLUME) {\n                            throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (>)\");\n                        }\n\n                        if (sfVag.getInitiators().length < MAX_NUM_INITIATORS_PER_VAG) {\n                            if (!hostSupports_iScsi(host)) {\n                                String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                                LOGGER.warn(errMsg);\n\n                                throw new CloudRuntimeException(errMsg);\n                            }\n\n                            if(!isInitiatorInSfVag(host.getStorageUrl(),sfVag)) {\n                                addInitiatorsToSolidFireVag(sfConnection, sfVag.getId(), new String[]{host.getStorageUrl()});\n                            }\n                            return;\n                        }\n                    }\n                }\n            }\n\n            if (numVags == MAX_NUM_VAGS_PER_VOLUME) {\n                throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (==)\");\n            }\n\n            if (numVags > 0) {\n                if (!hostSupports_iScsi(host)) {\n                    String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                    LOGGER.warn(errMsg);\n\n                    throw new CloudRuntimeException(errMsg);\n                }\n\n                SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + UUID.randomUUID().toString(),\n                        new String[]{host.getStorageUrl()}, getVolumeIds(sfConnection, sfVags, host, hostDao));\n            }\n        }\n    }\n","date":"2020-06-03 02:58:20","endLine":575,"groupId":"104349","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"handleVagForHost","params":"(SolidFireUtil.SolidFireConnectionsfConnection@List<SolidFireUtil.SolidFireVag>sfVags@Hosthost@HostDaohostDao@ClusterDaoclusterDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ac/f1d5c7b151d7488b7313eb49b18c9829b1e4c5.src","preCode":"    private static void handleVagForHost(SolidFireUtil.SolidFireConnection sfConnection, List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            int numVags = 0;\n\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId()) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        numVags++;\n\n                        \r\n                        \r\n                        \r\n                        if (numVags > MAX_NUM_VAGS_PER_VOLUME) {\n                            throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (>)\");\n                        }\n\n                        if (sfVag.getInitiators().length < MAX_NUM_INITIATORS_PER_VAG) {\n                            if (!hostSupports_iScsi(host)) {\n                                String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                                LOGGER.warn(errMsg);\n\n                                throw new CloudRuntimeException(errMsg);\n                            }\n\n                            addInitiatorsToSolidFireVag(sfConnection, sfVag.getId(), new String[] { host.getStorageUrl() });\n\n                            return;\n                        }\n                    }\n                }\n            }\n\n            if (numVags == MAX_NUM_VAGS_PER_VOLUME) {\n                throw new CloudRuntimeException(\"Can support at most four volume access groups per compute cluster (==)\");\n            }\n\n            if (numVags > 0) {\n                if (!hostSupports_iScsi(host)) {\n                    String errMsg = \"Host with ID \" + host.getId() + \" does not support iSCSI.\";\n\n                    LOGGER.warn(errMsg);\n\n                    throw new CloudRuntimeException(errMsg);\n                }\n\n                SolidFireUtil.createVag(sfConnection, \"CloudStack-\" + UUID.randomUUID().toString(),\n                        new String[]{host.getStorageUrl()}, getVolumeIds(sfConnection, sfVags, host, hostDao));\n            }\n        }\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"},{"authorDate":"2018-07-17 06:39:08","commitOrder":2,"curCode":"    private static SolidFireVag getVagForRandomHostInCluster(List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId() && hostSupports_iScsi(hostVO)) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        return sfVag;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2018-07-17 06:39:08","endLine":684,"groupId":"104349","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getVagForRandomHostInCluster","params":"(List<SolidFireUtil.SolidFireVag>sfVags@Hosthost@HostDaohostDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/8a2885945cf654ef1a367e1cdc822dd8df6600.src","preCode":"    private static SolidFireVag getVagForRandomHostInCluster(List<SolidFireUtil.SolidFireVag> sfVags, Host host, HostDao hostDao) {\n        List<HostVO> hostVOs = hostDao.findByClusterId(host.getClusterId());\n\n        if (hostVOs != null) {\n            Collections.shuffle(hostVOs, RANDOM);\n\n            for (HostVO hostVO : hostVOs) {\n                if (hostVO.getId() != host.getId() && hostSupports_iScsi(hostVO)) {\n                    SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                    if (sfVag != null) {\n                        return sfVag;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"N"}],"commitId":"8dd6cef9a6d395a2b8d876e358077bd150cdc9f1","commitMessage":"@@@create Volume Access Groups per cluster instead of CloudStack-RandomUUID() (#3794)\n\n* create vags per cluster\n\n* vagname in solidfire utils vag object\n\n* fix string compare\n\n* refactor to make use of existing map\n\n* fix typos\n\n* rebuild vag to iqn map after creating cluster vag\n\n* refactor loop using java 8 stream api\n\n* update null entry in vag to iqn map\n\n* remove null vag to iqn mapping when creating cluster id vag\n\n* add initiator to sf vag when adding hosts\n\n* use cluster uuid instead of cluster id and refactor\n\n* update null entry in vagtoiqnmap\n\n* update sfvag list after creating new vag\n\n* pass clusterDao to handleVagForHost\n\n* check if initiator is not already added to the vag\n\n* factor logic into methods\n\n* fix typo and camel case\n\n* fix listing clusters by zone id\n\nCo-authored-by: Sid Kattoju <siddharthakattoju@gmail.com>","date":"2020-06-03 02:58:20","modifiedFileCount":"3","status":"M","submitter":"Sid Kattoju"}]
