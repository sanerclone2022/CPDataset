[{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2020-02-07 22:43:01","commitOrder":6,"curCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.expungeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                String requestedIPv4ForDefaultNic = null;\n                String requestedIPv6ForDefaultNic = null;\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                                requestedIPv4ForDefaultNic = defaultNicOld.getIPv4Address();\n                                requestedIPv6ForDefaultNic = defaultNicOld.getIPv6Address();\n                                s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + requestedIPv4ForDefaultNic + \" on default nic of vm:\" + vm.getInstanceName());\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNic.setRequestedIPv4(requestedIPv4ForDefaultNic);\n                        defaultNic.setRequestedIPv6(requestedIPv6ForDefaultNic);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","date":"2020-02-07 22:43:01","endLine":6570,"groupId":"4685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"moveVMToUser","params":"(finalAssignVMCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ad/2e453080eafa0d1b5fc63d631e1527daf3ae4e.src","preCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.expungeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                String requestedIPv4ForDefaultNic = null;\n                String requestedIPv6ForDefaultNic = null;\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                                requestedIPv4ForDefaultNic = defaultNicOld.getIPv4Address();\n                                requestedIPv6ForDefaultNic = defaultNicOld.getIPv6Address();\n                                s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + requestedIPv4ForDefaultNic + \" on default nic of vm:\" + vm.getInstanceName());\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNic.setRequestedIPv4(requestedIPv4ForDefaultNic);\n                        defaultNic.setRequestedIPv6(requestedIPv6ForDefaultNic);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":6081,"status":"NB"},{"authorDate":"2020-06-26 19:31:43","commitOrder":6,"curCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","date":"2020-06-26 19:31:43","endLine":7236,"groupId":"8118","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postProcessingUnmanageVMVolumes","params":"(List<VolumeVO>volumes@UserVmVOvm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/620443b0d6697027b553a81f854f05cd52e72f.src","preCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":7226,"status":"B"}],"commitId":"8c1d749360657a4909c558c3df5dec57ca66c977","commitMessage":"@@@[VMware] Enable unmanaging guest VMs (#4103)\n\n* Enable unmanaging guest VMs\n\n* Minor fixes\n\n* Fix stop usage event only if VM is not stopped when unmanaging\n\n* Rename unmanaged VMs manager\n\n* Generate netofferingremove usage event if VM is not stopped\n\n* Generate usage event VM snapshot primary off when unmanaging","date":"2020-06-26 19:31:43","modifiedFileCount":"28","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2020-09-01 16:28:42","commitOrder":7,"curCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        if (cmd.getProjectId() != null && cmd.getDomainId() == null) {\n            throw new InvalidParameterValueException(\"Please provide a valid domain ID; cannot assign VM to a project if domain ID is NULL.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.expungeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                String requestedIPv4ForDefaultNic = null;\n                String requestedIPv6ForDefaultNic = null;\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                                requestedIPv4ForDefaultNic = defaultNicOld.getIPv4Address();\n                                requestedIPv6ForDefaultNic = defaultNicOld.getIPv6Address();\n                                s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + requestedIPv4ForDefaultNic + \" on default nic of vm:\" + vm.getInstanceName());\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNic.setRequestedIPv4(requestedIPv4ForDefaultNic);\n                        defaultNic.setRequestedIPv6(requestedIPv6ForDefaultNic);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","date":"2020-09-01 16:28:42","endLine":6587,"groupId":"4685","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"moveVMToUser","params":"(finalAssignVMCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f9/9a0663e298f7c0127141bfbce555bff3cd74bf.src","preCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.expungeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                String requestedIPv4ForDefaultNic = null;\n                String requestedIPv6ForDefaultNic = null;\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                                requestedIPv4ForDefaultNic = defaultNicOld.getIPv4Address();\n                                requestedIPv6ForDefaultNic = defaultNicOld.getIPv6Address();\n                                s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + requestedIPv4ForDefaultNic + \" on default nic of vm:\" + vm.getInstanceName());\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNic.setRequestedIPv4(requestedIPv4ForDefaultNic);\n                        defaultNic.setRequestedIPv6(requestedIPv6ForDefaultNic);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":6094,"status":"M"},{"authorDate":"2020-06-26 19:31:43","commitOrder":7,"curCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","date":"2020-06-26 19:31:43","endLine":7236,"groupId":"8118","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postProcessingUnmanageVMVolumes","params":"(List<VolumeVO>volumes@UserVmVOvm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/620443b0d6697027b553a81f854f05cd52e72f.src","preCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":7226,"status":"N"}],"commitId":"d5acabdbf7c2b49db3bc35f8434724b9a979843b","commitMessage":"@@@server: Avoid Null pointer at DomainChecker and enhance AssignVMCmd (#4279)\n\nWhen executing request assignVirtualMachine with null domainID and a valid projectID then a NullPointerException happens at DomainChecker.java.\n\nCommand example:\n\nassign virtualmachine virtualmachineid=vmID projectid=projectID account=admin\nThe NullPointerException that is thrown at DomainChecker is handled at AssignVMCmd.java#L142.  resulting in the following log message: Failed to move vm null.","date":"2020-09-01 16:28:42","modifiedFileCount":"3","status":"M","submitter":"Gabriel Beims Br?scher"},{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2021-02-01 17:58:52","commitOrder":8,"curCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        if (cmd.getProjectId() != null && cmd.getDomainId() == null) {\n            throw new InvalidParameterValueException(\"Please provide a valid domain ID; cannot assign VM to a project if domain ID is NULL.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.removeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            Set<NetworkVO> applicableNetworks = new LinkedHashSet<>();\n            Map<Long, String> requestedIPv4ForNics = new HashMap<>();\n            Map<Long, String> requestedIPv6ForNics = new HashMap<>();\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","date":"2021-02-01 17:58:52","endLine":6784,"groupId":"8564","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"moveVMToUser","params":"(finalAssignVMCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/6fe2ec903f53020a8d6ac704510e357298592b.src","preCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        if (cmd.getProjectId() != null && cmd.getDomainId() == null) {\n            throw new InvalidParameterValueException(\"Please provide a valid domain ID; cannot assign VM to a project if domain ID is NULL.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.expungeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                String requestedIPv4ForDefaultNic = null;\n                String requestedIPv6ForDefaultNic = null;\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                                requestedIPv4ForDefaultNic = defaultNicOld.getIPv4Address();\n                                requestedIPv6ForDefaultNic = defaultNicOld.getIPv6Address();\n                                s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + requestedIPv4ForDefaultNic + \" on default nic of vm:\" + vm.getInstanceName());\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNic.setRequestedIPv4(requestedIPv4ForDefaultNic);\n                        defaultNic.setRequestedIPv6(requestedIPv6ForDefaultNic);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                Set<NetworkVO> applicableNetworks = new HashSet<NetworkVO>();\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (defaultNetworkOld != null && defaultNetworkOld.getGuestType() == Network.GuestType.Shared && defaultNetworkOld.getAclType() == ACLType.Domain) {\n                            try {\n                                _networkModel.checkNetworkPermissions(newAccount, defaultNetworkOld);\n                                applicableNetworks.add(defaultNetworkOld);\n                            } catch (PermissionDeniedException e) {\n                                s_logger.debug(\"AssignVM: the shared network on old default nic can not be applied to new account\");\n                            }\n                        }\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.expungeNics(vmOldProfile);\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":6276,"status":"M"},{"authorDate":"2020-06-26 19:31:43","commitOrder":8,"curCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","date":"2020-06-26 19:31:43","endLine":7236,"groupId":"8118","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"postProcessingUnmanageVMVolumes","params":"(List<VolumeVO>volumes@UserVmVOvm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/620443b0d6697027b553a81f854f05cd52e72f.src","preCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":7226,"status":"N"}],"commitId":"ff376d8187ec2687fef06c611740e8d4befba6e7","commitMessage":"@@@Merge release branch 4.15 to master\n\n* 4.15:\n  server: select root disk based on user input during vm import (#4591)\n  kvm: Use Q35 chipset for UEFI x86_64 (#4576)\n  server: fix wrong error message when create isolated network without SourceNat (#4624)\n  server: add possibility to scale vm to current customer offerings (#4622)\n  server: keep networks order and ips while move a vm with multiple networks (#4602)\n  server: throw exception when update vm nic on L2 network (#4625)\n  doc: fix typo in install notes (#4633)\n","date":"2021-02-01 17:58:52","modifiedFileCount":"7","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2021-02-18 16:24:09","commitOrder":9,"curCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        if (cmd.getProjectId() != null && cmd.getDomainId() == null) {\n            throw new InvalidParameterValueException(\"Please provide a valid domain ID; cannot assign VM to a project if domain ID is NULL.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.removeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            Set<NetworkVO> applicableNetworks = new LinkedHashSet<>();\n            Map<Long, String> requestedIPv4ForNics = new HashMap<>();\n            Map<Long, String> requestedIPv6ForNics = new HashMap<>();\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","date":"2021-02-18 16:24:09","endLine":6840,"groupId":"8564","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"moveVMToUser","params":"(finalAssignVMCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8a/363c296b70ac7c43224932594923f02202ac69.src","preCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        if (cmd.getProjectId() != null && cmd.getDomainId() == null) {\n            throw new InvalidParameterValueException(\"Please provide a valid domain ID; cannot assign VM to a project if domain ID is NULL.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.removeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            Set<NetworkVO> applicableNetworks = new LinkedHashSet<>();\n            Map<Long, String> requestedIPv4ForNics = new HashMap<>();\n            Map<Long, String> requestedIPv6ForNics = new HashMap<>();\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"M"},{"authorDate":"2020-06-26 19:31:43","commitOrder":9,"curCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","date":"2020-06-26 19:31:43","endLine":7236,"groupId":"8118","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"postProcessingUnmanageVMVolumes","params":"(List<VolumeVO>volumes@UserVmVOvm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/620443b0d6697027b553a81f854f05cd52e72f.src","preCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":7226,"status":"N"}],"commitId":"aa01580381c931512d62edbc658865f776ce2efa","commitMessage":"@@@network: Specify IP for VR in shared networks (#4503)\n\nThis PR enables admins to specify IP for a VR in a shared network.","date":"2021-02-18 16:24:09","modifiedFileCount":"16","status":"M","submitter":"Pearl Dsilva"},{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2021-09-24 12:21:16","commitOrder":10,"curCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        if (cmd.getProjectId() != null && cmd.getDomainId() == null) {\n            throw new InvalidParameterValueException(\"Please provide a valid domain ID; cannot assign VM to a project if domain ID is NULL.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResourceCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResourceCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.removeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            Set<NetworkVO> applicableNetworks = new LinkedHashSet<>();\n            Map<Long, String> requestedIPv4ForNics = new HashMap<>();\n            Map<Long, String> requestedIPv6ForNics = new HashMap<>();\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","date":"2021-09-24 12:21:16","endLine":7136,"groupId":"101354","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"moveVMToUser","params":"(finalAssignVMCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e9/7526766ba5ac5842c61590d9d8633968437f51.src","preCode":"    public UserVm moveVMToUser(final AssignVMCmd cmd) throws ResourceAllocationException, ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        \r\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        if (!_accountMgr.isRootAdmin(caller.getId())\n                && !_accountMgr.isDomainAdmin(caller.getId())) { \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            throw new InvalidParameterValueException(\"Only domain admins are allowed to assign VMs and not \" + caller.getType());\n        }\n\n        \r\n        final UserVmVO vm = _vmDao.findById(cmd.getVmId());\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"There is no vm by that id \" + cmd.getVmId());\n        } else if (vm.getState() == State.Running) { \r\n            \r\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"VM is Running, unable to move the vm \" + vm);\n            }\n            InvalidParameterValueException ex = new InvalidParameterValueException(\"VM is Running, unable to move the vm with specified vmId\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n\n        final Account oldAccount = _accountService.getActiveAccountById(vm.getAccountId());\n        if (oldAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid account for VM \" + vm.getAccountId() + \" in domain.\");\n        }\n        final Account newAccount = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        if (newAccount == null) {\n            throw new InvalidParameterValueException(\"Invalid accountid=\" + cmd.getAccountName() + \" in domain \" + cmd.getDomainId());\n        }\n\n        if (newAccount.getState() == Account.State.disabled) {\n            throw new InvalidParameterValueException(\"The new account owner \" + cmd.getAccountName() + \" is disabled.\");\n        }\n\n        if (cmd.getProjectId() != null && cmd.getDomainId() == null) {\n            throw new InvalidParameterValueException(\"Please provide a valid domain ID; cannot assign VM to a project if domain ID is NULL.\");\n        }\n\n        \r\n        _accountMgr.checkAccess(caller, null, true, oldAccount);\n        _accountMgr.checkAccess(caller, null, true, newAccount);\n\n        \r\n        if (oldAccount.getAccountId() == newAccount.getAccountId()) {\n            throw new InvalidParameterValueException(\"The new account is the same as the old account. Account id =\" + oldAccount.getAccountId());\n        }\n\n        \r\n        \r\n        List<PortForwardingRuleVO> pfrules = _portForwardingDao.listByVm(cmd.getVmId());\n        if (pfrules != null && pfrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the Port forwarding rules for this VM before assigning to another user.\");\n        }\n        List<FirewallRuleVO> snrules = _rulesDao.listStaticNatByVmId(vm.getId());\n        if (snrules != null && snrules.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the StaticNat rules for this VM before assigning to another user.\");\n        }\n        List<LoadBalancerVMMapVO> maps = _loadBalancerVMMapDao.listByInstanceId(vm.getId());\n        if (maps != null && maps.size() > 0) {\n            throw new InvalidParameterValueException(\"Remove the load balancing rules for this VM before assigning to another user.\");\n        }\n        \r\n        List<IPAddressVO> ips = _ipAddressDao.findAllByAssociatedVmId(cmd.getVmId());\n        for (IPAddressVO ip : ips) {\n            if (ip.isOneToOneNat()) {\n                throw new InvalidParameterValueException(\"Remove the one to one nat rule for this VM for ip \" + ip.toString());\n            }\n        }\n\n        final List<VolumeVO> volumes = _volsDao.findByInstance(cmd.getVmId());\n\n        for (VolumeVO volume : volumes) {\n            List<SnapshotVO> snapshots = _snapshotDao.listByStatusNotIn(volume.getId(), Snapshot.State.Destroyed,Snapshot.State.Error);\n            if (snapshots != null && snapshots.size() > 0) {\n                throw new InvalidParameterValueException(\n                        \"Snapshots exists for volume: \"+ volume.getName()+ \", Detach volume or remove snapshots for volume before assigning VM to another user.\");\n            }\n        }\n\n        DataCenterVO zone = _dcDao.findById(vm.getDataCenterId());\n\n        \r\n        final ServiceOfferingVO offering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId());\n\n        \r\n        removeInstanceFromInstanceGroup(cmd.getVmId());\n\n        \r\n        if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n            resourceLimitCheck(newAccount, vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.volume, _volsDao.findByInstance(cmd.getVmId()).size());\n        Long totalVolumesSize = (long)0;\n        for (VolumeVO volume : volumes) {\n            totalVolumesSize += volume.getSize();\n        }\n        _resourceLimitMgr.checkResourceLimit(newAccount, ResourceType.primary_storage, totalVolumesSize);\n\n        \r\n        VirtualMachineTemplate template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n        if (template == null) {\n            throw new InvalidParameterValueException(String.format(\"Template for VM: %s cannot be found\", vm.getUuid()));\n        }\n        if (!template.isPublicTemplate()) {\n            Account templateOwner = _accountMgr.getAccount(template.getAccountId());\n            _accountMgr.checkAccess(newAccount, null, true, templateOwner);\n        }\n\n        \r\n        DomainVO domain = _domainDao.findById(cmd.getDomainId());\n        _accountMgr.checkAccess(newAccount, domain);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_DESTROY, vm.getAccountId(), vm.getDataCenterId(),\n                        vm.getId(), vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(),\n                        vm.getHypervisorType().toString(), VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n                \r\n                resourceCountDecrement(oldAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n\n                \r\n                vm.setAccountId(newAccount.getAccountId());\n                vm.setDomainId(cmd.getDomainId());\n                _vmDao.persist(vm);\n\n                \r\n                for (VolumeVO volume : volumes) {\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.decrementResourceCount(oldAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    volume.setAccountId(newAccount.getAccountId());\n                    volume.setDomainId(newAccount.getDomainId());\n                    _volsDao.persist(volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.volume);\n                    _resourceLimitMgr.incrementResourceCount(newAccount.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                            volume.getDiskOfferingId(), volume.getTemplateId(), volume.getSize(), Volume.class.getName(),\n                            volume.getUuid(), volume.isDisplayVolume());\n                }\n\n                \r\n                if (! VirtualMachineManager.ResoureCountRunningVMsonly.value()) {\n                    resourceCountIncrement(newAccount.getAccountId(), vm.isDisplayVm(), new Long(offering.getCpu()), new Long(offering.getRamSize()));\n                }\n\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        vm.getHostName(), vm.getServiceOfferingId(), vm.getTemplateId(), vm.getHypervisorType().toString(),\n                        VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplayVm());\n            }\n        });\n\n        VirtualMachine vmoi = _itMgr.findById(vm.getId());\n        VirtualMachineProfileImpl vmOldProfile = new VirtualMachineProfileImpl(vmoi);\n\n        \r\n        List<Long> networkIdList = cmd.getNetworkIds();\n        List<Long> securityGroupIdList = cmd.getSecurityGroupIdList();\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            if (networkIdList != null && !networkIdList.isEmpty()) {\n                throw new InvalidParameterValueException(\"Can't move vm with network Ids; this is a basic zone VM\");\n            }\n            \r\n            _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n            \r\n            _networkMgr.cleanupNics(vmOldProfile);\n            _networkMgr.removeNics(vmOldProfile);\n            \r\n            \r\n            List<NetworkVO> networkList = new ArrayList<NetworkVO>();\n\n            \r\n            Network defaultNetwork = _networkModel.getExclusiveGuestNetwork(zone.getId());\n\n            if (defaultNetwork == null) {\n                throw new InvalidParameterValueException(\"Unable to find a default network to start a vm\");\n            } else {\n                networkList.add(_networkDao.findById(defaultNetwork.getId()));\n            }\n\n            boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n\n            if (securityGroupIdList != null && isVmWare) {\n                throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n            } else if (!isVmWare && _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork) && _networkModel.canAddDefaultSecurityGroup()) {\n                if (securityGroupIdList == null) {\n                    securityGroupIdList = new ArrayList<Long>();\n                }\n                SecurityGroup defaultGroup = _securityGroupMgr.getDefaultSecurityGroup(newAccount.getId());\n                if (defaultGroup != null) {\n                    \r\n                    \r\n                    boolean defaultGroupPresent = false;\n                    for (Long securityGroupId : securityGroupIdList) {\n                        if (securityGroupId.longValue() == defaultGroup.getId()) {\n                            defaultGroupPresent = true;\n                            break;\n                        }\n                    }\n\n                    if (!defaultGroupPresent) {\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n\n                } else {\n                    \r\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Couldn't find default security group for the account \" + newAccount + \" so creating a new one\");\n                    }\n                    defaultGroup = _securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME, SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                            newAccount.getDomainId(), newAccount.getId(), newAccount.getAccountName());\n                    securityGroupIdList.add(defaultGroup.getId());\n                }\n            }\n\n            LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n            NicProfile profile = new NicProfile();\n            profile.setDefaultNic(true);\n            networks.put(networkList.get(0), new ArrayList<NicProfile>(Arrays.asList(profile)));\n\n            VirtualMachine vmi = _itMgr.findById(vm.getId());\n            VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n            _networkMgr.allocate(vmProfile, networks, null);\n\n            _securityGroupMgr.addInstanceToGroups(vm.getId(), securityGroupIdList);\n\n            s_logger.debug(\"AssignVM: Basic zone, adding security groups no \" + securityGroupIdList.size() + \" to \" + vm.getInstanceName());\n        } else {\n            Set<NetworkVO> applicableNetworks = new LinkedHashSet<>();\n            Map<Long, String> requestedIPv4ForNics = new HashMap<>();\n            Map<Long, String> requestedIPv6ForNics = new HashMap<>();\n            if (zone.isSecurityGroupEnabled())  { \r\n                \r\n                _securityGroupMgr.removeInstanceFromGroups(cmd.getVmId());\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\n                                    \"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                NetworkVO defaultNetwork = null;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        defaultNetwork = appNet;\n                        toggle++;\n                    }\n\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n                }\n\n                boolean isVmWare = (template.getHypervisorType() == HypervisorType.VMware);\n                if (securityGroupIdList != null && isVmWare) {\n                    throw new InvalidParameterValueException(\"Security group feature is not supported for vmWare hypervisor\");\n                } else if (!isVmWare && (defaultNetwork == null || _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork)) && _networkModel.canAddDefaultSecurityGroup()) {\n                    if (securityGroupIdList == null) {\n                        securityGroupIdList = new ArrayList<Long>();\n                    }\n                    SecurityGroup defaultGroup = _securityGroupMgr\n                            .getDefaultSecurityGroup(newAccount.getId());\n                    if (defaultGroup != null) {\n                        \r\n                        \r\n                        boolean defaultGroupPresent = false;\n                        for (Long securityGroupId : securityGroupIdList) {\n                            if (securityGroupId.longValue() == defaultGroup.getId()) {\n                                defaultGroupPresent = true;\n                                break;\n                            }\n                        }\n\n                        if (!defaultGroupPresent) {\n                            securityGroupIdList.add(defaultGroup.getId());\n                        }\n\n                    } else {\n                        \r\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Couldn't find default security group for the account \"\n                                    + newAccount + \" so creating a new one\");\n                        }\n                        defaultGroup = _securityGroupMgr.createSecurityGroup(\n                                SecurityGroupManager.DEFAULT_GROUP_NAME,\n                                SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,\n                                newAccount.getDomainId(), newAccount.getId(),\n                                newAccount.getAccountName());\n                        securityGroupIdList.add(defaultGroup.getId());\n                    }\n                }\n\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n\n                if (applicableNetworks.isEmpty()) {\n                    throw new InvalidParameterValueException(\"No network is specified, please specify one when you move the vm. For now, please add a network to VM on NICs tab.\");\n                } else {\n                    _networkMgr.allocate(vmProfile, networks, null);\n                }\n\n                _securityGroupMgr.addInstanceToGroups(vm.getId(),\n                        securityGroupIdList);\n                s_logger.debug(\"AssignVM: Advanced zone, adding security groups no \"\n                        + securityGroupIdList.size() + \" to \"\n                        + vm.getInstanceName());\n\n            } else {\n                if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {\n                    throw new InvalidParameterValueException(\"Can't move vm with security groups; security group feature is not enabled in this zone\");\n                }\n                \r\n                if (networkIdList == null || networkIdList.isEmpty()) {\n                    NicVO defaultNicOld = _nicDao.findDefaultNicForVM(vm.getId());\n                    if (defaultNicOld != null) {\n                        NetworkVO defaultNetworkOld = _networkDao.findById(defaultNicOld.getNetworkId());\n                        if (canAccountUseNetwork(newAccount, defaultNetworkOld)) {\n                            applicableNetworks.add(defaultNetworkOld);\n                            requestedIPv4ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv4Address());\n                            requestedIPv6ForNics.put(defaultNetworkOld.getId(), defaultNicOld.getIPv6Address());\n                            s_logger.debug(\"AssignVM: use old shared network \" + defaultNetworkOld.getName() + \" with old ip \" + defaultNicOld.getIPv4Address() + \" on default nic of vm:\" + vm.getInstanceName());\n                        }\n                    }\n                }\n\n                if (networkIdList != null && !networkIdList.isEmpty()) {\n                    \r\n                    for (Long networkId : networkIdList) {\n                        NetworkVO network = _networkDao.findById(networkId);\n                        if (network == null) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find specified network id\");\n                            ex.addProxyObject(networkId.toString(), \"networkId\");\n                            throw ex;\n                        }\n\n                        _networkModel.checkNetworkPermissions(newAccount, network);\n\n                        \r\n                        NetworkOffering networkOffering = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                        if (networkOffering.isSystemOnly()) {\n                            InvalidParameterValueException ex = new InvalidParameterValueException(\"Specified Network id is system only and can't be used for vm deployment\");\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Domain) {\n                            NicVO nicOld = _nicDao.findByNtwkIdAndInstanceId(network.getId(), vm.getId());\n                            if (nicOld != null) {\n                                requestedIPv4ForNics.put(network.getId(), nicOld.getIPv4Address());\n                                requestedIPv6ForNics.put(network.getId(), nicOld.getIPv6Address());\n                                s_logger.debug(\"AssignVM: use old shared network \" + network.getName() + \" with old ip \" + nicOld.getIPv4Address() + \" on nic of vm:\" + vm.getInstanceName());\n                            }\n                        }\n                        s_logger.debug(\"AssignVM: Added network \" + network.getName() + \" to vm \" + vm.getId());\n                        applicableNetworks.add(network);\n                    }\n                } else if (applicableNetworks.isEmpty()) {\n                    NetworkVO defaultNetwork = null;\n                    List<NetworkOfferingVO> requiredOfferings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (requiredOfferings.size() < 1) {\n                        throw new InvalidParameterValueException(\"Unable to find network offering with availability=\" + Availability.Required\n                                + \" to automatically create the network as a part of vm creation\");\n                    }\n                    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {\n                        \r\n                        List<? extends Network> virtualNetworks = _networkModel.listNetworksForAccount(newAccount.getId(), zone.getId(), Network.GuestType.Isolated);\n                        if (virtualNetworks.isEmpty()) {\n                            long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0)\n                                    .getTrafficType());\n                            \r\n                            PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n                            if (physicalNetwork == null) {\n                                throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                                        + requiredOfferings.get(0).getTags());\n                            }\n                            s_logger.debug(\"Creating network for account \" + newAccount + \" from the network offering id=\" + requiredOfferings.get(0).getId()\n                                    + \" as a part of deployVM process\");\n                            Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), newAccount.getAccountName() + \"-network\",\n                                    newAccount.getAccountName() + \"-network\", null, null, null, false, null, newAccount,\n                                    null, physicalNetwork, zone.getId(), ACLType.Account, null, null,\n                                    null, null, true, null, null, null, null, null);\n                            \r\n                            if (requiredOfferings.get(0).isPersistent()) {\n                                DeployDestination dest = new DeployDestination(zone, null, null, null);\n                                UserVO callerUser = _userDao.findById(CallContext.current().getCallingUserId());\n                                Journal journal = new Journal.LogJournal(\"Implementing \" + newNetwork, s_logger);\n                                ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), journal, callerUser, caller);\n                                s_logger.debug(\"Implementing the network for account\" + newNetwork + \" as a part of\" + \" network provision for persistent networks\");\n                                try {\n                                    Pair<? extends NetworkGuru, ? extends Network> implementedNetwork = _networkMgr.implementNetwork(newNetwork.getId(), dest, context);\n                                    if (implementedNetwork == null || implementedNetwork.first() == null) {\n                                        s_logger.warn(\"Failed to implement the network \" + newNetwork);\n                                    }\n                                    newNetwork = implementedNetwork.second();\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + newNetwork + \" elements and\"\n                                            + \" resources as a part of network provision for persistent network due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network\"\n                                            + \" (with specified id) elements and resources as a part of network provision\");\n                                    e.addProxyObject(newNetwork.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                            defaultNetwork = _networkDao.findById(newNetwork.getId());\n                        } else if (virtualNetworks.size() > 1) {\n                            throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found \" + \"for account \" + newAccount\n                                    + \"; please specify networkIds\");\n                        } else {\n                            defaultNetwork = _networkDao.findById(virtualNetworks.get(0).getId());\n                        }\n                    } else {\n                        throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n                    }\n\n                    applicableNetworks.add(defaultNetwork);\n                }\n\n                \r\n                _networkMgr.cleanupNics(vmOldProfile);\n                _networkMgr.removeNics(vmOldProfile);\n\n                \r\n                LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>();\n                int toggle = 0;\n                for (NetworkVO appNet : applicableNetworks) {\n                    NicProfile defaultNic = new NicProfile();\n                    if (toggle == 0) {\n                        defaultNic.setDefaultNic(true);\n                        toggle++;\n                    }\n                    defaultNic.setRequestedIPv4(requestedIPv4ForNics.get(appNet.getId()));\n                    defaultNic.setRequestedIPv6(requestedIPv6ForNics.get(appNet.getId()));\n                    networks.put(appNet, new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n                }\n                VirtualMachine vmi = _itMgr.findById(vm.getId());\n                VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmi);\n                _networkMgr.allocate(vmProfile, networks, null);\n                s_logger.debug(\"AssignVM: Advance virtual, adding networks no \" + networks.size() + \" to \" + vm.getInstanceName());\n            } \r\n        } \r\n        s_logger.info(\"AssignVM: vm \" + vm.getInstanceName() + \" now belongs to account \" + newAccount.getAccountName());\n        return vm;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":6628,"status":"M"},{"authorDate":"2020-06-26 19:31:43","commitOrder":10,"curCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","date":"2020-06-26 19:31:43","endLine":7236,"groupId":"101354","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"postProcessingUnmanageVMVolumes","params":"(List<VolumeVO>volumes@UserVmVOvm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/620443b0d6697027b553a81f854f05cd52e72f.src","preCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":7226,"status":"N"}],"commitId":"74bb80687d4cea1288a964d12b43108117cb5744","commitMessage":"@@@resource limit: Fix resource limit check on VM start (#5428)\n\n* resource limit: Fix resource limit check on VM start\n\n* add check to validate if cpu/memory are within limits for custom offering + exception handling\n\n* unit tests\n\nCo-authored-by: utchoang <hoangnm@unitech.vn>","date":"2021-09-24 12:21:16","modifiedFileCount":"6","status":"M","submitter":"Pearl Dsilva"}]
