[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long volId, long zoneId, Long doId, Long vmId,\n        long size) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating VMSnapshot Volume usage record for vol: \" + volId + \", usage: \" + usageDisplay + \", startDate: \" + startDate + \", endDate: \" +\n                endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"VMSnapshot Usage: \" + \"VM Id: \" + vmId + \" Volume Id: \" + volId + \" \";\n\n        if (doId != null) {\n            usageDesc += \" DiskOffering: \" + doId;\n        }\n\n        usageDesc += \" Size: \" + size;\n\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, doId, null, volId, size,\n                startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","date":"2018-01-20 05:49:27","endLine":152,"groupId":"20159","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createUsageRecord","params":"(inttype@longrunningTime@DatestartDate@DateendDate@AccountVOaccount@longvolId@longzoneId@LongdoId@LongvmId@longsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9a/f81374437fd22dadaeb8c0a9aa8777469aaeb4.src","preCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long volId, long zoneId, Long doId, Long vmId,\n        long size) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating VMSnapshot Volume usage record for vol: \" + volId + \", usage: \" + usageDisplay + \", startDate: \" + startDate + \", endDate: \" +\n                endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"VMSnapshot Usage: \" + \"VM Id: \" + vmId + \" Volume Id: \" + volId + \" \";\n\n        if (doId != null) {\n            usageDesc += \" DiskOffering: \" + doId;\n        }\n\n        usageDesc += \" Size: \" + size;\n\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, doId, null, volId, size,\n                startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VMSnapshotUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long vmId, long noId, long zoneId,\n        boolean isDefault) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating network offering:\" + noId + \" usage record for Vm : \" + vmId + \", usage: \" + usageDisplay + \", startDate: \" + startDate +\n                \", endDate: \" + endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"Network offering:\" + noId + \" for Vm : \" + vmId + \" usage time\";\n\n        long defaultNic = (isDefault) ? 1 : 0;\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, noId, null, defaultNic,\n                null, startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","date":"2018-01-20 05:49:27","endLine":163,"groupId":"7697","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"createUsageRecord","params":"(inttype@longrunningTime@DatestartDate@DateendDate@AccountVOaccount@longvmId@longnoId@longzoneId@booleanisDefault)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/4cd536abf89159ce04a1f929811f2dbf70915e.src","preCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long vmId, long noId, long zoneId,\n        boolean isDefault) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating network offering:\" + noId + \" usage record for Vm : \" + vmId + \", usage: \" + usageDisplay + \", startDate: \" + startDate +\n                \", endDate: \" + endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"Network offering:\" + noId + \" for Vm : \" + vmId + \" usage time\";\n\n        long defaultNic = (isDefault) ? 1 : 0;\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, noId, null, defaultNic,\n                null, startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/NetworkOfferingUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-08-20 21:20:23","commitOrder":2,"curCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long volId, long zoneId, Long doId, Long vmId,\n                                          long size, Long vmSnapshotId) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating VMSnapshot Id:\" + vmSnapshotId + \" Volume usage record for vol: \" + volId + \", usage: \" + usageDisplay + \", startDate: \" + startDate + \", endDate: \" +\n                endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"VMSnapshot Id: \" + vmSnapshotId + \" Usage: \" + \"VM Id: \" + vmId + \" Volume Id: \" + volId + \" \";\n\n        if (doId != null) {\n            usageDesc += \" DiskOffering: \" + doId;\n        }\n\n        usageDesc += \" Size: \" + size;\n\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, doId, null, vmSnapshotId, size,\n                startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","date":"2019-08-20 21:20:23","endLine":152,"groupId":"7697","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createUsageRecord","params":"(inttype@longrunningTime@DatestartDate@DateendDate@AccountVOaccount@longvolId@longzoneId@LongdoId@LongvmId@longsize@LongvmSnapshotId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4d/bfd2ec31705bb8d1be6b5f37ee0cf2594c90dc.src","preCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long volId, long zoneId, Long doId, Long vmId,\n        long size) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating VMSnapshot Volume usage record for vol: \" + volId + \", usage: \" + usageDisplay + \", startDate: \" + startDate + \", endDate: \" +\n                endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"VMSnapshot Usage: \" + \"VM Id: \" + vmId + \" Volume Id: \" + volId + \" \";\n\n        if (doId != null) {\n            usageDesc += \" DiskOffering: \" + doId;\n        }\n\n        usageDesc += \" Size: \" + size;\n\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, doId, null, volId, size,\n                startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VMSnapshotUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long vmId, long noId, long zoneId,\n        boolean isDefault) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating network offering:\" + noId + \" usage record for Vm : \" + vmId + \", usage: \" + usageDisplay + \", startDate: \" + startDate +\n                \", endDate: \" + endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"Network offering:\" + noId + \" for Vm : \" + vmId + \" usage time\";\n\n        long defaultNic = (isDefault) ? 1 : 0;\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, noId, null, defaultNic,\n                null, startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","date":"2018-01-20 05:49:27","endLine":163,"groupId":"7697","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createUsageRecord","params":"(inttype@longrunningTime@DatestartDate@DateendDate@AccountVOaccount@longvmId@longnoId@longzoneId@booleanisDefault)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/4cd536abf89159ce04a1f929811f2dbf70915e.src","preCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long vmId, long noId, long zoneId,\n        boolean isDefault) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating network offering:\" + noId + \" usage record for Vm : \" + vmId + \", usage: \" + usageDisplay + \", startDate: \" + startDate +\n                \", endDate: \" + endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"Network offering:\" + noId + \" for Vm : \" + vmId + \" usage time\";\n\n        long defaultNic = (isDefault) ? 1 : 0;\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, noId, null, defaultNic,\n                null, startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/NetworkOfferingUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"bfc08715cc8553e8a7192cf58b5a699d9778b021","commitMessage":"@@@Display VM snapshot tags on usage records (#3560)\n\n* Refactor usage helper tables to include VM snapshot id\n\n* Fix resource type and resource id while listing usage records\n\n* Add defensive checks\n","date":"2019-08-20 21:20:23","modifiedFileCount":"11","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-13 18:25:16","commitOrder":3,"curCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long volId, long zoneId, Long doId, Long vmId,\n                                          long size, Long vmSnapshotId) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating VMSnapshot Id:\" + vmSnapshotId + \" Volume usage record for vol: \" + volId + \", usage: \" + usageDisplay + \", startDate: \" + startDate + \", endDate: \" +\n                endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"VMSnapshot Id: \" + vmSnapshotId + \" Usage: \" + \"VM Id: \" + vmId + \" Volume Id: \" + volId + \" \";\n\n        if (doId != null) {\n            usageDesc += \" DiskOffering: \" + doId;\n        }\n\n        usageDesc += \" Size: \" + toHumanReadableSize(size);\n\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, doId, null, vmSnapshotId, size,\n                startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","date":"2020-08-13 18:25:16","endLine":154,"groupId":"10916","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"createUsageRecord","params":"(inttype@longrunningTime@DatestartDate@DateendDate@AccountVOaccount@longvolId@longzoneId@LongdoId@LongvmId@longsize@LongvmSnapshotId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/43/4bfa607bf6fdf6c6e9fef15a9f315db0b5655a.src","preCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long volId, long zoneId, Long doId, Long vmId,\n                                          long size, Long vmSnapshotId) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating VMSnapshot Id:\" + vmSnapshotId + \" Volume usage record for vol: \" + volId + \", usage: \" + usageDisplay + \", startDate: \" + startDate + \", endDate: \" +\n                endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"VMSnapshot Id: \" + vmSnapshotId + \" Usage: \" + \"VM Id: \" + vmId + \" Volume Id: \" + volId + \" \";\n\n        if (doId != null) {\n            usageDesc += \" DiskOffering: \" + doId;\n        }\n\n        usageDesc += \" Size: \" + size;\n\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, doId, null, vmSnapshotId, size,\n                startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VMSnapshotUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long vmId, long noId, long zoneId,\n        boolean isDefault) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating network offering:\" + noId + \" usage record for Vm : \" + vmId + \", usage: \" + usageDisplay + \", startDate: \" + startDate +\n                \", endDate: \" + endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"Network offering:\" + noId + \" for Vm : \" + vmId + \" usage time\";\n\n        long defaultNic = (isDefault) ? 1 : 0;\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, noId, null, defaultNic,\n                null, startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","date":"2018-01-20 05:49:27","endLine":163,"groupId":"10916","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"createUsageRecord","params":"(inttype@longrunningTime@DatestartDate@DateendDate@AccountVOaccount@longvmId@longnoId@longzoneId@booleanisDefault)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/4cd536abf89159ce04a1f929811f2dbf70915e.src","preCode":"    private static void createUsageRecord(int type, long runningTime, Date startDate, Date endDate, AccountVO account, long vmId, long noId, long zoneId,\n        boolean isDefault) {\n        \r\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Total running time \" + runningTime + \"ms\");\n        }\n\n        float usage = runningTime / 1000f / 60f / 60f;\n\n        DecimalFormat dFormat = new DecimalFormat(\"#.######\");\n        String usageDisplay = dFormat.format(usage);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating network offering:\" + noId + \" usage record for Vm : \" + vmId + \", usage: \" + usageDisplay + \", startDate: \" + startDate +\n                \", endDate: \" + endDate + \", for account: \" + account.getId());\n        }\n\n        \r\n        String usageDesc = \"Network offering:\" + noId + \" for Vm : \" + vmId + \" usage time\";\n\n        long defaultNic = (isDefault) ? 1 : 0;\n        UsageVO usageRecord =\n            new UsageVO(zoneId, account.getId(), account.getDomainId(), usageDesc, usageDisplay + \" Hrs\", type, new Double(usage), vmId, null, noId, null, defaultNic,\n                null, startDate, endDate);\n        s_usageDao.persist(usageRecord);\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/NetworkOfferingUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"b586eb22f1b31f3cab2f2cb1aaeafca4f4646abd","commitMessage":"@@@Human readable sizes in logs (#4207)\n\nThis PR adds outputting human readable byte sizes in the management server logs.  agent logs.  and usage records. A non-dynamic global variable is added (display.human.readable.sizes) to control switching this feature on and off. This setting is sent to the agent on connection and is only read from the database when the management server is started up. The setting is kept in memory by the use of a static field on the NumbersUtil class and is available throughout the codebase.\n\nInstead of seeing things like:\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"106496\". \"bytesReceived\":\"0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nThe KB MB and GB values will be printed out:\n\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"(104.00 KB) 106496\". \"bytesReceived\":\"(0 bytes) 0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Human+Readable+Byte+sizes","date":"2020-08-13 18:25:16","modifiedFileCount":"55","status":"M","submitter":"Spaceman1984"}]
