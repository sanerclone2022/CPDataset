[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-05-19 20:14:04","commitOrder":2,"curCode":"    public void onConnect(final Session session) throws IOException, InterruptedException {\n\n        String queries = session.getUpgradeRequest().getQueryString();\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n            viewer = ConsoleProxy.getNoVncViewer(param, ajaxSessionIdStr, session);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n            return;\n        }\n    }\n","date":"2020-05-19 20:14:04","endLine":134,"groupId":"25146","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onConnect","params":"(finalSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/34/9d98408a134f62c8fa91a2164c195b01aa908d.src","preCode":"    public void onConnect(final Session session) throws IOException, InterruptedException {\n\n        String queries = session.getUpgradeRequest().getQueryString();\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n            viewer = ConsoleProxy.getNoVncViewer(param, ajaxSessionIdStr, session);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n            return;\n        }\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyNoVNCHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private void doHandle(HttpExchange t) throws Exception, IllegalArgumentException {\n        String queries = t.getRequestURI().getQuery();\n        if (s_logger.isTraceEnabled())\n            s_logger.trace(\"Handle AJAX request: \" + queries);\n\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String eventStr = queryMap.get(\"event\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int event = 0;\n\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (eventStr != null) {\n            try {\n                event = Integer.parseInt(eventStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + eventStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        ConsoleProxyClient viewer = null;\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n\n            viewer = ConsoleProxy.getAjaxVncViewer(param, ajaxSessionIdStr);\n        } catch (Exception e) {\n\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n\n            String[] content =\n                new String[] {\"<html><head></head><body>\", \"<div id=\\\"main_panel\\\" tabindex=\\\"1\\\">\",\n                    \"<p>Access is denied for the console session. Please close the window and retry again</p>\", \"</div></body></html>\"};\n\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < content.length; i++)\n                sb.append(content[i]);\n\n            sendResponse(t, \"text/html\", sb.toString());\n            return;\n        }\n\n        if (event != 0) {\n            if (ajaxSessionId != 0 && ajaxSessionId == viewer.getAjaxSessionId()) {\n                if (event == 7) {\n                    \r\n                    InputStream is = t.getRequestBody();\n                    handleClientEventBag(viewer, convertStreamToString(is, true));\n                } else {\n                    handleClientEvent(viewer, event, queryMap);\n                }\n                sendResponse(t, \"text/html\", \"OK\");\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n\n                sendResponse(t, \"text/html\", \"Invalid ajax client session id\");\n            }\n        } else {\n            if (ajaxSessionId != 0 && ajaxSessionId != viewer.getAjaxSessionId()) {\n                s_logger.info(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n                handleClientKickoff(t, viewer);\n            } else if (ajaxSessionId == 0) {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request indicates a fresh client start\");\n\n                String title = queryMap.get(\"t\");\n                String guest = queryMap.get(\"guest\");\n                handleClientStart(t, viewer, title != null ? title : \"\", guest);\n            } else {\n\n                if (s_logger.isTraceEnabled())\n                    s_logger.trace(\"Ajax request indicates client update\");\n\n                handleClientUpdate(t, viewer);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":192,"groupId":"12066","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"doHandle","params":"(HttpExchanget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/30/a54139c0ebecb964b7efe62eea62a7ddb8407c.src","preCode":"    private void doHandle(HttpExchange t) throws Exception, IllegalArgumentException {\n        String queries = t.getRequestURI().getQuery();\n        if (s_logger.isTraceEnabled())\n            s_logger.trace(\"Handle AJAX request: \" + queries);\n\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String eventStr = queryMap.get(\"event\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int event = 0;\n\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (eventStr != null) {\n            try {\n                event = Integer.parseInt(eventStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + eventStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        ConsoleProxyClient viewer = null;\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n\n            viewer = ConsoleProxy.getAjaxVncViewer(param, ajaxSessionIdStr);\n        } catch (Exception e) {\n\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n\n            String[] content =\n                new String[] {\"<html><head></head><body>\", \"<div id=\\\"main_panel\\\" tabindex=\\\"1\\\">\",\n                    \"<p>Access is denied for the console session. Please close the window and retry again</p>\", \"</div></body></html>\"};\n\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < content.length; i++)\n                sb.append(content[i]);\n\n            sendResponse(t, \"text/html\", sb.toString());\n            return;\n        }\n\n        if (event != 0) {\n            if (ajaxSessionId != 0 && ajaxSessionId == viewer.getAjaxSessionId()) {\n                if (event == 7) {\n                    \r\n                    InputStream is = t.getRequestBody();\n                    handleClientEventBag(viewer, convertStreamToString(is, true));\n                } else {\n                    handleClientEvent(viewer, event, queryMap);\n                }\n                sendResponse(t, \"text/html\", \"OK\");\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n\n                sendResponse(t, \"text/html\", \"Invalid ajax client session id\");\n            }\n        } else {\n            if (ajaxSessionId != 0 && ajaxSessionId != viewer.getAjaxSessionId()) {\n                s_logger.info(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n                handleClientKickoff(t, viewer);\n            } else if (ajaxSessionId == 0) {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request indicates a fresh client start\");\n\n                String title = queryMap.get(\"t\");\n                String guest = queryMap.get(\"guest\");\n                handleClientStart(t, viewer, title != null ? title : \"\", guest);\n            } else {\n\n                if (s_logger.isTraceEnabled())\n                    s_logger.trace(\"Ajax request indicates client update\");\n\n                handleClientUpdate(t, viewer);\n            }\n        }\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyAjaxHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"NB"}],"commitId":"1756b0f64a30e7d2ffdbad99c64b7a633daae27e","commitMessage":"@@@noVNC console integration (#3967)\n\n* Adding noVNC repo\n\n* Adding support for noVNC\n\n* Adding Ctl+Esc\n\n* Removing device name from novnc header","date":"2020-05-19 20:14:04","modifiedFileCount":"5","status":"M","submitter":"davidjumani"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-03-06 18:32:09","commitOrder":3,"curCode":"    public void onConnect(final Session session) throws IOException, InterruptedException {\n\n        String queries = session.getUpgradeRequest().getQueryString();\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n        String sourceIP = queryMap.get(\"sourceIP\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (! checkSessionSourceIp(session, sourceIP)) {\n            return;\n        }\n\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n            viewer = ConsoleProxy.getNoVncViewer(param, ajaxSessionIdStr, session);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n            return;\n        } finally {\n            if (viewer == null) {\n                session.disconnect();\n            }\n        }\n    }\n","date":"2021-03-06 18:32:09","endLine":143,"groupId":"25146","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onConnect","params":"(finalSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1c/3b47e82883ff544a261c11fe07ad0e6a0714ea.src","preCode":"    public void onConnect(final Session session) throws IOException, InterruptedException {\n\n        String queries = session.getUpgradeRequest().getQueryString();\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n            viewer = ConsoleProxy.getNoVncViewer(param, ajaxSessionIdStr, session);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n            return;\n        }\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyNoVNCHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private void doHandle(HttpExchange t) throws Exception, IllegalArgumentException {\n        String queries = t.getRequestURI().getQuery();\n        if (s_logger.isTraceEnabled())\n            s_logger.trace(\"Handle AJAX request: \" + queries);\n\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String eventStr = queryMap.get(\"event\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int event = 0;\n\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (eventStr != null) {\n            try {\n                event = Integer.parseInt(eventStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + eventStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        ConsoleProxyClient viewer = null;\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n\n            viewer = ConsoleProxy.getAjaxVncViewer(param, ajaxSessionIdStr);\n        } catch (Exception e) {\n\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n\n            String[] content =\n                new String[] {\"<html><head></head><body>\", \"<div id=\\\"main_panel\\\" tabindex=\\\"1\\\">\",\n                    \"<p>Access is denied for the console session. Please close the window and retry again</p>\", \"</div></body></html>\"};\n\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < content.length; i++)\n                sb.append(content[i]);\n\n            sendResponse(t, \"text/html\", sb.toString());\n            return;\n        }\n\n        if (event != 0) {\n            if (ajaxSessionId != 0 && ajaxSessionId == viewer.getAjaxSessionId()) {\n                if (event == 7) {\n                    \r\n                    InputStream is = t.getRequestBody();\n                    handleClientEventBag(viewer, convertStreamToString(is, true));\n                } else {\n                    handleClientEvent(viewer, event, queryMap);\n                }\n                sendResponse(t, \"text/html\", \"OK\");\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n\n                sendResponse(t, \"text/html\", \"Invalid ajax client session id\");\n            }\n        } else {\n            if (ajaxSessionId != 0 && ajaxSessionId != viewer.getAjaxSessionId()) {\n                s_logger.info(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n                handleClientKickoff(t, viewer);\n            } else if (ajaxSessionId == 0) {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request indicates a fresh client start\");\n\n                String title = queryMap.get(\"t\");\n                String guest = queryMap.get(\"guest\");\n                handleClientStart(t, viewer, title != null ? title : \"\", guest);\n            } else {\n\n                if (s_logger.isTraceEnabled())\n                    s_logger.trace(\"Ajax request indicates client update\");\n\n                handleClientUpdate(t, viewer);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":192,"groupId":"12066","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"doHandle","params":"(HttpExchanget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/30/a54139c0ebecb964b7efe62eea62a7ddb8407c.src","preCode":"    private void doHandle(HttpExchange t) throws Exception, IllegalArgumentException {\n        String queries = t.getRequestURI().getQuery();\n        if (s_logger.isTraceEnabled())\n            s_logger.trace(\"Handle AJAX request: \" + queries);\n\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String eventStr = queryMap.get(\"event\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int event = 0;\n\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (eventStr != null) {\n            try {\n                event = Integer.parseInt(eventStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + eventStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        ConsoleProxyClient viewer = null;\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n\n            viewer = ConsoleProxy.getAjaxVncViewer(param, ajaxSessionIdStr);\n        } catch (Exception e) {\n\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n\n            String[] content =\n                new String[] {\"<html><head></head><body>\", \"<div id=\\\"main_panel\\\" tabindex=\\\"1\\\">\",\n                    \"<p>Access is denied for the console session. Please close the window and retry again</p>\", \"</div></body></html>\"};\n\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < content.length; i++)\n                sb.append(content[i]);\n\n            sendResponse(t, \"text/html\", sb.toString());\n            return;\n        }\n\n        if (event != 0) {\n            if (ajaxSessionId != 0 && ajaxSessionId == viewer.getAjaxSessionId()) {\n                if (event == 7) {\n                    \r\n                    InputStream is = t.getRequestBody();\n                    handleClientEventBag(viewer, convertStreamToString(is, true));\n                } else {\n                    handleClientEvent(viewer, event, queryMap);\n                }\n                sendResponse(t, \"text/html\", \"OK\");\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n\n                sendResponse(t, \"text/html\", \"Invalid ajax client session id\");\n            }\n        } else {\n            if (ajaxSessionId != 0 && ajaxSessionId != viewer.getAjaxSessionId()) {\n                s_logger.info(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n                handleClientKickoff(t, viewer);\n            } else if (ajaxSessionId == 0) {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request indicates a fresh client start\");\n\n                String title = queryMap.get(\"t\");\n                String guest = queryMap.get(\"guest\");\n                handleClientStart(t, viewer, title != null ? title : \"\", guest);\n            } else {\n\n                if (s_logger.isTraceEnabled())\n                    s_logger.trace(\"Ajax request indicates client update\");\n\n                handleClientUpdate(t, viewer);\n            }\n        }\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyAjaxHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"}],"commitId":"a1be9b02a6cc2b629a29b6cd6a712e9254f4eaa0","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-03-06 18:32:09","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-04-15 18:47:13","commitOrder":4,"curCode":"    public void onConnect(final Session session) throws IOException, InterruptedException {\n\n        String queries = session.getUpgradeRequest().getQueryString();\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n        String sourceIP = queryMap.get(\"sourceIP\");\n        String websocketUrl = queryMap.get(\"websocketUrl\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (! checkSessionSourceIp(session, sourceIP)) {\n            return;\n        }\n\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n            param.setWebsocketUrl(websocketUrl);\n            viewer = ConsoleProxy.getNoVncViewer(param, ajaxSessionIdStr, session);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n            return;\n        } finally {\n            if (viewer == null) {\n                session.disconnect();\n            }\n        }\n    }\n","date":"2021-04-15 18:47:13","endLine":145,"groupId":"104568","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"onConnect","params":"(finalSessionsession)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/91/d8e192fd9b781a5cd5505909e0977c0b141ee7.src","preCode":"    public void onConnect(final Session session) throws IOException, InterruptedException {\n\n        String queries = session.getUpgradeRequest().getQueryString();\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n        String sourceIP = queryMap.get(\"sourceIP\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (! checkSessionSourceIp(session, sourceIP)) {\n            return;\n        }\n\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n            viewer = ConsoleProxy.getNoVncViewer(param, ajaxSessionIdStr, session);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n            return;\n        } finally {\n            if (viewer == null) {\n                session.disconnect();\n            }\n        }\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyNoVNCHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    private void doHandle(HttpExchange t) throws Exception, IllegalArgumentException {\n        String queries = t.getRequestURI().getQuery();\n        if (s_logger.isTraceEnabled())\n            s_logger.trace(\"Handle AJAX request: \" + queries);\n\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String eventStr = queryMap.get(\"event\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int event = 0;\n\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (eventStr != null) {\n            try {\n                event = Integer.parseInt(eventStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + eventStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        ConsoleProxyClient viewer = null;\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n\n            viewer = ConsoleProxy.getAjaxVncViewer(param, ajaxSessionIdStr);\n        } catch (Exception e) {\n\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n\n            String[] content =\n                new String[] {\"<html><head></head><body>\", \"<div id=\\\"main_panel\\\" tabindex=\\\"1\\\">\",\n                    \"<p>Access is denied for the console session. Please close the window and retry again</p>\", \"</div></body></html>\"};\n\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < content.length; i++)\n                sb.append(content[i]);\n\n            sendResponse(t, \"text/html\", sb.toString());\n            return;\n        }\n\n        if (event != 0) {\n            if (ajaxSessionId != 0 && ajaxSessionId == viewer.getAjaxSessionId()) {\n                if (event == 7) {\n                    \r\n                    InputStream is = t.getRequestBody();\n                    handleClientEventBag(viewer, convertStreamToString(is, true));\n                } else {\n                    handleClientEvent(viewer, event, queryMap);\n                }\n                sendResponse(t, \"text/html\", \"OK\");\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n\n                sendResponse(t, \"text/html\", \"Invalid ajax client session id\");\n            }\n        } else {\n            if (ajaxSessionId != 0 && ajaxSessionId != viewer.getAjaxSessionId()) {\n                s_logger.info(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n                handleClientKickoff(t, viewer);\n            } else if (ajaxSessionId == 0) {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request indicates a fresh client start\");\n\n                String title = queryMap.get(\"t\");\n                String guest = queryMap.get(\"guest\");\n                handleClientStart(t, viewer, title != null ? title : \"\", guest);\n            } else {\n\n                if (s_logger.isTraceEnabled())\n                    s_logger.trace(\"Ajax request indicates client update\");\n\n                handleClientUpdate(t, viewer);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":192,"groupId":"104568","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doHandle","params":"(HttpExchanget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/30/a54139c0ebecb964b7efe62eea62a7ddb8407c.src","preCode":"    private void doHandle(HttpExchange t) throws Exception, IllegalArgumentException {\n        String queries = t.getRequestURI().getQuery();\n        if (s_logger.isTraceEnabled())\n            s_logger.trace(\"Handle AJAX request: \" + queries);\n\n        Map<String, String> queryMap = ConsoleProxyHttpHandlerHelper.getQueryMap(queries);\n\n        String host = queryMap.get(\"host\");\n        String portStr = queryMap.get(\"port\");\n        String sid = queryMap.get(\"sid\");\n        String tag = queryMap.get(\"tag\");\n        String ticket = queryMap.get(\"ticket\");\n        String ajaxSessionIdStr = queryMap.get(\"sess\");\n        String eventStr = queryMap.get(\"event\");\n        String console_url = queryMap.get(\"consoleurl\");\n        String console_host_session = queryMap.get(\"sessionref\");\n        String vm_locale = queryMap.get(\"locale\");\n        String hypervHost = queryMap.get(\"hypervHost\");\n        String username = queryMap.get(\"username\");\n        String password = queryMap.get(\"password\");\n\n        if (tag == null)\n            tag = \"\";\n\n        long ajaxSessionId = 0;\n        int event = 0;\n\n        int port;\n\n        if (host == null || portStr == null || sid == null)\n            throw new IllegalArgumentException();\n\n        try {\n            port = Integer.parseInt(portStr);\n        } catch (NumberFormatException e) {\n            s_logger.warn(\"Invalid number parameter in query string: \" + portStr);\n            throw new IllegalArgumentException(e);\n        }\n\n        if (ajaxSessionIdStr != null) {\n            try {\n                ajaxSessionId = Long.parseLong(ajaxSessionIdStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + ajaxSessionIdStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        if (eventStr != null) {\n            try {\n                event = Integer.parseInt(eventStr);\n            } catch (NumberFormatException e) {\n                s_logger.warn(\"Invalid number parameter in query string: \" + eventStr);\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        ConsoleProxyClient viewer = null;\n        try {\n            ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n            param.setClientHostAddress(host);\n            param.setClientHostPort(port);\n            param.setClientHostPassword(sid);\n            param.setClientTag(tag);\n            param.setTicket(ticket);\n            param.setClientTunnelUrl(console_url);\n            param.setClientTunnelSession(console_host_session);\n            param.setLocale(vm_locale);\n            param.setHypervHost(hypervHost);\n            param.setUsername(username);\n            param.setPassword(password);\n\n            viewer = ConsoleProxy.getAjaxVncViewer(param, ajaxSessionIdStr);\n        } catch (Exception e) {\n\n            s_logger.warn(\"Failed to create viewer due to \" + e.getMessage(), e);\n\n            String[] content =\n                new String[] {\"<html><head></head><body>\", \"<div id=\\\"main_panel\\\" tabindex=\\\"1\\\">\",\n                    \"<p>Access is denied for the console session. Please close the window and retry again</p>\", \"</div></body></html>\"};\n\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < content.length; i++)\n                sb.append(content[i]);\n\n            sendResponse(t, \"text/html\", sb.toString());\n            return;\n        }\n\n        if (event != 0) {\n            if (ajaxSessionId != 0 && ajaxSessionId == viewer.getAjaxSessionId()) {\n                if (event == 7) {\n                    \r\n                    InputStream is = t.getRequestBody();\n                    handleClientEventBag(viewer, convertStreamToString(is, true));\n                } else {\n                    handleClientEvent(viewer, event, queryMap);\n                }\n                sendResponse(t, \"text/html\", \"OK\");\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n\n                sendResponse(t, \"text/html\", \"Invalid ajax client session id\");\n            }\n        } else {\n            if (ajaxSessionId != 0 && ajaxSessionId != viewer.getAjaxSessionId()) {\n                s_logger.info(\"Ajax request comes from a different session, id in request: \" + ajaxSessionId + \", id in viewer: \" + viewer.getAjaxSessionId());\n                handleClientKickoff(t, viewer);\n            } else if (ajaxSessionId == 0) {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Ajax request indicates a fresh client start\");\n\n                String title = queryMap.get(\"t\");\n                String guest = queryMap.get(\"guest\");\n                handleClientStart(t, viewer, title != null ? title : \"\", guest);\n            } else {\n\n                if (s_logger.isTraceEnabled())\n                    s_logger.trace(\"Ajax request indicates client update\");\n\n                handleClientUpdate(t, viewer);\n            }\n        }\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyAjaxHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"}],"commitId":"f42024714c39eacc004af0b61e016fc7d16e459a","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-04-15 18:47:13","modifiedFileCount":"12","status":"M","submitter":"Rohit Yadav"}]
