[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false);\n\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":615,"groupId":"21398","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ce/c2e5926c174f9682d496fa78ab8a08777eece3.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false);\n\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":435,"groupId":"8648","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-06-07 13:56:34","commitOrder":2,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false);\n\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                _networkOfferingDao.persistDefaultL2NetworkOfferings();\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","date":"2018-06-07 13:56:34","endLine":604,"groupId":"21398","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b5/aca5d9f10e7fd389e116839fd98abf156df366.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false);\n\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":435,"groupId":"8648","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"}],"commitId":"72e61bfa1da236730a0548f35e170c28aca992b7","commitMessage":"@@@Merge branch '4.11'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-06-07 13:56:34","modifiedFileCount":"6","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":3,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false, null, null);\n\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                _networkOfferingDao.persistDefaultL2NetworkOfferings();\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","date":"2019-07-16 17:25:35","endLine":604,"groupId":"21398","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/51/b71d911ce91a91c58a0426787a03d5304301a7.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false);\n\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                _networkOfferingDao.persistDefaultL2NetworkOfferings();\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":435,"groupId":"8648","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-02-13 18:19:06","commitOrder":4,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false, null, null, true);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                _networkOfferingDao.persistDefaultL2NetworkOfferings();\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","date":"2021-02-13 18:19:06","endLine":606,"groupId":"21398","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/13/0e4f0c64abf554bc4fc1f45c76da9996360c8a.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false, null, null);\n\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false, null, null);\n                    offering.setState(NetworkOffering.State.Enabled);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                _networkOfferingDao.persistDefaultL2NetworkOfferings();\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":435,"groupId":"8648","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"}],"commitId":"b6fe9f99eb8dcd40b8cb80c55fc4b800e8f7ea92","commitMessage":"@@@Network Offering: Allow enabling network and vpc offering during creation (#4564)\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2021-02-13 18:19:06","modifiedFileCount":"10","status":"M","submitter":"Pearl Dsilva"},{"authorTime":"2021-05-18 17:49:20","codes":[{"authorDate":"2021-02-13 18:19:06","commitOrder":5,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false, null, null, true);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                _networkOfferingDao.persistDefaultL2NetworkOfferings();\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","date":"2021-02-13 18:19:06","endLine":606,"groupId":"10605","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/13/0e4f0c64abf554bc4fc1f45c76da9996360c8a.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        \r\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        final Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        final Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        final Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VPCVirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                NetworkOfferingVO offering = null;\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.QuickCloudNoServices) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.QuickCloudNoServices, \"Offering for QuickCloud with no services\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, new HashMap<Network.Service, Set<Network.Provider>>(), true, Network.GuestType.Shared, false, null, true, null, true,\n                            false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOfferingWithSGService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOfferingWithSGService, \"Offering for Shared Security group enabled networks\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true,\n                            null, true, false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedNetworkOffering, \"Offering for Shared networks\", TrafficType.Guest, null, true,\n                            Availability.Optional, null, defaultSharedNetworkOfferingProviders, true, Network.GuestType.Shared, false, null, true, null, true, false, null, false,\n                            null, true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,\n                            \"Offering for Isolated networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Required, null,\n                            defaultIsolatedSourceNatEnabledNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null, true, null, false, false, null, false, null,\n                            true, false, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled\", TrafficType.Guest, null, false, Availability.Optional, null,\n                            defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB) == null) {\n                    \r\n                    defaultVPCOffProviders.remove(Service.Lb);\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,\n                            \"Offering for Isolated VPC networks with Source Nat service enabled and LB service disabled\", TrafficType.Guest, null, false, Availability.Optional,\n                            null, defaultVPCOffProviders, true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                }\n\n                \r\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOffering, \"Offering for Isolated networks with no Source Nat service\",\n                            TrafficType.Guest, null, true, Availability.Optional, null, defaultIsolatedNetworkOfferingProviders, true, Network.GuestType.Isolated, false, null,\n                            true, null, true, false, null, false, null, true, false, null, null, true);\n                }\n\n                \r\n                final Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n                defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n                final Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n                defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n                internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n                internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n                internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n                internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n                internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,\n                            \"Offering for Isolated VPC networks with Internal Lb support\", TrafficType.Guest, null, false, Availability.Optional, null, internalLbOffProviders,\n                            true, Network.GuestType.Isolated, false, null, false, null, false, false, null, false, null, true, true, null, null, true);\n                    offering.setInternalLb(true);\n                    offering.setPublicLb(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                final Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n                final Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n                vrProvider.add(Provider.VirtualRouter);\n                final Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n                sgProvider.add(Provider.SecurityGroupProvider);\n                final Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n                nsProvider.add(Provider.Netscaler);\n                netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n                netscalerServiceProviders.put(Service.Dns, vrProvider);\n                netscalerServiceProviders.put(Service.UserData, vrProvider);\n                netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n                netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n                netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n                final Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n                final Map<Capability, String> elb = new HashMap<Capability, String>();\n                elb.put(Capability.ElasticLb, \"true\");\n                final Map<Capability, String> eip = new HashMap<Capability, String>();\n                eip.put(Capability.ElasticIp, \"true\");\n                serviceCapabilityMap.put(Service.Lb, elb);\n                serviceCapabilityMap.put(Service.StaticNat, eip);\n\n                if (_networkOfferingDao.findByUniqueName(NetworkOffering.DefaultSharedEIPandELBNetworkOffering) == null) {\n                    offering = _configMgr.createNetworkOffering(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,\n                            \"Offering for Shared networks with Elastic IP and Elastic LB capabilities\", TrafficType.Guest, null, true, Availability.Optional, null,\n                            netscalerServiceProviders, true, Network.GuestType.Shared, false, null, true, serviceCapabilityMap, true, false, null, false, null, true, false, null, null, true);\n                    offering.setDedicatedLB(false);\n                    _networkOfferingDao.update(offering.getId(), offering);\n                }\n\n                _networkOfferingDao.persistDefaultL2NetworkOfferings();\n            }\n        });\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        final SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        final SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        final SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n\n        AssignIpAddressFromPodVlanSearch.done();\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"Network-Scavenger\"));\n\n        _agentMgr.registerForHostEvents(this, true, false, true);\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        s_logger.info(\"Network Manager is configured.\");\n\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2021-05-18 17:49:20","commitOrder":5,"curCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        vlanSearch.and(\"vlanGateway\", vlanSearch.entity().getVlanGateway(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        podVlanSearch.and(\"vlanGateway\", podVlanSearch.entity().getVlanGateway(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","date":"2021-05-18 17:49:20","endLine":509,"groupId":"10605","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/a8c1f6fde1a7d809539e6ee586d66ab97aea5c.src","preCode":"    public boolean configure(String name, Map<String, Object> params) {\n        \r\n        Map<Network.Service, Set<Network.Provider>> defaultSharedNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultProviders = new HashSet<Network.Provider>();\n\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultSharedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedNetworkOfferingProviders = defaultSharedNetworkOfferingProviders;\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultSharedSGEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        Set<Provider> sgProviders = new HashSet<Provider>();\n        sgProviders.add(Provider.SecurityGroupProvider);\n        defaultSharedSGEnabledNetworkOfferingProviders.put(Service.SecurityGroup, sgProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultIsolatedSourceNatEnabledNetworkOfferingProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding, defaultProviders);\n        defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn, defaultProviders);\n\n        Map<Network.Service, Set<Network.Provider>> defaultVPCOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        defaultProviders.clear();\n        defaultProviders.add(Network.Provider.VirtualRouter);\n        defaultVPCOffProviders.put(Service.Dhcp, defaultProviders);\n        defaultVPCOffProviders.put(Service.Dns, defaultProviders);\n        defaultVPCOffProviders.put(Service.UserData, defaultProviders);\n        defaultVPCOffProviders.put(Service.NetworkACL, defaultProviders);\n        defaultVPCOffProviders.put(Service.Gateway, defaultProviders);\n        defaultVPCOffProviders.put(Service.Lb, defaultProviders);\n        defaultVPCOffProviders.put(Service.SourceNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.StaticNat, defaultProviders);\n        defaultVPCOffProviders.put(Service.PortForwarding, defaultProviders);\n        defaultVPCOffProviders.put(Service.Vpn, defaultProviders);\n\n        \r\n        Map<Network.Service, Set<Network.Provider>> internalLbOffProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> defaultVpcProvider = new HashSet<Network.Provider>();\n        defaultVpcProvider.add(Network.Provider.VPCVirtualRouter);\n\n        Set<Network.Provider> defaultInternalLbProvider = new HashSet<Network.Provider>();\n        defaultInternalLbProvider.add(Network.Provider.InternalLbVm);\n\n        internalLbOffProviders.put(Service.Dhcp, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Dns, defaultVpcProvider);\n        internalLbOffProviders.put(Service.UserData, defaultVpcProvider);\n        internalLbOffProviders.put(Service.NetworkACL, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Gateway, defaultVpcProvider);\n        internalLbOffProviders.put(Service.Lb, defaultInternalLbProvider);\n        internalLbOffProviders.put(Service.SourceNat, defaultVpcProvider);\n\n        Map<Network.Service, Set<Network.Provider>> netscalerServiceProviders = new HashMap<Network.Service, Set<Network.Provider>>();\n        Set<Network.Provider> vrProvider = new HashSet<Network.Provider>();\n        vrProvider.add(Provider.VirtualRouter);\n        Set<Network.Provider> sgProvider = new HashSet<Network.Provider>();\n        sgProvider.add(Provider.SecurityGroupProvider);\n        Set<Network.Provider> nsProvider = new HashSet<Network.Provider>();\n        nsProvider.add(Provider.Netscaler);\n        netscalerServiceProviders.put(Service.Dhcp, vrProvider);\n        netscalerServiceProviders.put(Service.Dns, vrProvider);\n        netscalerServiceProviders.put(Service.UserData, vrProvider);\n        netscalerServiceProviders.put(Service.SecurityGroup, sgProvider);\n        netscalerServiceProviders.put(Service.StaticNat, nsProvider);\n        netscalerServiceProviders.put(Service.Lb, nsProvider);\n\n        Map<Service, Map<Capability, String>> serviceCapabilityMap = new HashMap<Service, Map<Capability, String>>();\n        Map<Capability, String> elb = new HashMap<Capability, String>();\n        elb.put(Capability.ElasticLb, \"true\");\n        Map<Capability, String> eip = new HashMap<Capability, String>();\n        eip.put(Capability.ElasticIp, \"true\");\n        serviceCapabilityMap.put(Service.Lb, elb);\n        serviceCapabilityMap.put(Service.StaticNat, eip);\n\n        AssignIpAddressSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressSearch.and(\"dc\", AssignIpAddressSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressSearch.and(\"allocated\", AssignIpAddressSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressSearch.and(\"vlanId\", AssignIpAddressSearch.entity().getVlanId(), Op.IN);\n        if (SystemVmPublicIpReservationModeStrictness.value()) {\n            AssignIpAddressSearch.and(\"forSystemVms\", AssignIpAddressSearch.entity().isForSystemVms(), Op.EQ);\n        }\n        SearchBuilder<VlanVO> vlanSearch = _vlanDao.createSearchBuilder();\n        vlanSearch.and(\"type\", vlanSearch.entity().getVlanType(), Op.EQ);\n        vlanSearch.and(\"networkId\", vlanSearch.entity().getNetworkId(), Op.EQ);\n        AssignIpAddressSearch.join(\"vlan\", vlanSearch, vlanSearch.entity().getId(), AssignIpAddressSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressSearch.done();\n\n        AssignIpAddressFromPodVlanSearch = _ipAddressDao.createSearchBuilder();\n        AssignIpAddressFromPodVlanSearch.and(\"dc\", AssignIpAddressFromPodVlanSearch.entity().getDataCenterId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.and(\"allocated\", AssignIpAddressFromPodVlanSearch.entity().getAllocatedTime(), Op.NULL);\n        AssignIpAddressFromPodVlanSearch.and(\"vlanId\", AssignIpAddressFromPodVlanSearch.entity().getVlanId(), Op.IN);\n\n        SearchBuilder<VlanVO> podVlanSearch = _vlanDao.createSearchBuilder();\n        podVlanSearch.and(\"type\", podVlanSearch.entity().getVlanType(), Op.EQ);\n        podVlanSearch.and(\"networkId\", podVlanSearch.entity().getNetworkId(), Op.EQ);\n        SearchBuilder<PodVlanMapVO> podVlanMapSB = _podVlanMapDao.createSearchBuilder();\n        podVlanMapSB.and(\"podId\", podVlanMapSB.entity().getPodId(), Op.EQ);\n        AssignIpAddressFromPodVlanSearch.join(\"podVlanMapSB\", podVlanMapSB, podVlanMapSB.entity().getVlanDbId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(),\n                JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.join(\"vlan\", podVlanSearch, podVlanSearch.entity().getId(), AssignIpAddressFromPodVlanSearch.entity().getVlanId(), JoinType.INNER);\n        AssignIpAddressFromPodVlanSearch.done();\n\n        Network.State.getStateMachine().registerListener(new NetworkStateListener(_configDao));\n\n        if (RulesContinueOnError.value() != null) {\n            rulesContinueOnErrFlag = RulesContinueOnError.value();\n        }\n\n        s_logger.info(\"IPAddress Manager is configured.\");\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"}],"commitId":"426f14b6ed87c3dc072ee1d95d84892fc624bcf0","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15'\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2021-05-18 17:49:20","modifiedFileCount":"23","status":"M","submitter":"Abhishek Kumar"}]
