[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(final Long id, final String name, final String displayText, final List<String> supportedServicesStr,\n            final Boolean isDefault, final String keyword, final String state, final Long startIndex, final Long pageSizeVal) {\n        final Filter searchFilter = new Filter(VpcOfferingVO.class, \"created\", false, null, null);\n        final SearchCriteria<VpcOfferingVO> sc = _vpcOffDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingVO> ssc = _vpcOffDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        final List<VpcOfferingVO> offerings = _vpcOffDao.search(sc, searchFilter);\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingVO> supportedOfferings = new ArrayList<VpcOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":649,"groupId":"24841","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcOfferings","params":"(finalLongid@finalStringname@finalStringdisplayText@finalList<String>supportedServicesStr@finalBooleanisDefault@finalStringkeyword@finalStringstate@finalLongstartIndex@finalLongpageSizeVal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ab/6441ac5b7e6f8edb855842f28034fb2a8a3cf5.src","preCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(final Long id, final String name, final String displayText, final List<String> supportedServicesStr,\n            final Boolean isDefault, final String keyword, final String state, final Long startIndex, final Long pageSizeVal) {\n        final Filter searchFilter = new Filter(VpcOfferingVO.class, \"created\", false, null, null);\n        final SearchCriteria<VpcOfferingVO> sc = _vpcOffDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingVO> ssc = _vpcOffDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        final List<VpcOfferingVO> offerings = _vpcOffDao.search(sc, searchFilter);\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingVO> supportedOfferings = new ArrayList<VpcOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingVO> sc = _networkOfferingDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingVO> ssc = _networkOfferingDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        final List<NetworkOfferingVO> offerings = _networkOfferingDao.search(sc, searchFilter);\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingVO> supportedOfferings = new ArrayList<NetworkOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":5099,"groupId":"12060","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForNetworkOfferings","params":"(finalListNetworkOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingVO> sc = _networkOfferingDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingVO> ssc = _networkOfferingDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        final List<NetworkOfferingVO> offerings = _networkOfferingDao.search(sc, searchFilter);\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingVO> supportedOfferings = new ArrayList<NetworkOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-26 10:32:19","commitOrder":2,"curCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(final Long id, final String name, final String displayText, final List<String> supportedServicesStr,\n            final Boolean isDefault, final String keyword, final String state, final Long startIndex, final Long pageSizeVal) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(VpcOfferingVO.class, \"sortKey\", isAscending, null, null);\n        final SearchCriteria<VpcOfferingVO> sc = _vpcOffDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingVO> ssc = _vpcOffDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        final List<VpcOfferingVO> offerings = _vpcOffDao.search(sc, searchFilter);\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingVO> supportedOfferings = new ArrayList<VpcOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2019-06-26 10:32:19","endLine":659,"groupId":"24841","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcOfferings","params":"(finalLongid@finalStringname@finalStringdisplayText@finalList<String>supportedServicesStr@finalBooleanisDefault@finalStringkeyword@finalStringstate@finalLongstartIndex@finalLongpageSizeVal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/33/ae1cc08cd09ebc13682bba43d2f53a4c01db2a.src","preCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(final Long id, final String name, final String displayText, final List<String> supportedServicesStr,\n            final Boolean isDefault, final String keyword, final String state, final Long startIndex, final Long pageSizeVal) {\n        final Filter searchFilter = new Filter(VpcOfferingVO.class, \"created\", false, null, null);\n        final SearchCriteria<VpcOfferingVO> sc = _vpcOffDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingVO> ssc = _vpcOffDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        final List<VpcOfferingVO> offerings = _vpcOffDao.search(sc, searchFilter);\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingVO> supportedOfferings = new ArrayList<VpcOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingVO> sc = _networkOfferingDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingVO> ssc = _networkOfferingDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        final List<NetworkOfferingVO> offerings = _networkOfferingDao.search(sc, searchFilter);\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingVO> supportedOfferings = new ArrayList<NetworkOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":5099,"groupId":"12060","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForNetworkOfferings","params":"(finalListNetworkOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingVO> sc = _networkOfferingDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingVO> ssc = _networkOfferingDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        final List<NetworkOfferingVO> offerings = _networkOfferingDao.search(sc, searchFilter);\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingVO> supportedOfferings = new ArrayList<NetworkOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4870,"status":"N"}],"commitId":"f653e6149c53c9316bcccaf23f407c1be19eecb3","commitMessage":"@@@server: support sort_key for vpc_offerings table (#3268)\n\nFixes #2742\n\nUI Supported ordering VPC Offerings but the API did not have that\nsupport implemented. This makes the change in updateVPCOfferings\nand listVPCOfferings API calls.  along with necessary database\nchanges for supporting sorting of VPC Offerings.\n","date":"2019-06-26 10:32:19","modifiedFileCount":"4","status":"M","submitter":"Anurag Awasthi"},{"authorTime":"2019-07-16 17:25:35","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":3,"curCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(ListVPCOfferingsCmd cmd) {\n        Account caller = CallContext.current().getCallingAccount();\n        final Long id = cmd.getId();\n        final String name = cmd.getVpcOffName();\n        final String displayText = cmd.getDisplayText();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Boolean isDefault = cmd.getIsDefault();\n        final String keyword = cmd.getKeyword();\n        final String state = cmd.getState();\n        final Long startIndex = cmd.getStartIndex();\n        final Long pageSizeVal = cmd.getPageSizeVal();\n        final Long zoneId = cmd.getZoneId();\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(VpcOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final SearchCriteria<VpcOfferingJoinVO> sc = vpcOfferingJoinDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingJoinVO> ssc = vpcOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<VpcOfferingJoinVO> sb = vpcOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<VpcOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<VpcOfferingJoinVO> offerings = vpcOfferingJoinDao.search(sc, searchFilter);\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<VpcOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                VpcOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = false;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingJoinVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, supportedOfferings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, offerings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2019-07-16 17:25:35","endLine":766,"groupId":"9241","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcOfferings","params":"(ListVPCOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b1/b1059c1236a2c9572449c96fd61668a3567f02.src","preCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(final Long id, final String name, final String displayText, final List<String> supportedServicesStr,\n            final Boolean isDefault, final String keyword, final String state, final Long startIndex, final Long pageSizeVal) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(VpcOfferingVO.class, \"sortKey\", isAscending, null, null);\n        final SearchCriteria<VpcOfferingVO> sc = _vpcOffDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingVO> ssc = _vpcOffDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        final List<VpcOfferingVO> offerings = _vpcOffDao.search(sc, searchFilter);\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingVO> supportedOfferings = new ArrayList<VpcOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                final Pair<List<? extends VpcOffering>, Integer> listWPagination = new Pair<List<? extends VpcOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"M"},{"authorDate":"2019-07-16 17:25:35","commitOrder":3,"curCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingJoinVO> sc = networkOfferingJoinDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long domainId = cmd.getDomainId();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (domainId != null) {\n            Domain domain = _entityMgr.findById(Domain.class, domainId);\n            if (domain == null) {\n                throw new InvalidParameterValueException(\"Unable to find the domain by id=\" + domainId);\n            }\n            if (!_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                throw new InvalidParameterValueException(String.format(\"Unable to list network offerings for domain: %s as caller does not have access for it\", domain.getUuid()));\n            }\n        }\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingVO> ssc = _networkOfferingDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<NetworkOfferingJoinVO> sb = networkOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), SearchCriteria.Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), SearchCriteria.Op.NULL);\n            sb.done();\n            SearchCriteria<NetworkOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<NetworkOfferingJoinVO> offerings = networkOfferingJoinDao.search(sc, searchFilter);\n        \r\n        if ((caller.getType() != Account.ACCOUNT_TYPE_ADMIN || domainId != null) && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<NetworkOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                NetworkOfferingJoinVO offering = it.next();\n                if (!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = false;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN &&\n                                !_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = true;\n                            break;\n                        }\n                        if (domainId != null && !_domainDao.isChildDomain(dId, domainId)) {\n                            toRemove = true;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingJoinVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && offering.isForVpc() == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && offering.isForVpc() == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2019-07-16 17:25:35","endLine":5562,"groupId":"4587","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForNetworkOfferings","params":"(finalListNetworkOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/238b0a7255951e2e8502ab50894397ce10784e.src","preCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingVO> sc = _networkOfferingDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingVO> ssc = _networkOfferingDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        final List<NetworkOfferingVO> offerings = _networkOfferingDao.search(sc, searchFilter);\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingVO> supportedOfferings = new ArrayList<NetworkOfferingVO>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && isOfferingForVpc(offering) == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends NetworkOffering> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5286,"status":"M"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"},{"authorTime":"2020-03-06 17:44:43","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":4,"curCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(ListVPCOfferingsCmd cmd) {\n        Account caller = CallContext.current().getCallingAccount();\n        final Long id = cmd.getId();\n        final String name = cmd.getVpcOffName();\n        final String displayText = cmd.getDisplayText();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Boolean isDefault = cmd.getIsDefault();\n        final String keyword = cmd.getKeyword();\n        final String state = cmd.getState();\n        final Long startIndex = cmd.getStartIndex();\n        final Long pageSizeVal = cmd.getPageSizeVal();\n        final Long zoneId = cmd.getZoneId();\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(VpcOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final SearchCriteria<VpcOfferingJoinVO> sc = vpcOfferingJoinDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingJoinVO> ssc = vpcOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<VpcOfferingJoinVO> sb = vpcOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<VpcOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<VpcOfferingJoinVO> offerings = vpcOfferingJoinDao.search(sc, searchFilter);\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<VpcOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                VpcOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = false;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingJoinVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, supportedOfferings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, offerings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2019-07-16 17:25:35","endLine":766,"groupId":"9241","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcOfferings","params":"(ListVPCOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b1/b1059c1236a2c9572449c96fd61668a3567f02.src","preCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(ListVPCOfferingsCmd cmd) {\n        Account caller = CallContext.current().getCallingAccount();\n        final Long id = cmd.getId();\n        final String name = cmd.getVpcOffName();\n        final String displayText = cmd.getDisplayText();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Boolean isDefault = cmd.getIsDefault();\n        final String keyword = cmd.getKeyword();\n        final String state = cmd.getState();\n        final Long startIndex = cmd.getStartIndex();\n        final Long pageSizeVal = cmd.getPageSizeVal();\n        final Long zoneId = cmd.getZoneId();\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(VpcOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final SearchCriteria<VpcOfferingJoinVO> sc = vpcOfferingJoinDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingJoinVO> ssc = vpcOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<VpcOfferingJoinVO> sb = vpcOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<VpcOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<VpcOfferingJoinVO> offerings = vpcOfferingJoinDao.search(sc, searchFilter);\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<VpcOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                VpcOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = false;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingJoinVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, supportedOfferings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, offerings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"N"},{"authorDate":"2020-03-06 17:44:43","commitOrder":4,"curCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingJoinVO> sc = networkOfferingJoinDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long domainId = cmd.getDomainId();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (domainId != null) {\n            Domain domain = _entityMgr.findById(Domain.class, domainId);\n            if (domain == null) {\n                throw new InvalidParameterValueException(\"Unable to find the domain by id=\" + domainId);\n            }\n            if (!_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                throw new InvalidParameterValueException(String.format(\"Unable to list network offerings for domain: %s as caller does not have access for it\", domain.getUuid()));\n            }\n        }\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingJoinVO> ssc = networkOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<NetworkOfferingJoinVO> sb = networkOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), SearchCriteria.Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), SearchCriteria.Op.NULL);\n            sb.done();\n            SearchCriteria<NetworkOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<NetworkOfferingJoinVO> offerings = networkOfferingJoinDao.search(sc, searchFilter);\n        \r\n        if ((caller.getType() != Account.ACCOUNT_TYPE_ADMIN || domainId != null) && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<NetworkOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                NetworkOfferingJoinVO offering = it.next();\n                if (!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = false;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN &&\n                                !_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = true;\n                            break;\n                        }\n                        if (domainId != null && !_domainDao.isChildDomain(dId, domainId)) {\n                            toRemove = true;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingJoinVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && offering.isForVpc() == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && offering.isForVpc() == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2020-03-06 17:44:43","endLine":5590,"groupId":"4587","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForNetworkOfferings","params":"(finalListNetworkOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/eb/0f8aeb13d32af67f9f68a94d26061e90a7f074.src","preCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingJoinVO> sc = networkOfferingJoinDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long domainId = cmd.getDomainId();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (domainId != null) {\n            Domain domain = _entityMgr.findById(Domain.class, domainId);\n            if (domain == null) {\n                throw new InvalidParameterValueException(\"Unable to find the domain by id=\" + domainId);\n            }\n            if (!_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                throw new InvalidParameterValueException(String.format(\"Unable to list network offerings for domain: %s as caller does not have access for it\", domain.getUuid()));\n            }\n        }\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingVO> ssc = _networkOfferingDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<NetworkOfferingJoinVO> sb = networkOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), SearchCriteria.Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), SearchCriteria.Op.NULL);\n            sb.done();\n            SearchCriteria<NetworkOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<NetworkOfferingJoinVO> offerings = networkOfferingJoinDao.search(sc, searchFilter);\n        \r\n        if ((caller.getType() != Account.ACCOUNT_TYPE_ADMIN || domainId != null) && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<NetworkOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                NetworkOfferingJoinVO offering = it.next();\n                if (!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = false;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN &&\n                                !_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = true;\n                            break;\n                        }\n                        if (domainId != null && !_domainDao.isChildDomain(dId, domainId)) {\n                            toRemove = true;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingJoinVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && offering.isForVpc() == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && offering.isForVpc() == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5314,"status":"M"}],"commitId":"dc225de8115a5f03b7eb8959c7e726943dfb2be8","commitMessage":"@@@Merge release branch 4.13 to master\n\n* 4.13:\n  server: fix database exception while searching network offerings (#3947)\n","date":"2020-03-06 17:44:43","modifiedFileCount":"1","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2021-08-18 19:22:25","codes":[{"authorDate":"2021-08-18 19:22:25","commitOrder":5,"curCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(ListVPCOfferingsCmd cmd) {\n        Account caller = CallContext.current().getCallingAccount();\n        final Long id = cmd.getId();\n        final String name = cmd.getVpcOffName();\n        final String displayText = cmd.getDisplayText();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Boolean isDefault = cmd.getIsDefault();\n        final String keyword = cmd.getKeyword();\n        final String state = cmd.getState();\n        final Long startIndex = cmd.getStartIndex();\n        final Long pageSizeVal = cmd.getPageSizeVal();\n        final Long zoneId = cmd.getZoneId();\n        final Filter searchFilter = new Filter(VpcOfferingJoinVO.class, \"sortKey\", QueryService.SortKeyAscending.value(), null, null);\n        searchFilter.addOrderBy(VpcOfferingJoinVO.class, \"id\", true);\n        final SearchCriteria<VpcOfferingJoinVO> sc = vpcOfferingJoinDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingJoinVO> ssc = vpcOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<VpcOfferingJoinVO> sb = vpcOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<VpcOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<VpcOfferingJoinVO> offerings = vpcOfferingJoinDao.search(sc, searchFilter);\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<VpcOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                VpcOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = false;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingJoinVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, supportedOfferings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, offerings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2021-08-18 19:22:25","endLine":767,"groupId":"101769","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcOfferings","params":"(ListVPCOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/08/0b1f1673bc101539eb9590755026b3a1a6cae6.src","preCode":"    public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(ListVPCOfferingsCmd cmd) {\n        Account caller = CallContext.current().getCallingAccount();\n        final Long id = cmd.getId();\n        final String name = cmd.getVpcOffName();\n        final String displayText = cmd.getDisplayText();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Boolean isDefault = cmd.getIsDefault();\n        final String keyword = cmd.getKeyword();\n        final String state = cmd.getState();\n        final Long startIndex = cmd.getStartIndex();\n        final Long pageSizeVal = cmd.getPageSizeVal();\n        final Long zoneId = cmd.getZoneId();\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(VpcOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final SearchCriteria<VpcOfferingJoinVO> sc = vpcOfferingJoinDao.createSearchCriteria();\n\n        if (keyword != null) {\n            final SearchCriteria<VpcOfferingJoinVO> ssc = vpcOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.LIKE, \"%\" + name + \"%\");\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<VpcOfferingJoinVO> sb = vpcOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<VpcOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<VpcOfferingJoinVO> offerings = vpcOfferingJoinDao.search(sc, searchFilter);\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<VpcOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                VpcOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = false;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n\n        if (listBySupportedServices) {\n            final List<VpcOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final VpcOfferingJoinVO offering : offerings) {\n                if (areServicesSupportedByVpcOffering(offering.getId(), supportedServices)) {\n                    supportedOfferings.add(offering);\n                }\n            }\n\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(supportedOfferings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, supportedOfferings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<? extends VpcOffering> wPagination = StringUtils.applyPagination(offerings, startIndex, pageSizeVal);\n            if (wPagination != null) {\n                return new Pair<>(wPagination, offerings.size());\n            }\n            return new Pair<List<? extends VpcOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"},{"authorDate":"2021-08-18 19:22:25","commitOrder":5,"curCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        final Filter searchFilter = new Filter(NetworkOfferingJoinVO.class, \"sortKey\", QueryService.SortKeyAscending.value(), null, null);\n        searchFilter.addOrderBy(NetworkOfferingJoinVO.class, \"id\", true);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingJoinVO> sc = networkOfferingJoinDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long domainId = cmd.getDomainId();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (domainId != null) {\n            Domain domain = _entityMgr.findById(Domain.class, domainId);\n            if (domain == null) {\n                throw new InvalidParameterValueException(\"Unable to find the domain by id=\" + domainId);\n            }\n            if (!_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                throw new InvalidParameterValueException(String.format(\"Unable to list network offerings for domain: %s as caller does not have access for it\", domain.getUuid()));\n            }\n        }\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingJoinVO> ssc = networkOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<NetworkOfferingJoinVO> sb = networkOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), SearchCriteria.Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), SearchCriteria.Op.NULL);\n            sb.done();\n            SearchCriteria<NetworkOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<NetworkOfferingJoinVO> offerings = networkOfferingJoinDao.search(sc, searchFilter);\n        \r\n        if ((caller.getType() != Account.ACCOUNT_TYPE_ADMIN || domainId != null) && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<NetworkOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                NetworkOfferingJoinVO offering = it.next();\n                if (!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = false;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN &&\n                                !_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = true;\n                            break;\n                        }\n                        if (domainId != null && !_domainDao.isChildDomain(dId, domainId)) {\n                            toRemove = true;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingJoinVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && offering.isForVpc() == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && offering.isForVpc() == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","date":"2021-08-18 19:22:25","endLine":5826,"groupId":"101769","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForNetworkOfferings","params":"(finalListNetworkOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/13/761b50e0e0459219eb904f68a3b79b93c2fef6.src","preCode":"    public Pair<List<? extends NetworkOffering>, Integer> searchForNetworkOfferings(final ListNetworkOfferingsCmd cmd) {\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = isAscending == null ? Boolean.TRUE : isAscending;\n        final Filter searchFilter = new Filter(NetworkOfferingJoinVO.class, \"sortKey\", isAscending, null, null);\n        final Account caller = CallContext.current().getCallingAccount();\n        final SearchCriteria<NetworkOfferingJoinVO> sc = networkOfferingJoinDao.createSearchCriteria();\n\n        final Long id = cmd.getId();\n        final Object name = cmd.getNetworkOfferingName();\n        final Object displayText = cmd.getDisplayText();\n        final Object trafficType = cmd.getTrafficType();\n        final Object isDefault = cmd.getIsDefault();\n        final Object specifyVlan = cmd.getSpecifyVlan();\n        final Object availability = cmd.getAvailability();\n        final Object state = cmd.getState();\n        final Long domainId = cmd.getDomainId();\n        final Long zoneId = cmd.getZoneId();\n        DataCenter zone = null;\n        final Long networkId = cmd.getNetworkId();\n        final String guestIpType = cmd.getGuestIpType();\n        final List<String> supportedServicesStr = cmd.getSupportedServices();\n        final Object specifyIpRanges = cmd.getSpecifyIpRanges();\n        final String tags = cmd.getTags();\n        final Boolean isTagged = cmd.isTagged();\n        final Boolean forVpc = cmd.getForVpc();\n\n        if (domainId != null) {\n            Domain domain = _entityMgr.findById(Domain.class, domainId);\n            if (domain == null) {\n                throw new InvalidParameterValueException(\"Unable to find the domain by id=\" + domainId);\n            }\n            if (!_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                throw new InvalidParameterValueException(String.format(\"Unable to list network offerings for domain: %s as caller does not have access for it\", domain.getUuid()));\n            }\n        }\n\n        if (zoneId != null) {\n            zone = _entityMgr.findById(DataCenter.class, zoneId);\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find the zone by id=\" + zoneId);\n            }\n        }\n\n        final Object keyword = cmd.getKeyword();\n\n        if (keyword != null) {\n            final SearchCriteria<NetworkOfferingJoinVO> ssc = networkOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (guestIpType != null) {\n            sc.addAnd(\"guestType\", SearchCriteria.Op.EQ, guestIpType);\n        }\n\n        if (displayText != null) {\n            sc.addAnd(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + displayText + \"%\");\n        }\n\n        if (trafficType != null) {\n            sc.addAnd(\"trafficType\", SearchCriteria.Op.EQ, trafficType);\n        }\n\n        if (isDefault != null) {\n            sc.addAnd(\"isDefault\", SearchCriteria.Op.EQ, isDefault);\n        }\n\n        \r\n        if (specifyVlan != null) {\n            sc.addAnd(\"specifyVlan\", SearchCriteria.Op.EQ, specifyVlan);\n        }\n\n        if (availability != null) {\n            sc.addAnd(\"availability\", SearchCriteria.Op.EQ, availability);\n        }\n\n        if (state != null) {\n            sc.addAnd(\"state\", SearchCriteria.Op.EQ, state);\n        }\n\n        if (specifyIpRanges != null) {\n            sc.addAnd(\"specifyIpRanges\", SearchCriteria.Op.EQ, specifyIpRanges);\n        }\n\n        if (zone != null) {\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                \r\n                \r\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        \r\n        sc.addAnd(\"systemOnly\", SearchCriteria.Op.EQ, false);\n\n        \r\n        \r\n        Network network = null;\n        if (networkId != null) {\n            \r\n            network = _networkModel.getNetwork(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Unable to find the network by id=\" + networkId);\n            }\n            \r\n            final NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n            if (offering.isSystemOnly()) {\n                throw new InvalidParameterValueException(\"Can't update system networks\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, network);\n\n            final List<Long> offeringIds = _networkModel.listNetworkOfferingsForUpgrade(networkId);\n\n            if (!offeringIds.isEmpty()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.IN, offeringIds.toArray());\n            } else {\n                return new Pair<List<? extends NetworkOffering>, Integer>(new ArrayList<NetworkOffering>(), 0);\n            }\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (tags != null) {\n            sc.addAnd(\"tags\", SearchCriteria.Op.EQ, tags);\n        }\n\n        if (isTagged != null) {\n            if (isTagged) {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NNULL);\n            } else {\n                sc.addAnd(\"tags\", SearchCriteria.Op.NULL);\n            }\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<NetworkOfferingJoinVO> sb = networkOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), SearchCriteria.Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), SearchCriteria.Op.NULL);\n            sb.done();\n            SearchCriteria<NetworkOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        final List<NetworkOfferingJoinVO> offerings = networkOfferingJoinDao.search(sc, searchFilter);\n        \r\n        if ((caller.getType() != Account.ACCOUNT_TYPE_ADMIN || domainId != null) && CollectionUtils.isNotEmpty(offerings)) {\n            ListIterator<NetworkOfferingJoinVO> it = offerings.listIterator();\n            while (it.hasNext()) {\n                NetworkOfferingJoinVO offering = it.next();\n                if (!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = false;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN &&\n                                !_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                            toRemove = true;\n                            break;\n                        }\n                        if (domainId != null && !_domainDao.isChildDomain(dId, domainId)) {\n                            toRemove = true;\n                            break;\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        final Boolean sourceNatSupported = cmd.getSourceNatSupported();\n        final List<String> pNtwkTags = new ArrayList<String>();\n        boolean checkForTags = false;\n        if (zone != null) {\n            final List<PhysicalNetworkVO> pNtwks = _physicalNetworkDao.listByZoneAndTrafficType(zoneId, TrafficType.Guest);\n            if (pNtwks.size() > 1) {\n                checkForTags = true;\n                \r\n                for (final PhysicalNetworkVO pNtwk : pNtwks) {\n                    final List<String> pNtwkTag = pNtwk.getTags();\n                    if (pNtwkTag == null || pNtwkTag.isEmpty()) {\n                        throw new CloudRuntimeException(\"Tags are not defined for physical network in the zone id=\" + zoneId);\n                    }\n                    pNtwkTags.addAll(pNtwkTag);\n                }\n            }\n        }\n\n        \r\n        final boolean listBySupportedServices = supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty();\n        final boolean checkIfProvidersAreEnabled = zoneId != null;\n        final boolean parseOfferings = listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null;\n\n        if (parseOfferings) {\n            final List<NetworkOfferingJoinVO> supportedOfferings = new ArrayList<>();\n            Service[] supportedServices = null;\n\n            if (listBySupportedServices) {\n                supportedServices = new Service[supportedServicesStr.size()];\n                int i = 0;\n                for (final String supportedServiceStr : supportedServicesStr) {\n                    final Service service = Service.getService(supportedServiceStr);\n                    if (service == null) {\n                        throw new InvalidParameterValueException(\"Invalid service specified \" + supportedServiceStr);\n                    } else {\n                        supportedServices[i] = service;\n                    }\n                    i++;\n                }\n            }\n\n            for (final NetworkOfferingJoinVO offering : offerings) {\n                boolean addOffering = true;\n                List<Service> checkForProviders = new ArrayList<Service>();\n\n                if (checkForTags) {\n                    if (!pNtwkTags.contains(offering.getTags())) {\n                        continue;\n                    }\n                }\n\n                if (listBySupportedServices) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), supportedServices);\n                }\n\n                if (checkIfProvidersAreEnabled) {\n                    if (supportedServices != null && supportedServices.length > 0) {\n                        checkForProviders = Arrays.asList(supportedServices);\n                    } else {\n                        checkForProviders = _networkModel.listNetworkOfferingServices(offering.getId());\n                    }\n\n                    addOffering = addOffering && _networkModel.areServicesEnabledInZone(zoneId, offering, checkForProviders);\n                }\n\n                if (sourceNatSupported != null) {\n                    addOffering = addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(), Network.Service.SourceNat) == sourceNatSupported;\n                }\n\n                if (forVpc != null) {\n                    addOffering = addOffering && offering.isForVpc() == forVpc.booleanValue();\n                } else if (network != null) {\n                    addOffering = addOffering && offering.isForVpc() == (network.getVpcId() != null);\n                }\n\n                if (addOffering) {\n                    supportedOfferings.add(offering);\n                }\n\n            }\n\n            \r\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(supportedOfferings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<List<? extends NetworkOffering>, Integer>(wPagination, supportedOfferings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(supportedOfferings, supportedOfferings.size());\n        } else {\n            final List<NetworkOfferingJoinVO> wPagination = StringUtils.applyPagination(offerings, cmd.getStartIndex(), cmd.getPageSizeVal());\n            if (wPagination != null) {\n                final Pair<List<? extends NetworkOffering>, Integer> listWPagination = new Pair<>(wPagination, offerings.size());\n                return listWPagination;\n            }\n            return new Pair<List<? extends NetworkOffering>, Integer>(offerings, offerings.size());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5551,"status":"M"}],"commitId":"7bfc7f04fed4d32d135d4bac24cfd3de0c4271a9","commitMessage":"@@@server: use id column as secondary sort criteria with sortKey (#5320)\n\nFor tables that use sort_key field.  incorrect results can be returned by the list* APIs while using pagination and with the same values for sort-key field. (Default value for sort_key field remains 0).\nThis change adds id column as secondary sort criteria in such cases.\n\nFixes #5316\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-08-18 19:22:25","modifiedFileCount":"4","status":"M","submitter":"Abhishek Kumar"}]
