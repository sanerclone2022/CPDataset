[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<Long> findIdsOfAllocatedVirtualRoutersForAccount(long accountId) {\n        SearchCriteria<Long> sc = FindIdsOfVirtualRoutersByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.DomainRouter);\n        sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        return customSearch(sc, null);\n    }\n","date":"2018-01-20 05:49:27","endLine":555,"groupId":"3250","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findIdsOfAllocatedVirtualRoutersForAccount","params":"(longaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6e/97d1275a65fcc25e0d96bfecc9b6246b2ccae5.src","preCode":"    public List<Long> findIdsOfAllocatedVirtualRoutersForAccount(long accountId) {\n        SearchCriteria<Long> sc = FindIdsOfVirtualRoutersByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.DomainRouter);\n        sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        return customSearch(sc, null);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/vm/dao/VMInstanceDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Long countAllocatedVMsForAccount(long accountId) {\n        SearchCriteria<Long> sc = CountByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.User);\n        sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        sc.setParameters(\"displayVm\", 1);\n        return customSearch(sc, null).get(0);\n    }\n","date":"2018-01-20 05:49:27","endLine":641,"groupId":"3250","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"countAllocatedVMsForAccount","params":"(longaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d1/3234d1016873295c288996bc9ce93d93513289.src","preCode":"    public Long countAllocatedVMsForAccount(long accountId) {\n        SearchCriteria<Long> sc = CountByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.User);\n        sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        sc.setParameters(\"displayVm\", 1);\n        return customSearch(sc, null).get(0);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-01-30 17:36:50","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public List<Long> findIdsOfAllocatedVirtualRoutersForAccount(long accountId) {\n        SearchCriteria<Long> sc = FindIdsOfVirtualRoutersByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.DomainRouter);\n        sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        return customSearch(sc, null);\n    }\n","date":"2018-01-20 05:49:27","endLine":555,"groupId":"10165","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findIdsOfAllocatedVirtualRoutersForAccount","params":"(longaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6e/97d1275a65fcc25e0d96bfecc9b6246b2ccae5.src","preCode":"    public List<Long> findIdsOfAllocatedVirtualRoutersForAccount(long accountId) {\n        SearchCriteria<Long> sc = FindIdsOfVirtualRoutersByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.DomainRouter);\n        sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        return customSearch(sc, null);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/vm/dao/VMInstanceDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"N"},{"authorDate":"2020-01-30 17:36:50","commitOrder":2,"curCode":"    public Long countAllocatedVMsForAccount(long accountId, boolean runningVMsonly) {\n        SearchCriteria<Long> sc = CountByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.User);\n        if (runningVMsonly)\n            sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging, State.Stopped});\n        else\n            sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        sc.setParameters(\"displayVm\", 1);\n        return customSearch(sc, null).get(0);\n    }\n","date":"2020-01-30 17:36:50","endLine":648,"groupId":"10165","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"countAllocatedVMsForAccount","params":"(longaccountId@booleanrunningVMsonly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/940d7238e5cf9f9ca7accabf0e1004c909353f.src","preCode":"    public Long countAllocatedVMsForAccount(long accountId) {\n        SearchCriteria<Long> sc = CountByAccount.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"type\", VirtualMachine.Type.User);\n        sc.setParameters(\"state\", new Object[] {State.Destroyed, State.Error, State.Expunging});\n        sc.setParameters(\"displayVm\", 1);\n        return customSearch(sc, null).get(0);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":638,"status":"M"}],"commitId":"ac581d1546750a6ffc49ebab180e1b80bec4319e","commitMessage":"@@@New feature: Resource count (CPU/RAM) take only running vms into calculation (#3760)\n\n* marvin: check resource count of more types\n\n* New feature: add flag resource.count.running.vms.only to count resource consumption of only running vms\n\nStopped VMs do not use CPU/RAM actually.\nA new global configuration resource.count.running.vms.only is added to determine whether resource (cpu/memory) of only running vms (including Starting/Stopping) will be taken into calculation of resource consumption.\n\n* Add integration test for resource count of only running vms\n","date":"2020-01-30 17:36:50","modifiedFileCount":"11","status":"M","submitter":"Wei Zhou"}]
