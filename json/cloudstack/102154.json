[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n\n            Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                    any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":105,"groupId":"4786","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/2beb6cb6674815a9581e715159fedcdee2bc69.src","preCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n\n            Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                    any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                        any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 1\", exception.getDescription());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":131,"groupId":"4790","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/2beb6cb6674815a9581e715159fedcdee2bc69.src","preCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                        any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 1\", exception.getDescription());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-06-13 18:20:10","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n\n            Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                    any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":105,"groupId":"4786","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/2beb6cb6674815a9581e715159fedcdee2bc69.src","preCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n\n            Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                    any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"},{"authorDate":"2019-06-13 18:20:10","commitOrder":2,"curCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                        any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 123\", exception.getDescription());\n        }\n    }\n","date":"2019-06-13 18:20:10","endLine":138,"groupId":"4790","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ce/b63ab6e560a2c01d1c24eb3b22d58c21ebcdc8.src","preCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                        any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 1\", exception.getDescription());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"1c963bac13b14dd6597c219d11d66c7831859c47","commitMessage":"@@@ui: Add more info for creating volume snapshots (#3390)\n\nAdd more details in console logs and event details.\nAlso show popup on successful completition of snapshots.\n\nFixes: #3327","date":"2019-06-13 18:20:10","modifiedFileCount":"3","status":"M","submitter":"Anurag Awasthi"},{"authorTime":"2019-06-27 11:51:09","codes":[{"authorDate":"2019-06-27 11:51:09","commitOrder":3,"curCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n            Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                    any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean(), anyObject())).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","date":"2019-06-27 11:51:08","endLine":116,"groupId":"4786","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/47/39082cf6447c75d0ab70bd7c746d1e49a7c204.src","preCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n\n            Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                    any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-06-27 11:51:09","commitOrder":3,"curCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                        any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean(), anyObject())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 123\", exception.getDescription());\n        }\n    }\n","date":"2019-06-27 11:51:08","endLine":142,"groupId":"4790","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/47/39082cf6447c75d0ab70bd7c746d1e49a7c204.src","preCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                        any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 123\", exception.getDescription());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"58474530f69825f5108d249ac3f5e4a153d0c8d6","commitMessage":"@@@api: snapshot.  snapshotpolicy tag support (#3228)\n\nProblem: Currently tags cannot be applied to snapshot when it is being created but through separate ?create tags? API calls. For snapshot policies tags cannot be set either at creation or through ?create tags? API.\n\nRoot Cause: The ?create snapshots? API does not support adding tags during creation and it can only be done through ?create tags? API. Snapshot policy as a resource does not support tags and no tags can be set for them through any API.\n\nSolution: Tag support for snapshot policy has been added. Snapshot policy with tags when executed will produce snapshots containing the same tags from snapshot policy.\n\nFollowing APIs have been updated:\n\nBoth ?create snapshotpolicy? and ?create snapshot? now accepts ?tags? as a new parameter. The expected format for ?tags? parameter is similar to parameter ?tags? in ?create tags? API.\nDeletion support for tags associated with snapshots policy has been added to ?delete snapshotpolicies? API.\nTags set for snapshot policies are added to the Response of ?list snapshotpolicies? API.\nUI support for setting tags to snapshots and snapshot policy is provided through the corresponding menus with a new section in each form to set tags.\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2019-06-27 11:51:08","modifiedFileCount":"13","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":4,"curCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n            Mockito.when(volumeApiService.takeSnapshot(nullable(Long.class), nullable(Long.class), isNull(),\n                    nullable(Account.class), nullable(Boolean.class), nullable(Snapshot.LocationType.class), nullable(Boolean.class), nullable(Map.class))).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","date":"2020-02-12 15:28:25","endLine":115,"groupId":"102154","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/3251a64dffe57afc515ba56a7c2278bf8d3383.src","preCode":"    public void testCreateSuccess() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n        Snapshot snapshot = Mockito.mock(Snapshot.class);\n        try {\n            Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                    any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean(), anyObject())).thenReturn(snapshot);\n\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        responseGenerator = Mockito.mock(ResponseGenerator.class);\n        SnapshotResponse snapshotResponse = Mockito.mock(SnapshotResponse.class);\n        Mockito.when(responseGenerator.createSnapshotResponse(snapshot)).thenReturn(snapshotResponse);\n        Mockito.doNothing().when(snapshotResponse).setAccountName(anyString());\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._responseGenerator = responseGenerator;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":4,"curCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(nullable(Long.class), nullable(Long.class), nullable(Long.class),\n                        nullable(Account.class), nullable(Boolean.class), nullable(Snapshot.LocationType.class), nullable(Boolean.class), anyObject())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 123\", exception.getDescription());\n        }\n    }\n","date":"2020-02-12 15:28:25","endLine":141,"groupId":"102154","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCreateFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/3251a64dffe57afc515ba56a7c2278bf8d3383.src","preCode":"    public void testCreateFailure() {\n\n        AccountService accountService = Mockito.mock(AccountService.class);\n        Account account = Mockito.mock(Account.class);\n        Mockito.when(accountService.getAccount(anyLong())).thenReturn(account);\n\n        VolumeApiService volumeApiService = Mockito.mock(VolumeApiService.class);\n\n        try {\n                Mockito.when(volumeApiService.takeSnapshot(anyLong(), anyLong(), anyLong(),\n                        any(Account.class), anyBoolean(), isNull(Snapshot.LocationType.class), anyBoolean(), anyObject())).thenReturn(null);\n        } catch (Exception e) {\n            Assert.fail(\"Received exception when success expected \" + e.getMessage());\n        }\n\n        createSnapshotCmd._accountService = accountService;\n        createSnapshotCmd._volumeService = volumeApiService;\n\n        try {\n            createSnapshotCmd.execute();\n        } catch (ServerApiException exception) {\n            Assert.assertEquals(\"Failed to create snapshot due to an internal error creating snapshot for volume 123\", exception.getDescription());\n        }\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/CreateSnapshotCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
