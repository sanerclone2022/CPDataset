[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException,\n    ResourceUnavailableException {\n        String providerName = cmd.getStorageProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find storage provider: \" + providerName);\n            }\n        }\n\n        Long clusterId = cmd.getClusterId();\n        Long podId = cmd.getPodId();\n        Long zoneId = cmd.getZoneId();\n\n        ScopeType scopeType = ScopeType.CLUSTER;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for pool \" + scope);\n            }\n        }\n\n        if (scopeType == ScopeType.CLUSTER && clusterId == null) {\n            throw new InvalidParameterValueException(\"cluster id can't be null, if scope is cluster\");\n        } else if (scopeType == ScopeType.ZONE && zoneId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        HypervisorType hypervisorType = HypervisorType.KVM;\n        if (scopeType == ScopeType.ZONE) {\n            \r\n            clusterId = null;\n            podId = null;\n            String hypervisor = cmd.getHypervisor();\n            if (hypervisor != null) {\n                try {\n                    hypervisorType = HypervisorType.getType(hypervisor);\n                } catch (Exception e) {\n                    throw new InvalidParameterValueException(\"invalid hypervisor type \" + hypervisor);\n                }\n            } else {\n                throw new InvalidParameterValueException(\"Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.\");\n            }\n            if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Hyperv && hypervisorType != HypervisorType.LXC && hypervisorType != HypervisorType.Any) {\n                throw new InvalidParameterValueException(\"zone wide storage pool is not supported for hypervisor type \" + hypervisor);\n            }\n        }\n\n        Map<String, String> details = extractApiParamAsMap(cmd.getDetails());\n        DataCenterVO zone = _dcDao.findById(cmd.getZoneId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"unable to find zone by id \" + zoneId);\n        }\n        \r\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zoneId);\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", zone.getId());\n        params.put(\"clusterId\", clusterId);\n        params.put(\"podId\", podId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"tags\", cmd.getTags());\n        params.put(\"name\", cmd.getStoragePoolName());\n        params.put(\"details\", details);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"managed\", cmd.isManaged());\n        params.put(\"capacityBytes\", cmd.getCapacityBytes());\n        params.put(\"capacityIops\", cmd.getCapacityIops());\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n            if (scopeType == ScopeType.CLUSTER) {\n                ClusterScope clusterScope = new ClusterScope(clusterId, podId, zoneId);\n                lifeCycle.attachCluster(store, clusterScope);\n            } else if (scopeType == ScopeType.ZONE) {\n                ZoneScope zoneScope = new ZoneScope(zoneId);\n                lifeCycle.attachZone(store, zoneScope, hypervisorType);\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            try {\n                \r\n                \r\n                if (store != null) {\n                    lifeCycle.deleteDataStore(store);\n                }\n            } catch (Exception ex) {\n                s_logger.debug(\"Failed to clean up storage pool: \" + ex.getMessage());\n            }\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n    }\n","date":"2018-01-20 05:49:27","endLine":733,"groupId":"14639","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPool","params":"(CreateStoragePoolCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException,\n    ResourceUnavailableException {\n        String providerName = cmd.getStorageProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find storage provider: \" + providerName);\n            }\n        }\n\n        Long clusterId = cmd.getClusterId();\n        Long podId = cmd.getPodId();\n        Long zoneId = cmd.getZoneId();\n\n        ScopeType scopeType = ScopeType.CLUSTER;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for pool \" + scope);\n            }\n        }\n\n        if (scopeType == ScopeType.CLUSTER && clusterId == null) {\n            throw new InvalidParameterValueException(\"cluster id can't be null, if scope is cluster\");\n        } else if (scopeType == ScopeType.ZONE && zoneId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        HypervisorType hypervisorType = HypervisorType.KVM;\n        if (scopeType == ScopeType.ZONE) {\n            \r\n            clusterId = null;\n            podId = null;\n            String hypervisor = cmd.getHypervisor();\n            if (hypervisor != null) {\n                try {\n                    hypervisorType = HypervisorType.getType(hypervisor);\n                } catch (Exception e) {\n                    throw new InvalidParameterValueException(\"invalid hypervisor type \" + hypervisor);\n                }\n            } else {\n                throw new InvalidParameterValueException(\"Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.\");\n            }\n            if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Hyperv && hypervisorType != HypervisorType.LXC && hypervisorType != HypervisorType.Any) {\n                throw new InvalidParameterValueException(\"zone wide storage pool is not supported for hypervisor type \" + hypervisor);\n            }\n        }\n\n        Map<String, String> details = extractApiParamAsMap(cmd.getDetails());\n        DataCenterVO zone = _dcDao.findById(cmd.getZoneId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"unable to find zone by id \" + zoneId);\n        }\n        \r\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zoneId);\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", zone.getId());\n        params.put(\"clusterId\", clusterId);\n        params.put(\"podId\", podId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"tags\", cmd.getTags());\n        params.put(\"name\", cmd.getStoragePoolName());\n        params.put(\"details\", details);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"managed\", cmd.isManaged());\n        params.put(\"capacityBytes\", cmd.getCapacityBytes());\n        params.put(\"capacityIops\", cmd.getCapacityIops());\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n            if (scopeType == ScopeType.CLUSTER) {\n                ClusterScope clusterScope = new ClusterScope(clusterId, podId, zoneId);\n                lifeCycle.attachCluster(store, clusterScope);\n            } else if (scopeType == ScopeType.ZONE) {\n                ZoneScope zoneScope = new ZoneScope(zoneId);\n                lifeCycle.attachZone(store, zoneScope, hypervisorType);\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            try {\n                \r\n                \r\n                if (store != null) {\n                    lifeCycle.deleteDataStore(store);\n                }\n            } catch (Exception ex) {\n                s_logger.debug(\"Failed to clean up storage pool: \" + ex.getMessage());\n            }\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd) {\n        String providerName = cmd.getProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultCacheDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find cache store provider: \" + providerName);\n            }\n        }\n\n        Long dcId = cmd.getZoneId();\n\n        ScopeType scopeType = null;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for cache store \" + scope);\n            }\n\n            if (scopeType != ScopeType.ZONE) {\n                throw new InvalidParameterValueException(\"Only zone wide cache storage is supported\");\n            }\n        }\n\n        if (scopeType == ScopeType.ZONE && dcId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        \r\n        DataCenterVO zone = _dcDao.findById(dcId);\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + dcId);\n        }\n\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            PermissionDeniedException ex = new PermissionDeniedException(\n                    \"Cannot perform this operation, Zone with specified id is currently disabled\");\n            ex.addProxyObject(zone.getUuid(), \"dcId\");\n            throw ex;\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", dcId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"name\", cmd.getUrl());\n        params.put(\"details\", cmd.getDetails());\n        params.put(\"scope\", scopeType);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"role\", DataStoreRole.ImageCache);\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (ImageStore)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.ImageCache);\n    }\n","date":"2018-01-20 05:49:27","endLine":2258,"groupId":"2895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondaryStagingStore","params":"(CreateSecondaryStagingStoreCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd) {\n        String providerName = cmd.getProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultCacheDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find cache store provider: \" + providerName);\n            }\n        }\n\n        Long dcId = cmd.getZoneId();\n\n        ScopeType scopeType = null;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for cache store \" + scope);\n            }\n\n            if (scopeType != ScopeType.ZONE) {\n                throw new InvalidParameterValueException(\"Only zone wide cache storage is supported\");\n            }\n        }\n\n        if (scopeType == ScopeType.ZONE && dcId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        \r\n        DataCenterVO zone = _dcDao.findById(dcId);\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + dcId);\n        }\n\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            PermissionDeniedException ex = new PermissionDeniedException(\n                    \"Cannot perform this operation, Zone with specified id is currently disabled\");\n            ex.addProxyObject(zone.getUuid(), \"dcId\");\n            throw ex;\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", dcId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"name\", cmd.getUrl());\n        params.put(\"details\", cmd.getDetails());\n        params.put(\"scope\", scopeType);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"role\", DataStoreRole.ImageCache);\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (ImageStore)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.ImageCache);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2193,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {\n        String providerName = cmd.getStorageProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find storage provider: \" + providerName);\n            }\n        }\n\n        Long clusterId = cmd.getClusterId();\n        Long podId = cmd.getPodId();\n        Long zoneId = cmd.getZoneId();\n\n        ScopeType scopeType = ScopeType.CLUSTER;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for pool \" + scope);\n            }\n        }\n\n        if (scopeType == ScopeType.CLUSTER && clusterId == null) {\n            throw new InvalidParameterValueException(\"cluster id can't be null, if scope is cluster\");\n        } else if (scopeType == ScopeType.ZONE && zoneId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        HypervisorType hypervisorType = HypervisorType.KVM;\n        if (scopeType == ScopeType.ZONE) {\n            \r\n            clusterId = null;\n            podId = null;\n            String hypervisor = cmd.getHypervisor();\n            if (hypervisor != null) {\n                try {\n                    hypervisorType = HypervisorType.getType(hypervisor);\n                } catch (Exception e) {\n                    throw new InvalidParameterValueException(\"invalid hypervisor type \" + hypervisor);\n                }\n            } else {\n                throw new InvalidParameterValueException(\"Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.\");\n            }\n            if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Hyperv && hypervisorType != HypervisorType.LXC\n                    && hypervisorType != HypervisorType.Any) {\n                throw new InvalidParameterValueException(\"zone wide storage pool is not supported for hypervisor type \" + hypervisor);\n            }\n        } else {\n            ClusterVO clusterVO = _clusterDao.findById(clusterId);\n            hypervisorType = clusterVO.getHypervisorType();\n        }\n\n        Map<String, String> details = extractApiParamAsMap(cmd.getDetails());\n        DataCenterVO zone = _dcDao.findById(cmd.getZoneId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"unable to find zone by id \" + zoneId);\n        }\n        \r\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zoneId);\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", zone.getId());\n        params.put(\"clusterId\", clusterId);\n        params.put(\"podId\", podId);\n        params.put(\"hypervisorType\", hypervisorType.toString());\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"tags\", cmd.getTags());\n        params.put(\"name\", cmd.getStoragePoolName());\n        params.put(\"details\", details);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"managed\", cmd.isManaged());\n        params.put(\"capacityBytes\", cmd.getCapacityBytes());\n        params.put(\"capacityIops\", cmd.getCapacityIops());\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n            if (scopeType == ScopeType.CLUSTER) {\n                ClusterScope clusterScope = new ClusterScope(clusterId, podId, zoneId);\n                lifeCycle.attachCluster(store, clusterScope);\n            } else if (scopeType == ScopeType.ZONE) {\n                ZoneScope zoneScope = new ZoneScope(zoneId);\n                lifeCycle.attachZone(store, zoneScope, hypervisorType);\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \" + e.getMessage(), e);\n            try {\n                \r\n                \r\n                if (store != null) {\n                    lifeCycle.deleteDataStore(store);\n                }\n            } catch (Exception ex) {\n                s_logger.debug(\"Failed to clean up storage pool: \" + ex.getMessage());\n            }\n            throw new CloudRuntimeException(\"Failed to add data store: \" + e.getMessage(), e);\n        }\n\n        return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n    }\n","date":"2020-10-26 21:24:14","endLine":761,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createPool","params":"(CreateStoragePoolCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/62/24a774449f96b0026459687933837b180c64fd.src","preCode":"    public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {\n        String providerName = cmd.getStorageProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find storage provider: \" + providerName);\n            }\n        }\n\n        Long clusterId = cmd.getClusterId();\n        Long podId = cmd.getPodId();\n        Long zoneId = cmd.getZoneId();\n\n        ScopeType scopeType = ScopeType.CLUSTER;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for pool \" + scope);\n            }\n        }\n\n        if (scopeType == ScopeType.CLUSTER && clusterId == null) {\n            throw new InvalidParameterValueException(\"cluster id can't be null, if scope is cluster\");\n        } else if (scopeType == ScopeType.ZONE && zoneId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        HypervisorType hypervisorType = HypervisorType.KVM;\n        if (scopeType == ScopeType.ZONE) {\n            \r\n            clusterId = null;\n            podId = null;\n            String hypervisor = cmd.getHypervisor();\n            if (hypervisor != null) {\n                try {\n                    hypervisorType = HypervisorType.getType(hypervisor);\n                } catch (Exception e) {\n                    throw new InvalidParameterValueException(\"invalid hypervisor type \" + hypervisor);\n                }\n            } else {\n                throw new InvalidParameterValueException(\"Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.\");\n            }\n            if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Hyperv && hypervisorType != HypervisorType.LXC\n                    && hypervisorType != HypervisorType.Any) {\n                throw new InvalidParameterValueException(\"zone wide storage pool is not supported for hypervisor type \" + hypervisor);\n            }\n        }\n\n        Map<String, String> details = extractApiParamAsMap(cmd.getDetails());\n        DataCenterVO zone = _dcDao.findById(cmd.getZoneId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"unable to find zone by id \" + zoneId);\n        }\n        \r\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zoneId);\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", zone.getId());\n        params.put(\"clusterId\", clusterId);\n        params.put(\"podId\", podId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"tags\", cmd.getTags());\n        params.put(\"name\", cmd.getStoragePoolName());\n        params.put(\"details\", details);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"managed\", cmd.isManaged());\n        params.put(\"capacityBytes\", cmd.getCapacityBytes());\n        params.put(\"capacityIops\", cmd.getCapacityIops());\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n            if (scopeType == ScopeType.CLUSTER) {\n                ClusterScope clusterScope = new ClusterScope(clusterId, podId, zoneId);\n                lifeCycle.attachCluster(store, clusterScope);\n            } else if (scopeType == ScopeType.ZONE) {\n                ZoneScope zoneScope = new ZoneScope(zoneId);\n                lifeCycle.attachZone(store, zoneScope, hypervisorType);\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \" + e.getMessage(), e);\n            try {\n                \r\n                \r\n                if (store != null) {\n                    lifeCycle.deleteDataStore(store);\n                }\n            } catch (Exception ex) {\n                s_logger.debug(\"Failed to clean up storage pool: \" + ex.getMessage());\n            }\n            throw new CloudRuntimeException(\"Failed to add data store: \" + e.getMessage(), e);\n        }\n\n        return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":655,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd) {\n        String providerName = cmd.getProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultCacheDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find cache store provider: \" + providerName);\n            }\n        }\n\n        Long dcId = cmd.getZoneId();\n\n        ScopeType scopeType = null;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for cache store \" + scope);\n            }\n\n            if (scopeType != ScopeType.ZONE) {\n                throw new InvalidParameterValueException(\"Only zone wide cache storage is supported\");\n            }\n        }\n\n        if (scopeType == ScopeType.ZONE && dcId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        \r\n        DataCenterVO zone = _dcDao.findById(dcId);\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + dcId);\n        }\n\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            PermissionDeniedException ex = new PermissionDeniedException(\n                    \"Cannot perform this operation, Zone with specified id is currently disabled\");\n            ex.addProxyObject(zone.getUuid(), \"dcId\");\n            throw ex;\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", dcId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"name\", cmd.getUrl());\n        params.put(\"details\", cmd.getDetails());\n        params.put(\"scope\", scopeType);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"role\", DataStoreRole.ImageCache);\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (ImageStore)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.ImageCache);\n    }\n","date":"2018-01-20 05:49:27","endLine":2258,"groupId":"2895","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondaryStagingStore","params":"(CreateSecondaryStagingStoreCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd) {\n        String providerName = cmd.getProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultCacheDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find cache store provider: \" + providerName);\n            }\n        }\n\n        Long dcId = cmd.getZoneId();\n\n        ScopeType scopeType = null;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for cache store \" + scope);\n            }\n\n            if (scopeType != ScopeType.ZONE) {\n                throw new InvalidParameterValueException(\"Only zone wide cache storage is supported\");\n            }\n        }\n\n        if (scopeType == ScopeType.ZONE && dcId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        \r\n        DataCenterVO zone = _dcDao.findById(dcId);\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + dcId);\n        }\n\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            PermissionDeniedException ex = new PermissionDeniedException(\n                    \"Cannot perform this operation, Zone with specified id is currently disabled\");\n            ex.addProxyObject(zone.getUuid(), \"dcId\");\n            throw ex;\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", dcId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"name\", cmd.getUrl());\n        params.put(\"details\", cmd.getDetails());\n        params.put(\"scope\", scopeType);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"role\", DataStoreRole.ImageCache);\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (ImageStore)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.ImageCache);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2193,"status":"N"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-12-14 14:26:44","commitOrder":3,"curCode":"    public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {\n        String providerName = cmd.getStorageProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find storage provider: \" + providerName);\n            }\n        }\n\n        Long clusterId = cmd.getClusterId();\n        Long podId = cmd.getPodId();\n        Long zoneId = cmd.getZoneId();\n\n        ScopeType scopeType = ScopeType.CLUSTER;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for pool \" + scope);\n            }\n        }\n\n        if (scopeType == ScopeType.CLUSTER && clusterId == null) {\n            throw new InvalidParameterValueException(\"cluster id can't be null, if scope is cluster\");\n        } else if (scopeType == ScopeType.ZONE && zoneId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        HypervisorType hypervisorType = HypervisorType.KVM;\n        if (scopeType == ScopeType.ZONE) {\n            \r\n            clusterId = null;\n            podId = null;\n            String hypervisor = cmd.getHypervisor();\n            if (hypervisor != null) {\n                try {\n                    hypervisorType = HypervisorType.getType(hypervisor);\n                } catch (Exception e) {\n                    throw new InvalidParameterValueException(\"invalid hypervisor type \" + hypervisor);\n                }\n            } else {\n                throw new InvalidParameterValueException(\"Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.\");\n            }\n            if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Hyperv && hypervisorType != HypervisorType.LXC\n                    && hypervisorType != HypervisorType.Any) {\n                throw new InvalidParameterValueException(\"zone wide storage pool is not supported for hypervisor type \" + hypervisor);\n            }\n        } else {\n            ClusterVO clusterVO = _clusterDao.findById(clusterId);\n            hypervisorType = clusterVO.getHypervisorType();\n        }\n\n        Map<String, String> details = extractApiParamAsMap(cmd.getDetails());\n        DataCenterVO zone = _dcDao.findById(cmd.getZoneId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"unable to find zone by id \" + zoneId);\n        }\n        \r\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zoneId);\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", zone.getId());\n        params.put(\"clusterId\", clusterId);\n        params.put(\"podId\", podId);\n        params.put(\"hypervisorType\", hypervisorType);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"tags\", cmd.getTags());\n        params.put(\"name\", cmd.getStoragePoolName());\n        params.put(\"details\", details);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"managed\", cmd.isManaged());\n        params.put(\"capacityBytes\", cmd.getCapacityBytes());\n        params.put(\"capacityIops\", cmd.getCapacityIops());\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n            if (scopeType == ScopeType.CLUSTER) {\n                ClusterScope clusterScope = new ClusterScope(clusterId, podId, zoneId);\n                lifeCycle.attachCluster(store, clusterScope);\n            } else if (scopeType == ScopeType.ZONE) {\n                ZoneScope zoneScope = new ZoneScope(zoneId);\n                lifeCycle.attachZone(store, zoneScope, hypervisorType);\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \" + e.getMessage(), e);\n            try {\n                \r\n                \r\n                if (store != null) {\n                    lifeCycle.deleteDataStore(store);\n                }\n            } catch (Exception ex) {\n                s_logger.debug(\"Failed to clean up storage pool: \" + ex.getMessage());\n            }\n            throw new CloudRuntimeException(\"Failed to add data store: \" + e.getMessage(), e);\n        }\n\n        return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n    }\n","date":"2020-12-14 14:26:44","endLine":761,"groupId":"101913","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createPool","params":"(CreateStoragePoolCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/96/589f1637152e083d0a4ad05088a0658c9886e7.src","preCode":"    public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {\n        String providerName = cmd.getStorageProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultPrimaryDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find storage provider: \" + providerName);\n            }\n        }\n\n        Long clusterId = cmd.getClusterId();\n        Long podId = cmd.getPodId();\n        Long zoneId = cmd.getZoneId();\n\n        ScopeType scopeType = ScopeType.CLUSTER;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for pool \" + scope);\n            }\n        }\n\n        if (scopeType == ScopeType.CLUSTER && clusterId == null) {\n            throw new InvalidParameterValueException(\"cluster id can't be null, if scope is cluster\");\n        } else if (scopeType == ScopeType.ZONE && zoneId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        HypervisorType hypervisorType = HypervisorType.KVM;\n        if (scopeType == ScopeType.ZONE) {\n            \r\n            clusterId = null;\n            podId = null;\n            String hypervisor = cmd.getHypervisor();\n            if (hypervisor != null) {\n                try {\n                    hypervisorType = HypervisorType.getType(hypervisor);\n                } catch (Exception e) {\n                    throw new InvalidParameterValueException(\"invalid hypervisor type \" + hypervisor);\n                }\n            } else {\n                throw new InvalidParameterValueException(\"Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.\");\n            }\n            if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware && hypervisorType != HypervisorType.Hyperv && hypervisorType != HypervisorType.LXC\n                    && hypervisorType != HypervisorType.Any) {\n                throw new InvalidParameterValueException(\"zone wide storage pool is not supported for hypervisor type \" + hypervisor);\n            }\n        } else {\n            ClusterVO clusterVO = _clusterDao.findById(clusterId);\n            hypervisorType = clusterVO.getHypervisorType();\n        }\n\n        Map<String, String> details = extractApiParamAsMap(cmd.getDetails());\n        DataCenterVO zone = _dcDao.findById(cmd.getZoneId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"unable to find zone by id \" + zoneId);\n        }\n        \r\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zoneId);\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", zone.getId());\n        params.put(\"clusterId\", clusterId);\n        params.put(\"podId\", podId);\n        params.put(\"hypervisorType\", hypervisorType.toString());\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"tags\", cmd.getTags());\n        params.put(\"name\", cmd.getStoragePoolName());\n        params.put(\"details\", details);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"managed\", cmd.isManaged());\n        params.put(\"capacityBytes\", cmd.getCapacityBytes());\n        params.put(\"capacityIops\", cmd.getCapacityIops());\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n            if (scopeType == ScopeType.CLUSTER) {\n                ClusterScope clusterScope = new ClusterScope(clusterId, podId, zoneId);\n                lifeCycle.attachCluster(store, clusterScope);\n            } else if (scopeType == ScopeType.ZONE) {\n                ZoneScope zoneScope = new ZoneScope(zoneId);\n                lifeCycle.attachZone(store, zoneScope, hypervisorType);\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \" + e.getMessage(), e);\n            try {\n                \r\n                \r\n                if (store != null) {\n                    lifeCycle.deleteDataStore(store);\n                }\n            } catch (Exception ex) {\n                s_logger.debug(\"Failed to clean up storage pool: \" + ex.getMessage());\n            }\n            throw new CloudRuntimeException(\"Failed to add data store: \" + e.getMessage(), e);\n        }\n\n        return (PrimaryDataStoreInfo)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":655,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd) {\n        String providerName = cmd.getProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultCacheDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find cache store provider: \" + providerName);\n            }\n        }\n\n        Long dcId = cmd.getZoneId();\n\n        ScopeType scopeType = null;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for cache store \" + scope);\n            }\n\n            if (scopeType != ScopeType.ZONE) {\n                throw new InvalidParameterValueException(\"Only zone wide cache storage is supported\");\n            }\n        }\n\n        if (scopeType == ScopeType.ZONE && dcId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        \r\n        DataCenterVO zone = _dcDao.findById(dcId);\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + dcId);\n        }\n\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            PermissionDeniedException ex = new PermissionDeniedException(\n                    \"Cannot perform this operation, Zone with specified id is currently disabled\");\n            ex.addProxyObject(zone.getUuid(), \"dcId\");\n            throw ex;\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", dcId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"name\", cmd.getUrl());\n        params.put(\"details\", cmd.getDetails());\n        params.put(\"scope\", scopeType);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"role\", DataStoreRole.ImageCache);\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (ImageStore)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.ImageCache);\n    }\n","date":"2018-01-20 05:49:27","endLine":2258,"groupId":"101913","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondaryStagingStore","params":"(CreateSecondaryStagingStoreCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public ImageStore createSecondaryStagingStore(CreateSecondaryStagingStoreCmd cmd) {\n        String providerName = cmd.getProviderName();\n        DataStoreProvider storeProvider = _dataStoreProviderMgr.getDataStoreProvider(providerName);\n\n        if (storeProvider == null) {\n            storeProvider = _dataStoreProviderMgr.getDefaultCacheDataStoreProvider();\n            if (storeProvider == null) {\n                throw new InvalidParameterValueException(\"can't find cache store provider: \" + providerName);\n            }\n        }\n\n        Long dcId = cmd.getZoneId();\n\n        ScopeType scopeType = null;\n        String scope = cmd.getScope();\n        if (scope != null) {\n            try {\n                scopeType = Enum.valueOf(ScopeType.class, scope.toUpperCase());\n\n            } catch (Exception e) {\n                throw new InvalidParameterValueException(\"invalid scope for cache store \" + scope);\n            }\n\n            if (scopeType != ScopeType.ZONE) {\n                throw new InvalidParameterValueException(\"Only zone wide cache storage is supported\");\n            }\n        }\n\n        if (scopeType == ScopeType.ZONE && dcId == null) {\n            throw new InvalidParameterValueException(\"zone id can't be null, if scope is zone\");\n        }\n\n        \r\n        DataCenterVO zone = _dcDao.findById(dcId);\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + dcId);\n        }\n\n        Account account = CallContext.current().getCallingAccount();\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getId())) {\n            PermissionDeniedException ex = new PermissionDeniedException(\n                    \"Cannot perform this operation, Zone with specified id is currently disabled\");\n            ex.addProxyObject(zone.getUuid(), \"dcId\");\n            throw ex;\n        }\n\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"zoneId\", dcId);\n        params.put(\"url\", cmd.getUrl());\n        params.put(\"name\", cmd.getUrl());\n        params.put(\"details\", cmd.getDetails());\n        params.put(\"scope\", scopeType);\n        params.put(\"providerName\", storeProvider.getName());\n        params.put(\"role\", DataStoreRole.ImageCache);\n\n        DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n        DataStore store = null;\n        try {\n            store = lifeCycle.initialize(params);\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to add data store: \"+e.getMessage(), e);\n            throw new CloudRuntimeException(\"Failed to add data store: \"+e.getMessage(), e);\n        }\n\n        return (ImageStore)_dataStoreMgr.getDataStore(store.getId(), DataStoreRole.ImageCache);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2193,"status":"N"}],"commitId":"fdb2ee316537804391cb0a6bc1a06520f8c0aebf","commitMessage":"@@@storage: Fix hypervisor type cast to string (#4516)\n\nThis PR addresses an error that appears when you try to add a new host. I don't even understand why there was a cast to String in the first place. I will assume some classes send HypervisorType and some send a string (empty or otherwise). Shouldn't this be addressed to use the same type everywhere? With this fix adding a new xenserver host works fine.\n\nCo-authored-by: dahn <daan.hoogland@gmail.com>","date":"2020-12-14 14:26:44","modifiedFileCount":"3","status":"M","submitter":"Alexandru Bagu"}]
