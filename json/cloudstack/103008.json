[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void createOva(String path, String name) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", 0, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","date":"2018-01-20 05:49:27","endLine":130,"groupId":"10260","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createOva","params":"(Stringpath@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/2410f4afebe2deec57f964a9d3c21b6e2251a1.src","preCode":"    public void createOva(String path, String name) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", 0, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + totalBytes);\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with commmand: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finishes \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1772,"groupId":"20560","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exportVm","params":"(StringexportDir@StringexportName@booleanpackToOva@booleanleaveOvaFileOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/00/78793df8d00859a1254d621bc57968df6886ce.src","preCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + totalBytes);\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with commmand: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finishes \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","realPath":"vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1641,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-02-27 20:33:00","commitOrder":2,"curCode":"    public void createOva(String path, String name, int archiveTimeout) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", archiveTimeout, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","date":"2018-02-27 20:33:00","endLine":134,"groupId":"8275","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createOva","params":"(Stringpath@Stringname@intarchiveTimeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b6/f207acf1039a7019656bbf94303d50d318db62.src","preCode":"    public void createOva(String path, String name) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", 0, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + totalBytes);\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with commmand: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finishes \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1772,"groupId":"20560","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"exportVm","params":"(StringexportDir@StringexportName@booleanpackToOva@booleanleaveOvaFileOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/00/78793df8d00859a1254d621bc57968df6886ce.src","preCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + totalBytes);\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with commmand: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finishes \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","realPath":"vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1641,"status":"N"}],"commitId":"bb607d07a97476dc4fb934b3d75df6affba47086","commitMessage":"@@@CLOUDSTACK-10054:Volume download times out in 3600 seconds (#2244)\n\n","date":"2018-02-27 20:33:00","modifiedFileCount":"22","status":"M","submitter":"mrunalinikankariya"},{"authorTime":"2020-08-13 18:25:16","codes":[{"authorDate":"2018-02-27 20:33:00","commitOrder":3,"curCode":"    public void createOva(String path, String name, int archiveTimeout) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", archiveTimeout, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","date":"2018-02-27 20:33:00","endLine":134,"groupId":"8275","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createOva","params":"(Stringpath@Stringname@intarchiveTimeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b6/f207acf1039a7019656bbf94303d50d318db62.src","preCode":"    public void createOva(String path, String name, int archiveTimeout) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", archiveTimeout, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2020-08-13 18:25:16","commitOrder":3,"curCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + toHumanReadableSize(totalBytes));\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with commmand: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finishes \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","date":"2020-08-13 18:25:16","endLine":1823,"groupId":"19167","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"exportVm","params":"(StringexportDir@StringexportName@booleanpackToOva@booleanleaveOvaFileOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0e/70799dfcb245115c0dce46ec6f85d29565140d.src","preCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + totalBytes);\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with commmand: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finishes \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","realPath":"vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1692,"status":"M"}],"commitId":"b586eb22f1b31f3cab2f2cb1aaeafca4f4646abd","commitMessage":"@@@Human readable sizes in logs (#4207)\n\nThis PR adds outputting human readable byte sizes in the management server logs.  agent logs.  and usage records. A non-dynamic global variable is added (display.human.readable.sizes) to control switching this feature on and off. This setting is sent to the agent on connection and is only read from the database when the management server is started up. The setting is kept in memory by the use of a static field on the NumbersUtil class and is available throughout the codebase.\n\nInstead of seeing things like:\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"106496\". \"bytesReceived\":\"0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nThe KB MB and GB values will be printed out:\n\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"(104.00 KB) 106496\". \"bytesReceived\":\"(0 bytes) 0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Human+Readable+Byte+sizes","date":"2020-08-13 18:25:16","modifiedFileCount":"55","status":"M","submitter":"Spaceman1984"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2018-02-27 20:33:00","commitOrder":4,"curCode":"    public void createOva(String path, String name, int archiveTimeout) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", archiveTimeout, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","date":"2018-02-27 20:33:00","endLine":134,"groupId":"103008","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createOva","params":"(Stringpath@Stringname@intarchiveTimeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b6/f207acf1039a7019656bbf94303d50d318db62.src","preCode":"    public void createOva(String path, String name, int archiveTimeout) {\n        Script commandSync = new Script(true, \"sync\", 0, s_logger);\n        commandSync.execute();\n\n        Script command = new Script(false, \"tar\", archiveTimeout, s_logger);\n        command.setWorkDir(path);\n        command.add(\"-cf\", name + \".ova\");\n        command.add(name + \".ovf\");        \r\n        command.add(name + \"-disk0.vmdk\");\n\n        s_logger.info(\"Package OVA with commmand: \" + command.toString());\n        command.execute();\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2020-10-26 21:24:14","commitOrder":4,"curCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + toHumanReadableSize(totalBytes));\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with command: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finished \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":1833,"groupId":"103008","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"exportVm","params":"(StringexportDir@StringexportName@booleanpackToOva@booleanleaveOvaFileOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5f/61b31171ca70b97c77fd3b83ebb72ccac8fc04.src","preCode":"    public void exportVm(String exportDir, String exportName, boolean packToOva, boolean leaveOvaFileOnly) throws Exception {\n        ManagedObjectReference morOvf = _context.getServiceContent().getOvfManager();\n\n        VirtualMachineRuntimeInfo runtimeInfo = getRuntimeInfo();\n        HostMO hostMo = new HostMO(_context, runtimeInfo.getHost());\n        String hostName = hostMo.getHostName();\n        String vmName = getVmName();\n\n        DatacenterMO dcMo = new DatacenterMO(_context, hostMo.getHyperHostDatacenter());\n\n        if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {\n            String msg = \"Unable to export VM because it is not at powerdOff state. vmName: \" + vmName + \", host: \" + hostName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        ManagedObjectReference morLease = _context.getService().exportVm(getMor());\n        if (morLease == null) {\n            s_logger.error(\"exportVm() failed\");\n            throw new Exception(\"exportVm() failed\");\n        }\n\n        HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(_context, morLease);\n        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n\n        try {\n            if (state == HttpNfcLeaseState.READY) {\n                final HttpNfcLeaseMO.ProgressReporter progressReporter = leaseMo.createProgressReporter();\n\n                boolean success = false;\n                List<String> fileNames = new ArrayList<String>();\n                try {\n                    HttpNfcLeaseInfo leaseInfo = leaseMo.getLeaseInfo();\n                    final long totalBytes = leaseInfo.getTotalDiskCapacityInKB() * 1024;\n                    long totalBytesDownloaded = 0;\n\n                    List<HttpNfcLeaseDeviceUrl> deviceUrls = leaseInfo.getDeviceUrl();\n                    s_logger.info(\"volss: copy vmdk and ovf file starts \" + System.currentTimeMillis());\n                    if (deviceUrls != null) {\n                        OvfFile[] ovfFiles = new OvfFile[deviceUrls.size()];\n                        for (int i = 0; i < deviceUrls.size(); i++) {\n                            String deviceId = deviceUrls.get(i).getKey();\n                            String deviceUrlStr = deviceUrls.get(i).getUrl();\n                            String orgDiskFileName = deviceUrlStr.substring(deviceUrlStr.lastIndexOf(\"/\") + 1);\n                            String diskFileName = String.format(\"%s-disk%d%s\", exportName, i, VmwareHelper.getFileExtension(orgDiskFileName, \".vmdk\"));\n                            String diskUrlStr = deviceUrlStr.replace(\"*\", hostName);\n                            diskUrlStr = HypervisorHostHelper.resolveHostNameInUrl(dcMo, diskUrlStr);\n                            String diskLocalPath = exportDir + File.separator + diskFileName;\n                            fileNames.add(diskLocalPath);\n\n                            if (s_logger.isInfoEnabled()) {\n                                s_logger.info(\"Download VMDK file for export. url: \" + deviceUrlStr);\n                            }\n                            long lengthOfDiskFile = _context.downloadVmdkFile(diskUrlStr, diskLocalPath, totalBytesDownloaded, new ActionDelegate<Long>() {\n                                @Override\n                                public void action(Long param) {\n                                    if (s_logger.isTraceEnabled()) {\n                                        s_logger.trace(\"Download progress \" + param + \"/\" + toHumanReadableSize(totalBytes));\n                                    }\n                                    progressReporter.reportProgress((int)(param * 100 / totalBytes));\n                                }\n                            });\n                            totalBytesDownloaded += lengthOfDiskFile;\n\n                            OvfFile ovfFile = new OvfFile();\n                            ovfFile.setPath(diskFileName);\n                            ovfFile.setDeviceId(deviceId);\n                            ovfFile.setSize(lengthOfDiskFile);\n                            ovfFiles[i] = ovfFile;\n                        }\n\n                        \r\n                        OvfCreateDescriptorParams ovfDescParams = new OvfCreateDescriptorParams();\n                        ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));\n                        OvfCreateDescriptorResult ovfCreateDescriptorResult = _context.getService().createDescriptor(morOvf, getMor(), ovfDescParams);\n                        String ovfPath = exportDir + File.separator + exportName + \".ovf\";\n                        fileNames.add(ovfPath);\n\n                        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(ovfPath),\"UTF-8\");\n                        out.write(ovfCreateDescriptorResult.getOvfDescriptor());\n                        out.close();\n\n                        \r\n                        if (packToOva) {\n                            \r\n                            s_logger.info(\"Sync file system before we package OVA...\");\n\n                            Script commandSync = new Script(true, \"sync\", 0, s_logger);\n                            commandSync.execute();\n\n                            Script command = new Script(false, \"tar\", 0, s_logger);\n                            command.setWorkDir(exportDir);\n                            command.add(\"-cf\", exportName + \".ova\");\n                            command.add(exportName + \".ovf\");        \r\n                            for (String name : fileNames) {\n                                command.add((new File(name).getName()));\n                            }\n\n                            s_logger.info(\"Package OVA with commmand: \" + command.toString());\n                            command.execute();\n\n                            \r\n                            if ((new File(exportDir + File.separator + exportName + \".ova\")).exists()) {\n                                success = true;\n                            } else {\n                                s_logger.error(exportDir + File.separator + exportName + \".ova is not created as expected\");\n                            }\n                        } else {\n                            success = true;\n                        }\n                    }\n                    s_logger.info(\"volss: copy vmdk and ovf file finishes \" + System.currentTimeMillis());\n                } catch (Throwable e) {\n                    s_logger.error(\"Unexpected exception \", e);\n                } finally {\n                    progressReporter.close();\n\n                    if (leaveOvaFileOnly) {\n                        for (String name : fileNames) {\n                            new File(name).delete();\n                        }\n                    }\n\n                    if (!success)\n                        throw new Exception(\"Unable to finish the whole process to package as a OVA file\");\n                }\n            }\n        } finally {\n            leaseMo.updateLeaseProgress(100);\n            leaseMo.completeLease();\n        }\n    }\n","realPath":"vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1702,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"}]
