[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testPvlanSetupCommandVm() {\n        final String op = \"add\";\n        final URI uri = URI.create(\"http://localhost\");\n        final String networkTag = \"/105\";\n        final String vmMac = \"00:00:00:00\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createVmSetup(op, uri, networkTag, vmMac);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n\n        final String ovsPvlanVmPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanVmPath()).thenReturn(ovsPvlanVmPath);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","date":"2018-01-20 05:49:27","endLine":4365,"groupId":"19939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPvlanSetupCommandVm","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testPvlanSetupCommandVm() {\n        final String op = \"add\";\n        final URI uri = URI.create(\"http://localhost\");\n        final String networkTag = \"/105\";\n        final String vmMac = \"00:00:00:00\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createVmSetup(op, uri, networkTag, vmMac);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n\n        final String ovsPvlanVmPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanVmPath()).thenReturn(ovsPvlanVmPath);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4345,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testPvlanSetupCommandDhcpDelete() {\n        final String op = \"delete\";\n        final URI uri = URI.create(\"http://localhost\");\n        final String networkTag = \"/105\";\n        final String dhcpName = \"dhcp\";\n        final String dhcpMac = \"00:00:00:00\";\n        final String dhcpIp = \"127.0.0.1\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createDhcpSetup(op, uri, networkTag, dhcpName, dhcpMac, dhcpIp);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n        final String ovsPvlanDhcpHostPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanDhcpHostPath()).thenReturn(ovsPvlanDhcpHostPath);\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","date":"2018-01-20 05:49:27","endLine":4435,"groupId":"11740","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPvlanSetupCommandDhcpDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testPvlanSetupCommandDhcpDelete() {\n        final String op = \"delete\";\n        final URI uri = URI.create(\"http://localhost\");\n        final String networkTag = \"/105\";\n        final String dhcpName = \"dhcp\";\n        final String dhcpMac = \"00:00:00:00\";\n        final String dhcpIp = \"127.0.0.1\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createDhcpSetup(op, uri, networkTag, dhcpName, dhcpMac, dhcpIp);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n        final String ovsPvlanDhcpHostPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanDhcpHostPath()).thenReturn(ovsPvlanDhcpHostPath);\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4410,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-08-20 18:16:34","codes":[{"authorDate":"2020-08-20 18:16:34","commitOrder":2,"curCode":"    public void testPvlanSetupCommandVm() {\n        final String op = \"add\";\n        final URI uri = URI.create(\"pvlan://200-p200\");\n        final String networkTag = \"/105\";\n        final String vmMac = \"00:00:00:00\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createVmSetup(op, uri, networkTag, vmMac);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n\n        final String ovsPvlanVmPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanVmPath()).thenReturn(ovsPvlanVmPath);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","date":"2020-08-20 18:16:34","endLine":4383,"groupId":"103232","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPvlanSetupCommandVm","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/651f4c02c2d653c685f4a1c26e107b9dd0c759.src","preCode":"    public void testPvlanSetupCommandVm() {\n        final String op = \"add\";\n        final URI uri = URI.create(\"http://localhost\");\n        final String networkTag = \"/105\";\n        final String vmMac = \"00:00:00:00\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createVmSetup(op, uri, networkTag, vmMac);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n\n        final String ovsPvlanVmPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanVmPath()).thenReturn(ovsPvlanVmPath);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4363,"status":"M"},{"authorDate":"2020-08-20 18:16:34","commitOrder":2,"curCode":"    public void testPvlanSetupCommandDhcpDelete() {\n        final String op = \"delete\";\n        final URI uri = URI.create(\"pvlan://200-p200\");\n        final String networkTag = \"/105\";\n        final String dhcpName = \"dhcp\";\n        final String dhcpMac = \"00:00:00:00\";\n        final String dhcpIp = \"127.0.0.1\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createDhcpSetup(op, uri, networkTag, dhcpName, dhcpMac, dhcpIp);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n\n        final String ovsPvlanDhcpHostPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanDhcpHostPath()).thenReturn(ovsPvlanDhcpHostPath);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","date":"2020-08-20 18:16:34","endLine":4408,"groupId":"103232","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPvlanSetupCommandDhcpDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/651f4c02c2d653c685f4a1c26e107b9dd0c759.src","preCode":"    public void testPvlanSetupCommandDhcpDelete() {\n        final String op = \"delete\";\n        final URI uri = URI.create(\"http://localhost\");\n        final String networkTag = \"/105\";\n        final String dhcpName = \"dhcp\";\n        final String dhcpMac = \"00:00:00:00\";\n        final String dhcpIp = \"127.0.0.1\";\n\n        final PvlanSetupCommand command = PvlanSetupCommand.createDhcpSetup(op, uri, networkTag, dhcpName, dhcpMac, dhcpIp);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n\n        final String guestBridgeName = \"br0\";\n        when(libvirtComputingResource.getGuestBridgeName()).thenReturn(guestBridgeName);\n\n        when(libvirtComputingResource.getTimeout()).thenReturn(Duration.ZERO);\n        final String ovsPvlanDhcpHostPath = \"/pvlan\";\n        when(libvirtComputingResource.getOvsPvlanDhcpHostPath()).thenReturn(ovsPvlanDhcpHostPath);\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4386,"status":"M"}],"commitId":"3872bf1ff94659fb234a7dd938ccdf6254fad3e7","commitMessage":"@@@kvm: Enable PVLAN support on L2 networks (#4040)\n\nThis is an extention of #3732 for kvm.\nThis is restricted to ovs > 2.9.2\nSince Xen uses ovs 2.6.  pvlan is unsupported.\nThis also fixes issues of vms on the same pvlan unable to communicate if they're on the same host","date":"2020-08-20 18:16:34","modifiedFileCount":"14","status":"M","submitter":"davidjumani"}]
