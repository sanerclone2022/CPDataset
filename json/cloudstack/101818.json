[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(routerDeploymentDefinition.getServiceOfferingId());\n\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(routerDeploymentDefinition);\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, routerDeploymentDefinition.getPlan(), hType);\n    }\n","date":"2018-01-20 05:49:27","endLine":771,"groupId":"12181","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reallocateRouterNetworks","params":"(finalRouterDeploymentDefinitionrouterDeploymentDefinition@finalVirtualRouterrouter@finalVMTemplateVOtemplate@finalHypervisorTypehType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fa/17e7bc315947670f7b3f615f4f7bc699034bda.src","preCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(routerDeploymentDefinition.getServiceOfferingId());\n\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(routerDeploymentDefinition);\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, routerDeploymentDefinition.getPlan(), hType);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":764,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n\n        final TreeSet<String> publicVlans = new TreeSet<String>();\n        if (vpcRouterDeploymentDefinition.isPublicNetwork()) {\n            publicVlans.add(vpcRouterDeploymentDefinition.getSourceNatIP()\n                                                         .getVlanTag());\n        }\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(vpcRouterDeploymentDefinition);\n\n        final Long vpcId = vpcRouterDeploymentDefinition.getVpc().getId();\n        \r\n        final List<PrivateGateway> privateGateways = vpcMgr.getVpcPrivateGateways(vpcId);\n        if (privateGateways != null && !privateGateways.isEmpty()) {\n            for (final PrivateGateway privateGateway : privateGateways) {\n                final NicProfile privateNic = nicProfileHelper.createPrivateNicProfileForGateway(privateGateway, router);\n                final Network privateNetwork = _networkModel.getNetwork(privateGateway.getNetworkId());\n                networks.put(privateNetwork, new ArrayList<NicProfile>(Arrays.asList(privateNic)));\n            }\n        }\n\n        \r\n        final List<? extends Network> guestNetworks = vpcMgr.getVpcNetworks(vpcId);\n        for (final Network guestNetwork : guestNetworks) {\n            if (_networkModel.isPrivateGateway(guestNetwork.getId())) {\n                continue;\n            }\n            if (guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup) {\n                final NicProfile guestNic = nicProfileHelper.createGuestNicProfileForVpcRouter(vpcRouterDeploymentDefinition, guestNetwork);\n                networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(guestNic)));\n            }\n        }\n\n        \r\n        final List<IPAddressVO> ips = _ipAddressDao.listByAssociatedVpc(vpcId, false);\n        final List<NicProfile> publicNics = new ArrayList<NicProfile>();\n        Network publicNetwork = null;\n        final Map<Network.Service, Set<Network.Provider>> vpcOffSvcProvidersMap = vpcMgr.getVpcOffSvcProvidersMap(vpcRouterDeploymentDefinition.getVpc().getVpcOfferingId());\n\n        boolean vpcIsStaticNatProvider = vpcOffSvcProvidersMap.get(Network.Service.StaticNat) != null &&\n                vpcOffSvcProvidersMap.get(Network.Service.StaticNat).contains(Network.Provider.VPCVirtualRouter);\n\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(vpcRouterDeploymentDefinition.getServiceOfferingId());\n\n        for (final IPAddressVO ip : ips) {\n            if (vpcIsStaticNatProvider || !ip.isOneToOneNat()) {\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(ip, _vlanDao.findById(ip.getVlanId()));\n                if ((ip.getState() == IpAddress.State.Allocated  || ip.getState() == IpAddress.State.Allocating)\n                        && vpcMgr.isIpAllocatedToVpc(ip)\n                        && !publicVlans.contains(publicIp.getVlanTag())) {\n                    s_logger.debug(\"Allocating nic for router in vlan \" + publicIp.getVlanTag());\n                    final NicProfile publicNic = new NicProfile();\n                    publicNic.setDefaultNic(false);\n                    publicNic.setIPv4Address(publicIp.getAddress()\n                                                     .addr());\n                    publicNic.setIPv4Gateway(publicIp.getGateway());\n                    publicNic.setIPv4Netmask(publicIp.getNetmask());\n                    publicNic.setMacAddress(publicIp.getMacAddress());\n                    publicNic.setBroadcastType(BroadcastDomainType.Vlan);\n                    publicNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag()));\n                    publicNic.setIsolationUri(IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    final NetworkOffering publicOffering = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork)\n                                                                        .get(0);\n                    if (publicNetwork == null) {\n                        final List<? extends Network> publicNetworks = _networkMgr.setupNetwork(s_systemAccount, publicOffering, vpcRouterDeploymentDefinition.getPlan(), null, null, false);\n                        publicNetwork = publicNetworks.get(0);\n                    }\n                    publicNics.add(publicNic);\n                    publicVlans.add(publicIp.getVlanTag());\n                }\n            }\n            if (publicNetwork != null) {\n                if (networks.get(publicNetwork) != null) {\n                    @SuppressWarnings(\"unchecked\") final List<NicProfile> publicNicProfiles = (List<NicProfile>)networks.get(publicNetwork);\n                    publicNicProfiles.addAll(publicNics);\n                    networks.put(publicNetwork, publicNicProfiles);\n                } else {\n                    networks.put(publicNetwork, publicNics);\n                }\n            }\n        }\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, vpcRouterDeploymentDefinition.getPlan(), hType);\n    }\n","date":"2018-01-20 05:49:27","endLine":169,"groupId":"7481","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reallocateRouterNetworks","params":"(finalRouterDeploymentDefinitionvpcRouterDeploymentDefinition@finalVirtualRouterrouter@finalVMTemplateVOtemplate@finalHypervisorTypehType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b4/cf809726d50e10bee58f3a7ab8d1b9b9ce1187.src","preCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n\n        final TreeSet<String> publicVlans = new TreeSet<String>();\n        if (vpcRouterDeploymentDefinition.isPublicNetwork()) {\n            publicVlans.add(vpcRouterDeploymentDefinition.getSourceNatIP()\n                                                         .getVlanTag());\n        }\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(vpcRouterDeploymentDefinition);\n\n        final Long vpcId = vpcRouterDeploymentDefinition.getVpc().getId();\n        \r\n        final List<PrivateGateway> privateGateways = vpcMgr.getVpcPrivateGateways(vpcId);\n        if (privateGateways != null && !privateGateways.isEmpty()) {\n            for (final PrivateGateway privateGateway : privateGateways) {\n                final NicProfile privateNic = nicProfileHelper.createPrivateNicProfileForGateway(privateGateway, router);\n                final Network privateNetwork = _networkModel.getNetwork(privateGateway.getNetworkId());\n                networks.put(privateNetwork, new ArrayList<NicProfile>(Arrays.asList(privateNic)));\n            }\n        }\n\n        \r\n        final List<? extends Network> guestNetworks = vpcMgr.getVpcNetworks(vpcId);\n        for (final Network guestNetwork : guestNetworks) {\n            if (_networkModel.isPrivateGateway(guestNetwork.getId())) {\n                continue;\n            }\n            if (guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup) {\n                final NicProfile guestNic = nicProfileHelper.createGuestNicProfileForVpcRouter(vpcRouterDeploymentDefinition, guestNetwork);\n                networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(guestNic)));\n            }\n        }\n\n        \r\n        final List<IPAddressVO> ips = _ipAddressDao.listByAssociatedVpc(vpcId, false);\n        final List<NicProfile> publicNics = new ArrayList<NicProfile>();\n        Network publicNetwork = null;\n        final Map<Network.Service, Set<Network.Provider>> vpcOffSvcProvidersMap = vpcMgr.getVpcOffSvcProvidersMap(vpcRouterDeploymentDefinition.getVpc().getVpcOfferingId());\n\n        boolean vpcIsStaticNatProvider = vpcOffSvcProvidersMap.get(Network.Service.StaticNat) != null &&\n                vpcOffSvcProvidersMap.get(Network.Service.StaticNat).contains(Network.Provider.VPCVirtualRouter);\n\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(vpcRouterDeploymentDefinition.getServiceOfferingId());\n\n        for (final IPAddressVO ip : ips) {\n            if (vpcIsStaticNatProvider || !ip.isOneToOneNat()) {\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(ip, _vlanDao.findById(ip.getVlanId()));\n                if ((ip.getState() == IpAddress.State.Allocated  || ip.getState() == IpAddress.State.Allocating)\n                        && vpcMgr.isIpAllocatedToVpc(ip)\n                        && !publicVlans.contains(publicIp.getVlanTag())) {\n                    s_logger.debug(\"Allocating nic for router in vlan \" + publicIp.getVlanTag());\n                    final NicProfile publicNic = new NicProfile();\n                    publicNic.setDefaultNic(false);\n                    publicNic.setIPv4Address(publicIp.getAddress()\n                                                     .addr());\n                    publicNic.setIPv4Gateway(publicIp.getGateway());\n                    publicNic.setIPv4Netmask(publicIp.getNetmask());\n                    publicNic.setMacAddress(publicIp.getMacAddress());\n                    publicNic.setBroadcastType(BroadcastDomainType.Vlan);\n                    publicNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag()));\n                    publicNic.setIsolationUri(IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    final NetworkOffering publicOffering = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork)\n                                                                        .get(0);\n                    if (publicNetwork == null) {\n                        final List<? extends Network> publicNetworks = _networkMgr.setupNetwork(s_systemAccount, publicOffering, vpcRouterDeploymentDefinition.getPlan(), null, null, false);\n                        publicNetwork = publicNetworks.get(0);\n                    }\n                    publicNics.add(publicNic);\n                    publicVlans.add(publicIp.getVlanTag());\n                }\n            }\n            if (publicNetwork != null) {\n                if (networks.get(publicNetwork) != null) {\n                    @SuppressWarnings(\"unchecked\") final List<NicProfile> publicNicProfiles = (List<NicProfile>)networks.get(publicNetwork);\n                    publicNicProfiles.addAll(publicNics);\n                    networks.put(publicNetwork, publicNicProfiles);\n                } else {\n                    networks.put(publicNetwork, publicNics);\n                }\n            }\n        }\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, vpcRouterDeploymentDefinition.getPlan(), hType);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VpcNetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-05-30 14:11:38","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(routerDeploymentDefinition.getServiceOfferingId());\n\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(routerDeploymentDefinition);\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, routerDeploymentDefinition.getPlan(), hType);\n    }\n","date":"2018-01-20 05:49:27","endLine":771,"groupId":"101818","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reallocateRouterNetworks","params":"(finalRouterDeploymentDefinitionrouterDeploymentDefinition@finalVirtualRouterrouter@finalVMTemplateVOtemplate@finalHypervisorTypehType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fa/17e7bc315947670f7b3f615f4f7bc699034bda.src","preCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition routerDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(routerDeploymentDefinition.getServiceOfferingId());\n\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(routerDeploymentDefinition);\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, routerDeploymentDefinition.getPlan(), hType);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":764,"status":"N"},{"authorDate":"2019-05-30 14:11:38","commitOrder":2,"curCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n\n        final TreeSet<String> publicVlans = new TreeSet<String>();\n        if (vpcRouterDeploymentDefinition.isPublicNetwork()) {\n            publicVlans.add(vpcRouterDeploymentDefinition.getSourceNatIP()\n                                                         .getVlanTag());\n        }\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(vpcRouterDeploymentDefinition);\n\n        final Long vpcId = vpcRouterDeploymentDefinition.getVpc().getId();\n        \r\n        final List<PrivateGateway> privateGateways = vpcMgr.getVpcPrivateGateways(vpcId);\n        if (privateGateways != null && !privateGateways.isEmpty()) {\n            for (final PrivateGateway privateGateway : privateGateways) {\n                final NicProfile privateNic = nicProfileHelper.createPrivateNicProfileForGateway(privateGateway, router);\n                final Network privateNetwork = _networkModel.getNetwork(privateGateway.getNetworkId());\n                networks.put(privateNetwork, new ArrayList<NicProfile>(Arrays.asList(privateNic)));\n            }\n        }\n\n        \r\n        final List<? extends Network> guestNetworks = vpcMgr.getVpcNetworks(vpcId);\n        for (final Network guestNetwork : guestNetworks) {\n            if (_networkModel.isPrivateGateway(guestNetwork.getId())) {\n                continue;\n            }\n            if (guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup) {\n                final NicProfile guestNic = nicProfileHelper.createGuestNicProfileForVpcRouter(vpcRouterDeploymentDefinition, guestNetwork);\n                networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(guestNic)));\n            }\n        }\n\n        \r\n        final List<IPAddressVO> ips = _ipAddressDao.listByAssociatedVpc(vpcId, false);\n        final List<NicProfile> publicNics = new ArrayList<NicProfile>();\n        Network publicNetwork = null;\n        final Map<Network.Service, Set<Network.Provider>> vpcOffSvcProvidersMap = vpcMgr.getVpcOffSvcProvidersMap(vpcRouterDeploymentDefinition.getVpc().getVpcOfferingId());\n\n        boolean vpcIsStaticNatProvider = vpcOffSvcProvidersMap.get(Network.Service.StaticNat) != null &&\n                vpcOffSvcProvidersMap.get(Network.Service.StaticNat).contains(Network.Provider.VPCVirtualRouter);\n\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(vpcRouterDeploymentDefinition.getServiceOfferingId());\n\n        for (final IPAddressVO ip : ips) {\n            if (vpcIsStaticNatProvider || !ip.isOneToOneNat()) {\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(ip, _vlanDao.findById(ip.getVlanId()));\n                if ((ip.getState() == IpAddress.State.Allocated  || ip.getState() == IpAddress.State.Allocating)\n                        && vpcMgr.isIpAllocatedToVpc(ip)\n                        && !publicVlans.contains(publicIp.getVlanTag())) {\n                    s_logger.debug(\"Allocating nic for router in vlan \" + publicIp.getVlanTag());\n                    final NicProfile publicNic = new NicProfile();\n                    publicNic.setDefaultNic(false);\n                    publicNic.setIPv4Address(publicIp.getAddress()\n                                                     .addr());\n                    publicNic.setIPv4Gateway(publicIp.getGateway());\n                    publicNic.setIPv4Netmask(publicIp.getNetmask());\n                    publicNic.setMacAddress(publicIp.getMacAddress());\n                    publicNic.setBroadcastType(BroadcastDomainType.Vlan);\n                    publicNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag()));\n                    publicNic.setIsolationUri(IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    final NetworkOffering publicOffering = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork)\n                                                                        .get(0);\n                    if (publicNetwork == null) {\n                        final List<? extends Network> publicNetworks = _networkMgr.setupNetwork(s_systemAccount, publicOffering, vpcRouterDeploymentDefinition.getPlan(), null, null, false);\n                        publicNetwork = publicNetworks.get(0);\n                    }\n                    publicNics.add(publicNic);\n                    publicVlans.add(publicIp.getVlanTag());\n                }\n            }\n        }\n        if (publicNetwork != null) {\n            if (networks.get(publicNetwork) != null) {\n                @SuppressWarnings(\"unchecked\")\n                final List<NicProfile> publicNicProfiles = (List<NicProfile>)networks.get(publicNetwork);\n                publicNicProfiles.addAll(publicNics);\n                networks.put(publicNetwork, publicNicProfiles);\n            } else {\n                networks.put(publicNetwork, publicNics);\n            }\n        }\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, vpcRouterDeploymentDefinition.getPlan(), hType);\n    }\n","date":"2019-05-30 14:11:38","endLine":170,"groupId":"101818","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"reallocateRouterNetworks","params":"(finalRouterDeploymentDefinitionvpcRouterDeploymentDefinition@finalVirtualRouterrouter@finalVMTemplateVOtemplate@finalHypervisorTypehType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/49bd0e0a3f375e090ab4a2b8d52f7a268b92f4.src","preCode":"    public void reallocateRouterNetworks(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final VirtualRouter router, final VMTemplateVO template, final HypervisorType hType)\n            throws ConcurrentOperationException, InsufficientCapacityException {\n\n        final TreeSet<String> publicVlans = new TreeSet<String>();\n        if (vpcRouterDeploymentDefinition.isPublicNetwork()) {\n            publicVlans.add(vpcRouterDeploymentDefinition.getSourceNatIP()\n                                                         .getVlanTag());\n        }\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = configureDefaultNics(vpcRouterDeploymentDefinition);\n\n        final Long vpcId = vpcRouterDeploymentDefinition.getVpc().getId();\n        \r\n        final List<PrivateGateway> privateGateways = vpcMgr.getVpcPrivateGateways(vpcId);\n        if (privateGateways != null && !privateGateways.isEmpty()) {\n            for (final PrivateGateway privateGateway : privateGateways) {\n                final NicProfile privateNic = nicProfileHelper.createPrivateNicProfileForGateway(privateGateway, router);\n                final Network privateNetwork = _networkModel.getNetwork(privateGateway.getNetworkId());\n                networks.put(privateNetwork, new ArrayList<NicProfile>(Arrays.asList(privateNic)));\n            }\n        }\n\n        \r\n        final List<? extends Network> guestNetworks = vpcMgr.getVpcNetworks(vpcId);\n        for (final Network guestNetwork : guestNetworks) {\n            if (_networkModel.isPrivateGateway(guestNetwork.getId())) {\n                continue;\n            }\n            if (guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup) {\n                final NicProfile guestNic = nicProfileHelper.createGuestNicProfileForVpcRouter(vpcRouterDeploymentDefinition, guestNetwork);\n                networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(guestNic)));\n            }\n        }\n\n        \r\n        final List<IPAddressVO> ips = _ipAddressDao.listByAssociatedVpc(vpcId, false);\n        final List<NicProfile> publicNics = new ArrayList<NicProfile>();\n        Network publicNetwork = null;\n        final Map<Network.Service, Set<Network.Provider>> vpcOffSvcProvidersMap = vpcMgr.getVpcOffSvcProvidersMap(vpcRouterDeploymentDefinition.getVpc().getVpcOfferingId());\n\n        boolean vpcIsStaticNatProvider = vpcOffSvcProvidersMap.get(Network.Service.StaticNat) != null &&\n                vpcOffSvcProvidersMap.get(Network.Service.StaticNat).contains(Network.Provider.VPCVirtualRouter);\n\n        final ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(vpcRouterDeploymentDefinition.getServiceOfferingId());\n\n        for (final IPAddressVO ip : ips) {\n            if (vpcIsStaticNatProvider || !ip.isOneToOneNat()) {\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(ip, _vlanDao.findById(ip.getVlanId()));\n                if ((ip.getState() == IpAddress.State.Allocated  || ip.getState() == IpAddress.State.Allocating)\n                        && vpcMgr.isIpAllocatedToVpc(ip)\n                        && !publicVlans.contains(publicIp.getVlanTag())) {\n                    s_logger.debug(\"Allocating nic for router in vlan \" + publicIp.getVlanTag());\n                    final NicProfile publicNic = new NicProfile();\n                    publicNic.setDefaultNic(false);\n                    publicNic.setIPv4Address(publicIp.getAddress()\n                                                     .addr());\n                    publicNic.setIPv4Gateway(publicIp.getGateway());\n                    publicNic.setIPv4Netmask(publicIp.getNetmask());\n                    publicNic.setMacAddress(publicIp.getMacAddress());\n                    publicNic.setBroadcastType(BroadcastDomainType.Vlan);\n                    publicNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag()));\n                    publicNic.setIsolationUri(IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    final NetworkOffering publicOffering = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemPublicNetwork)\n                                                                        .get(0);\n                    if (publicNetwork == null) {\n                        final List<? extends Network> publicNetworks = _networkMgr.setupNetwork(s_systemAccount, publicOffering, vpcRouterDeploymentDefinition.getPlan(), null, null, false);\n                        publicNetwork = publicNetworks.get(0);\n                    }\n                    publicNics.add(publicNic);\n                    publicVlans.add(publicIp.getVlanTag());\n                }\n            }\n            if (publicNetwork != null) {\n                if (networks.get(publicNetwork) != null) {\n                    @SuppressWarnings(\"unchecked\") final List<NicProfile> publicNicProfiles = (List<NicProfile>)networks.get(publicNetwork);\n                    publicNicProfiles.addAll(publicNics);\n                    networks.put(publicNetwork, publicNicProfiles);\n                } else {\n                    networks.put(publicNetwork, publicNics);\n                }\n            }\n        }\n\n        _itMgr.allocate(router.getInstanceName(), template, routerOffering, networks, vpcRouterDeploymentDefinition.getPlan(), hType);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VpcNetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"c072dda88e03dbcda49a5fbc8dbdcde8b61672d4","commitMessage":"@@@Merge remote-tracking branch 'origin/4.12'\n","date":"2019-05-30 14:11:38","modifiedFileCount":"2","status":"M","submitter":"Rohit Yadav"}]
