[{"authorTime":"2020-02-03 22:43:52","codes":[{"authorDate":"2020-02-03 22:43:52","commitOrder":1,"curCode":"    public Map<String, Long> getNicNetworkList() {\n        Map<String, Long> nicNetworkMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(nicNetworkList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)nicNetworkList.values()) {\n                String nic = entry.get(VmDetailConstants.NIC);\n                String networkUuid = entry.get(VmDetailConstants.NETWORK);\n                if (Strings.isNullOrEmpty(nic) || Strings.isNullOrEmpty(networkUuid) || _entityMgr.findByUuid(Network.class, networkUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Network ID: %s for NIC ID: %s is invalid\", networkUuid, nic));\n                }\n                nicNetworkMap.put(nic, _entityMgr.findByUuid(Network.class, networkUuid).getId());\n            }\n        }\n        return nicNetworkMap;\n    }\n","date":"2020-02-03 22:43:52","endLine":208,"groupId":"21337","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getNicNetworkList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/367f8f08c9923604b852da854cf0278f97be2b.src","preCode":"    public Map<String, Long> getNicNetworkList() {\n        Map<String, Long> nicNetworkMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(nicNetworkList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)nicNetworkList.values()) {\n                String nic = entry.get(VmDetailConstants.NIC);\n                String networkUuid = entry.get(VmDetailConstants.NETWORK);\n                if (Strings.isNullOrEmpty(nic) || Strings.isNullOrEmpty(networkUuid) || _entityMgr.findByUuid(Network.class, networkUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Network ID: %s for NIC ID: %s is invalid\", networkUuid, nic));\n                }\n                nicNetworkMap.put(nic, _entityMgr.findByUuid(Network.class, networkUuid).getId());\n            }\n        }\n        return nicNetworkMap;\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/ImportUnmanagedInstanceCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"},{"authorDate":"2020-02-03 22:43:52","commitOrder":1,"curCode":"    public Map<String, Long> getDataDiskToDiskOfferingList() {\n        Map<String, Long> dataDiskToDiskOfferingMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(dataDiskToDiskOfferingList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)dataDiskToDiskOfferingList.values()) {\n                String nic = entry.get(VmDetailConstants.DISK);\n                String offeringUuid = entry.get(VmDetailConstants.DISK_OFFERING);\n                if (Strings.isNullOrEmpty(nic) || Strings.isNullOrEmpty(offeringUuid) || _entityMgr.findByUuid(DiskOffering.class, offeringUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Disk offering ID: %s for disk ID: %s is invalid\", offeringUuid, nic));\n                }\n                dataDiskToDiskOfferingMap.put(nic, _entityMgr.findByUuid(DiskOffering.class, offeringUuid).getId());\n            }\n        }\n        return dataDiskToDiskOfferingMap;\n    }\n","date":"2020-02-03 22:43:52","endLine":245,"groupId":"21337","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataDiskToDiskOfferingList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/367f8f08c9923604b852da854cf0278f97be2b.src","preCode":"    public Map<String, Long> getDataDiskToDiskOfferingList() {\n        Map<String, Long> dataDiskToDiskOfferingMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(dataDiskToDiskOfferingList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)dataDiskToDiskOfferingList.values()) {\n                String nic = entry.get(VmDetailConstants.DISK);\n                String offeringUuid = entry.get(VmDetailConstants.DISK_OFFERING);\n                if (Strings.isNullOrEmpty(nic) || Strings.isNullOrEmpty(offeringUuid) || _entityMgr.findByUuid(DiskOffering.class, offeringUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Disk offering ID: %s for disk ID: %s is invalid\", offeringUuid, nic));\n                }\n                dataDiskToDiskOfferingMap.put(nic, _entityMgr.findByUuid(DiskOffering.class, offeringUuid).getId());\n            }\n        }\n        return dataDiskToDiskOfferingMap;\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/ImportUnmanagedInstanceCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"}],"commitId":"0f5b0e67f86731b7bfe6fb4728f3c675f54e89da","commitMessage":"@@@VM ingestion (#3606)\n\nThe VM ingestion feature allows CloudStack to discover.  on-board.  import existing VMs in an infra. The feature currently works only for VMware.  with a hypervisor agnostic framework which may be extended for KVM and XenServer in future.\n","date":"2020-02-03 22:43:52","modifiedFileCount":"27","status":"B","submitter":"Abhishek Kumar"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    public Map<String, Long> getNicNetworkList() {\n        Map<String, Long> nicNetworkMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(nicNetworkList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)nicNetworkList.values()) {\n                String nic = entry.get(VmDetailConstants.NIC);\n                String networkUuid = entry.get(VmDetailConstants.NETWORK);\n                if (LOGGER.isTraceEnabled()) {\n                    LOGGER.trace(String.format(\"nic, '%s', goes on net, '%s'\", nic, networkUuid));\n                }\n                if (Strings.isNullOrEmpty(nic) || Strings.isNullOrEmpty(networkUuid) || _entityMgr.findByUuid(Network.class, networkUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Network ID: %s for NIC ID: %s is invalid\", networkUuid, nic));\n                }\n                nicNetworkMap.put(nic, _entityMgr.findByUuid(Network.class, networkUuid).getId());\n            }\n        }\n        return nicNetworkMap;\n    }\n","date":"2020-10-26 21:24:14","endLine":217,"groupId":"102286","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getNicNetworkList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5f/924f213a021ec187a40acbe11efe8d1cfc66a8.src","preCode":"    public Map<String, Long> getNicNetworkList() {\n        Map<String, Long> nicNetworkMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(nicNetworkList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)nicNetworkList.values()) {\n                String nic = entry.get(VmDetailConstants.NIC);\n                String networkUuid = entry.get(VmDetailConstants.NETWORK);\n                if (Strings.isNullOrEmpty(nic) || Strings.isNullOrEmpty(networkUuid) || _entityMgr.findByUuid(Network.class, networkUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Network ID: %s for NIC ID: %s is invalid\", networkUuid, nic));\n                }\n                nicNetworkMap.put(nic, _entityMgr.findByUuid(Network.class, networkUuid).getId());\n            }\n        }\n        return nicNetworkMap;\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/ImportUnmanagedInstanceCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    public Map<String, Long> getDataDiskToDiskOfferingList() {\n        Map<String, Long> dataDiskToDiskOfferingMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(dataDiskToDiskOfferingList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)dataDiskToDiskOfferingList.values()) {\n                String disk = entry.get(VmDetailConstants.DISK);\n                String offeringUuid = entry.get(VmDetailConstants.DISK_OFFERING);\n                if (LOGGER.isTraceEnabled()) {\n                    LOGGER.trace(String.format(\"disk, '%s', gets offering, '%s'\", disk, offeringUuid));\n                }\n                if (Strings.isNullOrEmpty(disk) || Strings.isNullOrEmpty(offeringUuid) || _entityMgr.findByUuid(DiskOffering.class, offeringUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Disk offering ID: %s for disk ID: %s is invalid\", offeringUuid, disk));\n                }\n                dataDiskToDiskOfferingMap.put(disk, _entityMgr.findByUuid(DiskOffering.class, offeringUuid).getId());\n            }\n        }\n        return dataDiskToDiskOfferingMap;\n    }\n","date":"2020-10-26 21:24:14","endLine":260,"groupId":"102286","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getDataDiskToDiskOfferingList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5f/924f213a021ec187a40acbe11efe8d1cfc66a8.src","preCode":"    public Map<String, Long> getDataDiskToDiskOfferingList() {\n        Map<String, Long> dataDiskToDiskOfferingMap = new HashMap<>();\n        if (MapUtils.isNotEmpty(dataDiskToDiskOfferingList)) {\n            for (Map<String, String> entry : (Collection<Map<String, String>>)dataDiskToDiskOfferingList.values()) {\n                String nic = entry.get(VmDetailConstants.DISK);\n                String offeringUuid = entry.get(VmDetailConstants.DISK_OFFERING);\n                if (Strings.isNullOrEmpty(nic) || Strings.isNullOrEmpty(offeringUuid) || _entityMgr.findByUuid(DiskOffering.class, offeringUuid) == null) {\n                    throw new InvalidParameterValueException(String.format(\"Disk offering ID: %s for disk ID: %s is invalid\", offeringUuid, nic));\n                }\n                dataDiskToDiskOfferingMap.put(nic, _entityMgr.findByUuid(DiskOffering.class, offeringUuid).getId());\n            }\n        }\n        return dataDiskToDiskOfferingMap;\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/ImportUnmanagedInstanceCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"}]
