[{"authorTime":"2017-08-28 18:15:11","codes":[{"authorDate":"2017-08-28 18:15:11","commitOrder":1,"curCode":"    public static String privateKeyToPem(final PrivateKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"RSA PRIVATE KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","date":"2017-08-28 18:15:11","endLine":138,"groupId":"6072","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"privateKeyToPem","params":"(finalPrivateKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c2/ef9edb8c408e30edf40516e6ac0807835781e1.src","preCode":"    public static String privateKeyToPem(final PrivateKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"RSA PRIVATE KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","realPath":"utils/src/main/java/org/apache/cloudstack/utils/security/CertUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"},{"authorDate":"2017-08-28 18:15:11","commitOrder":1,"curCode":"    public static String publicKeyToPem(final PublicKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"PUBLIC KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","date":"2017-08-28 18:15:11","endLine":154,"groupId":"6072","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"publicKeyToPem","params":"(finalPublicKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c2/ef9edb8c408e30edf40516e6ac0807835781e1.src","preCode":"    public static String publicKeyToPem(final PublicKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"PUBLIC KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","realPath":"utils/src/main/java/org/apache/cloudstack/utils/security/CertUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"}],"commitId":"7ce54bf7a85d6df72f84c00fadf9b0fd42ab0d99","commitMessage":"@@@CLOUDSTACK-9993: Securing Agents Communications (#2239)\n\nThis introduces a new certificate authority framework that allows\npluggable CA provider implementations to handle certificate operations\naround issuance.  revocation and propagation. The framework injects\nitself to `NioServer` to handle agent connections securely. The\nframework adds assumptions in `NioClient` that a keystore if available\nwith known name `cloud.jks` will be used for SSL negotiations and\nhandshake.\n\nThis includes a default 'root' CA provider plugin which creates its own\nself-signed root certificate authority on first run and uses it for\nissuance and provisioning of certificate to CloudStack agents such as\nthe KVM.  CPVM and SSVM agents and also for the management server for\npeer clustering.\n\nAdditional changes and notes:\n- Comma separate list of management server IPs can be set to the 'host'\n  global setting. Newly provisioned agents (KVM/CPVM/SSVM etc) will get\n  radomized comma separated list to which they will attempt connection\n  or reconnection in provided order. This removes need of a TCP LB on\n  port 8250 (default) of the management server(s).\n- All fresh deployment will enforce two-way SSL authentication where\n  connecting agents will be required to present certificates issued\n  by the 'root' CA plugin.\n- Existing environment on upgrade will continue to use one-way SSL\n  authentication and connecting agents will not be required to present\n  certificates.\n- A script `keystore-setup` is responsible for initial keystore setup\n  and CSR generation on the agent/hosts.\n- A script `keystore-cert-import` is responsible for import provided\n  certificate payload to the java keystore file.\n- Agent security (keystore.  certificates etc) are setup initially using\n  SSH.  and later provisioning is handled via an existing agent connection\n  using command-answers. The supported clients and agents are limited to\n  CPVM.  SSVM.  and KVM agents.  and clustered management server (peering).\n- Certificate revocation does not revoke an existing agent-mgmt server\n  connection.  however rejects a revoked certificate used during SSL\n  handshake.\n- Older `cloudstackmanagement.keystore` is deprecated and will no longer\n  be used by mgmt server(s) for SSL negotiations and handshake. New\n  keystores will be named `cloud.jks`.  any additional SSL certificates\n  should not be imported in it for use with tomcat etc. The `cloud.jks`\n  keystore is stricly used for agent-server communications.\n- Management server keystore are validated and renewed on start up only. \n  the validity of them are same as the CA certificates.\n\nNew APIs:\n- listCaProviders: lists all available CA provider plugins\n- listCaCertificate: lists the CA certificate(s)\n- issueCertificate: issues X509 client certificate with/without a CSR\n- provisionCertificate: provisions certificate to a host\n- revokeCertificate: revokes a client certificate using its serial\n\nGlobal settings for the CA framework:\n- ca.framework.provider.plugin: The configured CA provider plugin\n- ca.framework.cert.keysize: The key size for certificate generation\n- ca.framework.cert.signature.algorithm: The certificate signature algorithm\n- ca.framework.cert.validity.period: Certificate validity in days\n- ca.framework.cert.automatic.renewal: Certificate auto-renewal setting\n- ca.framework.background.task.delay: CA background task delay/interval\n- ca.framework.cert.expiry.alert.period: Days to check and alert expiring certificates\n\nGlobal settings for the default 'root' CA provider:\n- ca.plugin.root.private.key: (hidden/encrypted) CA private key\n- ca.plugin.root.public.key: (hidden/encrypted) CA public key\n- ca.plugin.root.ca.certificate: (hidden/encrypted) CA certificate\n- ca.plugin.root.issuer.dn: The CA issue distinguished name\n- ca.plugin.root.auth.strictness: Are clients required to present certificates\n- ca.plugin.root.allow.expired.cert: Are clients with expired certificates allowed\n\nUI changes:\n- Button to download/save the CA certificates.\n\nMisc changes:\n- Upgrades bountycastle version and uses newer classes\n- Refactors SAMLUtil to use new CertUtils\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2017-08-28 18:15:11","modifiedFileCount":"49","status":"B","submitter":"Rohit Yadav"},{"authorTime":"2017-08-28 18:15:11","codes":[{"authorDate":"2018-10-05 07:48:42","commitOrder":2,"curCode":"    public static String privateKeyToPem(final PrivateKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"PRIVATE KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","date":"2018-10-05 07:48:42","endLine":139,"groupId":"102716","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"privateKeyToPem","params":"(finalPrivateKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d3/57d6d0528e946d13d2c7bfc7fa33cb17352a03.src","preCode":"    public static String privateKeyToPem(final PrivateKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"RSA PRIVATE KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","realPath":"utils/src/main/java/org/apache/cloudstack/utils/security/CertUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2017-08-28 18:15:11","commitOrder":2,"curCode":"    public static String publicKeyToPem(final PublicKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"PUBLIC KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","date":"2017-08-28 18:15:11","endLine":154,"groupId":"102716","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"publicKeyToPem","params":"(finalPublicKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c2/ef9edb8c408e30edf40516e6ac0807835781e1.src","preCode":"    public static String publicKeyToPem(final PublicKey key) throws IOException {\n        final PemObject pemObject = new PemObject(\"PUBLIC KEY\", key.getEncoded());\n        final StringWriter sw = new StringWriter();\n        try (final PemWriter pw = new PemWriter(sw)) {\n            pw.writeObject(pemObject);\n        }\n        return sw.toString();\n    }\n","realPath":"utils/src/main/java/org/apache/cloudstack/utils/security/CertUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"}],"commitId":"b6302d4e900e6eee53d6b700d85a7e81d4af5b9e","commitMessage":"@@@Merge remote-tracking branch 'origin/4.11'\n\nConflicts resolved for:\n\tengine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\tengine/schema/src/com/cloud/vm/dao/UserVmDaoImpl.java\nserver/src/com/cloud/network/element/VirtualRouterElement.java\nserver/src/com/cloud/vm/UserVmManagerImpl.java\ntools/marvin/setup.py\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-10-05 07:48:42","modifiedFileCount":"7","status":"M","submitter":"Rohit Yadav"}]
