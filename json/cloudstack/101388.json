[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected Vector<String> deleteIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        Vector<String> problemIPs = null;\n        if (type.equals(\"public\")) {\n            problemIPs = deletePublicIPRange(txn, startIPLong, endIPLong, vlanDbId);\n        } else if (type.equals(\"private\")) {\n            problemIPs = deletePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        return problemIPs;\n    }\n","date":"2018-01-20 05:49:27","endLine":314,"groupId":"5633","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteIPRange","params":"(Stringtype@longpodId@longzoneId@longvlanDbId@StringstartIP@StringendIP)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/0c828a828dde0f3b4c1fb5780fa729c54c3d94.src","preCode":"    protected Vector<String> deleteIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        Vector<String> problemIPs = null;\n        if (type.equals(\"public\")) {\n            problemIPs = deletePublicIPRange(txn, startIPLong, endIPLong, vlanDbId);\n        } else if (type.equals(\"private\")) {\n            problemIPs = deletePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        return problemIPs;\n    }\n","realPath":"server/src/main/java/com/cloud/test/IPRangeConfig.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<String> saveIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP, Long sourceNetworkId, long physicalNetworkId) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        List<String> problemIPs = null;\n\n        if (type.equals(\"public\")) {\n            problemIPs = savePublicIPRange(txn, startIPLong, endIPLong, zoneId, vlanDbId, sourceNetworkId, physicalNetworkId, false);\n        } else if (type.equals(\"private\")) {\n            problemIPs = savePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        String[] linkLocalIps = NetUtils.getLinkLocalIPRange(10);\n        long startLinkLocalIp = NetUtils.ip2Long(linkLocalIps[0]);\n        long endLinkLocalIp = NetUtils.ip2Long(linkLocalIps[1]);\n\n        saveLinkLocalPrivateIPRange(txn, startLinkLocalIp, endLinkLocalIp, podId, zoneId);\n\n        return problemIPs;\n    }\n","date":"2018-01-20 05:49:27","endLine":446,"groupId":"5637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"saveIPRange","params":"(Stringtype@longpodId@longzoneId@longvlanDbId@StringstartIP@StringendIP@LongsourceNetworkId@longphysicalNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/0c828a828dde0f3b4c1fb5780fa729c54c3d94.src","preCode":"    public List<String> saveIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP, Long sourceNetworkId, long physicalNetworkId) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        List<String> problemIPs = null;\n\n        if (type.equals(\"public\")) {\n            problemIPs = savePublicIPRange(txn, startIPLong, endIPLong, zoneId, vlanDbId, sourceNetworkId, physicalNetworkId, false);\n        } else if (type.equals(\"private\")) {\n            problemIPs = savePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        String[] linkLocalIps = NetUtils.getLinkLocalIPRange(10);\n        long startLinkLocalIp = NetUtils.ip2Long(linkLocalIps[0]);\n        long endLinkLocalIp = NetUtils.ip2Long(linkLocalIps[1]);\n\n        saveLinkLocalPrivateIPRange(txn, startLinkLocalIp, endLinkLocalIp, podId, zoneId);\n\n        return problemIPs;\n    }\n","realPath":"server/src/main/java/com/cloud/test/IPRangeConfig.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-07-25 14:43:39","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected Vector<String> deleteIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        Vector<String> problemIPs = null;\n        if (type.equals(\"public\")) {\n            problemIPs = deletePublicIPRange(txn, startIPLong, endIPLong, vlanDbId);\n        } else if (type.equals(\"private\")) {\n            problemIPs = deletePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        return problemIPs;\n    }\n","date":"2018-01-20 05:49:27","endLine":314,"groupId":"101388","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteIPRange","params":"(Stringtype@longpodId@longzoneId@longvlanDbId@StringstartIP@StringendIP)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/0c828a828dde0f3b4c1fb5780fa729c54c3d94.src","preCode":"    protected Vector<String> deleteIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        Vector<String> problemIPs = null;\n        if (type.equals(\"public\")) {\n            problemIPs = deletePublicIPRange(txn, startIPLong, endIPLong, vlanDbId);\n        } else if (type.equals(\"private\")) {\n            problemIPs = deletePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        return problemIPs;\n    }\n","realPath":"server/src/main/java/com/cloud/test/IPRangeConfig.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"},{"authorDate":"2019-07-25 14:43:39","commitOrder":2,"curCode":"    public List<String> saveIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP, Long sourceNetworkId, long physicalNetworkId) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        List<String> problemIPs = null;\n\n        if (type.equals(\"public\")) {\n            problemIPs = savePublicIPRange(txn, startIPLong, endIPLong, zoneId, vlanDbId, sourceNetworkId, physicalNetworkId, false);\n        } else if (type.equals(\"private\")) {\n            problemIPs = savePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        String[] linkLocalIps = NetUtils.getLinkLocalIPRange(\"169.254.0.0/16\");\n        long startLinkLocalIp = NetUtils.ip2Long(linkLocalIps[0]);\n        long endLinkLocalIp = NetUtils.ip2Long(linkLocalIps[1]);\n\n        saveLinkLocalPrivateIPRange(txn, startLinkLocalIp, endLinkLocalIp, podId, zoneId);\n\n        return problemIPs;\n    }\n","date":"2019-07-25 14:43:39","endLine":446,"groupId":"101388","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"saveIPRange","params":"(Stringtype@longpodId@longzoneId@longvlanDbId@StringstartIP@StringendIP@LongsourceNetworkId@longphysicalNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f3/5989102dd1b68d80124f4dfe037d35c154d313.src","preCode":"    public List<String> saveIPRange(String type, long podId, long zoneId, long vlanDbId, String startIP, String endIP, Long sourceNetworkId, long physicalNetworkId) {\n        long startIPLong = NetUtils.ip2Long(startIP);\n        long endIPLong = startIPLong;\n        if (endIP != null) {\n            endIPLong = NetUtils.ip2Long(endIP);\n        }\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        List<String> problemIPs = null;\n\n        if (type.equals(\"public\")) {\n            problemIPs = savePublicIPRange(txn, startIPLong, endIPLong, zoneId, vlanDbId, sourceNetworkId, physicalNetworkId, false);\n        } else if (type.equals(\"private\")) {\n            problemIPs = savePrivateIPRange(txn, startIPLong, endIPLong, podId, zoneId);\n        }\n\n        String[] linkLocalIps = NetUtils.getLinkLocalIPRange(10);\n        long startLinkLocalIp = NetUtils.ip2Long(linkLocalIps[0]);\n        long endLinkLocalIp = NetUtils.ip2Long(linkLocalIps[1]);\n\n        saveLinkLocalPrivateIPRange(txn, startLinkLocalIp, endLinkLocalIp, podId, zoneId);\n\n        return problemIPs;\n    }\n","realPath":"server/src/main/java/com/cloud/test/IPRangeConfig.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"e894658f8c3584f572a5e6c5fe292a2bae03c79c","commitMessage":"@@@kvm: Allow Link Local Cidr (cloud0 interface) to be configured (#3500)\n\nThere are certain scenarios where the 169.254.0.0/16 subnet is used for different\npurposes then CloudStack on a hypervisor.\n\nOnce of such scenarios is a BGP+EVPN+VXLAN setup using BGP Unnumbered where the\n169.254.0.1 address is used by Frr/Zebra BGP routing to send traffic to the\nneighboring router.\n\nThe following settings can be changed in the agent.properties (default values added):\n\ncontrol.cidr=169.254.0.0/16\n\nMake sure the global setting 'control.cidr' matches the values defined in the agent.propeties!\n\nIn the future the mgmt server can send this parameter to a KVM Agent on startup.  but at the moment\nthis framework is not in place and thus these values can't be send to the Agent in a proper manner.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2019-07-25 14:43:39","modifiedFileCount":"9","status":"M","submitter":"Wido den Hollander"}]
