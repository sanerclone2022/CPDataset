[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Snapshot allocSnapshot(Long volumeId, Long policyId, String snapshotName, Snapshot.LocationType locationType) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if (ImageFormat.DIR.equals(volume.getFormat())){\n            throw new InvalidParameterValueException(\"Snapshot not supported for volume:\" + volumeId);\n        }\n\n        if (volume.getTemplateId() != null) {\n            VMTemplateVO template = _templateDao.findById(volume.getTemplateId());\n            if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (!storagePoolVO.isManaged() && locationType != null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" LocationType is supported only for managed storage\");\n        }\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, policyId, snapshotName, locationType);\n    }\n","date":"2018-01-20 05:49:27","endLine":2305,"groupId":"24404","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"allocSnapshot","params":"(LongvolumeId@LongpolicyId@StringsnapshotName@Snapshot.LocationTypelocationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/be/a9b4ad5bfb40d1fc2f11f88b454aac2e518b50.src","preCode":"    public Snapshot allocSnapshot(Long volumeId, Long policyId, String snapshotName, Snapshot.LocationType locationType) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if (ImageFormat.DIR.equals(volume.getFormat())){\n            throw new InvalidParameterValueException(\"Snapshot not supported for volume:\" + volumeId);\n        }\n\n        if (volume.getTemplateId() != null) {\n            VMTemplateVO template = _templateDao.findById(volume.getTemplateId());\n            if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (!storagePoolVO.isManaged() && locationType != null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" LocationType is supported only for managed storage\");\n        }\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, policyId, snapshotName, locationType);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2258,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Snapshot allocSnapshotForVm(Long vmId, Long volumeId, String snapshotName) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        VMInstanceVO vm = _vmInstanceDao.findById(vmId);\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to vm:\" + vmId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, vm);\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, volume);\n        VirtualMachine attachVM = volume.getAttachedVM();\n        if (attachVM == null || attachVM.getId() != vm.getId()) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't attach to vm :\" + vm);\n        }\n\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if ( volume.getTemplateId() != null ) {\n            VMTemplateVO  template = _templateDao.findById(volume.getTemplateId());\n            if( template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM ) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, Snapshot.MANUAL_POLICY_ID, snapshotName, null);\n    }\n","date":"2018-01-20 05:49:27","endLine":2352,"groupId":"1225","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"allocSnapshotForVm","params":"(LongvmId@LongvolumeId@StringsnapshotName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/be/a9b4ad5bfb40d1fc2f11f88b454aac2e518b50.src","preCode":"    public Snapshot allocSnapshotForVm(Long vmId, Long volumeId, String snapshotName) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        VMInstanceVO vm = _vmInstanceDao.findById(vmId);\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to vm:\" + vmId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, vm);\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, volume);\n        VirtualMachine attachVM = volume.getAttachedVM();\n        if (attachVM == null || attachVM.getId() != vm.getId()) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't attach to vm :\" + vm);\n        }\n\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if ( volume.getTemplateId() != null ) {\n            VMTemplateVO  template = _templateDao.findById(volume.getTemplateId());\n            if( template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM ) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, Snapshot.MANUAL_POLICY_ID, snapshotName, null);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2308,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2021-02-24 17:28:33","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Snapshot allocSnapshot(Long volumeId, Long policyId, String snapshotName, Snapshot.LocationType locationType) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if (ImageFormat.DIR.equals(volume.getFormat())){\n            throw new InvalidParameterValueException(\"Snapshot not supported for volume:\" + volumeId);\n        }\n\n        if (volume.getTemplateId() != null) {\n            VMTemplateVO template = _templateDao.findById(volume.getTemplateId());\n            if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (!storagePoolVO.isManaged() && locationType != null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" LocationType is supported only for managed storage\");\n        }\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, policyId, snapshotName, locationType);\n    }\n","date":"2018-01-20 05:49:27","endLine":2305,"groupId":"101959","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"allocSnapshot","params":"(LongvolumeId@LongpolicyId@StringsnapshotName@Snapshot.LocationTypelocationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/be/a9b4ad5bfb40d1fc2f11f88b454aac2e518b50.src","preCode":"    public Snapshot allocSnapshot(Long volumeId, Long policyId, String snapshotName, Snapshot.LocationType locationType) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if (ImageFormat.DIR.equals(volume.getFormat())){\n            throw new InvalidParameterValueException(\"Snapshot not supported for volume:\" + volumeId);\n        }\n\n        if (volume.getTemplateId() != null) {\n            VMTemplateVO template = _templateDao.findById(volume.getTemplateId());\n            if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (!storagePoolVO.isManaged() && locationType != null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" LocationType is supported only for managed storage\");\n        }\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, policyId, snapshotName, locationType);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2258,"status":"N"},{"authorDate":"2021-02-24 17:28:33","commitOrder":2,"curCode":"    public Snapshot allocSnapshotForVm(Long vmId, Long volumeId, String snapshotName) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        VMInstanceVO vm = _vmInstanceDao.findById(vmId);\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to vm:\" + vmId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, vm);\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, volume);\n        VirtualMachine attachVM = volume.getAttachedVM();\n        if (attachVM == null || attachVM.getId() != vm.getId()) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't attach to vm :\" + vm);\n        }\n\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if (volume.getTemplateId() != null) {\n            VMTemplateVO template = _templateDao.findById(volume.getTemplateId());\n            if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        if (storagePool.getPoolType() == Storage.StoragePoolType.PowerFlex) {\n            throw new InvalidParameterValueException(\"Cannot perform this operation, unsupported on storage pool type \" + storagePool.getPoolType());\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, Snapshot.MANUAL_POLICY_ID, snapshotName, null);\n    }\n","date":"2021-02-24 17:28:33","endLine":2809,"groupId":"101959","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"allocSnapshotForVm","params":"(LongvmId@LongvolumeId@StringsnapshotName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6f/362a7720f196a33610c1a0f51728a98c277271.src","preCode":"    public Snapshot allocSnapshotForVm(Long vmId, Long volumeId, String snapshotName) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        VMInstanceVO vm = _vmInstanceDao.findById(vmId);\n        if (vm == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to vm:\" + vmId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, vm);\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccess(caller, null, true, volume);\n        VirtualMachine attachVM = volume.getAttachedVM();\n        if (attachVM == null || attachVM.getId() != vm.getId()) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't attach to vm :\" + vm);\n        }\n\n        DataCenter zone = _dcDao.findById(volume.getDataCenterId());\n        if (zone == null) {\n            throw new InvalidParameterValueException(\"Can't find zone by id \" + volume.getDataCenterId());\n        }\n\n        if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {\n            throw new PermissionDeniedException(\"Cannot perform this operation, Zone is currently disabled: \" + zone.getName());\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        if (volume.getTemplateId() != null) {\n            VMTemplateVO template = _templateDao.findById(volume.getTemplateId());\n            if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {\n                throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is for System VM , Creating snapshot against System VM volumes is not supported\");\n            }\n        }\n\n        StoragePool storagePool = (StoragePool)volume.getDataStore();\n        if (storagePool == null) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" please attach this volume to a VM before create snapshot for it\");\n        }\n\n        return snapshotMgr.allocSnapshot(volumeId, Snapshot.MANUAL_POLICY_ID, snapshotName, null);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2761,"status":"M"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"}]
