[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIp = new ArrayList<String>();\n        List<String> endIp = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                startIp.add(((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\");\n                endIp.add(((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\");\n                forSystemVms.add((existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\");\n                vlanIds.add((existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange.equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString());\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setStartIp(startIp);\n        podResponse.setEndIp(endIp);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":1032,"groupId":"17553","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPodResponse","params":"(Podpod@BooleanshowCapacities)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIp = new ArrayList<String>();\n        List<String> endIp = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                startIp.add(((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\");\n                endIp.add(((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\");\n                forSystemVms.add((existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\");\n                vlanIds.add((existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange.equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString());\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setStartIp(startIp);\n        podResponse.setEndIp(endIp);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":966,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","date":"2018-01-20 05:49:27","endLine":1067,"groupId":"11152","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataCenterCapacityResponse","params":"(LongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-01-25 06:22:39","commitOrder":2,"curCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIp = new ArrayList<String>();\n        List<String> endIp = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                startIp.add(((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\");\n                endIp.add(((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\");\n                forSystemVms.add((existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\");\n                vlanIds.add((existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange[3].equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString());\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setStartIp(startIp);\n        podResponse.setEndIp(endIp);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","date":"2019-01-25 06:22:39","endLine":1032,"groupId":"22622","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createPodResponse","params":"(Podpod@BooleanshowCapacities)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/15/3eafd242598b97a9e333d7697324b6d2243101.src","preCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIp = new ArrayList<String>();\n        List<String> endIp = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                startIp.add(((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\");\n                endIp.add(((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\");\n                forSystemVms.add((existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\");\n                vlanIds.add((existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange.equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString());\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setStartIp(startIp);\n        podResponse.setEndIp(endIp);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":966,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","date":"2018-01-20 05:49:27","endLine":1067,"groupId":"11152","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataCenterCapacityResponse","params":"(LongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"N"}],"commitId":"97ddd8dffd4d2c2892ae006ce05fb11271f477ed","commitMessage":"@@@Fix some LGTM alerts (#3143)\n\n* Fix some LGTM alerts\n\n* address review comments from Gabriel Brascher and Rafael Weingartner\n","date":"2019-01-25 06:22:39","modifiedFileCount":"6","status":"M","submitter":"Malcolm Taylor"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":3,"curCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIp = new ArrayList<String>();\n        List<String> endIp = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                startIp.add(((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\");\n                endIp.add(((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\");\n                forSystemVms.add((existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\");\n                vlanIds.add((existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange[3].equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString());\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setStartIp(startIp);\n        podResponse.setEndIp(endIp);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setHasAnnotation(annotationDao.hasAnnotations(pod.getUuid(), AnnotationService.EntityType.POD.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","date":"2021-09-08 12:44:06","endLine":1151,"groupId":"22622","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createPodResponse","params":"(Podpod@BooleanshowCapacities)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/09/057e64277064de5378a7fe24c49ae6e03c0ae7.src","preCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIp = new ArrayList<String>();\n        List<String> endIp = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                startIp.add(((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\");\n                endIp.add(((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\");\n                forSystemVms.add((existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\");\n                vlanIds.add((existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange[3].equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString());\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setStartIp(startIp);\n        podResponse.setEndIp(endIp);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1083,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","date":"2018-01-20 05:49:27","endLine":1067,"groupId":"11152","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataCenterCapacityResponse","params":"(LongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"N"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-15 17:16:42","commitOrder":4,"curCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIps = new ArrayList<String>();\n        List<String> endIps = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        List<IpRangeResponse> ipRanges = new ArrayList<>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                IpRangeResponse ipRangeResponse = new IpRangeResponse();\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                String startIp = ((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\";\n                ipRangeResponse.setStartIp(startIp);\n                startIps.add(startIp);\n\n                String endIp = ((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\";\n                ipRangeResponse.setEndIp(endIp);\n                endIps.add(endIp);\n\n                String forSystemVm = (existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\";\n                ipRangeResponse.setForSystemVms(forSystemVm);\n                forSystemVms.add(forSystemVm);\n\n                String vlanId = (existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange[3].equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString();\n                ipRangeResponse.setVlanId(vlanId);\n                vlanIds.add(vlanId);\n\n                ipRanges.add(ipRangeResponse);\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setIpRanges(ipRanges);\n        podResponse.setStartIp(startIps);\n        podResponse.setEndIp(endIps);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacities(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setHasAnnotation(annotationDao.hasAnnotations(pod.getUuid(), AnnotationService.EntityType.POD.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","date":"2021-09-15 17:16:42","endLine":1171,"groupId":"101445","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createPodResponse","params":"(Podpod@BooleanshowCapacities)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/4402a6e45b488a27bc5e2514f779d5006d6ad6.src","preCode":"    public PodResponse createPodResponse(Pod pod, Boolean showCapacities) {\n        String[] ipRange = new String[2];\n        List<String> startIp = new ArrayList<String>();\n        List<String> endIp = new ArrayList<String>();\n        List<String> forSystemVms = new ArrayList<String>();\n        List<String> vlanIds = new ArrayList<String>();\n\n        if (pod.getDescription() != null && pod.getDescription().length() > 0) {\n            final String[] existingPodIpRanges = pod.getDescription().split(\",\");\n\n            for(String podIpRange: existingPodIpRanges) {\n                final String[] existingPodIpRange = podIpRange.split(\"-\");\n\n                startIp.add(((existingPodIpRange.length > 0) && (existingPodIpRange[0] != null)) ? existingPodIpRange[0] : \"\");\n                endIp.add(((existingPodIpRange.length > 1) && (existingPodIpRange[1] != null)) ? existingPodIpRange[1] : \"\");\n                forSystemVms.add((existingPodIpRange.length > 2) && (existingPodIpRange[2] != null) ? existingPodIpRange[2] : \"0\");\n                vlanIds.add((existingPodIpRange.length > 3) &&\n                        (existingPodIpRange[3] != null && !existingPodIpRange[3].equals(\"untagged\")) ?\n                        BroadcastDomainType.Vlan.toUri(existingPodIpRange[3]).toString() :\n                        BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString());\n            }\n        }\n\n        PodResponse podResponse = new PodResponse();\n        podResponse.setId(pod.getUuid());\n        podResponse.setName(pod.getName());\n        DataCenter zone = ApiDBUtils.findZoneById(pod.getDataCenterId());\n        if (zone != null) {\n            podResponse.setZoneId(zone.getUuid());\n            podResponse.setZoneName(zone.getName());\n        }\n        podResponse.setNetmask(NetUtils.getCidrNetmask(pod.getCidrSize()));\n        podResponse.setStartIp(startIp);\n        podResponse.setEndIp(endIp);\n        podResponse.setForSystemVms(forSystemVms);\n        podResponse.setVlanId(vlanIds);\n        podResponse.setGateway(pod.getGateway());\n        podResponse.setAllocationState(pod.getAllocationState().toString());\n        if (showCapacities != null && showCapacities) {\n            List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(null, pod.getId(), null);\n            Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n            for (SummedCapacity capacity : capacities) {\n                CapacityResponse capacityResponse = new CapacityResponse();\n                capacityResponse.setCapacityType(capacity.getCapacityType());\n                capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n                if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                    List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(null, pod.getId(), null);\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                    capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n                } else {\n                    capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n                }\n                if (capacityResponse.getCapacityTotal() != 0) {\n                    capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n                } else {\n                    capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n                }\n                capacityResponses.add(capacityResponse);\n            }\n            \r\n            capacityResponses.addAll(getStatsCapacityresponse(null, null, pod.getId(), pod.getDataCenterId()));\n            podResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));\n        }\n        podResponse.setHasAnnotation(annotationDao.hasAnnotations(pod.getUuid(), AnnotationService.EntityType.POD.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n        podResponse.setObjectName(\"pod\");\n        return podResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1086,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","date":"2018-01-20 05:49:27","endLine":1067,"groupId":"101445","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getDataCenterCapacityResponse","params":"(LongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public static List<CapacityResponse> getDataCenterCapacityResponse(Long zoneId) {\n        List<SummedCapacity> capacities = ApiDBUtils.getCapacityByClusterPodZone(zoneId, null, null);\n        Set<CapacityResponse> capacityResponses = new HashSet<CapacityResponse>();\n\n        for (SummedCapacity capacity : capacities) {\n            CapacityResponse capacityResponse = new CapacityResponse();\n            capacityResponse.setCapacityType(capacity.getCapacityType());\n            capacityResponse.setCapacityName(CapacityVO.getCapacityName(capacity.getCapacityType()));\n            capacityResponse.setCapacityUsed(capacity.getUsedCapacity() + capacity.getReservedCapacity());\n            if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {\n                List<SummedCapacity> c = ApiDBUtils.findNonSharedStorageForClusterPodZone(zoneId, null, null);\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());\n                capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());\n            } else {\n                capacityResponse.setCapacityTotal(capacity.getTotalCapacity());\n            }\n            if (capacityResponse.getCapacityTotal() != 0) {\n                capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));\n            } else {\n                capacityResponse.setPercentUsed(s_percentFormat.format(0L));\n            }\n            capacityResponses.add(capacityResponse);\n        }\n        \r\n        capacityResponses.addAll(getStatsCapacityresponse(null, null, null, zoneId));\n\n        return new ArrayList<CapacityResponse>(capacityResponses);\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"N"}],"commitId":"1f3f02b46963b5e7ca4ba2b8e6df22738262cdc6","commitMessage":"@@@api: Updated pod response.  moved the parameters: startip.  endip.  vlanid.  forsystemvms to ipranges (new parameter to hold the list of IP range details). (#5424)\n\nThis PR updates the pod response.  grouped the parameters: startip.  endip.  vlanid.  forsystemvms as ip range response and added to ipranges parameter (a new parameter to hold the list of IP range details).","date":"2021-09-15 17:16:42","modifiedFileCount":"3","status":"M","submitter":"sureshanaparti"}]
