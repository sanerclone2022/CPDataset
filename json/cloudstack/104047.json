[{"authorTime":"2015-08-26 02:44:50","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testStartCommandHostMemory() {\n        final VirtualMachineTO vmSpec = Mockito.mock(VirtualMachineTO.class);\n        final com.cloud.host.Host host = Mockito.mock(com.cloud.host.Host.class);\n        final boolean executeInSequence = false;\n\n        final StartCommand command = new StartCommand(vmSpec, host, executeInSequence);\n\n        final KVMStoragePoolManager storagePoolMgr = Mockito.mock(KVMStoragePoolManager.class);\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final LibvirtVMDef vmDef = Mockito.mock(LibvirtVMDef.class);\n\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final NicTO[] nics = new NicTO[]{nic};\n        int vmId = 1;\n        final int[] vms = new int[]{vmId};\n        final Domain dm = Mockito.mock(Domain.class);\n\n        final String vmName = \"Test\";\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);\n        when(vmSpec.getNics()).thenReturn(nics);\n        when(vmSpec.getType()).thenReturn(VirtualMachine.Type.User);\n        when(vmSpec.getName()).thenReturn(vmName);\n        when(vmSpec.getMaxRam()).thenReturn(512L);\n        when(libvirtComputingResource.createVMFromSpec(vmSpec)).thenReturn(vmDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByType(vmDef.getHvsType())).thenReturn(conn);\n            when(conn.listDomains()).thenReturn(vms);\n            when(conn.domainLookupByID(vmId)).thenReturn(dm);\n            when(dm.getMaxMemory()).thenReturn(1024L);\n            when(dm.getName()).thenReturn(vmName);\n            when(libvirtComputingResource.getTotalMemory()).thenReturn(2048*1024L);\n            doNothing().when(libvirtComputingResource).createVbd(conn, vmSpec, vmName, vmDef);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        } catch (final InternalErrorException e) {\n            fail(e.getMessage());\n        } catch (final URISyntaxException e) {\n            fail(e.getMessage());\n        }\n\n        when(storagePoolMgr.connectPhysicalDisksViaVmSpec(vmSpec)).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n    }\n","date":"2018-01-20 05:49:27","endLine":5053,"groupId":"11640","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStartCommandHostMemory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testStartCommandHostMemory() {\n        final VirtualMachineTO vmSpec = Mockito.mock(VirtualMachineTO.class);\n        final com.cloud.host.Host host = Mockito.mock(com.cloud.host.Host.class);\n        final boolean executeInSequence = false;\n\n        final StartCommand command = new StartCommand(vmSpec, host, executeInSequence);\n\n        final KVMStoragePoolManager storagePoolMgr = Mockito.mock(KVMStoragePoolManager.class);\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final LibvirtVMDef vmDef = Mockito.mock(LibvirtVMDef.class);\n\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final NicTO[] nics = new NicTO[]{nic};\n        int vmId = 1;\n        final int[] vms = new int[]{vmId};\n        final Domain dm = Mockito.mock(Domain.class);\n\n        final String vmName = \"Test\";\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);\n        when(vmSpec.getNics()).thenReturn(nics);\n        when(vmSpec.getType()).thenReturn(VirtualMachine.Type.User);\n        when(vmSpec.getName()).thenReturn(vmName);\n        when(vmSpec.getMaxRam()).thenReturn(512L);\n        when(libvirtComputingResource.createVMFromSpec(vmSpec)).thenReturn(vmDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByType(vmDef.getHvsType())).thenReturn(conn);\n            when(conn.listDomains()).thenReturn(vms);\n            when(conn.domainLookupByID(vmId)).thenReturn(dm);\n            when(dm.getMaxMemory()).thenReturn(1024L);\n            when(dm.getName()).thenReturn(vmName);\n            when(libvirtComputingResource.getTotalMemory()).thenReturn(2048*1024L);\n            doNothing().when(libvirtComputingResource).createVbd(conn, vmSpec, vmName, vmDef);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        } catch (final InternalErrorException e) {\n            fail(e.getMessage());\n        } catch (final URISyntaxException e) {\n            fail(e.getMessage());\n        }\n\n        when(storagePoolMgr.connectPhysicalDisksViaVmSpec(vmSpec)).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5002,"status":"B"},{"authorDate":"2015-08-26 02:44:50","commitOrder":2,"curCode":"    public void testDeleteLogicalRouterCommand() {\n        final NiciraNvpApi niciraNvpApi = Mockito.mock(NiciraNvpApi.class);\n\n        final String logicalRouterUuid = \"d2e05a9e-7120-4487-a5fc-414ab36d9345\";\n\n        final DeleteLogicalRouterCommand command = new DeleteLogicalRouterCommand(logicalRouterUuid);\n\n        when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);\n\n        try {\n            doNothing().when(niciraNvpApi).deleteLogicalRouter(command.getLogicalRouterUuid());\n        } catch (final NiciraNvpApiException e) {\n            fail(e.getMessage());\n        }\n\n        final NiciraNvpRequestWrapper wrapper = NiciraNvpRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, niciraNvpResource);\n\n        assertTrue(answer.getResult());\n    }\n","date":"2015-08-26 02:44:52","endLine":217,"groupId":"19455","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"testDeleteLogicalRouterCommand","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/be/b40591305607ea4e1226ee41008f91af77571a.src","preCode":"    public void testDeleteLogicalRouterCommand() {\n        final NiciraNvpApi niciraNvpApi = Mockito.mock(NiciraNvpApi.class);\n\n        final String logicalRouterUuid = \"d2e05a9e-7120-4487-a5fc-414ab36d9345\";\n\n        final DeleteLogicalRouterCommand command = new DeleteLogicalRouterCommand(logicalRouterUuid);\n\n        when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);\n\n        try {\n            doNothing().when(niciraNvpApi).deleteLogicalRouter(command.getLogicalRouterUuid());\n        } catch (final NiciraNvpApiException e) {\n            fail(e.getMessage());\n        }\n\n        final NiciraNvpRequestWrapper wrapper = NiciraNvpRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, niciraNvpResource);\n\n        assertTrue(answer.getResult());\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/NiciraNvpRequestWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"NB"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"M","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2015-08-26 02:44:50","codes":[{"authorDate":"2018-08-08 14:44:26","commitOrder":3,"curCode":"    public void testStartCommandHostMemory() {\n        final VirtualMachineTO vmSpec = Mockito.mock(VirtualMachineTO.class);\n        final com.cloud.host.Host host = Mockito.mock(com.cloud.host.Host.class);\n        final boolean executeInSequence = false;\n\n        final StartCommand command = new StartCommand(vmSpec, host, executeInSequence);\n\n        final KVMStoragePoolManager storagePoolMgr = Mockito.mock(KVMStoragePoolManager.class);\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final LibvirtVMDef vmDef = Mockito.mock(LibvirtVMDef.class);\n\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final NicTO[] nics = new NicTO[]{nic};\n        int vmId = 1;\n        final int[] vms = new int[]{vmId};\n        final Domain dm = Mockito.mock(Domain.class);\n\n        final String vmName = \"Test\";\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);\n        when(vmSpec.getNics()).thenReturn(nics);\n        when(vmSpec.getType()).thenReturn(VirtualMachine.Type.User);\n        when(vmSpec.getName()).thenReturn(vmName);\n        when(vmSpec.getMaxRam()).thenReturn(512L);\n        when(libvirtComputingResource.createVMFromSpec(vmSpec)).thenReturn(vmDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByType(vmDef.getHvsType())).thenReturn(conn);\n            when(conn.listDomains()).thenReturn(vms);\n            when(conn.domainLookupByID(vmId)).thenReturn(dm);\n            when(dm.getMaxMemory()).thenReturn(1024L);\n            when(dm.getName()).thenReturn(vmName);\n            doNothing().when(libvirtComputingResource).createVbd(conn, vmSpec, vmName, vmDef);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        } catch (final InternalErrorException e) {\n            fail(e.getMessage());\n        } catch (final URISyntaxException e) {\n            fail(e.getMessage());\n        }\n\n        when(storagePoolMgr.connectPhysicalDisksViaVmSpec(vmSpec)).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n    }\n","date":"2018-08-08 14:44:26","endLine":5057,"groupId":"104047","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStartCommandHostMemory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ad/adc1f4671a402abbad2909b99cc72afdbc16b7.src","preCode":"    public void testStartCommandHostMemory() {\n        final VirtualMachineTO vmSpec = Mockito.mock(VirtualMachineTO.class);\n        final com.cloud.host.Host host = Mockito.mock(com.cloud.host.Host.class);\n        final boolean executeInSequence = false;\n\n        final StartCommand command = new StartCommand(vmSpec, host, executeInSequence);\n\n        final KVMStoragePoolManager storagePoolMgr = Mockito.mock(KVMStoragePoolManager.class);\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final LibvirtVMDef vmDef = Mockito.mock(LibvirtVMDef.class);\n\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final NicTO[] nics = new NicTO[]{nic};\n        int vmId = 1;\n        final int[] vms = new int[]{vmId};\n        final Domain dm = Mockito.mock(Domain.class);\n\n        final String vmName = \"Test\";\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);\n        when(vmSpec.getNics()).thenReturn(nics);\n        when(vmSpec.getType()).thenReturn(VirtualMachine.Type.User);\n        when(vmSpec.getName()).thenReturn(vmName);\n        when(vmSpec.getMaxRam()).thenReturn(512L);\n        when(libvirtComputingResource.createVMFromSpec(vmSpec)).thenReturn(vmDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByType(vmDef.getHvsType())).thenReturn(conn);\n            when(conn.listDomains()).thenReturn(vms);\n            when(conn.domainLookupByID(vmId)).thenReturn(dm);\n            when(dm.getMaxMemory()).thenReturn(1024L);\n            when(dm.getName()).thenReturn(vmName);\n            when(libvirtComputingResource.getTotalMemory()).thenReturn(2048*1024L);\n            doNothing().when(libvirtComputingResource).createVbd(conn, vmSpec, vmName, vmDef);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        } catch (final InternalErrorException e) {\n            fail(e.getMessage());\n        } catch (final URISyntaxException e) {\n            fail(e.getMessage());\n        }\n\n        when(storagePoolMgr.connectPhysicalDisksViaVmSpec(vmSpec)).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5007,"status":"M"},{"authorDate":"2015-08-26 02:44:50","commitOrder":3,"curCode":"    public void testDeleteLogicalRouterCommand() {\n        final NiciraNvpApi niciraNvpApi = Mockito.mock(NiciraNvpApi.class);\n\n        final String logicalRouterUuid = \"d2e05a9e-7120-4487-a5fc-414ab36d9345\";\n\n        final DeleteLogicalRouterCommand command = new DeleteLogicalRouterCommand(logicalRouterUuid);\n\n        when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);\n\n        try {\n            doNothing().when(niciraNvpApi).deleteLogicalRouter(command.getLogicalRouterUuid());\n        } catch (final NiciraNvpApiException e) {\n            fail(e.getMessage());\n        }\n\n        final NiciraNvpRequestWrapper wrapper = NiciraNvpRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, niciraNvpResource);\n\n        assertTrue(answer.getResult());\n    }\n","date":"2015-08-26 02:44:52","endLine":217,"groupId":"104047","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDeleteLogicalRouterCommand","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/be/b40591305607ea4e1226ee41008f91af77571a.src","preCode":"    public void testDeleteLogicalRouterCommand() {\n        final NiciraNvpApi niciraNvpApi = Mockito.mock(NiciraNvpApi.class);\n\n        final String logicalRouterUuid = \"d2e05a9e-7120-4487-a5fc-414ab36d9345\";\n\n        final DeleteLogicalRouterCommand command = new DeleteLogicalRouterCommand(logicalRouterUuid);\n\n        when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);\n\n        try {\n            doNothing().when(niciraNvpApi).deleteLogicalRouter(command.getLogicalRouterUuid());\n        } catch (final NiciraNvpApiException e) {\n            fail(e.getMessage());\n        }\n\n        final NiciraNvpRequestWrapper wrapper = NiciraNvpRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, niciraNvpResource);\n\n        assertTrue(answer.getResult());\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/resource/NiciraNvpRequestWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"65f31f1a9fbc1c20cd752d80a7e1117efc0248a5","commitMessage":"@@@kvm: Agent should not check if remaining memory on host is sufficient (#2766)\n\nWhen a Instance is (attempted to be) started in KVM Host the Agent\nshould not worry about the allocated memory on this host.\n\nTo make a proper judgement we need to take more into account:\n\n- Memory Overcommit ratio\n- Host reserved memory\n- Host overcommit memory\n\nThe Management Server has all the information and the DeploymentPlanner\nhas to make the decision if a Instance should and can be started on a\nHost.  not the host itself.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2018-08-08 14:44:26","modifiedFileCount":"3","status":"M","submitter":"Wido den Hollander"}]
