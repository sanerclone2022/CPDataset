[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":1289,"groupId":"15323","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTemplateFromVolume","params":"(VmwareContextcontext@VirtualMachineMOvmMo@VmwareHypervisorHosthyperHost@StringinstallPath@longtemplateId@StringtemplateUniqueName@StringsecStorageUrl@StringvolumePath@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/aacd34f42c8bccea920b949c272fc6721f4cf2.src","preCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1210,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","date":"2018-01-20 05:49:27","endLine":1412,"groupId":"12454","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMetadataCreateTemplateFromSnapshot","params":"(StringinstallFullPath@StringtemplateVMDKName@longtemplateId@StringtemplateUniqueName@StringovfFilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1393,"status":"NB"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-08-31 09:32:27","commitOrder":3,"curCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            clonedVm.tagAsWorkerVM();\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2021-08-31 09:32:27","endLine":1289,"groupId":"12454","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTemplateFromVolume","params":"(VmwareContextcontext@VirtualMachineMOvmMo@VmwareHypervisorHosthyperHost@StringinstallPath@longtemplateId@StringtemplateUniqueName@StringsecStorageUrl@StringvolumePath@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/13/1260a39c51603ce3fa2bec2d91700cf122946f.src","preCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1223,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","date":"2018-01-20 05:49:27","endLine":1412,"groupId":"12454","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMetadataCreateTemplateFromSnapshot","params":"(StringinstallFullPath@StringtemplateVMDKName@longtemplateId@StringtemplateUniqueName@StringovfFilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1393,"status":"N"}],"commitId":"3ddcf858767ff5f79986457cbbac4c856b73e0bd","commitMessage":"@@@Merge branch '4.15' into main\n","date":"2021-08-31 09:32:27","modifiedFileCount":"4","status":"M","submitter":"nicolas"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-02 18:43:33","commitOrder":4,"curCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            clonedVm.tagAsWorkerVM();\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","date":"2021-09-02 18:43:33","endLine":1280,"groupId":"12454","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTemplateFromVolume","params":"(VmwareContextcontext@VirtualMachineMOvmMo@VmwareHypervisorHosthyperHost@StringinstallPath@longtemplateId@StringtemplateUniqueName@StringsecStorageUrl@StringvolumePath@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/81/0f355662ad1cc9201a5d818e6a8e758c76960b.src","preCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            clonedVm.tagAsWorkerVM();\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1215,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","date":"2018-01-20 05:49:27","endLine":1412,"groupId":"12454","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMetadataCreateTemplateFromSnapshot","params":"(StringinstallFullPath@StringtemplateVMDKName@longtemplateId@StringtemplateUniqueName@StringovfFilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1393,"status":"N"}],"commitId":"56f4da6dce8aefc106c4697d9fbbfe47755336ca","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15' into main\n","date":"2021-09-02 18:43:33","modifiedFileCount":"15","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-03 09:04:12","commitOrder":5,"curCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            clonedVm.tagAsWorkerVM();\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                s_logger.debug(String.format(\"Destroying cloned VM: %s with its disks\", clonedVm.getName()));\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2021-09-03 09:04:12","endLine":1281,"groupId":"123048","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createTemplateFromVolume","params":"(VmwareContextcontext@VirtualMachineMOvmMo@VmwareHypervisorHosthyperHost@StringinstallPath@longtemplateId@StringtemplateUniqueName@StringsecStorageUrl@StringvolumePath@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7e/d4e2f4f1be8df00a60e647aaf38e4274da2afe.src","preCode":"    private Ternary<String, Long, Long> createTemplateFromVolume(VmwareContext context, VirtualMachineMO vmMo, VmwareHypervisorHost hyperHost, String installPath, long templateId, String templateUniqueName,\n                                                                 String secStorageUrl, String volumePath, String workerVmName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        synchronized (installPath.intern()) {\n            Script command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            String result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            Pair<VirtualDisk, String> volumeDeviceInfo = vmMo.getDiskDevice(volumePath);\n            if (volumeDeviceInfo == null) {\n                String msg = \"Unable to find related disk device for volume. volume path: \" + volumePath;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n            clonedVm = dcMo.findVm(templateUniqueName);\n\n            clonedVm.tagAsWorkerVM();\n            clonedVm.exportVm(secondaryMountPoint + \"/\" + installPath, templateUniqueName, false, false);\n\n            \r\n            String templateVMDKName = \"\";\n            File[] files = new File(installFullPath).listFiles();\n            if(files != null) {\n                for(File file : files) {\n                    String fileName = file.getName();\n                    if(fileName.toLowerCase().startsWith(templateUniqueName) && fileName.toLowerCase().endsWith(\".vmdk\")) {\n                        templateVMDKName += fileName;\n                        break;\n                    }\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n\n            Map<String, Object> params = new HashMap<>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, templateUniqueName + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1215,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","date":"2018-01-20 05:49:27","endLine":1412,"groupId":"123048","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMetadataCreateTemplateFromSnapshot","params":"(StringinstallFullPath@StringtemplateVMDKName@longtemplateId@StringtemplateUniqueName@StringovfFilename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private Size handleMetadataCreateTemplateFromSnapshot(String installFullPath, String templateVMDKName, long templateId, String templateUniqueName,\n                                                          String ovfFilename) throws Exception {\n        long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n\n        OVAProcessor processor = new OVAProcessor();\n\n        Map<String, Object> params = new HashMap<>();\n\n        params.put(StorageLayer.InstanceConfigKey, _storage);\n\n        processor.configure(\"OVA Processor\", params);\n\n        long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n        postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n\n        writeMetaOvaForTemplate(installFullPath, ovfFilename + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n\n        return new Size(physicalSize, virtualSize);\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1393,"status":"N"}],"commitId":"4de35426c459fc90848c28c693576cc9ae6793a3","commitMessage":"@@@Merge branch '4.15' into main\n","date":"2021-09-03 09:04:12","modifiedFileCount":"3","status":"M","submitter":"nicolas"}]
