[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(ACCOUNT_NAME);\n        acct.setDomainId(DOMAIN_ID);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(AFFINITY_GROUP_NAME, \"mock\", \"mock group\", DOMAIN_ID, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","date":"2018-01-20 05:49:27","endLine":166,"groupId":"17785","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6f/45b908a43756b86be145f7c5ca2e9cda4e2143.src","preCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(ACCOUNT_NAME);\n        acct.setDomainId(DOMAIN_ID);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(AFFINITY_GROUP_NAME, \"mock\", \"mock group\", DOMAIN_ID, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/affinity/AffinityGroupServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        AccountVO acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(\"user\");\n        acct.setDomainId(domainId);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_acctMgr.finalizeOwner((Account)anyObject(), anyString(), anyLong(), anyLong())).thenReturn(acct);\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(\"group1\", \"mock\", \"mock group\", domainId, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"17785","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/4054a411513712775ebfb4b1a6aa10fb761b92.src","preCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        AccountVO acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(\"user\");\n        acct.setDomainId(domainId);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_acctMgr.finalizeOwner((Account)anyObject(), anyString(), anyLong(), anyLong())).thenReturn(acct);\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(\"group1\", \"mock\", \"mock group\", domainId, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/affinity/AffinityApiUnitTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(ACCOUNT_NAME);\n        acct.setDomainId(DOMAIN_ID);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(AFFINITY_GROUP_NAME, \"mock\", \"mock group\", DOMAIN_ID, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","date":"2018-01-20 05:49:27","endLine":166,"groupId":"101224","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6f/45b908a43756b86be145f7c5ca2e9cda4e2143.src","preCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(ACCOUNT_NAME);\n        acct.setDomainId(DOMAIN_ID);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(AFFINITY_GROUP_NAME, \"mock\", \"mock group\", DOMAIN_ID, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/affinity/AffinityGroupServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        AccountVO acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(\"user\");\n        acct.setDomainId(domainId);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_acctMgr.finalizeOwner(any(Account.class), anyString(), anyLong(), nullable(Long.class))).thenReturn(acct);\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(\"group1\", \"mock\", \"mock group\", domainId, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","date":"2020-02-12 15:28:25","endLine":160,"groupId":"101224","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/3664833005ce8896bfe691eb7f83721d57a7dc.src","preCode":"    public void setUp() {\n        ComponentContext.initComponentsLifeCycle();\n        AccountVO acct = new AccountVO(200L);\n        acct.setType(Account.ACCOUNT_TYPE_NORMAL);\n        acct.setAccountName(\"user\");\n        acct.setDomainId(domainId);\n\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        CallContext.register(user, acct);\n\n        when(_acctMgr.finalizeOwner((Account)anyObject(), anyString(), anyLong(), anyLong())).thenReturn(acct);\n        when(_processor.getType()).thenReturn(\"mock\");\n        when(_accountDao.findByIdIncludingRemoved(0L)).thenReturn(acct);\n\n        List<AffinityGroupProcessor> affinityProcessors = new ArrayList<AffinityGroupProcessor>();\n        affinityProcessors.add(_processor);\n        _affinityService.setAffinityGroupProcessors(affinityProcessors);\n\n        AffinityGroupVO group = new AffinityGroupVO(\"group1\", \"mock\", \"mock group\", domainId, 200L, ControlledEntity.ACLType.Account);\n        Mockito.when(_affinityGroupDao.persist(Matchers.any(AffinityGroupVO.class))).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findById(Matchers.anyLong())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.findByAccountAndName(Matchers.anyLong(), Matchers.anyString())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.lockRow(Matchers.anyLong(), anyBoolean())).thenReturn(group);\n        Mockito.when(_affinityGroupDao.expunge(Matchers.anyLong())).thenReturn(true);\n        Mockito.when(_eventDao.persist(Matchers.any(EventVO.class))).thenReturn(new EventVO());\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/affinity/AffinityApiUnitTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
