[{"authorTime":"2018-01-23 19:19:36","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\");\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":85,"groupId":"16742","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2e/e9b953d84e4cf53791229414181daf462fe37f.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\");\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2018-01-23 19:19:36","commitOrder":2,"curCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","date":"2018-01-23 19:19:36","endLine":124,"groupId":"21707","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findPluggedNic","params":"(LibvirtComputingResourcelibvirtComputingResource@NicTOnic@StringvmName@Connectconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/1e719aabea13c0d96634d645eeb3821181fea7.src","preCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"c591c5ad3e270e5e62166a7f1ff6f9895d4b102c","commitMessage":"@@@CLOUDSTACK-10248: Fix errors that appeared after #2283 (#2417)\n\nThis fixes move refactoring error introduced in #2283 \nFor instance.  the class DatadiskTO is supposed to be in com.cloud.agent.api.to package. However.  the folder structure it was placed in is com.cloud.agent.api.api.to.\n\nSkip tests for cloud-plugin-hypervisor-ovm3:\nFor some unknown reason.  there are quite a lot of broken test cases for cloud-plugin-hypervisor-ovm3. They might have appeared after some dependency upgrade and was overlooked by the person updating them. I checked them to see if they could be fixed.  but these tests are not developed in a clear and clean manner. On top of that.  we do not see (at least I) people using OVM3-hypervisor with ACS. Therefore.  I decided to skip them.\n\nIdentention corrected to use spaces instead of tabs in XML files\n","date":"2018-01-23 19:19:36","modifiedFileCount":"9","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-01-23 19:19:36","codes":[{"authorDate":"2018-11-07 20:29:01","commitOrder":3,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2018-11-07 20:29:01","endLine":85,"groupId":"16742","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1e/f32afccbfcb666d2cc18d12c6eac28b5e898cf.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\");\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2018-01-23 19:19:36","commitOrder":3,"curCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","date":"2018-01-23 19:19:36","endLine":124,"groupId":"21707","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findPluggedNic","params":"(LibvirtComputingResourcelibvirtComputingResource@NicTOnic@StringvmName@Connectconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/1e719aabea13c0d96634d645eeb3821181fea7.src","preCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"4de4eabd18386fdb5d4242f371ec780f6d9097a5","commitMessage":"@@@Enable DPDK support on KVM (#2839)\n\n* Enable DPDK support on KVM\n\n* Allow DPDK deployments on user VMs only\n\n* Fix port name ordering\n","date":"2018-11-07 20:29:01","modifiedFileCount":"21","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-01-23 19:19:36","codes":[{"authorDate":"2020-02-19 22:02:12","commitOrder":4,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2020-02-19 22:02:12","endLine":93,"groupId":"16742","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/55/3a71a30dfec1b0d168e9669e2b10044e090a18.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2018-01-23 19:19:36","commitOrder":4,"curCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","date":"2018-01-23 19:19:36","endLine":124,"groupId":"21707","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findPluggedNic","params":"(LibvirtComputingResourcelibvirtComputingResource@NicTOnic@StringvmName@Connectconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/1e719aabea13c0d96634d645eeb3821181fea7.src","preCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"458d3b5b4753b16b1f07bfa1fe667037cb2623d6","commitMessage":"@@@Multiple networks support for vms in advanced zone with securit? (#3639)\n\n","date":"2020-02-19 22:02:12","modifiedFileCount":"16","status":"M","submitter":"Wei Zhou"},{"authorTime":"2018-01-23 19:19:36","codes":[{"authorDate":"2021-07-15 16:32:49","commitOrder":5,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            if (vmType == VirtualMachine.Type.User) {\n                libvirtComputingResource.detachAndAttachConfigDriveISO(conn, vmName);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2021-07-15 16:32:49","endLine":97,"groupId":"103348","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ca/78c718886ee86780a25c45f4f31d93995ffc57.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2018-01-23 19:19:36","commitOrder":5,"curCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","date":"2018-01-23 19:19:36","endLine":124,"groupId":"103348","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"findPluggedNic","params":"(LibvirtComputingResourcelibvirtComputingResource@NicTOnic@StringvmName@Connectconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/1e719aabea13c0d96634d645eeb3821181fea7.src","preCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"5ac184edd62b725a5254f2b2c268af29b0303d91","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15' into main\n","date":"2021-07-15 16:32:49","modifiedFileCount":"6","status":"M","submitter":"Abhishek Kumar"}]
