[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.shuffleCSVList(ApiServiceConfiguration.ManagementHostIPAdr.value()));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1425,"groupId":"12704","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/fff3c7219cceb44a61a820fcddfdef364d7f89.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.shuffleCSVList(ApiServiceConfiguration.ManagementHostIPAdr.value()));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1350,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStore(dest.getDataCenter().getId());\n        assert (secStore != null);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.shuffleCSVList(ApiServiceConfiguration.ManagementHostIPAdr.value()));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        Integer nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1210,"groupId":"10558","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/58c9c0e6824403a7fc6575a694f76829e8889a.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStore(dest.getDataCenter().getId());\n        assert (secStore != null);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.shuffleCSVList(ApiServiceConfiguration.ManagementHostIPAdr.value()));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        Integer nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1112,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-03-15 19:16:50","codes":[{"authorDate":"2018-03-15 19:16:50","commitOrder":2,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":1427,"groupId":"12704","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f1/31714ecaf0f6f60156cb9152969873c15d1080.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.shuffleCSVList(ApiServiceConfiguration.ManagementHostIPAdr.value()));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1352,"status":"M"},{"authorDate":"2018-03-15 19:16:50","commitOrder":2,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStore(dest.getDataCenter().getId());\n        assert (secStore != null);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        Integer nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":1213,"groupId":"10558","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/66/c436b15c33654c8ed25267e11a891ed9187d71.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStore(dest.getDataCenter().getId());\n        assert (secStore != null);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.shuffleCSVList(ApiServiceConfiguration.ManagementHostIPAdr.value()));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        Integer nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1115,"status":"M"}],"commitId":"8ef131745a5ef0e5e6ddc7e498f3a0208f1bfb71","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-03-15 19:16:50","modifiedFileCount":"28","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-07-31 18:07:59","codes":[{"authorDate":"2018-03-15 19:16:50","commitOrder":3,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":1427,"groupId":"12704","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f1/31714ecaf0f6f60156cb9152969873c15d1080.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1352,"status":"N"},{"authorDate":"2019-07-31 18:07:59","commitOrder":3,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dest.getDataCenter().getId());\n        if (secStore == null) {\n            s_logger.error(String.format(\"Unable to finalize virtual machine profile as no secondary storage available to satisfy storage needs for zone: %s\", dest.getDataCenter().getUuid()));\n            return false;\n        }\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        Integer nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2019-07-31 18:07:59","endLine":1216,"groupId":"10558","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8b/2ed40c15db87e65b47998b03103ccedd7d6fef.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStore(dest.getDataCenter().getId());\n        assert (secStore != null);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        Integer nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1115,"status":"M"}],"commitId":"b2db8979f2249b0b6c0d8d0dfe40e05ba9ef9649","commitMessage":"@@@server: fix for respecting secondary storage threshold limit (#3480)\n\nRetrieval of an image store using ImageStoreProviderManager has been refactored by introducing three different methods. \nDataStore getRandomImageStore(List<DataStore> imageStores);\nTo get an image store for reading purpose. Threshold capacity check will not be used here.\nDataStore getImageStoreWithFreeCapacity(List<DataStore> imageStores);\nTo get an image store for reading purpose. Threshold capacity check will be used here and the store with max free space will be returned. If no store with filled storage less than the threshold is found.  the NULL value will be returned.\nList<DataStore> listImageStoresWithFreeCapacity(List<DataStore> imageStores);\nTo get a list of image stores for writing purpose which fulfills threshold capacity check.\n\nCorrespondingly DataStoreManager methods have been refactored to return similar values for a given zone.\n\nFixes #3287 - NULL value will be returned when secondary storage is needed for writing but there is not store with free space.\nFixes #3041 - Rather than returning random secondary storage for writing.  storage with max. free space will be returned.\nFixes #3478 - For migration on VMware.  all writable secondary storage will be mounted while preparation.\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2019-07-31 18:07:59","modifiedFileCount":"21","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2020-08-19 17:23:38","codes":[{"authorDate":"2018-03-15 19:16:50","commitOrder":4,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":1427,"groupId":"12704","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f1/31714ecaf0f6f60156cb9152969873c15d1080.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1352,"status":"N"},{"authorDate":"2020-08-19 17:23:38","commitOrder":4,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dest.getDataCenter().getId());\n        if (secStore == null) {\n            s_logger.error(String.format(\"Unable to finalize virtual machine profile as no secondary storage available to satisfy storage needs for zone: %s\", dest.getDataCenter().getUuid()));\n            return false;\n        }\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        String nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2020-08-19 17:23:38","endLine":1215,"groupId":"10558","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ef/a43cb022affab7c8003d473268e4dd4f6f8827.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dest.getDataCenter().getId());\n        if (secStore == null) {\n            s_logger.error(String.format(\"Unable to finalize virtual machine profile as no secondary storage available to satisfy storage needs for zone: %s\", dest.getDataCenter().getUuid()));\n            return false;\n        }\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        Integer nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1114,"status":"M"}],"commitId":"d57aa835174c9dd045930d1396ce4bee9a275a60","commitMessage":"@@@server: Added nfs minor version support (#4180)\n\nThis PR adds minor version support when mounting nfs on the SSVM as requested in #2861\n\nThe global setting \"secstorage.nfs.version\" has been changed to use the String data type which allows any minor version to be specified.","date":"2020-08-19 17:23:38","modifiedFileCount":"30","status":"M","submitter":"Spaceman1984"},{"authorTime":"2021-05-10 15:47:42","codes":[{"authorDate":"2018-03-15 19:16:50","commitOrder":5,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":1427,"groupId":"12704","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f1/31714ecaf0f6f60156cb9152969873c15d1080.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1352,"status":"N"},{"authorDate":"2021-05-10 15:47:42","commitOrder":5,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dest.getDataCenter().getId());\n        if (secStore == null) {\n            s_logger.warn(String.format(\"Unable to finalize virtual machine profile [%s] as it has no secondary storage available to satisfy storage needs for zone [%s].\", profile.toString(), dest.getDataCenter().getUuid()));\n            return false;\n        }\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VMWare hypervisor was configured, informing secondary storage VM to load the PremiumSecondaryStorageResource.\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        String nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(String.format(\"Boot args for machine profile [%s]: [%s].\", profile.toString(), bootArgs));\n        }\n\n        return true;\n    }\n","date":"2021-05-10 15:47:42","endLine":1157,"groupId":"10558","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/f8bbb803bc65cb60ba132e109ff04fc94b63b5.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dest.getDataCenter().getId());\n        if (secStore == null) {\n            s_logger.error(String.format(\"Unable to finalize virtual machine profile as no secondary storage available to satisfy storage needs for zone: %s\", dest.getDataCenter().getUuid()));\n            return false;\n        }\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VmWare hypervisor configured, telling the ssvm to load the PremiumSecondaryStorageResource\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        String nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1057,"status":"M"}],"commitId":"3674e80219d0be9e940bd948060fa10a467e4b7e","commitMessage":"@@@Improve logs on SecondaryStorageManagerImpl and few refactors (#4955)\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <daniel@scclouds.com.br>","date":"2021-05-10 15:47:42","modifiedFileCount":"4","status":"M","submitter":"Daniel Augusto Veronezi Salvador"},{"authorTime":"2021-05-10 15:47:42","codes":[{"authorDate":"2021-07-28 06:56:14","commitOrder":6,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(managementPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = configurationDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(configurationDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(configurationDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = configurationDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = dataCenterDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","date":"2021-07-28 06:56:14","endLine":1280,"groupId":"101992","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6c/c0ace1e05600559e196cd0be536313c3c1cd80.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        ConsoleProxyVO vm = _consoleProxyDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=consoleproxy\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n        if (_sslEnabled) {\n            buf.append(\" premium=true\");\n        }\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n        buf.append(\" guid=Proxy.\").append(profile.getId());\n        buf.append(\" proxy_vm=\").append(profile.getId());\n        if (_disableRpFilter) {\n            buf.append(\" disable_rp_filter=true\");\n        }\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            }\n        }\n\n        \n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1206,"status":"M"},{"authorDate":"2021-05-10 15:47:42","commitOrder":6,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dest.getDataCenter().getId());\n        if (secStore == null) {\n            s_logger.warn(String.format(\"Unable to finalize virtual machine profile [%s] as it has no secondary storage available to satisfy storage needs for zone [%s].\", profile.toString(), dest.getDataCenter().getUuid()));\n            return false;\n        }\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VMWare hypervisor was configured, informing secondary storage VM to load the PremiumSecondaryStorageResource.\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        String nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(String.format(\"Boot args for machine profile [%s]: [%s].\", profile.toString(), bootArgs));\n        }\n\n        return true;\n    }\n","date":"2021-05-10 15:47:42","endLine":1157,"groupId":"101992","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/f8bbb803bc65cb60ba132e109ff04fc94b63b5.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        SecondaryStorageVmVO vm = _secStorageVmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dest.getDataCenter().getId());\n        if (secStore == null) {\n            s_logger.warn(String.format(\"Unable to finalize virtual machine profile [%s] as it has no secondary storage available to satisfy storage needs for zone [%s].\", profile.toString(), dest.getDataCenter().getUuid()));\n            return false;\n        }\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=secstorage\");\n        buf.append(\" host=\").append(StringUtils.toCSVList(indirectAgentLB.getManagementServerList(dest.getHost().getId(), dest.getDataCenter().getId(), null)));\n        buf.append(\" port=\").append(_mgmtPort);\n        buf.append(\" name=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" zone=\").append(dest.getDataCenter().getId());\n        buf.append(\" pod=\").append(dest.getPod().getId());\n\n        buf.append(\" guid=\").append(profile.getVirtualMachine().getHostName());\n\n        buf.append(\" workers=\").append(_configDao.getValue(\"workers\"));\n\n        if (_configDao.isPremium()) {\n            s_logger.debug(\"VMWare hypervisor was configured, informing secondary storage VM to load the PremiumSecondaryStorageResource.\");\n            buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n        } else {\n            buf.append(\" resource=org.apache.cloudstack.storage.resource.NfsSecondaryStorageResource\");\n        }\n        buf.append(\" instance=SecStorage\");\n        buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n        buf.append(\" role=\").append(vm.getRole().toString());\n        buf.append(\" mtu=\").append(_secStorageVmMtuSize);\n\n        boolean externalDhcp = false;\n        String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n            externalDhcp = true;\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        if (NTPServerConfig.value() != null) {\n            buf.append(\" ntpserverlist=\").append(NTPServerConfig.value().replaceAll(\"\\\\s+\",\"\"));\n        }\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            if (nic.getIPv4Address() == null) {\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n            } else {\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n                if (NetUtils.isValidIp4Cidr(mgmt_cidr)) {\n                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n                }\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n            } else if (nic.getTrafficType() == TrafficType.Storage) {\n                buf.append(\" storageip=\").append(nic.getIPv4Address());\n                buf.append(\" storagenetmask=\").append(nic.getIPv4Netmask());\n                buf.append(\" storagegateway=\").append(nic.getIPv4Gateway());\n            }\n        }\n\n        if (externalDhcp) {\n            buf.append(\" bootproto=dhcp\");\n        }\n\n        DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n        buf.append(\" internaldns1=\").append(dc.getInternalDns1());\n        if (dc.getInternalDns2() != null) {\n            buf.append(\" internaldns2=\").append(dc.getInternalDns2());\n        }\n        buf.append(\" dns1=\").append(dc.getDns1());\n        if (dc.getDns2() != null) {\n            buf.append(\" dns2=\").append(dc.getDns2());\n        }\n        String nfsVersion = imageStoreDetailsUtil != null ? imageStoreDetailsUtil.getNfsVersion(secStore.getId()) : null;\n        buf.append(\" nfsVersion=\").append(nfsVersion);\n\n        String bootArgs = buf.toString();\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(String.format(\"Boot args for machine profile [%s]: [%s].\", profile.toString(), bootArgs));\n        }\n\n        return true;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1057,"status":"N"}],"commitId":"1f5ee5b3e3855c7f46d7e850465a8a0ec3a5c19c","commitMessage":"@@@Improve logs on ConsoleProxyManagerImpl and refactor a few process (#4959)\n\n","date":"2021-07-28 06:56:14","modifiedFileCount":"3","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
