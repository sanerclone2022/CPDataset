[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private static void runScript(Connection conn, Reader reader, String filename, boolean verbosity) {\n        ScriptRunner runner = new ScriptRunner(conn, false, true, verbosity);\n        try {\n            runner.runScript(reader);\n        } catch (IOException e) {\n            System.err.println(\"Unable to read \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        } catch (SQLException e) {\n            System.err.println(\"Unable to execute \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":73,"groupId":"5484","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runScript","params":"(Connectionconn@Readerreader@Stringfilename@booleanverbosity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/09d6972c3f7fbe988f6eb599e1b2225bfe2e59.src","preCode":"    private static void runScript(Connection conn, Reader reader, String filename, boolean verbosity) {\n        ScriptRunner runner = new ScriptRunner(conn, false, true, verbosity);\n        try {\n            runner.runScript(reader);\n        } catch (IOException e) {\n            System.err.println(\"Unable to read \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        } catch (SQLException e) {\n            System.err.println(\"Unable to execute \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/DatabaseCreator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static void main(String[] args) {\n\n        ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext(new String[] {\"/com/cloud/upgrade/databaseCreatorContext.xml\"});\n        appContext.getBean(ComponentContext.class);\n\n        String dbPropsFile = \"\";\n        List<String> sqlFiles = new ArrayList<String>();\n        List<String> upgradeClasses = new ArrayList<String>();\n        String[] databases = new String[] {};\n        String rootPassword = \"\";\n        boolean verbosity = false;\n        boolean dryRun = false;\n\n        \r\n        for (String arg : args) {\n            if (arg.equals(\"--help\") || arg.equals(\"-h\")) {\n                printHelp(\"DatabaseCreator\");\n                System.exit(0);\n            } else if (arg.equals(\"--verbose\") || arg.equals(\"-v\")) {\n                verbosity = true;\n            } else if (arg.equals(\"--dry\") || arg.equals(\"-d\")) {\n                dryRun = true;\n            } else if (arg.startsWith(\"--rootpassword=\")) {\n                rootPassword = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length());\n            } else if (arg.startsWith(\"--database=\")) {\n                databases = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length()).split(\",\");\n            } else if (arg.endsWith(\".sql\")) {\n                sqlFiles.add(arg);\n            } else if (arg.endsWith(\".sql.override\")) {\n                if (fileExists(arg)) {\n                    int index = arg.lastIndexOf(\".override\");\n                    String fileToOverride = arg.substring(0, index);\n                    sqlFiles.remove(fileToOverride);\n                    sqlFiles.add(arg);\n                }\n            } else if (arg.endsWith(\".properties\")) {\n                if (!dbPropsFile.endsWith(\"properties.override\") && fileExists(arg))\n                    dbPropsFile = arg;\n            } else if (arg.endsWith(\"properties.override\")) {\n                if (fileExists(arg))\n                    dbPropsFile = arg;\n            } else {\n                upgradeClasses.add(arg);\n            }\n        }\n\n        if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {\n            printHelp(\"DatabaseCreator\");\n            System.exit(1);\n        }\n\n        try {\n            TransactionLegacy.initDataSource(dbPropsFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        initDB(dbPropsFile, rootPassword, databases, dryRun);\n\n        \r\n        for (String sqlFile : sqlFiles) {\n            File sqlScript = PropertiesUtil.findConfigFile(sqlFile);\n            if (sqlScript == null) {\n                System.err.println(\"Unable to find \" + sqlFile);\n                printHelp(\"DatabaseCreator\");\n                System.exit(1);\n            }\n\n            System.out.println(\"========> Processing SQL file at \" + sqlScript.getAbsolutePath());\n\n            try(Connection conn = TransactionLegacy.getStandaloneConnection();\n                FileReader reader = new FileReader(sqlScript);\n            ) {\n                if (!dryRun)\n                    runScript(conn, reader, sqlFile, verbosity);\n            }catch (SQLException e)\n            {\n                System.err.println(\"Sql Exception:\" + e.getMessage());\n                System.exit(1);\n            }\n            catch (IOException e)\n            {\n                System.err.println(\"File IO Exception : \" + e.getMessage());\n                System.exit(1);\n            }\n\n        }\n\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n        try {\n            \r\n            for (String upgradeClass : upgradeClasses) {\n                System.out.println(\"========> Processing upgrade: \" + upgradeClass);\n                Class<?> clazz = null;\n                try {\n                    clazz = Class.forName(upgradeClass);\n                    if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {\n                        System.err.println(\"The class must be of SystemIntegrityChecker: \" + clazz.getName());\n                        System.exit(1);\n                    }\n                    SystemIntegrityChecker checker = (SystemIntegrityChecker)clazz.newInstance();\n                    checker.check();\n                } catch (ClassNotFoundException e) {\n                    System.err.println(\"Unable to find \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (InstantiationException e) {\n                    System.err.println(\"Unable to instantiate \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (IllegalAccessException e) {\n                    System.err.println(\"Unable to access \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                }\n\n            }\n        } finally {\n            txn.close();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":233,"groupId":"5483","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/09d6972c3f7fbe988f6eb599e1b2225bfe2e59.src","preCode":"    public static void main(String[] args) {\n\n        ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext(new String[] {\"/com/cloud/upgrade/databaseCreatorContext.xml\"});\n        appContext.getBean(ComponentContext.class);\n\n        String dbPropsFile = \"\";\n        List<String> sqlFiles = new ArrayList<String>();\n        List<String> upgradeClasses = new ArrayList<String>();\n        String[] databases = new String[] {};\n        String rootPassword = \"\";\n        boolean verbosity = false;\n        boolean dryRun = false;\n\n        \r\n        for (String arg : args) {\n            if (arg.equals(\"--help\") || arg.equals(\"-h\")) {\n                printHelp(\"DatabaseCreator\");\n                System.exit(0);\n            } else if (arg.equals(\"--verbose\") || arg.equals(\"-v\")) {\n                verbosity = true;\n            } else if (arg.equals(\"--dry\") || arg.equals(\"-d\")) {\n                dryRun = true;\n            } else if (arg.startsWith(\"--rootpassword=\")) {\n                rootPassword = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length());\n            } else if (arg.startsWith(\"--database=\")) {\n                databases = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length()).split(\",\");\n            } else if (arg.endsWith(\".sql\")) {\n                sqlFiles.add(arg);\n            } else if (arg.endsWith(\".sql.override\")) {\n                if (fileExists(arg)) {\n                    int index = arg.lastIndexOf(\".override\");\n                    String fileToOverride = arg.substring(0, index);\n                    sqlFiles.remove(fileToOverride);\n                    sqlFiles.add(arg);\n                }\n            } else if (arg.endsWith(\".properties\")) {\n                if (!dbPropsFile.endsWith(\"properties.override\") && fileExists(arg))\n                    dbPropsFile = arg;\n            } else if (arg.endsWith(\"properties.override\")) {\n                if (fileExists(arg))\n                    dbPropsFile = arg;\n            } else {\n                upgradeClasses.add(arg);\n            }\n        }\n\n        if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {\n            printHelp(\"DatabaseCreator\");\n            System.exit(1);\n        }\n\n        try {\n            TransactionLegacy.initDataSource(dbPropsFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        initDB(dbPropsFile, rootPassword, databases, dryRun);\n\n        \r\n        for (String sqlFile : sqlFiles) {\n            File sqlScript = PropertiesUtil.findConfigFile(sqlFile);\n            if (sqlScript == null) {\n                System.err.println(\"Unable to find \" + sqlFile);\n                printHelp(\"DatabaseCreator\");\n                System.exit(1);\n            }\n\n            System.out.println(\"========> Processing SQL file at \" + sqlScript.getAbsolutePath());\n\n            try(Connection conn = TransactionLegacy.getStandaloneConnection();\n                FileReader reader = new FileReader(sqlScript);\n            ) {\n                if (!dryRun)\n                    runScript(conn, reader, sqlFile, verbosity);\n            }catch (SQLException e)\n            {\n                System.err.println(\"Sql Exception:\" + e.getMessage());\n                System.exit(1);\n            }\n            catch (IOException e)\n            {\n                System.err.println(\"File IO Exception : \" + e.getMessage());\n                System.exit(1);\n            }\n\n        }\n\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n        try {\n            \r\n            for (String upgradeClass : upgradeClasses) {\n                System.out.println(\"========> Processing upgrade: \" + upgradeClass);\n                Class<?> clazz = null;\n                try {\n                    clazz = Class.forName(upgradeClass);\n                    if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {\n                        System.err.println(\"The class must be of SystemIntegrityChecker: \" + clazz.getName());\n                        System.exit(1);\n                    }\n                    SystemIntegrityChecker checker = (SystemIntegrityChecker)clazz.newInstance();\n                    checker.check();\n                } catch (ClassNotFoundException e) {\n                    System.err.println(\"Unable to find \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (InstantiationException e) {\n                    System.err.println(\"Unable to instantiate \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (IllegalAccessException e) {\n                    System.err.println(\"Unable to access \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                }\n\n            }\n        } finally {\n            txn.close();\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/DatabaseCreator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-07-10 14:23:59","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private static void runScript(Connection conn, Reader reader, String filename, boolean verbosity) {\n        ScriptRunner runner = new ScriptRunner(conn, false, true, verbosity);\n        try {\n            runner.runScript(reader);\n        } catch (IOException e) {\n            System.err.println(\"Unable to read \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        } catch (SQLException e) {\n            System.err.println(\"Unable to execute \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":73,"groupId":"10174","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runScript","params":"(Connectionconn@Readerreader@Stringfilename@booleanverbosity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/09d6972c3f7fbe988f6eb599e1b2225bfe2e59.src","preCode":"    private static void runScript(Connection conn, Reader reader, String filename, boolean verbosity) {\n        ScriptRunner runner = new ScriptRunner(conn, false, true, verbosity);\n        try {\n            runner.runScript(reader);\n        } catch (IOException e) {\n            System.err.println(\"Unable to read \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        } catch (SQLException e) {\n            System.err.println(\"Unable to execute \" + filename + \": \" + e.getMessage());\n            System.exit(1);\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/DatabaseCreator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2018-07-10 14:23:59","commitOrder":2,"curCode":"    public static void main(String[] args) {\n\n        ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext(new String[] {\"/com/cloud/upgrade/databaseCreatorContext.xml\"});\n        appContext.getBean(ComponentContext.class);\n\n        String dbPropsFile = \"\";\n        List<String> sqlFiles = new ArrayList<String>();\n        List<String> upgradeClasses = new ArrayList<String>();\n        String[] databases = new String[] {};\n        String rootPassword = \"\";\n        boolean verbosity = false;\n        boolean dryRun = false;\n\n        \r\n        for (String arg : args) {\n            if (arg.equals(\"--help\") || arg.equals(\"-h\")) {\n                printHelp(\"DatabaseCreator\");\n                System.exit(0);\n            } else if (arg.equals(\"--verbose\") || arg.equals(\"-v\")) {\n                verbosity = true;\n            } else if (arg.equals(\"--dry\") || arg.equals(\"-d\")) {\n                dryRun = true;\n            } else if (arg.startsWith(\"--rootpassword=\")) {\n                rootPassword = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length());\n            } else if (arg.startsWith(\"--database=\")) {\n                databases = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length()).split(\",\");\n            } else if (arg.endsWith(\".sql\")) {\n                sqlFiles.add(arg);\n            } else if (arg.endsWith(\".sql.override\")) {\n                if (fileExists(arg)) {\n                    int index = arg.lastIndexOf(\".override\");\n                    String fileToOverride = arg.substring(0, index);\n                    sqlFiles.remove(fileToOverride);\n                    sqlFiles.add(arg);\n                }\n            } else if (arg.endsWith(\".properties\")) {\n                if (!dbPropsFile.endsWith(\"properties.override\") && fileExists(arg))\n                    dbPropsFile = arg;\n            } else if (arg.endsWith(\"properties.override\")) {\n                if (fileExists(arg))\n                    dbPropsFile = arg;\n            } else {\n                upgradeClasses.add(arg);\n            }\n        }\n\n        if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {\n            printHelp(\"DatabaseCreator\");\n            System.exit(1);\n        }\n\n        try {\n            TransactionLegacy.initDataSource(dbPropsFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        initDB(dbPropsFile, rootPassword, databases, dryRun);\n\n        \r\n        for (String sqlFile : sqlFiles) {\n            File sqlScript = PropertiesUtil.findConfigFile(sqlFile);\n            if (sqlScript == null) {\n                System.err.println(\"Unable to find \" + sqlFile);\n                printHelp(\"DatabaseCreator\");\n                System.exit(1);\n            }\n\n            System.out.println(\"========> Processing SQL file at \" + sqlScript.getAbsolutePath());\n\n            try(Connection conn = TransactionLegacy.getStandaloneConnection();\n                FileReader reader = new FileReader(sqlScript);\n            ) {\n                if (!dryRun)\n                    runScript(conn, reader, sqlFile, verbosity);\n            }catch (SQLException e)\n            {\n                System.err.println(\"Sql Exception:\" + e.getMessage());\n                System.exit(1);\n            }\n            catch (IOException e)\n            {\n                System.err.println(\"File IO Exception : \" + e.getMessage());\n                System.exit(1);\n            }\n\n        }\n\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n        try {\n            \r\n            for (String upgradeClass : upgradeClasses) {\n                System.out.println(\"========> Processing upgrade: \" + upgradeClass);\n                Class<?> clazz = null;\n                try {\n                    clazz = Class.forName(upgradeClass);\n                    if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {\n                        System.err.println(\"The class must be of SystemIntegrityChecker: \" + clazz.getName());\n                        System.exit(1);\n                    }\n                    SystemIntegrityChecker checker = (SystemIntegrityChecker)clazz.newInstance();\n                    checker.check();\n                } catch (ClassNotFoundException e) {\n                    System.err.println(\"Unable to find \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (InstantiationException e) {\n                    System.err.println(\"Unable to instantiate \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (IllegalAccessException e) {\n                    System.err.println(\"Unable to access \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                }\n\n            }\n        } finally {\n            txn.close();\n        }\n        System.exit(0);\n    }\n","date":"2018-07-10 14:23:59","endLine":234,"groupId":"10174","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/22/81e1d2399e45dc134baba7ce4966e41b73356e.src","preCode":"    public static void main(String[] args) {\n\n        ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext(new String[] {\"/com/cloud/upgrade/databaseCreatorContext.xml\"});\n        appContext.getBean(ComponentContext.class);\n\n        String dbPropsFile = \"\";\n        List<String> sqlFiles = new ArrayList<String>();\n        List<String> upgradeClasses = new ArrayList<String>();\n        String[] databases = new String[] {};\n        String rootPassword = \"\";\n        boolean verbosity = false;\n        boolean dryRun = false;\n\n        \r\n        for (String arg : args) {\n            if (arg.equals(\"--help\") || arg.equals(\"-h\")) {\n                printHelp(\"DatabaseCreator\");\n                System.exit(0);\n            } else if (arg.equals(\"--verbose\") || arg.equals(\"-v\")) {\n                verbosity = true;\n            } else if (arg.equals(\"--dry\") || arg.equals(\"-d\")) {\n                dryRun = true;\n            } else if (arg.startsWith(\"--rootpassword=\")) {\n                rootPassword = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length());\n            } else if (arg.startsWith(\"--database=\")) {\n                databases = arg.substring(arg.lastIndexOf(\"=\") + 1, arg.length()).split(\",\");\n            } else if (arg.endsWith(\".sql\")) {\n                sqlFiles.add(arg);\n            } else if (arg.endsWith(\".sql.override\")) {\n                if (fileExists(arg)) {\n                    int index = arg.lastIndexOf(\".override\");\n                    String fileToOverride = arg.substring(0, index);\n                    sqlFiles.remove(fileToOverride);\n                    sqlFiles.add(arg);\n                }\n            } else if (arg.endsWith(\".properties\")) {\n                if (!dbPropsFile.endsWith(\"properties.override\") && fileExists(arg))\n                    dbPropsFile = arg;\n            } else if (arg.endsWith(\"properties.override\")) {\n                if (fileExists(arg))\n                    dbPropsFile = arg;\n            } else {\n                upgradeClasses.add(arg);\n            }\n        }\n\n        if ((dbPropsFile.isEmpty()) || (sqlFiles.size() == 0) && upgradeClasses.size() == 0) {\n            printHelp(\"DatabaseCreator\");\n            System.exit(1);\n        }\n\n        try {\n            TransactionLegacy.initDataSource(dbPropsFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        initDB(dbPropsFile, rootPassword, databases, dryRun);\n\n        \r\n        for (String sqlFile : sqlFiles) {\n            File sqlScript = PropertiesUtil.findConfigFile(sqlFile);\n            if (sqlScript == null) {\n                System.err.println(\"Unable to find \" + sqlFile);\n                printHelp(\"DatabaseCreator\");\n                System.exit(1);\n            }\n\n            System.out.println(\"========> Processing SQL file at \" + sqlScript.getAbsolutePath());\n\n            try(Connection conn = TransactionLegacy.getStandaloneConnection();\n                FileReader reader = new FileReader(sqlScript);\n            ) {\n                if (!dryRun)\n                    runScript(conn, reader, sqlFile, verbosity);\n            }catch (SQLException e)\n            {\n                System.err.println(\"Sql Exception:\" + e.getMessage());\n                System.exit(1);\n            }\n            catch (IOException e)\n            {\n                System.err.println(\"File IO Exception : \" + e.getMessage());\n                System.exit(1);\n            }\n\n        }\n\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n        try {\n            \r\n            for (String upgradeClass : upgradeClasses) {\n                System.out.println(\"========> Processing upgrade: \" + upgradeClass);\n                Class<?> clazz = null;\n                try {\n                    clazz = Class.forName(upgradeClass);\n                    if (!SystemIntegrityChecker.class.isAssignableFrom(clazz)) {\n                        System.err.println(\"The class must be of SystemIntegrityChecker: \" + clazz.getName());\n                        System.exit(1);\n                    }\n                    SystemIntegrityChecker checker = (SystemIntegrityChecker)clazz.newInstance();\n                    checker.check();\n                } catch (ClassNotFoundException e) {\n                    System.err.println(\"Unable to find \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (InstantiationException e) {\n                    System.err.println(\"Unable to instantiate \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                } catch (IllegalAccessException e) {\n                    System.err.println(\"Unable to access \" + upgradeClass + \": \" + e.getMessage());\n                    System.exit(1);\n                }\n\n            }\n        } finally {\n            txn.close();\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/DatabaseCreator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"9fb36e7c73f647d137cda8c480ac67c097cba11a","commitMessage":"@@@db: Update Apache DBCP version (#2718)\n\n* Update Apache DBCP version\n\n* Fix DB connection\n\n* Prevent hang on the db creation\n","date":"2018-07-10 14:23:59","modifiedFileCount":"2","status":"M","submitter":"Nicolas Vazquez"}]
