[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"7296","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createStaticRouteCommands","params":"(finalList<StaticRouteProfile>staticRoutes@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                ip.setTrafficType(network.getTrafficType());\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":743,"groupId":"7601","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePublicIPCommands","params":"(finalVirtualRouterrouter@finalList<?extendsPublicIpAddress>ips@finalCommandscmds@finalMap<String@String>vlanMacAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                ip.setTrafficType(network.getTrafficType());\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-07 03:38:07","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"7296","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createStaticRouteCommands","params":"(finalList<StaticRouteProfile>staticRoutes@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"N"},{"authorDate":"2020-02-07 03:38:07","commitOrder":2,"curCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                ip.setTrafficType(getNetworkTrafficType(network));\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","date":"2020-02-07 03:38:07","endLine":748,"groupId":"7601","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePublicIPCommands","params":"(finalVirtualRouterrouter@finalList<?extendsPublicIpAddress>ips@finalCommandscmds@finalMap<String@String>vlanMacAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0f/e9dc32c8b50e1f04cbdfc7d7ad1e4da4aa332e.src","preCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                ip.setTrafficType(network.getTrafficType());\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"M"}],"commitId":"10482da13602f0da504b30190fbced8f1be0e050","commitMessage":"@@@Merge release branch 4.13 to master\n\n* 4.13:\n  vr: add missing rule for port forwarding rule in vpc (#3857)\n  vpc: set traffic type of private gateway IP to Public to fix ke? (#3851)\n","date":"2020-02-07 03:38:07","modifiedFileCount":"4","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-03-01 02:56:07","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"7296","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createStaticRouteCommands","params":"(finalList<StaticRouteProfile>staticRoutes@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"N"},{"authorDate":"2020-03-01 02:56:07","commitOrder":3,"curCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        Long guestNetworkId = null;\n        final List<NicVO> nics = _nicDao.listByVmId(router.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO nw = _networkDao.findById(nic.getNetworkId());\n            if (nw.getTrafficType() == TrafficType.Guest) {\n                guestNetworkId = nw.getId();\n                break;\n            }\n        }\n\n        Map<String, Boolean> vlanLastIpMap = getVlanLastIpMap(router.getVpcId(), guestNetworkId);\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final String vlanTagKey = vlanAndIp.getKey();\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                ip.setTrafficType(getNetworkTrafficType(network));\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            setAccessDetailNetworkLastPublicIp(vlanLastIpMap, vlanTagKey, cmd);\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","date":"2020-03-01 02:56:07","endLine":763,"groupId":"24237","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePublicIPCommands","params":"(finalVirtualRouterrouter@finalList<?extendsPublicIpAddress>ips@finalCommandscmds@finalMap<String@String>vlanMacAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/87/a16626d2bc5cefa3835962ecc08c83272788f2.src","preCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                ip.setTrafficType(getNetworkTrafficType(network));\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"M"}],"commitId":"06a8ff04b1750501f96bef70538f5241a69ba9ff","commitMessage":"@@@Merge release branch 4.13 to master\n\n* 4.13:\n  VR: Fix Redundant VRouter guest network on wrong interface (#3847)\n","date":"2020-03-01 02:56:07","modifiedFileCount":"2","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-11-25 16:04:53","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"121857","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createStaticRouteCommands","params":"(finalList<StaticRouteProfile>staticRoutes@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createStaticRouteCommands(final List<StaticRouteProfile> staticRoutes, final VirtualRouter router, final Commands cmds) {\n        final SetStaticRouteCommand cmd = new SetStaticRouteCommand(staticRoutes);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"N"},{"authorDate":"2020-11-25 16:04:53","commitOrder":4,"curCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        Long guestNetworkId = null;\n        final List<NicVO> nics = _nicDao.listByVmId(router.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO nw = _networkDao.findById(nic.getNetworkId());\n            if (nw.getTrafficType() == TrafficType.Guest) {\n                guestNetworkId = nw.getId();\n                break;\n            }\n        }\n\n        Map<String, Boolean> vlanLastIpMap = getVlanLastIpMap(router.getVpcId(), guestNetworkId);\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final String vlanTagKey = vlanAndIp.getKey();\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                setIpAddressNetworkParams(ip, network, router);\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            setAccessDetailNetworkLastPublicIp(vlanLastIpMap, vlanTagKey, cmd);\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","date":"2020-11-25 16:04:53","endLine":768,"groupId":"121857","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePublicIPCommands","params":"(finalVirtualRouterrouter@finalList<?extendsPublicIpAddress>ips@finalCommandscmds@finalMap<String@String>vlanMacAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/26/2fa4b4ff1408e11aa14f56c473ac3a804e571f.src","preCode":"    public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final List<? extends PublicIpAddress> ips, final Commands cmds,\n            final Map<String, String> vlanMacAddress) {\n\n        final String ipAssocCommand = \"IPAssocVpcCommand\";\n        if (router.getIsRedundantRouter()) {\n            createRedundantAssociateIPCommands(router, ips, cmds, ipAssocCommand, true);\n            return;\n        }\n\n        Pair<IpAddressTO, Long> sourceNatIpAdd = null;\n        Boolean addSourceNat = null;\n        \r\n        \r\n        final Map<String, ArrayList<PublicIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PublicIpAddress>>();\n        for (final PublicIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getVlanTag();\n            ArrayList<PublicIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PublicIpAddress>();\n            }\n            \r\n            \r\n            if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {\n                ipAddress.setState(IpAddress.State.Allocated);\n            }\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        Long guestNetworkId = null;\n        final List<NicVO> nics = _nicDao.listByVmId(router.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO nw = _networkDao.findById(nic.getNetworkId());\n            if (nw.getTrafficType() == TrafficType.Guest) {\n                guestNetworkId = nw.getId();\n                break;\n            }\n        }\n\n        Map<String, Boolean> vlanLastIpMap = getVlanLastIpMap(router.getVpcId(), guestNetworkId);\n\n        for (final Map.Entry<String, ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final String vlanTagKey = vlanAndIp.getKey();\n            final List<PublicIpAddress> ipAddrList = vlanAndIp.getValue();\n\n            \r\n            Collections.sort(ipAddrList, new Comparator<PublicIpAddress>() {\n                @Override\n                public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n                    final boolean s1 = o1.isSourceNat();\n                    final boolean s2 = o2.isSourceNat();\n                    return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;\n                }\n            });\n\n\n            \r\n            final Integer networkRate = _networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(), router.getId());\n            final Network network = _networkModel.getNetwork(ipAddrList.get(0).getNetworkId());\n\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n            boolean firstIP = true;\n\n            for (final PublicIpAddress ipAddr : ipAddrList) {\n                final boolean add = ipAddr.getState() == IpAddress.State.Releasing ? false : true;\n                boolean sourceNat = ipAddr.isSourceNat();\n                \r\n\r\n\n                if (firstIP) {\n                    sourceNat = true;\n                }\n\n                final String macAddress = vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));\n\n                final IpAddressTO ip = new IpAddressTO(ipAddr.getAccountId(), ipAddr.getAddress().addr(), add, firstIP, sourceNat, BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(), ipAddr.getGateway(),\n                        ipAddr.getNetmask(), macAddress, networkRate, ipAddr.isOneToOneNat());\n\n                ip.setTrafficType(getNetworkTrafficType(network));\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n                if (ipAddr.isSourceNat()) {\n                    sourceNatIpAdd = new Pair<IpAddressTO, Long>(ip, ipAddr.getNetworkId());\n                    addSourceNat = add;\n                }\n\n                \r\n                \r\n                if (!firstIP || add) {\n                    firstIP = false;\n                }\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            setAccessDetailNetworkLastPublicIp(vlanLastIpMap, vlanTagKey, cmd);\n\n            cmds.addCommand(ipAssocCommand, cmd);\n        }\n\n        \r\n        if (sourceNatIpAdd != null) {\n            final IpAddressTO sourceNatIp = sourceNatIpAdd.first();\n            final SetSourceNatCommand cmd = new SetSourceNatCommand(sourceNatIp, addSourceNat);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            cmds.addCommand(\"SetSourceNatCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"}],"commitId":"e9ce381c56a7ed7bbba052be483bac79e0e46d2e","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-11-25 16:04:53","modifiedFileCount":"8","status":"M","submitter":"Daan Hoogland"}]
