[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final NetworkTopologyVisitor visitor) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        VpcManager vpcMgr = visitor.getVirtualNetworkApplianceFactory().getVpcMgr();\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                Nic nic = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    nicsToUnplug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                }\n            }\n        }\n\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                Nic nic = nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, _router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        NicVO nicVO = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n\n        return nicsToChange;\n    }\n","date":"2018-01-20 05:49:27","endLine":217,"groupId":"11483","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getNicsToChangeOnRouter","params":"(finalNetworkTopologyVisitorvisitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/40/cf72c77aa64c49502e13dde95e0f1a5ffff474.src","preCode":"    private Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final NetworkTopologyVisitor visitor) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        VpcManager vpcMgr = visitor.getVirtualNetworkApplianceFactory().getVpcMgr();\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                Nic nic = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    nicsToUnplug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                }\n            }\n        }\n\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                Nic nic = nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, _router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        NicVO nicVO = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n\n        return nicsToChange;\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/NicPlugInOutRules.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final List<? extends PublicIpAddress> publicIps, final VirtualRouter router) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                final Nic nic = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    nicsToUnplug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                }\n            }\n        }\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        final NicVO nicVO = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        _nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        final Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n        return nicsToChange;\n    }\n","date":"2018-01-20 05:49:27","endLine":697,"groupId":"11483","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getNicsToChangeOnRouter","params":"(finalList<?extendsPublicIpAddress>publicIps@finalVirtualRouterrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d2/2dcbafbba540598fe666ca3cd41d71ccd9bb48.src","preCode":"    protected Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final List<? extends PublicIpAddress> publicIps, final VirtualRouter router) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                final Nic nic = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    nicsToUnplug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                }\n            }\n        }\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        final NicVO nicVO = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        _nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        final Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n        return nicsToChange;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-11-25 16:04:53","commitOrder":2,"curCode":"    private Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final NetworkTopologyVisitor visitor) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        VpcManager vpcMgr = visitor.getVirtualNetworkApplianceFactory().getVpcMgr();\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        IPAddressDao ipAddressDao = visitor.getVirtualNetworkApplianceFactory().getIpAddressDao();\n        FirewallRulesDao rulesDao = visitor.getVirtualNetworkApplianceFactory().getFirewallRulesDao();\n\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                NicVO nic = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    final List<IPAddressVO> allIps = ipAddressDao.listByAssociatedVpc(ip.getVpcId(), null);\n                    boolean ipUpdated = false;\n                    for (IPAddressVO allIp : allIps) {\n                        if (allIp.getId() != ip.getId() && allIp.getVlanId() == ip.getVlanId()\n                                && (allIp.isSourceNat()\n                                || rulesDao.countRulesByIpIdAndState(allIp.getId(), FirewallRule.State.Active) > 0\n                                || (allIp.isOneToOneNat() && allIp.getRuleState() == null))) {\n                            s_logger.debug(\"Updating the nic \" + nic + \" with new ip address \" + allIp.getAddress().addr());\n                            nic.setIPv4Address(allIp.getAddress().addr());\n                            nicDao.update(nic.getId(), nic);\n                            ipUpdated = true;\n                            break;\n                        }\n                    }\n                    if (!ipUpdated) {\n                        nicsToUnplug.put(ip.getVlanTag(), ip);\n                        s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                    }\n                }\n            }\n        }\n\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                Nic nic = nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, _router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        NicVO nicVO = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n\n        return nicsToChange;\n    }\n","date":"2020-11-25 16:04:53","endLine":266,"groupId":"101744","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getNicsToChangeOnRouter","params":"(finalNetworkTopologyVisitorvisitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6e/e5e85f271298b6cabec87f89219779398214f7.src","preCode":"    private Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final NetworkTopologyVisitor visitor) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        VpcManager vpcMgr = visitor.getVirtualNetworkApplianceFactory().getVpcMgr();\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                Nic nic = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    nicsToUnplug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                }\n            }\n        }\n\n        \r\n        for (PublicIpAddress ip : _ipAddresses) {\n            URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                Nic nic = nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, _router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        NicVO nicVO = nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, _router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n\n        return nicsToChange;\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/NicPlugInOutRules.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final List<? extends PublicIpAddress> publicIps, final VirtualRouter router) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                final Nic nic = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    nicsToUnplug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                }\n            }\n        }\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        final NicVO nicVO = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        _nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        final Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n        return nicsToChange;\n    }\n","date":"2018-01-20 05:49:27","endLine":697,"groupId":"101744","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getNicsToChangeOnRouter","params":"(finalList<?extendsPublicIpAddress>publicIps@finalVirtualRouterrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d2/2dcbafbba540598fe666ca3cd41d71ccd9bb48.src","preCode":"    protected Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> getNicsToChangeOnRouter(final List<? extends PublicIpAddress> publicIps, final VirtualRouter router) {\n        \r\n\n        final Map<String, PublicIpAddress> nicsToPlug = new HashMap<String, PublicIpAddress>();\n        final Map<String, PublicIpAddress> nicsToUnplug = new HashMap<String, PublicIpAddress>();\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Releasing) {\n                final Nic nic = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), ip.getAddress().addr());\n                if (nic != null) {\n                    nicsToUnplug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to unplug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                }\n            }\n        }\n\n        \r\n        for (final PublicIpAddress ip : publicIps) {\n            final URI broadcastUri = BroadcastDomainType.Vlan.toUri(ip.getVlanTag());\n            final long publicNtwkId = ip.getNetworkId();\n\n            \r\n            \r\n            if (!_vpcMgr.isIpAllocatedToVpc(ip)) {\n                ip.setState(IpAddress.State.Releasing);\n            }\n\n            if (ip.getState() == IpAddress.State.Allocated || ip.getState() == IpAddress.State.Allocating) {\n                \r\n                \r\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(publicNtwkId, router.getId(), broadcastUri.toString());\n\n                if (nic == null && nicsToPlug.get(ip.getVlanTag()) == null) {\n                    nicsToPlug.put(ip.getVlanTag(), ip);\n                    s_logger.debug(\"Need to plug the nic for ip=\" + ip + \"; vlan=\" + ip.getVlanTag() + \" in public network id =\" + publicNtwkId);\n                } else {\n                    final PublicIpAddress nicToUnplug = nicsToUnplug.get(ip.getVlanTag());\n                    if (nicToUnplug != null) {\n                        final NicVO nicVO = _nicDao.findByIp4AddressAndNetworkIdAndInstanceId(publicNtwkId, router.getId(), nicToUnplug.getAddress().addr());\n                        nicVO.setIPv4Address(ip.getAddress().addr());\n                        _nicDao.update(nicVO.getId(), nicVO);\n                        s_logger.debug(\"Updated the nic \" + nicVO + \" with the new ip address \" + ip.getAddress().addr());\n                        nicsToUnplug.remove(ip.getVlanTag());\n                    }\n                }\n            }\n        }\n\n        final Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>> nicsToChange = new Pair<Map<String, PublicIpAddress>, Map<String, PublicIpAddress>>(nicsToPlug,\n                nicsToUnplug);\n        return nicsToChange;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"N"}],"commitId":"e9ce381c56a7ed7bbba052be483bac79e0e46d2e","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-11-25 16:04:53","modifiedFileCount":"8","status":"M","submitter":"Daan Hoogland"}]
