[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean manageStaticNatRule(SrxCommand command, String publicIp, String privateIp) throws ExecutionException {\n        String ruleName = genStaticNatRuleName(publicIp, privateIp);\n        String ruleName_private = genStaticNatRuleName(privateIp, publicIp);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                    xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        throw new ExecutionException(\"Failed to add trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName)) {\n                    throw new ExecutionException(\"Failed to delete static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    if (manageStaticNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp)){\n                        xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    }\n\n                    if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private))\n                    {\n                        throw new ExecutionException(\"Failed to delete trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            default:\n                throw new ExecutionException(\"Unrecognized command.\");\n\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2094,"groupId":"10124","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"manageStaticNatRule","params":"(SrxCommandcommand@StringpublicIp@StringprivateIp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/20/031e3227f2037d9764e54cb89351d97cc657c0.src","preCode":"    private boolean manageStaticNatRule(SrxCommand command, String publicIp, String privateIp) throws ExecutionException {\n        String ruleName = genStaticNatRuleName(publicIp, privateIp);\n        String ruleName_private = genStaticNatRuleName(privateIp, publicIp);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                    xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        throw new ExecutionException(\"Failed to add trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName)) {\n                    throw new ExecutionException(\"Failed to delete static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    if (manageStaticNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp)){\n                        xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    }\n\n                    if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private))\n                    {\n                        throw new ExecutionException(\"Failed to delete trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            default:\n                throw new ExecutionException(\"Unrecognized command.\");\n\n        }\n    }\n","realPath":"plugins/network-elements/juniper-srx/src/main/java/com/cloud/network/resource/JuniperSrxResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2012,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean manageDestinationNatRule(SrxCommand command, String publicIp, String privateIp, long srcPort, long destPort) throws ExecutionException {\n        String ruleName = genDestinationNatRuleName(publicIp, privateIp, srcPort, destPort);\n        String ruleName_private = ruleName + \"p\";\n        String poolName = genDestinationNatPoolName(privateIp, destPort);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS, privateIp, destPort)) {\n                    throw new ExecutionException(\"The destination NAT pool corresponding to private IP: \" + privateIp + \" and destination port: \" + destPort +\n                        \" does not exist.\");\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n\n                    xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                    xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                    xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        s_logger.debug(\"Purple: loopback Failed to add \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                privateIp + \", and private port \" + destPort);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to delete destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n                    if (manageDestinationNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp, srcPort, destPort))\n                    {\n                        xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                        if (!sendRequestAndCheckResponse(command, xml))\n                        {\n                            s_logger.debug(\"Purple: Failed to delete \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                    privateIp + \", and private port \" + destPort);\n                        }\n                    }\n\n                    return true;\n                }\n\n            default:\n                s_logger.debug(\"Unrecognized command.\");\n                return false;\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":2313,"groupId":"25039","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"manageDestinationNatRule","params":"(SrxCommandcommand@StringpublicIp@StringprivateIp@longsrcPort@longdestPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/20/031e3227f2037d9764e54cb89351d97cc657c0.src","preCode":"    private boolean manageDestinationNatRule(SrxCommand command, String publicIp, String privateIp, long srcPort, long destPort) throws ExecutionException {\n        String ruleName = genDestinationNatRuleName(publicIp, privateIp, srcPort, destPort);\n        String ruleName_private = ruleName + \"p\";\n        String poolName = genDestinationNatPoolName(privateIp, destPort);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS, privateIp, destPort)) {\n                    throw new ExecutionException(\"The destination NAT pool corresponding to private IP: \" + privateIp + \" and destination port: \" + destPort +\n                        \" does not exist.\");\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n\n                    xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                    xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                    xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        s_logger.debug(\"Purple: loopback Failed to add \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                privateIp + \", and private port \" + destPort);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to delete destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n                    if (manageDestinationNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp, srcPort, destPort))\n                    {\n                        xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                        if (!sendRequestAndCheckResponse(command, xml))\n                        {\n                            s_logger.debug(\"Purple: Failed to delete \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                    privateIp + \", and private port \" + destPort);\n                        }\n                    }\n\n                    return true;\n                }\n\n            default:\n                s_logger.debug(\"Unrecognized command.\");\n                return false;\n        }\n\n    }\n","realPath":"plugins/network-elements/juniper-srx/src/main/java/com/cloud/network/resource/JuniperSrxResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2214,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-03 19:47:51","commitOrder":2,"curCode":"    private boolean manageStaticNatRule(SrxCommand command, String publicIp, String privateIp) throws ExecutionException {\n        String ruleName = genStaticNatRuleName(publicIp, privateIp);\n        String ruleName_private = genStaticNatRuleName(privateIp, publicIp);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                    xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        throw new ExecutionException(\"Failed to add trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName)) {\n                    throw new ExecutionException(\"Failed to delete static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    if (manageStaticNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp)){\n                        xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                        if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private))\n                        {\n                            throw new ExecutionException(\"Failed to delete trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                        }\n                    }\n                    return true;\n                }\n\n            default:\n                throw new ExecutionException(\"Unrecognized command.\");\n\n        }\n    }\n","date":"2019-06-03 19:47:51","endLine":2094,"groupId":"10124","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"manageStaticNatRule","params":"(SrxCommandcommand@StringpublicIp@StringprivateIp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8a/da819c7a3e011af8e92c9ead3733ac2a12355d.src","preCode":"    private boolean manageStaticNatRule(SrxCommand command, String publicIp, String privateIp) throws ExecutionException {\n        String ruleName = genStaticNatRuleName(publicIp, privateIp);\n        String ruleName_private = genStaticNatRuleName(privateIp, publicIp);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                    xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        throw new ExecutionException(\"Failed to add trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName)) {\n                    throw new ExecutionException(\"Failed to delete static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    if (manageStaticNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp)){\n                        xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    }\n\n                    if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private))\n                    {\n                        throw new ExecutionException(\"Failed to delete trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            default:\n                throw new ExecutionException(\"Unrecognized command.\");\n\n        }\n    }\n","realPath":"plugins/network-elements/juniper-srx/src/main/java/com/cloud/network/resource/JuniperSrxResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2012,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private boolean manageDestinationNatRule(SrxCommand command, String publicIp, String privateIp, long srcPort, long destPort) throws ExecutionException {\n        String ruleName = genDestinationNatRuleName(publicIp, privateIp, srcPort, destPort);\n        String ruleName_private = ruleName + \"p\";\n        String poolName = genDestinationNatPoolName(privateIp, destPort);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS, privateIp, destPort)) {\n                    throw new ExecutionException(\"The destination NAT pool corresponding to private IP: \" + privateIp + \" and destination port: \" + destPort +\n                        \" does not exist.\");\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n\n                    xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                    xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                    xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        s_logger.debug(\"Purple: loopback Failed to add \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                privateIp + \", and private port \" + destPort);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to delete destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n                    if (manageDestinationNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp, srcPort, destPort))\n                    {\n                        xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                        if (!sendRequestAndCheckResponse(command, xml))\n                        {\n                            s_logger.debug(\"Purple: Failed to delete \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                    privateIp + \", and private port \" + destPort);\n                        }\n                    }\n\n                    return true;\n                }\n\n            default:\n                s_logger.debug(\"Unrecognized command.\");\n                return false;\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":2313,"groupId":"25039","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"manageDestinationNatRule","params":"(SrxCommandcommand@StringpublicIp@StringprivateIp@longsrcPort@longdestPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/20/031e3227f2037d9764e54cb89351d97cc657c0.src","preCode":"    private boolean manageDestinationNatRule(SrxCommand command, String publicIp, String privateIp, long srcPort, long destPort) throws ExecutionException {\n        String ruleName = genDestinationNatRuleName(publicIp, privateIp, srcPort, destPort);\n        String ruleName_private = ruleName + \"p\";\n        String poolName = genDestinationNatPoolName(privateIp, destPort);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS, privateIp, destPort)) {\n                    throw new ExecutionException(\"The destination NAT pool corresponding to private IP: \" + privateIp + \" and destination port: \" + destPort +\n                        \" does not exist.\");\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n\n                    xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                    xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                    xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        s_logger.debug(\"Purple: loopback Failed to add \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                privateIp + \", and private port \" + destPort);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to delete destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n                    if (manageDestinationNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp, srcPort, destPort))\n                    {\n                        xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                        if (!sendRequestAndCheckResponse(command, xml))\n                        {\n                            s_logger.debug(\"Purple: Failed to delete \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                    privateIp + \", and private port \" + destPort);\n                        }\n                    }\n\n                    return true;\n                }\n\n            default:\n                s_logger.debug(\"Unrecognized command.\");\n                return false;\n        }\n\n    }\n","realPath":"plugins/network-elements/juniper-srx/src/main/java/com/cloud/network/resource/JuniperSrxResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2214,"status":"N"}],"commitId":"1c5244a0c58510c467707d5d9f2c4fbc72d784d0","commitMessage":"@@@Merge remote-tracking branch 'origin/4.12'\n","date":"2019-06-03 19:47:51","modifiedFileCount":"19","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-07-08 18:16:12","codes":[{"authorDate":"2019-07-08 18:16:12","commitOrder":3,"curCode":"    private boolean manageStaticNatRule(SrxCommand command, String publicIp, String privateIp) throws ExecutionException {\n        String ruleName = genStaticNatRuleName(publicIp, privateIp);\n        String ruleName_private = genStaticNatRuleName(privateIp, publicIp);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (!manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                    xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                    xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n\n                    if (!sendRequestAndCheckResponse(command, xml)) {\n                        throw new ExecutionException(String.format(\"Failed to add static NAT rule %s -> %s on %s \", publicIp, privateIp, _publicZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Static NAT rule %s -> %s on %s already exists\", publicIp, privateIp, _publicZone));\n                }\n\n                if (!manageStaticNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp)) {\n                    xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                    xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n                    if (!sendRequestAndCheckResponse(command, xml)) {\n                        throw new ExecutionException(String.format(\"Failed to add static NAT rule %s -> %s on %s \", publicIp, privateIp, _privateZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Static NAT rule %s -> %s on %s already exists\", publicIp, privateIp, _privateZone));\n                }\n\n                return true;\n\n            case DELETE:\n                if (manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                    xml = setDelete(xml, true);\n                    xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                    if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName)) {\n                        throw new ExecutionException(String.format(\"Failed to delete static NAT rule %s -> %s on %s\", publicIp, privateIp, _publicZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Static NAT rule %s -> %s on %s not found\", publicIp, privateIp, _publicZone));\n                }\n\n                if (manageStaticNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp)){\n                    xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                    xml = setDelete(xml, true);\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                    if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private))\n                    {\n                        throw new ExecutionException(String.format(\"Failed to delete static NAT rule %s -> %s on %s\", publicIp, privateIp, _privateZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Static NAT rule %s -> %s on %s not found\", publicIp, privateIp, _privateZone));\n                }\n\n                return true;\n\n            default:\n                throw new ExecutionException(\"Unrecognized command.\");\n\n        }\n    }\n","date":"2019-07-08 18:16:12","endLine":2109,"groupId":"103537","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"manageStaticNatRule","params":"(SrxCommandcommand@StringpublicIp@StringprivateIp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/04/d4c8c2dc366e74dd51e1ab3992c6e1457cefd6.src","preCode":"    private boolean manageStaticNatRule(SrxCommand command, String publicIp, String privateIp) throws ExecutionException {\n        String ruleName = genStaticNatRuleName(publicIp, privateIp);\n        String ruleName_private = genStaticNatRuleName(privateIp, publicIp);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    xml = SrxXml.STATIC_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"original-ip\", publicIp);\n                    xml = replaceXmlValue(xml, \"translated-ip\", privateIp);\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        throw new ExecutionException(\"Failed to add trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageStaticNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp)) {\n                    return true;\n                }\n\n                xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName)) {\n                    throw new ExecutionException(\"Failed to delete static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                } else {\n                    if (manageStaticNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp)){\n                        xml = SrxXml.STATIC_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                        if (!sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private))\n                        {\n                            throw new ExecutionException(\"Failed to delete trust static NAT rule from public IP \" + publicIp + \" to private IP \" + privateIp);\n                        }\n                    }\n                    return true;\n                }\n\n            default:\n                throw new ExecutionException(\"Unrecognized command.\");\n\n        }\n    }\n","realPath":"plugins/network-elements/juniper-srx/src/main/java/com/cloud/network/resource/JuniperSrxResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2020,"status":"M"},{"authorDate":"2019-07-08 18:16:12","commitOrder":3,"curCode":"    private boolean manageDestinationNatRule(SrxCommand command, String publicIp, String privateIp, long srcPort, long destPort) throws ExecutionException {\n        String ruleName = genDestinationNatRuleName(publicIp, privateIp, srcPort, destPort);\n        String ruleName_private = ruleName + \"p\";\n        String poolName = genDestinationNatPoolName(privateIp, destPort);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                \r\n                if (!manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS, privateIp, destPort)) {       \r\n                        throw new ExecutionException(String.format(\"Destination NAT pool for %s:%s does not exist\", privateIp, destPort));\n                    }\n\n                    xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                    xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                    xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                    xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                    if (!sendRequestAndCheckResponse(command, xml)) {\n                        throw new ExecutionException(String.format(\"Failed to add Destination NAT rule %s:%s -> %s:%s on %s\",\n                            publicIp, srcPort, privateIp, destPort, _publicZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Destination NAT rule for %s:%s -> %s:%s on %s already exists\",\n                        publicIp, srcPort, privateIp, destPort, _publicZone));\n                }\n\n                \r\n                if (!manageDestinationNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                    xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                    xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        throw new ExecutionException(String.format(\"Failed to add Destination NAT rule %s:%s -> %s:%s on %s\",\n                            publicIp, srcPort, privateIp, destPort, _privateZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Destination NAT rule for %s:%s -> %s:%s on %s already exists\",\n                        publicIp, srcPort, privateIp, destPort, _privateZone));\n                }\n\n                return true;\n\n            case DELETE:\n                \r\n                if (manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                    xml = setDelete(xml, true);\n                    xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                    if (!sendRequestAndCheckResponse(command, xml)) {\n                        throw new ExecutionException(String.format(\"Failed to delete destination NAT rule %s[%s] -> %s[%s] on rule %s\",\n                            publicIp, srcPort, privateIp, destPort, _publicZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Destination NAT rule %s[%s] -> %s[%s] not found on %s, not deleting\",\n                        publicIp, srcPort, privateIp, destPort, _publicZone));\n                }\n\n                \r\n                if (manageDestinationNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                    xml = setDelete(xml, true);\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        throw new ExecutionException(String.format(\"Failed to delete destination NAT rule %s[%s] -> %s[%s] on rule %s\",\n                            publicIp, srcPort, privateIp, destPort, _privateZone));\n                    }\n                } else {\n                    s_logger.debug(String.format(\"Destination NAT rule %s[%s] -> %s[%s] not found on %s, not deleting\",\n                        publicIp, srcPort, privateIp, destPort, _privateZone));\n                }\n\n                return true;\n\n            default:\n                s_logger.debug(\"Unrecognized command.\");\n                return false;\n        }\n\n    }\n","date":"2019-07-08 18:16:12","endLine":2340,"groupId":"103537","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"manageDestinationNatRule","params":"(SrxCommandcommand@StringpublicIp@StringprivateIp@longsrcPort@longdestPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/04/d4c8c2dc366e74dd51e1ab3992c6e1457cefd6.src","preCode":"    private boolean manageDestinationNatRule(SrxCommand command, String publicIp, String privateIp, long srcPort, long destPort) throws ExecutionException {\n        String ruleName = genDestinationNatRuleName(publicIp, privateIp, srcPort, destPort);\n        String ruleName_private = ruleName + \"p\";\n        String poolName = genDestinationNatPoolName(privateIp, destPort);\n        String xml;\n\n        switch (command) {\n\n            case CHECK_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName);\n            case CHECK_PRIVATE_IF_EXISTS:\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, false);\n                xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                return sendRequestAndCheckResponse(command, xml, \"name\", ruleName_private);\n            case ADD:\n                if (manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                if (!manageDestinationNatPool(SrxCommand.CHECK_IF_EXISTS, privateIp, destPort)) {\n                    throw new ExecutionException(\"The destination NAT pool corresponding to private IP: \" + privateIp + \" and destination port: \" + destPort +\n                        \" does not exist.\");\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n                xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to add destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n\n                    xml = SrxXml.DEST_NAT_RULE_ADD.getXml();\n                    xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                    xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                    xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n                    xml = replaceXmlValue(xml, \"public-address\", publicIp);\n                    xml = replaceXmlValue(xml, \"src-port\", String.valueOf(srcPort));\n                    xml = replaceXmlValue(xml, \"pool-name\", poolName);\n\n                    if (!sendRequestAndCheckResponse(command, xml))\n                    {\n                        s_logger.debug(\"Purple: loopback Failed to add \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                privateIp + \", and private port \" + destPort);\n                    }\n                    return true;\n                }\n\n            case DELETE:\n                if (!manageDestinationNatRule(SrxCommand.CHECK_IF_EXISTS, publicIp, privateIp, srcPort, destPort)) {\n                    return true;\n                }\n\n                xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                xml = setDelete(xml, true);\n                xml = replaceXmlValue(xml, \"rule-set\", _publicZone);\n                xml = replaceXmlValue(xml, \"from-zone\", _publicZone);\n                xml = replaceXmlValue(xml, \"rule-name\", ruleName);\n\n                if (!sendRequestAndCheckResponse(command, xml)) {\n                    throw new ExecutionException(\"Failed to delete destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                        privateIp + \", and private port \" + destPort);\n                } else {\n                    if (manageDestinationNatRule(SrxCommand.CHECK_PRIVATE_IF_EXISTS, publicIp, privateIp, srcPort, destPort))\n                    {\n                        xml = SrxXml.DEST_NAT_RULE_GETONE.getXml();\n                        xml = setDelete(xml, true);\n                        xml = replaceXmlValue(xml, \"rule-set\", _privateZone);\n                        xml = replaceXmlValue(xml, \"from-zone\", _privateZone);\n                        xml = replaceXmlValue(xml, \"rule-name\", ruleName_private);\n\n                        if (!sendRequestAndCheckResponse(command, xml))\n                        {\n                            s_logger.debug(\"Purple: Failed to delete \" + _privateZone + \" destination NAT rule from public IP \" + publicIp + \", public port \" + srcPort + \", private IP \" +\n                                    privateIp + \", and private port \" + destPort);\n                        }\n                    }\n\n                    return true;\n                }\n\n            default:\n                s_logger.debug(\"Unrecognized command.\");\n                return false;\n        }\n\n    }\n","realPath":"plugins/network-elements/juniper-srx/src/main/java/com/cloud/network/resource/JuniperSrxResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2229,"status":"M"}],"commitId":"d70f574a7ef949e6385ff594cccb8260b5a1f0ee","commitMessage":"@@@plugins: fix removing SRX port forwarding rules.  improve add/remove logic (#3393)\n\nThis PR partially fixes the logic around port forwarding rules on the Juniper SRX plugin. The code in the plugin is based on JunOS 10.  which is very old. The changes here should not break compatibility.  but should enable the plugin to be used on newer devices. Note that an additional change to a script file is required to be able to add port forwarding rules.  but as this PR was targetted for 4.11.3.  I thought it best not to include this change as it might break compatibility for anyone still using JunOS 10.\n\nI've made the logic better and consistent for adding/removing static nat and port forwarding rules - these were multi-step processes which did not check each individual step. This would aid in manually fixing rules in case of further problems.\n\nI've also improved the logging for communication with the SRX by stripping out the Apache header before sending it.  and indicating the name of the template filename in use.\n\nTo be able to add port forwarding rules.  the <dst-port> tags in dest-nat-rule-add.xml must be changed to <low>.\n\nFixes: #3379","date":"2019-07-08 18:16:12","modifiedFileCount":"1","status":"M","submitter":"Richard Lawley"}]
