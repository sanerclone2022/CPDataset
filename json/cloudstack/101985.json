[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.getOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","date":"2018-01-20 05:49:27","endLine":791,"groupId":"3401","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createProxyInstance","params":"(longdataCenterId@VMTemplateVOtemplate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/fff3c7219cceb44a61a820fcddfdef364d7f89.src","preCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.getOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStore(dataCenterId);\n        if (secStore == null) {\n            String msg = \"No secondary storage available in zone \" + dataCenterId + \", cannot create secondary storage vm\";\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n            return new HashMap<String, Object>();\n        }\n\n        VMTemplateVO template = null;\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(\"Not able to find the System templates or not downloaded in zone \" + dataCenterId);\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.getOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","date":"2018-01-20 05:49:27","endLine":667,"groupId":"7183","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecStorageVmInstance","params":"(longdataCenterId@SecondaryStorageVm.Rolerole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/58c9c0e6824403a7fc6575a694f76829e8889a.src","preCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStore(dataCenterId);\n        if (secStore == null) {\n            String msg = \"No secondary storage available in zone \" + dataCenterId + \", cannot create secondary storage vm\";\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n            return new HashMap<String, Object>();\n        }\n\n        VMTemplateVO template = null;\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(\"Not able to find the System templates or not downloaded in zone \" + dataCenterId);\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.getOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-09-22 23:20:48","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":2,"curCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.isOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","date":"2018-09-22 23:20:48","endLine":793,"groupId":"3401","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createProxyInstance","params":"(longdataCenterId@VMTemplateVOtemplate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/87/dca70f6a08e6dfe3aa44784c884fb9c64715aa.src","preCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.getOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":745,"status":"M"},{"authorDate":"2018-09-22 23:20:48","commitOrder":2,"curCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStore(dataCenterId);\n        if (secStore == null) {\n            String msg = \"No secondary storage available in zone \" + dataCenterId + \", cannot create secondary storage vm\";\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n            return new HashMap<String, Object>();\n        }\n\n        VMTemplateVO template = null;\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(\"Not able to find the System templates or not downloaded in zone \" + dataCenterId);\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.isOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","date":"2018-09-22 23:20:48","endLine":670,"groupId":"7183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecStorageVmInstance","params":"(longdataCenterId@SecondaryStorageVm.Rolerole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1d/3eba835cec84f05797830eee121edff3db4525.src","preCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStore(dataCenterId);\n        if (secStore == null) {\n            String msg = \"No secondary storage available in zone \" + dataCenterId + \", cannot create secondary storage vm\";\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n            return new HashMap<String, Object>();\n        }\n\n        VMTemplateVO template = null;\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(\"Not able to find the System templates or not downloaded in zone \" + dataCenterId);\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.getOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2019-07-31 18:07:59","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":3,"curCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.isOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","date":"2018-09-22 23:20:48","endLine":793,"groupId":"3401","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createProxyInstance","params":"(longdataCenterId@VMTemplateVOtemplate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/87/dca70f6a08e6dfe3aa44784c884fb9c64715aa.src","preCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.isOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":745,"status":"N"},{"authorDate":"2019-07-31 18:07:59","commitOrder":3,"curCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dataCenterId);\n        if (secStore == null) {\n            String msg = \"No secondary storage available in zone \" + dataCenterId + \", cannot create secondary storage vm\";\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n            return new HashMap<String, Object>();\n        }\n\n        VMTemplateVO template = null;\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(\"Not able to find the System templates or not downloaded in zone \" + dataCenterId);\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.isOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","date":"2019-07-31 18:07:59","endLine":670,"groupId":"7183","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecStorageVmInstance","params":"(longdataCenterId@SecondaryStorageVm.Rolerole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8b/2ed40c15db87e65b47998b03103ccedd7d6fef.src","preCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStore(dataCenterId);\n        if (secStore == null) {\n            String msg = \"No secondary storage available in zone \" + dataCenterId + \", cannot create secondary storage vm\";\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n            return new HashMap<String, Object>();\n        }\n\n        VMTemplateVO template = null;\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(\"Not able to find the System templates or not downloaded in zone \" + dataCenterId);\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.isOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"}],"commitId":"b2db8979f2249b0b6c0d8d0dfe40e05ba9ef9649","commitMessage":"@@@server: fix for respecting secondary storage threshold limit (#3480)\n\nRetrieval of an image store using ImageStoreProviderManager has been refactored by introducing three different methods. \nDataStore getRandomImageStore(List<DataStore> imageStores);\nTo get an image store for reading purpose. Threshold capacity check will not be used here.\nDataStore getImageStoreWithFreeCapacity(List<DataStore> imageStores);\nTo get an image store for reading purpose. Threshold capacity check will be used here and the store with max free space will be returned. If no store with filled storage less than the threshold is found.  the NULL value will be returned.\nList<DataStore> listImageStoresWithFreeCapacity(List<DataStore> imageStores);\nTo get a list of image stores for writing purpose which fulfills threshold capacity check.\n\nCorrespondingly DataStoreManager methods have been refactored to return similar values for a given zone.\n\nFixes #3287 - NULL value will be returned when secondary storage is needed for writing but there is not store with free space.\nFixes #3041 - Rather than returning random secondary storage for writing.  storage with max. free space will be returned.\nFixes #3478 - For migration on VMware.  all writable secondary storage will be mounted while preparation.\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2019-07-31 18:07:59","modifiedFileCount":"21","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2021-05-10 15:47:42","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":4,"curCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.isOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","date":"2018-09-22 23:20:48","endLine":793,"groupId":"3401","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createProxyInstance","params":"(longdataCenterId@VMTemplateVOtemplate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/87/dca70f6a08e6dfe3aa44784c884fb9c64715aa.src","preCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.isOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":745,"status":"N"},{"authorDate":"2021-05-10 15:47:42","commitOrder":4,"curCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dataCenterId);\n        if (secStore == null) {\n            String msg = String.format(\"No secondary storage available in zone %s, cannot create secondary storage VM.\", dataCenterId);\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.error(String.format(\"Unable to setup networks on %s due [%s].\", dc.toString(), e.getMessage()), e);\n            return new HashMap<>();\n        }\n\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        VMTemplateVO template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(String.format(\"Unable to find the system templates or it was not downloaded in %s.\", dc.toString()));\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.isOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            String errorMessage = String.format(\"Unable to allocate secondary storage VM [%s] due to [%s].\", name, e.getMessage());\n            s_logger.warn(errorMessage, e);\n            throw new CloudRuntimeException(errorMessage, e);\n        }\n\n        Map<String, Object> context = new HashMap<>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","date":"2021-05-10 15:47:42","endLine":642,"groupId":"21435","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecStorageVmInstance","params":"(longdataCenterId@SecondaryStorageVm.Rolerole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/f8bbb803bc65cb60ba132e109ff04fc94b63b5.src","preCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dataCenterId);\n        if (secStore == null) {\n            String msg = \"No secondary storage available in zone \" + dataCenterId + \", cannot create secondary storage vm\";\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n            return new HashMap<String, Object>();\n        }\n\n        VMTemplateVO template = null;\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(\"Not able to find the System templates or not downloaded in zone \" + dataCenterId);\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.isOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"M"}],"commitId":"3674e80219d0be9e940bd948060fa10a467e4b7e","commitMessage":"@@@Improve logs on SecondaryStorageManagerImpl and few refactors (#4955)\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <daniel@scclouds.com.br>","date":"2021-05-10 15:47:42","modifiedFileCount":"4","status":"M","submitter":"Daniel Augusto Veronezi Salvador"},{"authorTime":"2021-05-10 15:47:42","codes":[{"authorDate":"2021-07-28 06:56:14","commitOrder":5,"curCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, instance);\n        DataCenterVO dc = dataCenterDao.findById(dataCenterId);\n        Account systemAcct = accountManager.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(networkOrchestrationService.setupNetwork(systemAcct, networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(networkOrchestrationService.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<>());\n        }\n\n        ServiceOfferingVO serviceOffering = serviceOfferingVO;\n        if (serviceOffering == null) {\n            serviceOffering = serviceOfferingDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), accountManager.getSystemUser().getId(), 0, serviceOffering.isOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = consoleProxyDao.persist(proxy);\n        try {\n            virtualMachineManager.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            String message = String.format(\"Unable to allocate proxy [%s] on zone [%s] due to [%s].\", proxy.toString(), dataCenterId, e.getMessage());\n            s_logger.warn(message, e);\n            throw new CloudRuntimeException(message, e);\n        }\n\n        Map<String, Object> context = new HashMap<>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = hostPodDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","date":"2021-07-28 06:56:14","endLine":707,"groupId":"101985","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"createProxyInstance","params":"(longdataCenterId@VMTemplateVOtemplate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6c/c0ace1e05600559e196cd0be536313c3c1cd80.src","preCode":"    protected Map<String, Object> createProxyInstance(long dataCenterId, VMTemplateVO template) throws ConcurrentOperationException {\n\n        long id = _consoleProxyDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n        DataCenterVO dc = _dcDao.findById(dataCenterId);\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings =\n            _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n\n        networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                new ArrayList<NicProfile>(Arrays.asList(defaultNic)));\n\n        for (NetworkOffering offering : offerings) {\n            networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<NicProfile>());\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.consoleProxyDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        ConsoleProxyVO proxy =\n            new ConsoleProxyVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), 0, serviceOffering.isOfferHA());\n        proxy.setDynamicallyScalable(template.isDynamicallyScalable());\n        proxy = _consoleProxyDao.persist(proxy);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n        } catch (InsufficientCapacityException e) {\n            s_logger.warn(\"InsufficientCapacity\", e);\n            throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n        }\n\n        Map<String, Object> context = new HashMap<String, Object>();\n        context.put(\"dc\", dc);\n        HostPodVO pod = _podDao.findById(proxy.getPodIdToDeployIn());\n        context.put(\"pod\", pod);\n        context.put(\"proxyVmId\", proxy.getId());\n\n        return context;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"},{"authorDate":"2021-05-10 15:47:42","commitOrder":5,"curCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dataCenterId);\n        if (secStore == null) {\n            String msg = String.format(\"No secondary storage available in zone %s, cannot create secondary storage VM.\", dataCenterId);\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.error(String.format(\"Unable to setup networks on %s due [%s].\", dc.toString(), e.getMessage()), e);\n            return new HashMap<>();\n        }\n\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        VMTemplateVO template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(String.format(\"Unable to find the system templates or it was not downloaded in %s.\", dc.toString()));\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.isOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            String errorMessage = String.format(\"Unable to allocate secondary storage VM [%s] due to [%s].\", name, e.getMessage());\n            s_logger.warn(errorMessage, e);\n            throw new CloudRuntimeException(errorMessage, e);\n        }\n\n        Map<String, Object> context = new HashMap<>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","date":"2021-05-10 15:47:42","endLine":642,"groupId":"101985","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecStorageVmInstance","params":"(longdataCenterId@SecondaryStorageVm.Rolerole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/f8bbb803bc65cb60ba132e109ff04fc94b63b5.src","preCode":"    protected Map<String, Object> createSecStorageVmInstance(long dataCenterId, SecondaryStorageVm.Role role) {\n        DataStore secStore = _dataStoreMgr.getImageStoreWithFreeCapacity(dataCenterId);\n        if (secStore == null) {\n            String msg = String.format(\"No secondary storage available in zone %s, cannot create secondary storage VM.\", dataCenterId);\n            s_logger.warn(msg);\n            throw new CloudRuntimeException(msg);\n        }\n\n        long id = _secStorageVmDao.getNextInSequence(Long.class, \"id\");\n        String name = VirtualMachineName.getSystemVmName(id, _instance, \"s\").intern();\n        Account systemAcct = _accountMgr.getSystemAccount();\n\n        DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n        DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n\n        NetworkVO defaultNetwork = getDefaultNetworkForCreation(dc);\n\n        List<? extends NetworkOffering> offerings = null;\n        if (_sNwMgr.isStorageIpRangeAvailable(dataCenterId)) {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork, NetworkOffering.SystemStorageNetwork);\n        } else {\n            offerings = _networkModel.getSystemAccountNetworkOfferings(NetworkOffering.SystemControlNetwork, NetworkOffering.SystemManagementNetwork);\n        }\n        LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<>(offerings.size() + 1);\n        NicProfile defaultNic = new NicProfile();\n        defaultNic.setDefaultNic(true);\n        defaultNic.setDeviceId(2);\n        try {\n            networks.put(_networkMgr.setupNetwork(systemAcct, _networkOfferingDao.findById(defaultNetwork.getNetworkOfferingId()), plan, null, null, false).get(0),\n                    new ArrayList<>(Arrays.asList(defaultNic)));\n            for (NetworkOffering offering : offerings) {\n                networks.put(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false).get(0), new ArrayList<>());\n            }\n        } catch (ConcurrentOperationException e) {\n            s_logger.error(String.format(\"Unable to setup networks on %s due [%s].\", dc.toString(), e.getMessage()), e);\n            return new HashMap<>();\n        }\n\n        HypervisorType availableHypervisor = _resourceMgr.getAvailableHypervisor(dataCenterId);\n        VMTemplateVO template = _templateDao.findSystemVMReadyTemplate(dataCenterId, availableHypervisor);\n        if (template == null) {\n            throw new CloudRuntimeException(String.format(\"Unable to find the system templates or it was not downloaded in %s.\", dc.toString()));\n        }\n\n        ServiceOfferingVO serviceOffering = _serviceOffering;\n        if (serviceOffering == null) {\n            serviceOffering = _offeringDao.findDefaultSystemOffering(ServiceOffering.ssvmDefaultOffUniqueName, ConfigurationManagerImpl.SystemVMUseLocalStorage.valueIn(dataCenterId));\n        }\n        SecondaryStorageVmVO secStorageVm =\n            new SecondaryStorageVmVO(id, serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n                systemAcct.getDomainId(), systemAcct.getId(), _accountMgr.getSystemUser().getId(), role, serviceOffering.isOfferHA());\n        secStorageVm.setDynamicallyScalable(template.isDynamicallyScalable());\n        secStorageVm = _secStorageVmDao.persist(secStorageVm);\n        try {\n            _itMgr.allocate(name, template, serviceOffering, networks, plan, null);\n            secStorageVm = _secStorageVmDao.findById(secStorageVm.getId());\n        } catch (InsufficientCapacityException e) {\n            String errorMessage = String.format(\"Unable to allocate secondary storage VM [%s] due to [%s].\", name, e.getMessage());\n            s_logger.warn(errorMessage, e);\n            throw new CloudRuntimeException(errorMessage, e);\n        }\n\n        Map<String, Object> context = new HashMap<>();\n        context.put(\"secStorageVmId\", secStorageVm.getId());\n        return context;\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"N"}],"commitId":"1f5ee5b3e3855c7f46d7e850465a8a0ec3a5c19c","commitMessage":"@@@Improve logs on ConsoleProxyManagerImpl and refactor a few process (#4959)\n\n","date":"2021-07-28 06:56:14","modifiedFileCount":"3","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
