[{"authorTime":"2018-07-17 06:39:08","codes":[{"authorDate":"2018-07-17 06:39:08","commitOrder":1,"curCode":"    public static void hostRemovedFromCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                              PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findByIdIncludingRemoved(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null && isCloudStackOnlyVag(sfConnection, sfVag)) {\n                            removeInitiatorsFromSolidFireVag(sfConnection, sfVag.getId(), new String[] { hostVO.getStorageUrl() });\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","date":"2018-07-17 06:39:08","endLine":458,"groupId":"18008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"hostRemovedFromCluster","params":"(longhostId@longclusterId@StringstorageProvider@ClusterDaoclusterDao@HostDaohostDao@PrimaryDataStoreDaostoragePoolDao@StoragePoolDetailsDaostoragePoolDetailsDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/8a2885945cf654ef1a367e1cdc822dd8df6600.src","preCode":"    public static void hostRemovedFromCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                              PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findByIdIncludingRemoved(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null && isCloudStackOnlyVag(sfConnection, sfVag)) {\n                            removeInitiatorsFromSolidFireVag(sfConnection, sfVag.getId(), new String[] { hostVO.getStorageUrl() });\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"B"},{"authorDate":"2018-07-17 06:39:08","commitOrder":1,"curCode":"    public static void hostAddedToCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                          PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findById(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null) {\n                            placeVolumeIdsInVag(sfConnection, sfVags, sfVag, hostVO, hostDao);\n                        } else {\n                            handleVagForHost(sfConnection, sfVags, hostVO, hostDao);\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","date":"2018-07-17 06:39:08","endLine":510,"groupId":"18008","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"hostAddedToCluster","params":"(longhostId@longclusterId@StringstorageProvider@ClusterDaoclusterDao@HostDaohostDao@PrimaryDataStoreDaostoragePoolDao@StoragePoolDetailsDaostoragePoolDetailsDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/8a2885945cf654ef1a367e1cdc822dd8df6600.src","preCode":"    public static void hostAddedToCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                          PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findById(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null) {\n                            placeVolumeIdsInVag(sfConnection, sfVags, sfVag, hostVO, hostDao);\n                        } else {\n                            handleVagForHost(sfConnection, sfVags, hostVO, hostDao);\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"B"}],"commitId":"99bc0e6677f88a7ac063496d8932bda9b996d356","commitMessage":"@@@Merge pull request #2503 from mike-tutkowski/multi-sf-vags\n\nSupport multiple volume access groups per compute cluster","date":"2018-07-17 06:39:08","modifiedFileCount":"10","status":"B","submitter":"Mike Tutkowski"},{"authorTime":"2020-06-03 02:58:20","codes":[{"authorDate":"2018-07-17 06:39:08","commitOrder":2,"curCode":"    public static void hostRemovedFromCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                              PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findByIdIncludingRemoved(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null && isCloudStackOnlyVag(sfConnection, sfVag)) {\n                            removeInitiatorsFromSolidFireVag(sfConnection, sfVag.getId(), new String[] { hostVO.getStorageUrl() });\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","date":"2018-07-17 06:39:08","endLine":458,"groupId":"104348","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"hostRemovedFromCluster","params":"(longhostId@longclusterId@StringstorageProvider@ClusterDaoclusterDao@HostDaohostDao@PrimaryDataStoreDaostoragePoolDao@StoragePoolDetailsDaostoragePoolDetailsDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/8a2885945cf654ef1a367e1cdc822dd8df6600.src","preCode":"    public static void hostRemovedFromCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                              PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findByIdIncludingRemoved(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null && isCloudStackOnlyVag(sfConnection, sfVag)) {\n                            removeInitiatorsFromSolidFireVag(sfConnection, sfVag.getId(), new String[] { hostVO.getStorageUrl() });\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"N"},{"authorDate":"2020-06-03 02:58:20","commitOrder":2,"curCode":"    public static void hostAddedToCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                          PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findById(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null) {\n                            placeVolumeIdsInVag(sfConnection, sfVags, sfVag, hostVO, hostDao);\n                        } else {\n                            handleVagForHost(sfConnection, sfVags, hostVO, hostDao, clusterDao);\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","date":"2020-06-03 02:58:20","endLine":510,"groupId":"104348","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"hostAddedToCluster","params":"(longhostId@longclusterId@StringstorageProvider@ClusterDaoclusterDao@HostDaohostDao@PrimaryDataStoreDaostoragePoolDao@StoragePoolDetailsDaostoragePoolDetailsDao)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ac/f1d5c7b151d7488b7313eb49b18c9829b1e4c5.src","preCode":"    public static void hostAddedToCluster(long hostId, long clusterId, String storageProvider, ClusterDao clusterDao, HostDao hostDao,\n                                          PrimaryDataStoreDao storagePoolDao, StoragePoolDetailsDao storagePoolDetailsDao) {\n        HostVO hostVO = hostDao.findById(hostId);\n\n        Preconditions.checkArgument(hostVO != null, \"Could not locate host for ID: \" + hostId);\n\n        ClusterVO cluster = clusterDao.findById(clusterId);\n\n        GlobalLock lock = GlobalLock.getInternLock(cluster.getUuid());\n\n        if (!lock.lock(LOCK_TIME_IN_SECONDS)) {\n            String errMsg = \"Couldn't lock the DB on the following string: \" + cluster.getUuid();\n\n            LOGGER.warn(errMsg);\n\n            throw new CloudRuntimeException(errMsg);\n        }\n\n        try {\n            List<StoragePoolVO> storagePools = storagePoolDao.findPoolsByProvider(storageProvider);\n\n            if (storagePools != null && storagePools.size() > 0) {\n                List<SolidFireUtil.SolidFireConnection> sfConnections = new ArrayList<>();\n\n                for (StoragePoolVO storagePool : storagePools) {\n                    if (!isStorageApplicableToZoneOrCluster(storagePool, clusterId, clusterDao)) {\n                        continue;\n                    }\n\n                    SolidFireUtil.SolidFireConnection sfConnection = SolidFireUtil.getSolidFireConnection(storagePool.getId(), storagePoolDetailsDao);\n\n                    if (!sfConnections.contains(sfConnection)) {\n                        sfConnections.add(sfConnection);\n\n                        List<SolidFireUtil.SolidFireVag> sfVags = SolidFireUtil.getAllVags(sfConnection);\n                        SolidFireVag sfVag = getVolumeAccessGroup(hostVO.getStorageUrl(), sfVags);\n\n                        if (sfVag != null) {\n                            placeVolumeIdsInVag(sfConnection, sfVags, sfVag, hostVO, hostDao);\n                        } else {\n                            handleVagForHost(sfConnection, sfVags, hostVO, hostDao);\n                        }\n                    }\n                }\n            }\n        }\n        finally {\n            lock.unlock();\n            lock.releaseRef();\n        }\n    }\n","realPath":"plugins/storage/volume/solidfire/src/main/java/org/apache/cloudstack/storage/datastore/util/SolidFireUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"M"}],"commitId":"8dd6cef9a6d395a2b8d876e358077bd150cdc9f1","commitMessage":"@@@create Volume Access Groups per cluster instead of CloudStack-RandomUUID() (#3794)\n\n* create vags per cluster\n\n* vagname in solidfire utils vag object\n\n* fix string compare\n\n* refactor to make use of existing map\n\n* fix typos\n\n* rebuild vag to iqn map after creating cluster vag\n\n* refactor loop using java 8 stream api\n\n* update null entry in vag to iqn map\n\n* remove null vag to iqn mapping when creating cluster id vag\n\n* add initiator to sf vag when adding hosts\n\n* use cluster uuid instead of cluster id and refactor\n\n* update null entry in vagtoiqnmap\n\n* update sfvag list after creating new vag\n\n* pass clusterDao to handleVagForHost\n\n* check if initiator is not already added to the vag\n\n* factor logic into methods\n\n* fix typo and camel case\n\n* fix listing clusters by zone id\n\nCo-authored-by: Sid Kattoju <siddharthakattoju@gmail.com>","date":"2020-06-03 02:58:20","modifiedFileCount":"3","status":"M","submitter":"Sid Kattoju"}]
