[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n        \r\n        StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n        Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n        \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","date":"2018-01-20 05:49:27","endLine":232,"groupId":"14499","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createProject","params":"(finalStringname@finalStringdisplayText@StringaccountName@finalLongdomainId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a8/dd225c54c6acd33698603a2d12eb17c78da894.src","preCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n        \r\n        StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n        Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n        \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","realPath":"server/src/main/java/com/cloud/projects/ProjectManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","date":"2018-01-20 05:49:27","endLine":107,"groupId":"23335","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityOwnerId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e8/a045ca1ccf3e9c4c49c97237e77050944f3f24.src","preCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/project/CreateProjectCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-08-13 18:15:39","codes":[{"authorDate":"2020-08-13 18:15:39","commitOrder":2,"curCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId, final Long userId, final Long accountId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Domain ID and account ID must be provided with User ID\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        User user = validateUser(userId, accountId, domainId);\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        User finalUser = user;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n                \r\n                StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n                Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n                \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin,\n                        Optional.ofNullable(finalUser).map(User::getId).orElse(null),  null);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","date":"2020-08-13 18:15:39","endLine":275,"groupId":"2005","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createProject","params":"(finalStringname@finalStringdisplayText@StringaccountName@finalLongdomainId@finalLonguserId@finalLongaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/90/a27fcafd016a0bd3e26b122abf2b0a319345ad.src","preCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n                \r\n                StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n                Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n                \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","realPath":"server/src/main/java/com/cloud/projects/ProjectManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2020-08-13 18:15:39","commitOrder":2,"curCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account ID and Domain ID must be specified with userID\");\n        }\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","date":"2020-08-13 18:15:39","endLine":127,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityOwnerId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/40/db387debed40fa27bde3a0131cf35b6b09b27c.src","preCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/project/CreateProjectCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"c578004fe5f049684830d4323422dc3953481ac7","commitMessage":"@@@projects: Role based users in Projects (#4128)\n\nEnabling Role Based users in projects\nPrimate PR related to the FR: apache/cloudstack-primate#382\nDoc PR: https://github.com/apache/cloudstack-documentation/pull/145\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>\nCo-authored-by: Suresh Kumar Anaparti <suresh.anaparti@shapeblue.com>","date":"2020-08-13 18:15:39","modifiedFileCount":"66","status":"M","submitter":"Pearl Dsilva"},{"authorTime":"2020-08-13 18:15:39","codes":[{"authorDate":"2020-09-17 12:50:34","commitOrder":3,"curCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId, final Long userId, final Long accountId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Domain ID and account ID must be provided with User ID\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        User user = validateUser(userId, accountId, domainId);\n        if (user != null) {\n            owner = _accountDao.findById(user.getAccountId());\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        User finalUser = user;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n                \r\n                StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n                Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n                \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin,\n                        Optional.ofNullable(finalUser).map(User::getId).orElse(null),  null);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","date":"2020-09-17 12:50:34","endLine":278,"groupId":"2005","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createProject","params":"(finalStringname@finalStringdisplayText@StringaccountName@finalLongdomainId@finalLonguserId@finalLongaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/ad0c2ffc9d008437f992acf875b3f2f4a57b97.src","preCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId, final Long userId, final Long accountId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Domain ID and account ID must be provided with User ID\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        User user = validateUser(userId, accountId, domainId);\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        User finalUser = user;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n                \r\n                StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n                Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n                \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin,\n                        Optional.ofNullable(finalUser).map(User::getId).orElse(null),  null);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","realPath":"server/src/main/java/com/cloud/projects/ProjectManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2020-08-13 18:15:39","commitOrder":3,"curCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account ID and Domain ID must be specified with userID\");\n        }\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","date":"2020-08-13 18:15:39","endLine":127,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityOwnerId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/40/db387debed40fa27bde3a0131cf35b6b09b27c.src","preCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account ID and Domain ID must be specified with userID\");\n        }\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/project/CreateProjectCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"82b6971258a2f63360dbd0cb404fcf87669a5327","commitMessage":"@@@server: Handle listProjects API to list projects with user as members when listAll=true (#4316)\n\n* added defensive checks for avoiding NPE and list projects API fix\n\n* list projects with account name provided to not include users in the account in response\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2020-09-17 12:50:34","modifiedFileCount":"5","status":"M","submitter":"Pearl Dsilva"},{"authorTime":"2020-11-16 20:37:11","codes":[{"authorDate":"2020-09-17 12:50:34","commitOrder":4,"curCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId, final Long userId, final Long accountId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Domain ID and account ID must be provided with User ID\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        User user = validateUser(userId, accountId, domainId);\n        if (user != null) {\n            owner = _accountDao.findById(user.getAccountId());\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        User finalUser = user;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n                \r\n                StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n                Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n                \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin,\n                        Optional.ofNullable(finalUser).map(User::getId).orElse(null),  null);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","date":"2020-09-17 12:50:34","endLine":278,"groupId":"101588","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createProject","params":"(finalStringname@finalStringdisplayText@StringaccountName@finalLongdomainId@finalLonguserId@finalLongaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/ad0c2ffc9d008437f992acf875b3f2f4a57b97.src","preCode":"    public Project createProject(final String name, final String displayText, String accountName, final Long domainId, final Long userId, final Long accountId) throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = caller;\n\n        \r\n        if (_accountMgr.isNormalUser(caller.getId()) && !_allowUserToCreateProject) {\n            throw new PermissionDeniedException(\"Regular user is not permitted to create a project\");\n        }\n\n        \r\n        if ((accountName != null && domainId == null) || (domainId != null && accountName == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Domain ID and account ID must be provided with User ID\");\n        }\n\n        if (accountName != null) {\n            owner = _accountMgr.finalizeOwner(caller, accountName, domainId, null);\n        }\n\n        \r\n        if (_projectDao.findByNameAndDomain(name, owner.getDomainId()) != null) {\n            throw new InvalidParameterValueException(\"Project with name \" + name + \" already exists in domain id=\" + owner.getDomainId());\n        }\n\n        User user = validateUser(userId, accountId, domainId);\n        if (user != null) {\n            owner = _accountDao.findById(user.getAccountId());\n        }\n\n        \r\n        _resourceLimitMgr.checkResourceLimit(owner, ResourceType.project);\n\n        final Account ownerFinal = owner;\n        User finalUser = user;\n        return Transaction.execute(new TransactionCallback<Project>() {\n            @Override\n            public Project doInTransaction(TransactionStatus status) {\n\n                \r\n                StringBuilder acctNm = new StringBuilder(\"PrjAcct-\");\n                acctNm.append(name).append(\"-\").append(ownerFinal.getDomainId());\n\n                Account projectAccount = _accountMgr.createAccount(acctNm.toString(), Account.ACCOUNT_TYPE_PROJECT, null, domainId, null, null, UUID.randomUUID().toString());\n\n                Project project = _projectDao.persist(new ProjectVO(name, displayText, ownerFinal.getDomainId(), projectAccount.getId()));\n\n                \r\n                assignAccountToProject(project, ownerFinal.getId(), ProjectAccount.Role.Admin,\n                        Optional.ofNullable(finalUser).map(User::getId).orElse(null),  null);\n\n        if (project != null) {\n            CallContext.current().setEventDetails(\"Project id=\" + project.getId());\n            CallContext.current().putContextParameter(Project.class, project.getUuid());\n        }\n\n        \r\n                _resourceLimitMgr.incrementResourceCount(ownerFinal.getId(), ResourceType.project);\n\n        return project;\n    }\n        });\n    }\n","realPath":"server/src/main/java/com/cloud/projects/ProjectManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2020-11-16 20:37:11","commitOrder":4,"curCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null || domainId == null)) {\n            throw new InvalidParameterValueException(\"Account ID and Domain ID must be specified with userID\");\n        }\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","date":"2020-11-16 20:37:11","endLine":127,"groupId":"101588","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityOwnerId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/64/de9a706420f65fbb7ea4c0b8d1e17a3537c629.src","preCode":"    public long getEntityOwnerId() {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if ((accountName != null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account name and domain id must be specified together\");\n        }\n\n        if (userId != null && (accountId == null && domainId == null)) {\n            throw new InvalidParameterValueException(\"Account ID and Domain ID must be specified with userID\");\n        }\n        if (accountName != null) {\n            return _accountService.finalizeOwner(caller, accountName, domainId, null).getId();\n        }\n\n        return caller.getId();\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/project/CreateProjectCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"7f408ec967327a152d903dcc55260ccff9bad0fd","commitMessage":"@@@Fix: Listing projects comprising of only the user's on listAll=true (#4469)\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2020-11-16 20:37:11","modifiedFileCount":"2","status":"M","submitter":"Pearl Dsilva"}]
