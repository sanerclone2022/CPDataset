[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<Long> listClustersInZoneOrPodByHostCapacities(long id, int requiredCpu, long requiredRam, short capacityTypeForOrdering, boolean isZone) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART1);\n\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART2);\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART3);\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, id);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, id);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":616,"groupId":"19282","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listClustersInZoneOrPodByHostCapacities","params":"(longid@intrequiredCpu@longrequiredRam@shortcapacityTypeForOrdering@booleanisZone)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/14bd4af3bef38d53ff0670002adee0de036ae2.src","preCode":"    public List<Long> listClustersInZoneOrPodByHostCapacities(long id, int requiredCpu, long requiredRam, short capacityTypeForOrdering, boolean isZone) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART1);\n\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART2);\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART3);\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, id);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, id);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/capacity/dao/CapacityDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<Long> listPodsByHostCapacities(long zoneId, int requiredCpu, long requiredRam, short capacityType) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\"AND capacity.pod_id IN (\");\n        sql.append(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\")\");\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, zoneId);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, zoneId);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":966,"groupId":"19282","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listPodsByHostCapacities","params":"(longzoneId@intrequiredCpu@longrequiredRam@shortcapacityType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/14bd4af3bef38d53ff0670002adee0de036ae2.src","preCode":"    public List<Long> listPodsByHostCapacities(long zoneId, int requiredCpu, long requiredRam, short capacityType) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\"AND capacity.pod_id IN (\");\n        sql.append(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\")\");\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, zoneId);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, zoneId);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/capacity/dao/CapacityDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":935,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-08 08:50:29","commitOrder":2,"curCode":"    public List<Long> listClustersInZoneOrPodByHostCapacities(long id, long vmId, int requiredCpu, long requiredRam, short capacityTypeForOrdering, boolean isZone) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART1);\n\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART2);\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART3);\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, id);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, id);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","date":"2021-09-08 08:50:29","endLine":627,"groupId":"10351","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"listClustersInZoneOrPodByHostCapacities","params":"(longid@longvmId@intrequiredCpu@longrequiredRam@shortcapacityTypeForOrdering@booleanisZone)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fe/6f2f4ce7be6de745f41967fd5e1b62db361107.src","preCode":"    public List<Long> listClustersInZoneOrPodByHostCapacities(long id, int requiredCpu, long requiredRam, short capacityTypeForOrdering, boolean isZone) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART1);\n\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART2);\n        if (isZone) {\n            sql.append(\"capacity.data_center_id = ?\");\n        } else {\n            sql.append(\"capacity.pod_id = ?\");\n        }\n        sql.append(LIST_CLUSTERSINZONE_BY_HOST_CAPACITIES_PART3);\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, id);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, id);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/capacity/dao/CapacityDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public List<Long> listPodsByHostCapacities(long zoneId, int requiredCpu, long requiredRam, short capacityType) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\"AND capacity.pod_id IN (\");\n        sql.append(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\")\");\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, zoneId);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, zoneId);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":966,"groupId":"10351","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listPodsByHostCapacities","params":"(longzoneId@intrequiredCpu@longrequiredRam@shortcapacityType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/14bd4af3bef38d53ff0670002adee0de036ae2.src","preCode":"    public List<Long> listPodsByHostCapacities(long zoneId, int requiredCpu, long requiredRam, short capacityType) {\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        List<Long> result = new ArrayList<Long>();\n\n        StringBuilder sql = new StringBuilder(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\"AND capacity.pod_id IN (\");\n        sql.append(LIST_PODSINZONE_BY_HOST_CAPACITY_TYPE);\n        sql.append(\")\");\n\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.setLong(1, zoneId);\n            pstmt.setShort(2, Capacity.CAPACITY_TYPE_CPU);\n            pstmt.setString(3, \"cpuOvercommitRatio\");\n            pstmt.setLong(4, requiredCpu);\n            pstmt.setLong(5, zoneId);\n            pstmt.setShort(6, Capacity.CAPACITY_TYPE_MEMORY);\n            pstmt.setString(7, \"memoryOvercommitRatio\");\n            pstmt.setLong(8, requiredRam);\n\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                result.add(rs.getLong(1));\n            }\n            return result;\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n        } catch (Throwable e) {\n            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/capacity/dao/CapacityDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":935,"status":"N"}],"commitId":"a755ecfce857cdf525f3d2895d68917ea6f905f3","commitMessage":"@@@Migrate vm across clusters (#4534)\n\n* server: Optional destination host when migrate a vm\n\n* #4378: migrate systemvms/routers with optional host\n\n* Migrate vms across clusters\n\nAfter enabling maintenance mode on host.  if no suitable hosts\nare found in the same cluster then search for hosts in\ndifferent clusters having the same hypervisor type\n\nset global setting migrate.vm.across.clusters to true\n\n* search all clusters in zone when migrate vm across clusters if applicable\n\n* Honor migrate.vm.across.clusters when migrate vm without destination\n\n* Check MIGRATE_VM_ACROSS_CLUSTERS in zone setting\n\n* #4534 Fix Vms are migrated to same clusters in CloudStack caused by dedicated resources.\n\n* #4534 extract some codes to methods\n\n* fix #4534: an error in 'git merge'\n\n* fix #4534: remove useless methods in FirstFitPlanner.java\n\n* fix #4534: vms are stopped in host maintenance\n\n* fix #4534: across-cluster migration of vms with cluster-scoped pools is supported by vmware vmotion\n\n* fix #4534: migrate systemvms is only possible across clusters in same pod to avoid potential network errors.\n\n* fix #4534: code optimization\n\nCo-authored-by: Rakesh Venkatesh <r.venkatesh@global.leaseweb.com>\nCo-authored-by: Sina Kashipazha <s.kashipazha@global.leaseweb.com>\nCo-authored-by: Wei Zhou <weizhou@apache.org>\nCo-authored-by: Sina Kashipazha <soreana@users.noreply.github.com>","date":"2021-09-08 08:50:29","modifiedFileCount":"10","status":"M","submitter":"Wei Zhou"}]
