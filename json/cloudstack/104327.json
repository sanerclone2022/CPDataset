[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void deleteAsync(DataStore dataStore, DataObject data, AsyncCompletionCallback<CommandResult> callback) {\n        DeleteCommand cmd = new DeleteCommand(data.getTO());\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = null;\n            if (data.getType() == DataObjectType.VOLUME) {\n                ep = epSelector.select(data, StorageAction.DELETEVOLUME);\n            } else {\n                ep = epSelector.select(data);\n            }\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send DeleteCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to destoy volume\" + data.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","date":"2018-01-20 05:49:27","endLine":239,"groupId":"326","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteAsync","params":"(DataStoredataStore@DataObjectdata@AsyncCompletionCallback<CommandResult>callback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b5/aee543e46a0e832267f0741bc2297cbafc3a64.src","preCode":"    public void deleteAsync(DataStore dataStore, DataObject data, AsyncCompletionCallback<CommandResult> callback) {\n        DeleteCommand cmd = new DeleteCommand(data.getTO());\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = null;\n            if (data.getType() == DataObjectType.VOLUME) {\n                ep = epSelector.select(data, StorageAction.DELETEVOLUME);\n            } else {\n                ep = epSelector.select(data);\n            }\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send DeleteCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to destoy volume\" + data.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","realPath":"plugins/storage/volume/default/src/main/java/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void revertSnapshot(SnapshotInfo snapshot, SnapshotInfo snapshotOnPrimaryStore, AsyncCompletionCallback<CommandResult> callback) {\n        SnapshotObjectTO snapshotTO = (SnapshotObjectTO)snapshot.getTO();\n        RevertSnapshotCommand cmd = new RevertSnapshotCommand(snapshotTO);\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = epSelector.select(snapshotOnPrimaryStore);\n            if ( ep == null ){\n                String errMsg = \"No remote endpoint to send RevertSnapshotCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to revert snapshot \" + snapshot.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","date":"2018-01-20 05:49:27","endLine":354,"groupId":"10652","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"revertSnapshot","params":"(SnapshotInfosnapshot@SnapshotInfosnapshotOnPrimaryStore@AsyncCompletionCallback<CommandResult>callback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b5/aee543e46a0e832267f0741bc2297cbafc3a64.src","preCode":"    public void revertSnapshot(SnapshotInfo snapshot, SnapshotInfo snapshotOnPrimaryStore, AsyncCompletionCallback<CommandResult> callback) {\n        SnapshotObjectTO snapshotTO = (SnapshotObjectTO)snapshot.getTO();\n        RevertSnapshotCommand cmd = new RevertSnapshotCommand(snapshotTO);\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = epSelector.select(snapshotOnPrimaryStore);\n            if ( ep == null ){\n                String errMsg = \"No remote endpoint to send RevertSnapshotCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to revert snapshot \" + snapshot.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","realPath":"plugins/storage/volume/default/src/main/java/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-05-18 17:49:20","commitOrder":2,"curCode":"    public void deleteAsync(DataStore dataStore, DataObject data, AsyncCompletionCallback<CommandResult> callback) {\n        DeleteCommand cmd = new DeleteCommand(data.getTO());\n        cmd.setBypassHostMaintenance(commandCanBypassHostMaintenance(data));\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = null;\n            if (data.getType() == DataObjectType.VOLUME) {\n                ep = epSelector.select(data, StorageAction.DELETEVOLUME);\n            } else {\n                ep = epSelector.select(data);\n            }\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send DeleteCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to destoy volume\" + data.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","date":"2021-05-18 17:49:20","endLine":256,"groupId":"104327","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteAsync","params":"(DataStoredataStore@DataObjectdata@AsyncCompletionCallback<CommandResult>callback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/db843e0d7494b828c95c11332a94658f0cfc71.src","preCode":"    public void deleteAsync(DataStore dataStore, DataObject data, AsyncCompletionCallback<CommandResult> callback) {\n        DeleteCommand cmd = new DeleteCommand(data.getTO());\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = null;\n            if (data.getType() == DataObjectType.VOLUME) {\n                ep = epSelector.select(data, StorageAction.DELETEVOLUME);\n            } else {\n                ep = epSelector.select(data);\n            }\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send DeleteCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to destoy volume\" + data.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","realPath":"plugins/storage/volume/default/src/main/java/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void revertSnapshot(SnapshotInfo snapshot, SnapshotInfo snapshotOnPrimaryStore, AsyncCompletionCallback<CommandResult> callback) {\n        SnapshotObjectTO snapshotTO = (SnapshotObjectTO)snapshot.getTO();\n        RevertSnapshotCommand cmd = new RevertSnapshotCommand(snapshotTO);\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = epSelector.select(snapshotOnPrimaryStore);\n            if ( ep == null ){\n                String errMsg = \"No remote endpoint to send RevertSnapshotCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to revert snapshot \" + snapshot.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","date":"2018-01-20 05:49:27","endLine":354,"groupId":"104327","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"revertSnapshot","params":"(SnapshotInfosnapshot@SnapshotInfosnapshotOnPrimaryStore@AsyncCompletionCallback<CommandResult>callback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b5/aee543e46a0e832267f0741bc2297cbafc3a64.src","preCode":"    public void revertSnapshot(SnapshotInfo snapshot, SnapshotInfo snapshotOnPrimaryStore, AsyncCompletionCallback<CommandResult> callback) {\n        SnapshotObjectTO snapshotTO = (SnapshotObjectTO)snapshot.getTO();\n        RevertSnapshotCommand cmd = new RevertSnapshotCommand(snapshotTO);\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = epSelector.select(snapshotOnPrimaryStore);\n            if ( ep == null ){\n                String errMsg = \"No remote endpoint to send RevertSnapshotCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to revert snapshot \" + snapshot.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }\n","realPath":"plugins/storage/volume/default/src/main/java/org/apache/cloudstack/storage/datastore/driver/CloudStackPrimaryDataStoreDriverImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"N"}],"commitId":"426f14b6ed87c3dc072ee1d95d84892fc624bcf0","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15'\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2021-05-18 17:49:20","modifiedFileCount":"23","status":"M","submitter":"Abhishek Kumar"}]
