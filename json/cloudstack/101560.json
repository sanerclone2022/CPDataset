[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private List<AffinityGroupJoinVO> listDomainLevelAffinityGroups(SearchCriteria<AffinityGroupJoinVO> sc, Filter searchFilter, long domainId) {\n        List<Long> affinityGroupIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<AffinityGroupDomainMapVO> maps = _affinityGroupDomainMapDao.listByDomain(allowedDomains.toArray());\n\n        for (AffinityGroupDomainMapVO map : maps) {\n            boolean subdomainAccess = map.isSubdomainAccess();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                affinityGroupIds.add(map.getAffinityGroupId());\n            }\n        }\n\n        if (!affinityGroupIds.isEmpty()) {\n            SearchCriteria<AffinityGroupJoinVO> domainSC = _affinityGroupJoinDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, affinityGroupIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n\n            Pair<List<AffinityGroupJoinVO>, Integer> uniqueGroupsPair = _affinityGroupJoinDao.searchAndCount(sc, searchFilter);\n            \r\n            Integer count = uniqueGroupsPair.second();\n            if (count.intValue() == 0) {\n                \r\n                return new ArrayList<AffinityGroupJoinVO>();\n            }\n            List<AffinityGroupJoinVO> uniqueGroups = uniqueGroupsPair.first();\n            Long[] vrIds = new Long[uniqueGroups.size()];\n            int i = 0;\n            for (AffinityGroupJoinVO v : uniqueGroups) {\n                vrIds[i++] = v.getId();\n            }\n            List<AffinityGroupJoinVO> vrs = _affinityGroupJoinDao.searchByIds(vrIds);\n            return vrs;\n        } else {\n            return new ArrayList<AffinityGroupJoinVO>();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3694,"groupId":"8377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listDomainLevelAffinityGroups","params":"(SearchCriteria<AffinityGroupJoinVO>sc@FiltersearchFilter@longdomainId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9c/728ef0f78a89a60fa81fa6bfab723232623813.src","preCode":"    private List<AffinityGroupJoinVO> listDomainLevelAffinityGroups(SearchCriteria<AffinityGroupJoinVO> sc, Filter searchFilter, long domainId) {\n        List<Long> affinityGroupIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<AffinityGroupDomainMapVO> maps = _affinityGroupDomainMapDao.listByDomain(allowedDomains.toArray());\n\n        for (AffinityGroupDomainMapVO map : maps) {\n            boolean subdomainAccess = map.isSubdomainAccess();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                affinityGroupIds.add(map.getAffinityGroupId());\n            }\n        }\n\n        if (!affinityGroupIds.isEmpty()) {\n            SearchCriteria<AffinityGroupJoinVO> domainSC = _affinityGroupJoinDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, affinityGroupIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n\n            Pair<List<AffinityGroupJoinVO>, Integer> uniqueGroupsPair = _affinityGroupJoinDao.searchAndCount(sc, searchFilter);\n            \r\n            Integer count = uniqueGroupsPair.second();\n            if (count.intValue() == 0) {\n                \r\n                return new ArrayList<AffinityGroupJoinVO>();\n            }\n            List<AffinityGroupJoinVO> uniqueGroups = uniqueGroupsPair.first();\n            Long[] vrIds = new Long[uniqueGroups.size()];\n            int i = 0;\n            for (AffinityGroupJoinVO v : uniqueGroups) {\n                vrIds[i++] = v.getId();\n            }\n            List<AffinityGroupJoinVO> vrs = _affinityGroupJoinDao.searchByIds(vrIds);\n            return vrs;\n        } else {\n            return new ArrayList<AffinityGroupJoinVO>();\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3657,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc, Filter searchFilter, long domainId, boolean parentDomainsOnly) {\n        List<Long> networkIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<NetworkDomainVO> maps = _networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());\n\n        for (NetworkDomainVO map : maps) {\n            if (map.getDomainId() == domainId && parentDomainsOnly) {\n                continue;\n            }\n            boolean subdomainAccess = (map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                networkIds.add(map.getNetworkId());\n            }\n        }\n\n        if (!networkIds.isEmpty()) {\n            SearchCriteria<NetworkVO> domainSC = _networksDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, networkIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n            return _networksDao.search(sc, searchFilter);\n        } else {\n            return new ArrayList<NetworkVO>();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1742,"groupId":"1258","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listDomainLevelNetworks","params":"(SearchCriteria<NetworkVO>sc@FiltersearchFilter@longdomainId@booleanparentDomainsOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc, Filter searchFilter, long domainId, boolean parentDomainsOnly) {\n        List<Long> networkIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<NetworkDomainVO> maps = _networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());\n\n        for (NetworkDomainVO map : maps) {\n            if (map.getDomainId() == domainId && parentDomainsOnly) {\n                continue;\n            }\n            boolean subdomainAccess = (map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                networkIds.add(map.getNetworkId());\n            }\n        }\n\n        if (!networkIds.isEmpty()) {\n            SearchCriteria<NetworkVO> domainSC = _networksDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, networkIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n            return _networksDao.search(sc, searchFilter);\n        } else {\n            return new ArrayList<NetworkVO>();\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1717,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-06-24 10:54:29","commitOrder":2,"curCode":"    private Pair<List<AffinityGroupJoinVO>, Integer> listDomainLevelAffinityGroups(SearchCriteria<AffinityGroupJoinVO> sc, Filter searchFilter, long domainId) {\n        List<Long> affinityGroupIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<AffinityGroupDomainMapVO> maps = _affinityGroupDomainMapDao.listByDomain(allowedDomains.toArray());\n\n        for (AffinityGroupDomainMapVO map : maps) {\n            boolean subdomainAccess = map.isSubdomainAccess();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                affinityGroupIds.add(map.getAffinityGroupId());\n            }\n        }\n\n        if (!affinityGroupIds.isEmpty()) {\n            SearchCriteria<AffinityGroupJoinVO> domainSC = _affinityGroupJoinDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, affinityGroupIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n\n            Pair<List<AffinityGroupJoinVO>, Integer> uniqueGroupsPair = _affinityGroupJoinDao.searchAndCount(sc, searchFilter);\n            \r\n            Integer count = uniqueGroupsPair.second();\n            if (count.intValue() == 0) {\n                \r\n                return new Pair<>(new ArrayList<AffinityGroupJoinVO>(), 0);\n            }\n            List<AffinityGroupJoinVO> uniqueGroups = uniqueGroupsPair.first();\n            Long[] vrIds = new Long[uniqueGroups.size()];\n            int i = 0;\n            for (AffinityGroupJoinVO v : uniqueGroups) {\n                vrIds[i++] = v.getId();\n            }\n            List<AffinityGroupJoinVO> vrs = _affinityGroupJoinDao.searchByIds(vrIds);\n            return new Pair<>(vrs, count);\n        } else {\n            return new Pair<>(new ArrayList<AffinityGroupJoinVO>(), 0);\n        }\n    }\n","date":"2020-06-24 10:54:29","endLine":3868,"groupId":"101560","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listDomainLevelAffinityGroups","params":"(SearchCriteria<AffinityGroupJoinVO>sc@FiltersearchFilter@longdomainId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/24/07a4fa6498a03f1b131fdd47e8afaace30d345.src","preCode":"    private List<AffinityGroupJoinVO> listDomainLevelAffinityGroups(SearchCriteria<AffinityGroupJoinVO> sc, Filter searchFilter, long domainId) {\n        List<Long> affinityGroupIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<AffinityGroupDomainMapVO> maps = _affinityGroupDomainMapDao.listByDomain(allowedDomains.toArray());\n\n        for (AffinityGroupDomainMapVO map : maps) {\n            boolean subdomainAccess = map.isSubdomainAccess();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                affinityGroupIds.add(map.getAffinityGroupId());\n            }\n        }\n\n        if (!affinityGroupIds.isEmpty()) {\n            SearchCriteria<AffinityGroupJoinVO> domainSC = _affinityGroupJoinDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, affinityGroupIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n\n            Pair<List<AffinityGroupJoinVO>, Integer> uniqueGroupsPair = _affinityGroupJoinDao.searchAndCount(sc, searchFilter);\n            \r\n            Integer count = uniqueGroupsPair.second();\n            if (count.intValue() == 0) {\n                \r\n                return new ArrayList<AffinityGroupJoinVO>();\n            }\n            List<AffinityGroupJoinVO> uniqueGroups = uniqueGroupsPair.first();\n            Long[] vrIds = new Long[uniqueGroups.size()];\n            int i = 0;\n            for (AffinityGroupJoinVO v : uniqueGroups) {\n                vrIds[i++] = v.getId();\n            }\n            List<AffinityGroupJoinVO> vrs = _affinityGroupJoinDao.searchByIds(vrIds);\n            return vrs;\n        } else {\n            return new ArrayList<AffinityGroupJoinVO>();\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3831,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc, Filter searchFilter, long domainId, boolean parentDomainsOnly) {\n        List<Long> networkIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<NetworkDomainVO> maps = _networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());\n\n        for (NetworkDomainVO map : maps) {\n            if (map.getDomainId() == domainId && parentDomainsOnly) {\n                continue;\n            }\n            boolean subdomainAccess = (map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                networkIds.add(map.getNetworkId());\n            }\n        }\n\n        if (!networkIds.isEmpty()) {\n            SearchCriteria<NetworkVO> domainSC = _networksDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, networkIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n            return _networksDao.search(sc, searchFilter);\n        } else {\n            return new ArrayList<NetworkVO>();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1742,"groupId":"101560","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listDomainLevelNetworks","params":"(SearchCriteria<NetworkVO>sc@FiltersearchFilter@longdomainId@booleanparentDomainsOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc, Filter searchFilter, long domainId, boolean parentDomainsOnly) {\n        List<Long> networkIds = new ArrayList<Long>();\n        Set<Long> allowedDomains = _domainMgr.getDomainParentIds(domainId);\n        List<NetworkDomainVO> maps = _networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());\n\n        for (NetworkDomainVO map : maps) {\n            if (map.getDomainId() == domainId && parentDomainsOnly) {\n                continue;\n            }\n            boolean subdomainAccess = (map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();\n            if (map.getDomainId() == domainId || subdomainAccess) {\n                networkIds.add(map.getNetworkId());\n            }\n        }\n\n        if (!networkIds.isEmpty()) {\n            SearchCriteria<NetworkVO> domainSC = _networksDao.createSearchCriteria();\n            domainSC.addAnd(\"id\", SearchCriteria.Op.IN, networkIds.toArray());\n            domainSC.addAnd(\"aclType\", SearchCriteria.Op.EQ, ACLType.Domain.toString());\n\n            sc.addAnd(\"id\", SearchCriteria.Op.SC, domainSC);\n            return _networksDao.search(sc, searchFilter);\n        } else {\n            return new ArrayList<NetworkVO>();\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1717,"status":"N"}],"commitId":"5471802f862dd617f63d12eb56c9aa62759e4309","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-06-24 10:54:29","modifiedFileCount":"1","status":"M","submitter":"Rohit Yadav"}]
