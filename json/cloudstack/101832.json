[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean finalizeStart(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context) {\n        final DomainRouterVO router = _routerDao.findById(profile.getId());\n\n        \r\n        for (final Answer answer : cmds.getAnswers()) {\n            \r\n            if (!answer.getResult()) {\n                final String cmdClassName = answer.getClass().getCanonicalName().replace(\"Answer\", \"Command\");\n                final String errorMessage = \"Command: \" + cmdClassName + \" failed while starting virtual router\";\n                final String errorDetails = \"Details: \" + answer.getDetails() + \" \" + answer.toString();\n                \r\n                _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), errorMessage, errorDetails);\n                s_logger.error(answer.getDetails());\n                s_logger.warn(errorMessage);\n                \r\n                return false;\n            }\n        }\n\n        \r\n        boolean result = true;\n        \r\n        final List<Network> guestNetworks = new ArrayList<Network>();\n\n        final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n        for (final Nic nic : routerNics) {\n            final Network network = _networkModel.getNetwork(nic.getNetworkId());\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n            if (network.getTrafficType() == TrafficType.Guest) {\n                guestNetworks.add(network);\n                if (nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        result = networkTopology.setupDhcpForPvlan(true, router, router.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStart: \", e);\n                    }\n                }\n            }\n        }\n        if (result) {\n            final GetDomRVersionAnswer versionAnswer = (GetDomRVersionAnswer) cmds.getAnswer(\"getDomRVersion\");\n            router.setTemplateVersion(versionAnswer.getTemplateVersion());\n            router.setScriptsVersion(versionAnswer.getScriptsVersion());\n            _routerDao.persist(router, guestNetworks);\n        }\n\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":2088,"groupId":"6210","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeStart","params":"(finalVirtualMachineProfileprofile@finallonghostId@finalCommandscmds@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f3/035d05e61271ea58a41be185404248abc43aea.src","preCode":"    public boolean finalizeStart(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context) {\n        final DomainRouterVO router = _routerDao.findById(profile.getId());\n\n        \r\n        for (final Answer answer : cmds.getAnswers()) {\n            \r\n            if (!answer.getResult()) {\n                final String cmdClassName = answer.getClass().getCanonicalName().replace(\"Answer\", \"Command\");\n                final String errorMessage = \"Command: \" + cmdClassName + \" failed while starting virtual router\";\n                final String errorDetails = \"Details: \" + answer.getDetails() + \" \" + answer.toString();\n                \r\n                _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), errorMessage, errorDetails);\n                s_logger.error(answer.getDetails());\n                s_logger.warn(errorMessage);\n                \r\n                return false;\n            }\n        }\n\n        \r\n        boolean result = true;\n        \r\n        final List<Network> guestNetworks = new ArrayList<Network>();\n\n        final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n        for (final Nic nic : routerNics) {\n            final Network network = _networkModel.getNetwork(nic.getNetworkId());\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n            if (network.getTrafficType() == TrafficType.Guest) {\n                guestNetworks.add(network);\n                if (nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        result = networkTopology.setupDhcpForPvlan(true, router, router.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStart: \", e);\n                    }\n                }\n            }\n        }\n        if (result) {\n            final GetDomRVersionAnswer versionAnswer = (GetDomRVersionAnswer) cmds.getAnswer(\"getDomRVersion\");\n            router.setTemplateVersion(versionAnswer.getTemplateVersion());\n            router.setScriptsVersion(versionAnswer.getScriptsVersion());\n            _routerDao.persist(router, guestNetworks);\n        }\n\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2036,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void finalizeStop(final VirtualMachineProfile profile, final Answer answer) {\n        if (answer != null) {\n            final VirtualMachine vm = profile.getVirtualMachine();\n            final DomainRouterVO domR = _routerDao.findById(vm.getId());\n            processStopOrRebootAnswer(domR, answer);\n            final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n            for (final Nic nic : routerNics) {\n                final Network network = _networkModel.getNetwork(nic.getNetworkId());\n                final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n                if (network.getTrafficType() == TrafficType.Guest && nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        networkTopology.setupDhcpForPvlan(false, domR, domR.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStop: \", e);\n                    }\n                }\n            }\n\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2114,"groupId":"7232","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeStop","params":"(finalVirtualMachineProfileprofile@finalAnsweranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f3/035d05e61271ea58a41be185404248abc43aea.src","preCode":"    public void finalizeStop(final VirtualMachineProfile profile, final Answer answer) {\n        if (answer != null) {\n            final VirtualMachine vm = profile.getVirtualMachine();\n            final DomainRouterVO domR = _routerDao.findById(vm.getId());\n            processStopOrRebootAnswer(domR, answer);\n            final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n            for (final Nic nic : routerNics) {\n                final Network network = _networkModel.getNetwork(nic.getNetworkId());\n                final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n                if (network.getTrafficType() == TrafficType.Guest && nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        networkTopology.setupDhcpForPvlan(false, domR, domR.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStop: \", e);\n                    }\n                }\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2091,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-11-21 14:04:14","commitOrder":2,"curCode":"    public boolean finalizeStart(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context) {\n        final DomainRouterVO router = _routerDao.findById(profile.getId());\n\n        \r\n        for (final Answer answer : cmds.getAnswers()) {\n            \r\n            if (!answer.getResult()) {\n                final String cmdClassName = answer.getClass().getCanonicalName().replace(\"Answer\", \"Command\");\n                final String errorMessage = \"Command: \" + cmdClassName + \" failed while starting virtual router\";\n                final String errorDetails = \"Details: \" + answer.getDetails() + \" \" + answer.toString();\n                \r\n                _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), errorMessage, errorDetails);\n                s_logger.error(answer.getDetails());\n                s_logger.warn(errorMessage);\n                \r\n                return false;\n            }\n        }\n\n        \r\n        boolean result = true;\n        \r\n        final List<Network> guestNetworks = new ArrayList<Network>();\n\n        final GetDomRVersionAnswer versionAnswer = (GetDomRVersionAnswer) cmds.getAnswer(\"getDomRVersion\");\n        router.setTemplateVersion(versionAnswer.getTemplateVersion());\n        router.setScriptsVersion(versionAnswer.getScriptsVersion());\n        _routerDao.persist(router, guestNetworks);\n\n        final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n        for (final Nic nic : routerNics) {\n            final Network network = _networkModel.getNetwork(nic.getNetworkId());\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n            if (network.getTrafficType() == TrafficType.Guest) {\n                guestNetworks.add(network);\n                if (nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        result = networkTopology.setupDhcpForPvlan(true, router, router.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStart: \", e);\n                    }\n                }\n            }\n        }\n\n        if (result) {\n            for (Network guestNetwork : guestNetworks) {\n                _routerDao.addRouterToGuestNetwork(router, guestNetwork);\n            }\n        }\n\n        return result;\n    }\n","date":"2019-11-21 14:04:14","endLine":2093,"groupId":"101832","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeStart","params":"(finalVirtualMachineProfileprofile@finallonghostId@finalCommandscmds@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/ea47b31db11fb39dfec9a48139e4f17d0ab014.src","preCode":"    public boolean finalizeStart(final VirtualMachineProfile profile, final long hostId, final Commands cmds, final ReservationContext context) {\n        final DomainRouterVO router = _routerDao.findById(profile.getId());\n\n        \r\n        for (final Answer answer : cmds.getAnswers()) {\n            \r\n            if (!answer.getResult()) {\n                final String cmdClassName = answer.getClass().getCanonicalName().replace(\"Answer\", \"Command\");\n                final String errorMessage = \"Command: \" + cmdClassName + \" failed while starting virtual router\";\n                final String errorDetails = \"Details: \" + answer.getDetails() + \" \" + answer.toString();\n                \r\n                _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), errorMessage, errorDetails);\n                s_logger.error(answer.getDetails());\n                s_logger.warn(errorMessage);\n                \r\n                return false;\n            }\n        }\n\n        \r\n        boolean result = true;\n        \r\n        final List<Network> guestNetworks = new ArrayList<Network>();\n\n        final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n        for (final Nic nic : routerNics) {\n            final Network network = _networkModel.getNetwork(nic.getNetworkId());\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n            if (network.getTrafficType() == TrafficType.Guest) {\n                guestNetworks.add(network);\n                if (nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        result = networkTopology.setupDhcpForPvlan(true, router, router.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStart: \", e);\n                    }\n                }\n            }\n        }\n        if (result) {\n            final GetDomRVersionAnswer versionAnswer = (GetDomRVersionAnswer) cmds.getAnswer(\"getDomRVersion\");\n            router.setTemplateVersion(versionAnswer.getTemplateVersion());\n            router.setScriptsVersion(versionAnswer.getScriptsVersion());\n            _routerDao.persist(router, guestNetworks);\n        }\n\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2036,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void finalizeStop(final VirtualMachineProfile profile, final Answer answer) {\n        if (answer != null) {\n            final VirtualMachine vm = profile.getVirtualMachine();\n            final DomainRouterVO domR = _routerDao.findById(vm.getId());\n            processStopOrRebootAnswer(domR, answer);\n            final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n            for (final Nic nic : routerNics) {\n                final Network network = _networkModel.getNetwork(nic.getNetworkId());\n                final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n                if (network.getTrafficType() == TrafficType.Guest && nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        networkTopology.setupDhcpForPvlan(false, domR, domR.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStop: \", e);\n                    }\n                }\n            }\n\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2114,"groupId":"101832","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeStop","params":"(finalVirtualMachineProfileprofile@finalAnsweranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f3/035d05e61271ea58a41be185404248abc43aea.src","preCode":"    public void finalizeStop(final VirtualMachineProfile profile, final Answer answer) {\n        if (answer != null) {\n            final VirtualMachine vm = profile.getVirtualMachine();\n            final DomainRouterVO domR = _routerDao.findById(vm.getId());\n            processStopOrRebootAnswer(domR, answer);\n            final List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n            for (final Nic nic : routerNics) {\n                final Network network = _networkModel.getNetwork(nic.getNetworkId());\n                final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n\n                if (network.getTrafficType() == TrafficType.Guest && nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    final NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n\n                    final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n                    try {\n                        networkTopology.setupDhcpForPvlan(false, domR, domR.getHostId(), nicProfile);\n                    } catch (final ResourceUnavailableException e) {\n                        s_logger.debug(\"ERROR in finalizeStop: \", e);\n                    }\n                }\n            }\n\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2091,"status":"N"}],"commitId":"80abb5a74bdcf3b36bf5f46551b3c8060e450168","commitMessage":"@@@Fix VR creation issue while creating VM on shared network using PVLAN (#3653)\n\n* Fix VR creation issue while creating VM on shared network using PVLAN\n\n* Fix update guest networks\n","date":"2019-11-21 14:04:14","modifiedFileCount":"1","status":"M","submitter":"Nicolas Vazquez"}]
