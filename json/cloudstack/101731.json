[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1394,"groupId":"11482","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startNewVM","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/5da2ff5b4952e185fd52ee538c89aa94a05be8.src","preCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1372,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + getId());\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Restricted, \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":168,"groupId":"11482","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/82/89412404f816dc70362620d4114fcdbb03a0ed.src","preCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + getId());\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Restricted, \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/StartVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-05-03 19:02:00","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1394,"groupId":"11482","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startNewVM","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/5da2ff5b4952e185fd52ee538c89aa94a05be8.src","preCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1372,"status":"N"},{"authorDate":"2018-05-03 19:02:00","commitOrder":2,"curCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Restricted, \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","date":"2018-05-03 19:02:00","endLine":168,"groupId":"11482","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b8/7c7de0187938aa1efff8c716bd94a868c57e93.src","preCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + getId());\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Restricted, \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/StartVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"1ff171db902b98df5d172ae468c33a07ea1204d5","commitMessage":"@@@CLOUDSTACK-9781: record resource uuid in events instead of integer id (#1940)\n\nThis changes several event logging to use uuid of resource than integer id when creating API events.","date":"2018-05-03 19:02:00","modifiedFileCount":"72","status":"M","submitter":"jayantpatil1234"},{"authorTime":"2019-07-27 22:51:43","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1394,"groupId":"11482","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startNewVM","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/5da2ff5b4952e185fd52ee538c89aa94a05be8.src","preCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1372,"status":"N"},{"authorDate":"2019-07-27 22:51:43","commitOrder":3,"curCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(getResponseView(), \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","date":"2019-07-27 22:51:43","endLine":191,"groupId":"11482","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/5d406b22ba19e40d8b91f199b2fe2973a7f130.src","preCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Restricted, \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/StartVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"7a27e35a612f13a0ce43459b22e01d9b69627220","commitMessage":"@@@Refactoring to remove duplicate code. (#3152)\n\nMake use of Java 8 default implementation in interfaces. \nto remove code duplication between XxxCmd and XxxCmdAsAdmin.\n\nRefactor checkFormat by pre-calculating the supported\nextensions. Also make use of this in ImageStoreUtil.\nMakes it easier to add new file and compression formats.\n","date":"2019-07-27 22:51:43","modifiedFileCount":"111","status":"M","submitter":"Frank Maximus"},{"authorTime":"2019-08-02 20:19:44","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1394,"groupId":"11482","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"startNewVM","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/5da2ff5b4952e185fd52ee538c89aa94a05be8.src","preCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1372,"status":"N"},{"authorDate":"2019-08-02 20:19:44","commitOrder":4,"curCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Restricted, \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","date":"2019-08-02 20:19:44","endLine":190,"groupId":"11482","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/3db8565d48b9d15da939226c4af14dee416376.src","preCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(getResponseView(), \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/StartVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"3dad7f313404546a7a6f46951e44c91240df5b84","commitMessage":"@@@Merge pull request #3537 from shapeblue/upload-iso-template-fix\n\nRevert #3152","date":"2019-08-02 20:19:44","modifiedFileCount":"111","status":"M","submitter":"Andrija Panic"},{"authorTime":"2019-09-25 12:51:35","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1394,"groupId":"11482","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"startNewVM","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/5da2ff5b4952e185fd52ee538c89aa94a05be8.src","preCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1372,"status":"N"},{"authorDate":"2019-09-25 12:51:35","commitOrder":5,"curCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(getResponseView(), \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","date":"2019-09-25 12:51:35","endLine":191,"groupId":"11482","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/5d406b22ba19e40d8b91f199b2fe2973a7f130.src","preCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Restricted, \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/StartVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"7f91964aa918657c77156915020c24d496658e5d","commitMessage":"@@@refactoring: Remove duplicate code (by Frank/Nuage) (#3538)\n\nRefactor: Cleanup duplicate code\n\nMake use of Java 8 default implementation in interfaces. \nto remove code duplication between XxxCmd and XxxCmdAsAdmin.\nRefactor checkFormat by pre-calculating the supported\nextensions. Also make use of this in ImageStoreUtil.\nMakes it easier to add new file and compression formats.","date":"2019-09-25 12:51:35","modifiedFileCount":"112","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-01-30 17:36:50","codes":[{"authorDate":"2020-01-30 17:36:50","commitOrder":6,"curCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","date":"2020-01-30 17:36:50","endLine":1397,"groupId":"101731","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"startNewVM","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c7/10549516191cc49bf81148ad4901b0ff536e7b.src","preCode":"    private boolean startNewVM(long vmId) {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + vmId);\n            _userVmManager.startVirtualMachine(vmId, null, null, null);\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1372,"status":"M"},{"authorDate":"2020-01-30 17:36:50","commitOrder":6,"curCode":"    public void execute() {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(getResponseView(), \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","date":"2020-01-30 17:36:50","endLine":197,"groupId":"101731","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2a/7f6d0316deb9bcc166f8cbb36faacca7e9f5df.src","preCode":"    public void execute() throws ResourceUnavailableException, ResourceAllocationException {\n        try {\n            CallContext.current().setEventDetails(\"Vm Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getId()));\n\n            UserVm result;\n            result = _userVmService.startVirtualMachine(this);\n\n            if (result != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(getResponseView(), \"virtualmachine\", result).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to start a vm\");\n            }\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (StorageUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ExecutionException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            StringBuilder message = new StringBuilder(ex.getMessage());\n            if (ex instanceof InsufficientServerCapacityException) {\n                if (((InsufficientServerCapacityException)ex).isAffinityApplied()) {\n                    message.append(\", Please check the affinity groups provided, there may not be sufficient capacity to follow them\");\n                }\n            }\n            s_logger.info(ex);\n            s_logger.info(message.toString(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, message.toString());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/StartVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"ac581d1546750a6ffc49ebab180e1b80bec4319e","commitMessage":"@@@New feature: Resource count (CPU/RAM) take only running vms into calculation (#3760)\n\n* marvin: check resource count of more types\n\n* New feature: add flag resource.count.running.vms.only to count resource consumption of only running vms\n\nStopped VMs do not use CPU/RAM actually.\nA new global configuration resource.count.running.vms.only is added to determine whether resource (cpu/memory) of only running vms (including Starting/Stopping) will be taken into calculation of resource consumption.\n\n* Add integration test for resource count of only running vms\n","date":"2020-01-30 17:36:50","modifiedFileCount":"11","status":"M","submitter":"Wei Zhou"}]
