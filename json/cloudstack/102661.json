[{"authorTime":"2017-08-07 19:24:08","codes":[{"authorDate":"2017-08-07 19:24:08","commitOrder":2,"curCode":"    public static SSLContext initManagementSSLContext(final CAService caService) throws GeneralSecurityException, IOException {\n        if (caService == null) {\n            throw new CloudRuntimeException(\"CAService is not available to load/get management server keystore\");\n        }\n        final KeyStore ks = caService.getManagementKeyStore();\n        char[] passphrase = caService.getKeyStorePassphrase();\n\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        final TrustManager[] tms = tmf.getTrustManagers();\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","date":"2017-11-04 02:27:25","endLine":407,"groupId":"5166","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initManagementSSLContext","params":"(finalCAServicecaService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/78/48d5330a3ce55551e808f799f9c497ef6f3c59.src","preCode":"    public static SSLContext initManagementSSLContext(final CAService caService) throws GeneralSecurityException, IOException {\n        if (caService == null) {\n            throw new CloudRuntimeException(\"CAService is not available to load/get management server keystore\");\n        }\n        final KeyStore ks = caService.getManagementKeyStore();\n        char[] passphrase = caService.getKeyStorePassphrase();\n\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        final TrustManager[] tms = tmf.getTrustManagers();\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/nio/Link.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"},{"authorDate":"2017-08-07 19:24:08","commitOrder":2,"curCode":"    public static SSLContext initClientSSLContext() throws GeneralSecurityException, IOException {\n        char[] passphrase = KeyStoreUtils.defaultKeystorePassphrase;\n        File confFile = PropertiesUtil.findConfigFile(\"agent.properties\");\n        if (confFile != null) {\n            s_logger.info(\"Conf file found: \" + confFile.getAbsolutePath());\n            final String pass = PropertiesUtil.loadFromFile(confFile).getProperty(KeyStoreUtils.passphrasePropertyName);\n            if (pass != null) {\n                passphrase = pass.toCharArray();\n            }\n        }\n\n        InputStream stream = null;\n        if (confFile != null) {\n            final String keystorePath = confFile.getParent() + \"/\" + KeyStoreUtils.defaultKeystoreFile;\n            if (new File(keystorePath).exists()) {\n                stream = new FileInputStream(keystorePath);\n            }\n        }\n\n        final KeyStore ks = loadKeyStore(stream, passphrase);\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        TrustManager[] tms;\n        if (stream != null) {\n            \r\n            tms = tmf.getTrustManagers();\n        } else {\n            \r\n            tms = new TrustManager[]{new TrustAllManager()};\n            s_logger.warn(\"Failed to load keystore, using trust all manager\");\n        }\n\n        if (stream != null) {\n            stream.close();\n        }\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","date":"2017-11-04 02:27:25","endLine":451,"groupId":"5166","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initClientSSLContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/78/48d5330a3ce55551e808f799f9c497ef6f3c59.src","preCode":"    public static SSLContext initClientSSLContext() throws GeneralSecurityException, IOException {\n        char[] passphrase = KeyStoreUtils.defaultKeystorePassphrase;\n        File confFile = PropertiesUtil.findConfigFile(\"agent.properties\");\n        if (confFile != null) {\n            s_logger.info(\"Conf file found: \" + confFile.getAbsolutePath());\n            final String pass = PropertiesUtil.loadFromFile(confFile).getProperty(KeyStoreUtils.passphrasePropertyName);\n            if (pass != null) {\n                passphrase = pass.toCharArray();\n            }\n        }\n\n        InputStream stream = null;\n        if (confFile != null) {\n            final String keystorePath = confFile.getParent() + \"/\" + KeyStoreUtils.defaultKeystoreFile;\n            if (new File(keystorePath).exists()) {\n                stream = new FileInputStream(keystorePath);\n            }\n        }\n\n        final KeyStore ks = loadKeyStore(stream, passphrase);\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        TrustManager[] tms;\n        if (stream != null) {\n            \r\n            tms = tmf.getTrustManagers();\n        } else {\n            \r\n            tms = new TrustManager[]{new TrustAllManager()};\n            s_logger.warn(\"Failed to load keystore, using trust all manager\");\n        }\n\n        if (stream != null) {\n            stream.close();\n        }\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/nio/Link.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"MB"}],"commitId":"eda3b35bfa56fd2f96b68fe7deb52572f4e6fe75","commitMessage":"@@@CLOUDSTACK-10012: Migrate to Embedded Jetty\n\n- Migrate to embedded Jetty server.\n- Improve ServerDaemon implementation.\n- Introduce a new server.properties file for easier configuration.\n- Have a single /etc/default/cloudstack-management to configure env.\n- Reduce shaded jar file.  removing unnecessary dependencies.\n- Upgrade to Spring 5.x.  upgrade several jar dependencies.\n- Does not shade and include mysql-connector.  used from classpath instead.\n- Upgrade and use bountcastle as a separate un-shaded jar dependency.\n- Remove tomcat related configuration and files.\n- Have both embedded UI assets in uber jar and separate webapp directory.\n- Refactor systemd and init scripts.  cleanup packaging.\n- Made cloudstack-setup-databases faster.  using `urandom`.\n- Remove unmaintained distro packagings.\n- Moves creation and usage of server keystore in CA manager.  this\n  deprecates the need to create/store cloud.jks in conf folder and\n  the db.cloud.keyStorePassphrase in db.properties file. This also\n  remove the need of the --keystore-passphrase in the\n  cloudstack-setup-encryption script.\n- GZip contents dynamically in embedded Jetty\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2017-11-04 02:27:25","modifiedFileCount":"9","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-04-20 03:12:30","codes":[{"authorDate":"2017-08-07 19:24:08","commitOrder":3,"curCode":"    public static SSLContext initManagementSSLContext(final CAService caService) throws GeneralSecurityException, IOException {\n        if (caService == null) {\n            throw new CloudRuntimeException(\"CAService is not available to load/get management server keystore\");\n        }\n        final KeyStore ks = caService.getManagementKeyStore();\n        char[] passphrase = caService.getKeyStorePassphrase();\n\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        final TrustManager[] tms = tmf.getTrustManagers();\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","date":"2017-11-04 02:27:25","endLine":407,"groupId":"102661","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initManagementSSLContext","params":"(finalCAServicecaService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/78/48d5330a3ce55551e808f799f9c497ef6f3c59.src","preCode":"    public static SSLContext initManagementSSLContext(final CAService caService) throws GeneralSecurityException, IOException {\n        if (caService == null) {\n            throw new CloudRuntimeException(\"CAService is not available to load/get management server keystore\");\n        }\n        final KeyStore ks = caService.getManagementKeyStore();\n        char[] passphrase = caService.getKeyStorePassphrase();\n\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        final TrustManager[] tms = tmf.getTrustManagers();\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/nio/Link.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"N"},{"authorDate":"2018-04-20 03:12:30","commitOrder":3,"curCode":"    public static SSLContext initClientSSLContext() throws GeneralSecurityException, IOException {\n        char[] passphrase = KeyStoreUtils.DEFAULT_KS_PASSPHRASE;\n        File confFile = PropertiesUtil.findConfigFile(\"agent.properties\");\n        if (confFile != null) {\n            s_logger.info(\"Conf file found: \" + confFile.getAbsolutePath());\n            final String pass = PropertiesUtil.loadFromFile(confFile).getProperty(KeyStoreUtils.KS_PASSPHRASE_PROPERTY);\n            if (pass != null) {\n                passphrase = pass.toCharArray();\n            }\n        }\n\n        InputStream stream = null;\n        if (confFile != null) {\n            final String keystorePath = confFile.getParent() + \"/\" + KeyStoreUtils.KS_FILENAME;\n            if (new File(keystorePath).exists()) {\n                stream = new FileInputStream(keystorePath);\n            }\n        }\n\n        final KeyStore ks = loadKeyStore(stream, passphrase);\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        TrustManager[] tms;\n        if (stream != null) {\n            \r\n            tms = tmf.getTrustManagers();\n        } else {\n            \r\n            tms = new TrustManager[]{new TrustAllManager()};\n            s_logger.warn(\"Failed to load keystore, using trust all manager\");\n        }\n\n        if (stream != null) {\n            stream.close();\n        }\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","date":"2018-04-20 03:16:43","endLine":453,"groupId":"102661","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initClientSSLContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/65/82440877099f1ef9b7e02171b290a41573071f.src","preCode":"    public static SSLContext initClientSSLContext() throws GeneralSecurityException, IOException {\n        char[] passphrase = KeyStoreUtils.defaultKeystorePassphrase;\n        File confFile = PropertiesUtil.findConfigFile(\"agent.properties\");\n        if (confFile != null) {\n            s_logger.info(\"Conf file found: \" + confFile.getAbsolutePath());\n            final String pass = PropertiesUtil.loadFromFile(confFile).getProperty(KeyStoreUtils.passphrasePropertyName);\n            if (pass != null) {\n                passphrase = pass.toCharArray();\n            }\n        }\n\n        InputStream stream = null;\n        if (confFile != null) {\n            final String keystorePath = confFile.getParent() + \"/\" + KeyStoreUtils.defaultKeystoreFile;\n            if (new File(keystorePath).exists()) {\n                stream = new FileInputStream(keystorePath);\n            }\n        }\n\n        final KeyStore ks = loadKeyStore(stream, passphrase);\n        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        TrustManager[] tms;\n        if (stream != null) {\n            \r\n            tms = tmf.getTrustManagers();\n        } else {\n            \r\n            tms = new TrustManager[]{new TrustAllManager()};\n            s_logger.warn(\"Failed to load keystore, using trust all manager\");\n        }\n\n        if (stream != null) {\n            stream.close();\n        }\n\n        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(ks, passphrase);\n\n        final SSLContext sslContext = SSLUtils.getSSLContext();\n        sslContext.init(kmf.getKeyManagers(), tms, new SecureRandom());\n        return sslContext;\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/nio/Link.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"644b0910cd0c33d55a07dbc95f1d51a288c3c4a3","commitMessage":"@@@Merge branch '4.11'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-04-20 03:16:43","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"}]
