[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-23 19:19:36","commitOrder":2,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot on primary usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageSnapshotOnPrimaryVO> usageUsageVMSnapshots = s_usageSnapshotOnPrimaryDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot on primary usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageSnapshotOnPrimaryVO> unprocessedUsage = new HashMap<String, UsageSnapshotOnPrimaryVO>();\n        for (UsageSnapshotOnPrimaryVO usageRec : usageUsageVMSnapshots) {\n            s_logger.debug(\"usageRec for VMsnap on primary \" + usageRec.toString());\n            String key = usageRec.getName();\n            if (usageRec.getPhysicalSize() == 0) {\n                usageRec.setDeleted(new Date());\n                s_usageSnapshotOnPrimaryDao.updateDeleted(usageRec);\n            } else {\n                unprocessedUsage.put(key, usageRec);\n            }\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageSnapshotOnPrimaryVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            Date endDateEffective = endDate;\n            if (usageRec.getDeleted() != null && usageRec.getDeleted().before(endDate)){\n                endDateEffective = usageRec.getDeleted();\n                s_logger.debug(\"Remoevd vm snapshot found endDateEffective \" + endDateEffective + \" period end data \" + endDate);\n            }\n            long duration = (endDateEffective.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT_ON_PRIMARY, duration, created, endDateEffective, account, usageRec.getId(), usageRec.getName(), usageRec.getZoneId(),\n                    usageRec.getVirtualSize(), usageRec.getPhysicalSize());\n        }\n\n        return true;\n    }\n","date":"2018-01-23 19:19:36","endLine":101,"groupId":"20390","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/1929507af9a0f74e01404ac2c84750d4331fcc.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot on primary usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageSnapshotOnPrimaryVO> usageUsageVMSnapshots = s_usageSnapshotOnPrimaryDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot on primary usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageSnapshotOnPrimaryVO> unprocessedUsage = new HashMap<String, UsageSnapshotOnPrimaryVO>();\n        for (UsageSnapshotOnPrimaryVO usageRec : usageUsageVMSnapshots) {\n            s_logger.debug(\"usageRec for VMsnap on primary \" + usageRec.toString());\n            String key = usageRec.getName();\n            if (usageRec.getPhysicalSize() == 0) {\n                usageRec.setDeleted(new Date());\n                s_usageSnapshotOnPrimaryDao.updateDeleted(usageRec);\n            } else {\n                unprocessedUsage.put(key, usageRec);\n            }\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageSnapshotOnPrimaryVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            Date endDateEffective = endDate;\n            if (usageRec.getDeleted() != null && usageRec.getDeleted().before(endDate)){\n                endDateEffective = usageRec.getDeleted();\n                s_logger.debug(\"Remoevd vm snapshot found endDateEffective \" + endDateEffective + \" period end data \" + endDate);\n            }\n            long duration = (endDateEffective.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT_ON_PRIMARY, duration, created, endDateEffective, account, usageRec.getId(), usageRec.getName(), usageRec.getZoneId(),\n                    usageRec.getVirtualSize(), usageRec.getPhysicalSize());\n        }\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VMSanpshotOnPrimaryParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot volume usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageVMSnapshotVO> usageUsageVMSnapshots = s_usageVMSnapshotDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageVMSnapshotVO> unprocessedUsage = new HashMap<String, UsageVMSnapshotVO>();\n        for (UsageVMSnapshotVO usageRec : usageUsageVMSnapshots) {\n            long zoneId = usageRec.getZoneId();\n            Long volId = usageRec.getId();\n            long vmId = usageRec.getVmId();\n            String key = vmId + \":\" + volId;\n            if (usageRec.getCreated().before(startDate)) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n            UsageVMSnapshotVO previousEvent = s_usageVMSnapshotDao.getPreviousUsageRecord(usageRec);\n            if (previousEvent == null || previousEvent.getSize() == 0) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n\n            Date previousCreated = previousEvent.getCreated();\n            if (previousCreated.before(startDate)) {\n                previousCreated = startDate;\n            }\n\n            Date createDate = usageRec.getCreated();\n            long duration = (createDate.getTime() - previousCreated.getTime()) + 1;\n\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, previousCreated, createDate, account, volId, zoneId, previousEvent.getDiskOfferingId(), vmId,\n                previousEvent.getSize());\n            previousEvent.setProcessed(new Date());\n            s_usageVMSnapshotDao.update(previousEvent);\n\n            if (usageRec.getSize() == 0) {\n                usageRec.setProcessed(new Date());\n                s_usageVMSnapshotDao.update(usageRec);\n            } else\n                unprocessedUsage.put(key, usageRec);\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageVMSnapshotVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            long duration = (endDate.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, created, endDate, account, usageRec.getId(), usageRec.getZoneId(), usageRec.getDiskOfferingId(),\n                usageRec.getVmId(), usageRec.getSize());\n        }\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":120,"groupId":"20390","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9a/f81374437fd22dadaeb8c0a9aa8777469aaeb4.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot volume usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageVMSnapshotVO> usageUsageVMSnapshots = s_usageVMSnapshotDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageVMSnapshotVO> unprocessedUsage = new HashMap<String, UsageVMSnapshotVO>();\n        for (UsageVMSnapshotVO usageRec : usageUsageVMSnapshots) {\n            long zoneId = usageRec.getZoneId();\n            Long volId = usageRec.getId();\n            long vmId = usageRec.getVmId();\n            String key = vmId + \":\" + volId;\n            if (usageRec.getCreated().before(startDate)) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n            UsageVMSnapshotVO previousEvent = s_usageVMSnapshotDao.getPreviousUsageRecord(usageRec);\n            if (previousEvent == null || previousEvent.getSize() == 0) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n\n            Date previousCreated = previousEvent.getCreated();\n            if (previousCreated.before(startDate)) {\n                previousCreated = startDate;\n            }\n\n            Date createDate = usageRec.getCreated();\n            long duration = (createDate.getTime() - previousCreated.getTime()) + 1;\n\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, previousCreated, createDate, account, volId, zoneId, previousEvent.getDiskOfferingId(), vmId,\n                previousEvent.getSize());\n            previousEvent.setProcessed(new Date());\n            s_usageVMSnapshotDao.update(previousEvent);\n\n            if (usageRec.getSize() == 0) {\n                usageRec.setProcessed(new Date());\n                s_usageVMSnapshotDao.update(usageRec);\n            } else\n                unprocessedUsage.put(key, usageRec);\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageVMSnapshotVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            long duration = (endDate.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, created, endDate, account, usageRec.getId(), usageRec.getZoneId(), usageRec.getDiskOfferingId(),\n                usageRec.getVmId(), usageRec.getSize());\n        }\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VMSnapshotUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"NB"}],"commitId":"c591c5ad3e270e5e62166a7f1ff6f9895d4b102c","commitMessage":"@@@CLOUDSTACK-10248: Fix errors that appeared after #2283 (#2417)\n\nThis fixes move refactoring error introduced in #2283 \nFor instance.  the class DatadiskTO is supposed to be in com.cloud.agent.api.to package. However.  the folder structure it was placed in is com.cloud.agent.api.api.to.\n\nSkip tests for cloud-plugin-hypervisor-ovm3:\nFor some unknown reason.  there are quite a lot of broken test cases for cloud-plugin-hypervisor-ovm3. They might have appeared after some dependency upgrade and was overlooked by the person updating them. I checked them to see if they could be fixed.  but these tests are not developed in a clear and clean manner. On top of that.  we do not see (at least I) people using OVM3-hypervisor with ACS. Therefore.  I decided to skip them.\n\nIdentention corrected to use spaces instead of tabs in XML files\n","date":"2018-01-23 19:19:36","modifiedFileCount":"9","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2019-08-20 21:20:23","codes":[{"authorDate":"2019-08-20 21:20:23","commitOrder":3,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot on primary usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageSnapshotOnPrimaryVO> usageUsageVMSnapshots = s_usageSnapshotOnPrimaryDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot on primary usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageSnapshotOnPrimaryVO> unprocessedUsage = new HashMap<String, UsageSnapshotOnPrimaryVO>();\n        for (UsageSnapshotOnPrimaryVO usageRec : usageUsageVMSnapshots) {\n            s_logger.debug(\"usageRec for VMsnap on primary \" + usageRec.toString());\n            String key = usageRec.getName();\n            if (usageRec.getPhysicalSize() == 0) {\n                usageRec.setDeleted(new Date());\n                s_usageSnapshotOnPrimaryDao.updateDeleted(usageRec);\n            } else {\n                unprocessedUsage.put(key, usageRec);\n            }\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageSnapshotOnPrimaryVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            Date endDateEffective = endDate;\n            if (usageRec.getDeleted() != null && usageRec.getDeleted().before(endDate)){\n                endDateEffective = usageRec.getDeleted();\n                s_logger.debug(\"Remoevd vm snapshot found endDateEffective \" + endDateEffective + \" period end data \" + endDate);\n            }\n            long duration = (endDateEffective.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT_ON_PRIMARY, duration, created, endDateEffective, account, usageRec.getId(), usageRec.getName(), usageRec.getZoneId(),\n                    usageRec.getVirtualSize(), usageRec.getPhysicalSize(), usageRec.getVmSnapshotId());\n        }\n\n        return true;\n    }\n","date":"2019-08-20 21:20:23","endLine":101,"groupId":"10915","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d8/daad11a34e4aacadfb76a3860e244529f4bbea.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot on primary usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageSnapshotOnPrimaryVO> usageUsageVMSnapshots = s_usageSnapshotOnPrimaryDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot on primary usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageSnapshotOnPrimaryVO> unprocessedUsage = new HashMap<String, UsageSnapshotOnPrimaryVO>();\n        for (UsageSnapshotOnPrimaryVO usageRec : usageUsageVMSnapshots) {\n            s_logger.debug(\"usageRec for VMsnap on primary \" + usageRec.toString());\n            String key = usageRec.getName();\n            if (usageRec.getPhysicalSize() == 0) {\n                usageRec.setDeleted(new Date());\n                s_usageSnapshotOnPrimaryDao.updateDeleted(usageRec);\n            } else {\n                unprocessedUsage.put(key, usageRec);\n            }\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageSnapshotOnPrimaryVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            Date endDateEffective = endDate;\n            if (usageRec.getDeleted() != null && usageRec.getDeleted().before(endDate)){\n                endDateEffective = usageRec.getDeleted();\n                s_logger.debug(\"Remoevd vm snapshot found endDateEffective \" + endDateEffective + \" period end data \" + endDate);\n            }\n            long duration = (endDateEffective.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT_ON_PRIMARY, duration, created, endDateEffective, account, usageRec.getId(), usageRec.getName(), usageRec.getZoneId(),\n                    usageRec.getVirtualSize(), usageRec.getPhysicalSize());\n        }\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VMSanpshotOnPrimaryParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-08-20 21:20:23","commitOrder":3,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot volume usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageVMSnapshotVO> usageUsageVMSnapshots = s_usageVMSnapshotDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageVMSnapshotVO> unprocessedUsage = new HashMap<String, UsageVMSnapshotVO>();\n        for (UsageVMSnapshotVO usageRec : usageUsageVMSnapshots) {\n            long zoneId = usageRec.getZoneId();\n            Long volId = usageRec.getId();\n            long vmId = usageRec.getVmId();\n            String key = vmId + \":\" + volId;\n            if (usageRec.getCreated().before(startDate)) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n            UsageVMSnapshotVO previousEvent = s_usageVMSnapshotDao.getPreviousUsageRecord(usageRec);\n            if (previousEvent == null || previousEvent.getSize() == 0) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n\n            Date previousCreated = previousEvent.getCreated();\n            if (previousCreated.before(startDate)) {\n                previousCreated = startDate;\n            }\n\n            Date createDate = usageRec.getCreated();\n            long duration = (createDate.getTime() - previousCreated.getTime()) + 1;\n\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, previousCreated, createDate, account, volId, zoneId, previousEvent.getDiskOfferingId(), vmId,\n                previousEvent.getSize(), usageRec.getVmSnapshotId());\n            previousEvent.setProcessed(new Date());\n            s_usageVMSnapshotDao.update(previousEvent);\n\n            if (usageRec.getSize() == 0) {\n                usageRec.setProcessed(new Date());\n                s_usageVMSnapshotDao.update(usageRec);\n            } else\n                unprocessedUsage.put(key, usageRec);\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageVMSnapshotVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            long duration = (endDate.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, created, endDate, account, usageRec.getId(), usageRec.getZoneId(), usageRec.getDiskOfferingId(),\n                usageRec.getVmId(), usageRec.getSize(), usageRec.getVmSnapshotId());\n        }\n\n        return true;\n    }\n","date":"2019-08-20 21:20:23","endLine":120,"groupId":"10915","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4d/bfd2ec31705bb8d1be6b5f37ee0cf2594c90dc.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all VmSnapshot volume usage events for account: \" + account.getId());\n        }\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        List<UsageVMSnapshotVO> usageUsageVMSnapshots = s_usageVMSnapshotDao.getUsageRecords(account.getId(), account.getDomainId(), startDate, endDate);\n\n        if (usageUsageVMSnapshots.isEmpty()) {\n            s_logger.debug(\"No VM snapshot usage events for this period\");\n            return true;\n        }\n\n        Map<String, UsageVMSnapshotVO> unprocessedUsage = new HashMap<String, UsageVMSnapshotVO>();\n        for (UsageVMSnapshotVO usageRec : usageUsageVMSnapshots) {\n            long zoneId = usageRec.getZoneId();\n            Long volId = usageRec.getId();\n            long vmId = usageRec.getVmId();\n            String key = vmId + \":\" + volId;\n            if (usageRec.getCreated().before(startDate)) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n            UsageVMSnapshotVO previousEvent = s_usageVMSnapshotDao.getPreviousUsageRecord(usageRec);\n            if (previousEvent == null || previousEvent.getSize() == 0) {\n                unprocessedUsage.put(key, usageRec);\n                continue;\n            }\n\n            Date previousCreated = previousEvent.getCreated();\n            if (previousCreated.before(startDate)) {\n                previousCreated = startDate;\n            }\n\n            Date createDate = usageRec.getCreated();\n            long duration = (createDate.getTime() - previousCreated.getTime()) + 1;\n\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, previousCreated, createDate, account, volId, zoneId, previousEvent.getDiskOfferingId(), vmId,\n                previousEvent.getSize());\n            previousEvent.setProcessed(new Date());\n            s_usageVMSnapshotDao.update(previousEvent);\n\n            if (usageRec.getSize() == 0) {\n                usageRec.setProcessed(new Date());\n                s_usageVMSnapshotDao.update(usageRec);\n            } else\n                unprocessedUsage.put(key, usageRec);\n        }\n\n        for (String key : unprocessedUsage.keySet()) {\n            UsageVMSnapshotVO usageRec = unprocessedUsage.get(key);\n            Date created = usageRec.getCreated();\n            if (created.before(startDate)) {\n                created = startDate;\n            }\n            long duration = (endDate.getTime() - created.getTime()) + 1;\n            createUsageRecord(UsageTypes.VM_SNAPSHOT, duration, created, endDate, account, usageRec.getId(), usageRec.getZoneId(), usageRec.getDiskOfferingId(),\n                usageRec.getVmId(), usageRec.getSize());\n        }\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VMSnapshotUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"bfc08715cc8553e8a7192cf58b5a699d9778b021","commitMessage":"@@@Display VM snapshot tags on usage records (#3560)\n\n* Refactor usage helper tables to include VM snapshot id\n\n* Fix resource type and resource id while listing usage records\n\n* Add defensive checks\n","date":"2019-08-20 21:20:23","modifiedFileCount":"11","status":"M","submitter":"Nicolas Vazquez"}]
