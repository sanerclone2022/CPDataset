[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setRedundantState(router.getRedundantState().toString());\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = Version.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((Version.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":187,"groupId":"19482","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newDomainRouterResponse","params":"(DomainRouterJoinVOrouter@Accountcaller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e3/d1e30d34848ff9b867cdced447b889642ac8b9.src","preCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setRedundantState(router.getRedundantState().toString());\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = Version.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((Version.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":411,"groupId":"4635","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createExternalLoadBalancerResponse","params":"(HostexternalLoadBalancer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/6fab734d4a9b2b2f122f0bf0dd2d400545b929.src","preCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-03-15 18:55:29","commitOrder":2,"curCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setRedundantState(router.getRedundantState().toString());\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","date":"2018-03-15 18:55:29","endLine":188,"groupId":"19482","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newDomainRouterResponse","params":"(DomainRouterJoinVOrouter@Accountcaller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/9ef2b6c795131aafe70aa8a4861e5bf294f253.src","preCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setRedundantState(router.getRedundantState().toString());\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = Version.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((Version.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":411,"groupId":"4635","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createExternalLoadBalancerResponse","params":"(HostexternalLoadBalancer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/6fab734d4a9b2b2f122f0bf0dd2d400545b929.src","preCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"}],"commitId":"1708838518299d5d04f810d0d01cfb4faf425b03","commitMessage":"@@@CLOUDSTACK-10268: Fix and enhance package script (#2433)\n\n- new flag `-T.  --use-timestamp` to use `timestamp` when POM version contains SNAPSHOT\n  - in the final artifacts (jar) name\n  - in the final package (rpm.  deb) name\n  - in `/etc/cloudstack-release` file of SystemVMs\n  - in the Management Server > About dialog\n- if there's a \"branding\" string in the POM version (e.g. `x.y.z.a-NAME[-SNAPSHOT]`). \nthe branding name will be used in the final generated pacakge name such as following:\n  - `cloudstack-management-x.y.z.a-NAME.NUMBER.el7.centos.x86_64`\n  - `cloudstack-management_x.y.z.a-NAME-NUMBER~xenial_all.deb`\n- branding string can be overriden with newly added `-b.  --brand` flag\n- handle the new format version for VR version\n- fix long opts (they were broken)\n- tolerate and show a warning message for unrecognized flags\n- usage help reformat\n\n* Deprecate Version class in favor or CloudStackVersion\n","date":"2018-03-15 18:55:29","modifiedFileCount":"6","status":"M","submitter":"Khosrow Moossavi"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-05-11 15:35:36","commitOrder":3,"curCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        if (router.getRedundantState() != null) {\n            routerResponse.setRedundantState(router.getRedundantState().toString());\n        }\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","date":"2018-05-11 15:39:03","endLine":190,"groupId":"19482","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newDomainRouterResponse","params":"(DomainRouterJoinVOrouter@Accountcaller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c6/7611a7ccbf21989f605584f79265c275c26eae.src","preCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setRedundantState(router.getRedundantState().toString());\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":411,"groupId":"4635","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createExternalLoadBalancerResponse","params":"(HostexternalLoadBalancer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/6fab734d4a9b2b2f122f0bf0dd2d400545b929.src","preCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"}],"commitId":"65511c4335eb5060fb7a3b4577e99d54b72ae6c3","commitMessage":"@@@Merge branch '4.11': Reduce VR downtime during network restart (#2508)\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-05-11 15:39:03","modifiedFileCount":"21","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-11 01:20:57","commitOrder":4,"curCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setScriptsVersion(router.getScriptsVersion());\n        if (router.getRedundantState() != null) {\n            routerResponse.setRedundantState(router.getRedundantState().toString());\n        }\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","date":"2019-06-11 01:20:56","endLine":191,"groupId":"19482","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"newDomainRouterResponse","params":"(DomainRouterJoinVOrouter@Accountcaller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/82/52a2a5a18f730b305b9f061819c0f35aafc3eb.src","preCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        if (router.getRedundantState() != null) {\n            routerResponse.setRedundantState(router.getRedundantState().toString());\n        }\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":411,"groupId":"4635","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createExternalLoadBalancerResponse","params":"(HostexternalLoadBalancer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/6fab734d4a9b2b2f122f0bf0dd2d400545b929.src","preCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"}],"commitId":"c4f6c43852e1537a171945c66292fd0f3221018e","commitMessage":"@@@api: Add to listRouters response the VR scripts version (#3372)\n\nAdd missing scriptsversion field to list router api call response.\n\nFixes #3357","date":"2019-06-11 01:20:56","modifiedFileCount":"1","status":"M","submitter":"Anurag Awasthi"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-06-25 13:18:02","commitOrder":5,"curCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        VMTemplateVO template = ApiDBUtils.findTemplateById(router.getTemplateId());\n        if (template != null) {\n            routerResponse.setTemplateName(template.getName());\n        }\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setScriptsVersion(router.getScriptsVersion());\n        if (router.getRedundantState() != null) {\n            routerResponse.setRedundantState(router.getRedundantState().toString());\n        }\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            HostPodVO pod = ApiDBUtils.findPodById(router.getPodId());\n            if (pod != null) {\n                routerResponse.setPodName(pod.getName());\n            }\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","date":"2020-06-25 13:18:02","endLine":202,"groupId":"19482","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"newDomainRouterResponse","params":"(DomainRouterJoinVOrouter@Accountcaller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/41/3ff2a561498d784ef8c5104d078fb4d8900542.src","preCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setScriptsVersion(router.getScriptsVersion());\n        if (router.getRedundantState() != null) {\n            routerResponse.setRedundantState(router.getRedundantState().toString());\n        }\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":411,"groupId":"4635","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createExternalLoadBalancerResponse","params":"(HostexternalLoadBalancer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/6fab734d4a9b2b2f122f0bf0dd2d400545b929.src","preCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"}],"commitId":"3ede1eaa4985f78fc52016f14b138d3a1a367b26","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-06-25 13:18:02","modifiedFileCount":"13","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":6,"curCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        VMTemplateVO template = ApiDBUtils.findTemplateById(router.getTemplateId());\n        if (template != null) {\n            routerResponse.setTemplateName(template.getName());\n        }\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setScriptsVersion(router.getScriptsVersion());\n        if (router.getRedundantState() != null) {\n            routerResponse.setRedundantState(router.getRedundantState().toString());\n        }\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        routerResponse.setHasAnnotation(annotationDao.hasAnnotations(router.getUuid(), AnnotationService.EntityType.VR.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            HostPodVO pod = ApiDBUtils.findPodById(router.getPodId());\n            if (pod != null) {\n                routerResponse.setPodName(pod.getName());\n            }\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","date":"2021-09-08 12:44:06","endLine":210,"groupId":"101491","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"newDomainRouterResponse","params":"(DomainRouterJoinVOrouter@Accountcaller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/96/c129ad068c670714f02eaf90f45f5eb763d6ed.src","preCode":"    public DomainRouterResponse newDomainRouterResponse(DomainRouterJoinVO router, Account caller) {\n        DomainRouterResponse routerResponse = new DomainRouterResponse();\n        routerResponse.setId(router.getUuid());\n        routerResponse.setZoneId(router.getDataCenterUuid());\n        routerResponse.setName(router.getName());\n        routerResponse.setTemplateId(router.getTemplateUuid());\n        VMTemplateVO template = ApiDBUtils.findTemplateById(router.getTemplateId());\n        if (template != null) {\n            routerResponse.setTemplateName(template.getName());\n        }\n        routerResponse.setCreated(router.getCreated());\n        routerResponse.setState(router.getState());\n        routerResponse.setIsRedundantRouter(router.isRedundantRouter());\n        routerResponse.setScriptsVersion(router.getScriptsVersion());\n        if (router.getRedundantState() != null) {\n            routerResponse.setRedundantState(router.getRedundantState().toString());\n        }\n        if (router.getTemplateVersion() != null) {\n            String routerVersion = CloudStackVersion.trimRouterVersion(router.getTemplateVersion());\n            routerResponse.setVersion(routerVersion);\n            routerResponse.setRequiresUpgrade((CloudStackVersion.compare(routerVersion, NetworkOrchestrationService.MinVRVersion.valueIn(router.getDataCenterId())) < 0));\n        } else {\n            routerResponse.setVersion(\"UNKNOWN\");\n            routerResponse.setRequiresUpgrade(true);\n        }\n\n        if (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN\n                || _accountMgr.isRootAdmin(caller.getId())) {\n            if (router.getHostId() != null) {\n                routerResponse.setHostId(router.getHostUuid());\n                routerResponse.setHostName(router.getHostName());\n                routerResponse.setHypervisor(router.getHypervisorType().toString());\n            }\n            routerResponse.setPodId(router.getPodUuid());\n            HostPodVO pod = ApiDBUtils.findPodById(router.getPodId());\n            if (pod != null) {\n                routerResponse.setPodName(pod.getName());\n            }\n            long nic_id = router.getNicId();\n            if (nic_id > 0) {\n                TrafficType ty = router.getTrafficType();\n                if (ty != null) {\n                    \r\n                    \r\n                    if (ty == TrafficType.Public) {\n                        routerResponse.setPublicIp(router.getIpAddress());\n                        routerResponse.setPublicMacAddress(router.getMacAddress());\n                        routerResponse.setPublicNetmask(router.getNetmask());\n                        routerResponse.setGateway(router.getGateway());\n                        routerResponse.setPublicNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Control) {\n                        routerResponse.setLinkLocalIp(router.getIpAddress());\n                        routerResponse.setLinkLocalMacAddress(router.getMacAddress());\n                        routerResponse.setLinkLocalNetmask(router.getNetmask());\n                        routerResponse.setLinkLocalNetworkId(router.getNetworkUuid());\n                    } else if (ty == TrafficType.Guest) {\n                        routerResponse.setGuestIpAddress(router.getIpAddress());\n                        routerResponse.setGuestMacAddress(router.getMacAddress());\n                        routerResponse.setGuestNetmask(router.getNetmask());\n                        routerResponse.setGuestNetworkId(router.getNetworkUuid());\n                        routerResponse.setGuestNetworkName(router.getNetworkName());\n                        routerResponse.setNetworkDomain(router.getNetworkDomain());\n                    }\n                }\n\n                NicResponse nicResponse = new NicResponse();\n                nicResponse.setId(router.getNicUuid());\n                nicResponse.setIpaddress(router.getIpAddress());\n                nicResponse.setGateway(router.getGateway());\n                nicResponse.setNetmask(router.getNetmask());\n                nicResponse.setNetworkid(router.getNetworkUuid());\n                nicResponse.setNetworkName(router.getNetworkName());\n                nicResponse.setMacAddress(router.getMacAddress());\n                nicResponse.setIp6Address(router.getIp6Address());\n                nicResponse.setIp6Gateway(router.getIp6Gateway());\n                nicResponse.setIp6Cidr(router.getIp6Cidr());\n                if (router.getBroadcastUri() != null) {\n                    nicResponse.setBroadcastUri(router.getBroadcastUri().toString());\n                }\n                if (router.getIsolationUri() != null) {\n                    nicResponse.setIsolationUri(router.getIsolationUri().toString());\n                }\n                if (router.getTrafficType() != null) {\n                    nicResponse.setTrafficType(router.getTrafficType().toString());\n                }\n                if (router.getGuestType() != null) {\n                    nicResponse.setType(router.getGuestType().toString());\n                }\n                nicResponse.setIsDefault(router.isDefaultNic());\n                nicResponse.setObjectName(\"nic\");\n                routerResponse.addNic(nicResponse);\n            }\n        }\n\n        routerResponse.setServiceOfferingId(router.getServiceOfferingUuid());\n        routerResponse.setServiceOfferingName(router.getServiceOfferingName());\n\n        \r\n        ApiResponseHelper.populateOwner(routerResponse, router);\n\n        routerResponse.setDomainId(router.getDomainUuid());\n        routerResponse.setDomainName(router.getDomainName());\n\n        routerResponse.setZoneName(router.getDataCenterName());\n        routerResponse.setDns1(router.getDns1());\n        routerResponse.setDns2(router.getDns2());\n\n        routerResponse.setIp6Dns1(router.getIp6Dns1());\n        routerResponse.setIp6Dns2(router.getIp6Dns2());\n\n        routerResponse.setVpcId(router.getVpcUuid());\n        routerResponse.setVpcName(router.getVpcName());\n\n        routerResponse.setRole(router.getRole().toString());\n\n        \r\n        if (router.getJobId() != null) {\n            routerResponse.setJobId(router.getJobUuid());\n            routerResponse.setJobStatus(router.getJobStatus());\n        }\n\n        if (router.getRole() == Role.INTERNAL_LB_VM) {\n            routerResponse.setObjectName(\"internalloadbalancervm\");\n        } else {\n            routerResponse.setObjectName(\"router\");\n        }\n\n        return routerResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/DomainRouterJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":6,"curCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":411,"groupId":"101491","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createExternalLoadBalancerResponse","params":"(HostexternalLoadBalancer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/6fab734d4a9b2b2f122f0bf0dd2d400545b929.src","preCode":"    public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer) {\n        Map<String, String> lbDetails = _hostDetailDao.findDetails(externalLoadBalancer.getId());\n        ExternalLoadBalancerResponse response = new ExternalLoadBalancerResponse();\n        response.setId(externalLoadBalancer.getUuid());\n        response.setIpAddress(externalLoadBalancer.getPrivateIpAddress());\n        response.setUsername(lbDetails.get(\"username\"));\n        response.setPublicInterface(lbDetails.get(\"publicInterface\"));\n        response.setPrivateInterface(lbDetails.get(\"privateInterface\"));\n        response.setNumRetries(lbDetails.get(\"numRetries\"));\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"}]
