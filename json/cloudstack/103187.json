[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testCreateCommandNoTemplate() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.createPhysicalDisk(diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), diskCharacteristics.getSize())).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","date":"2018-01-20 05:49:27","endLine":1700,"groupId":"17666","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateCommandNoTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testCreateCommandNoTemplate() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.createPhysicalDisk(diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), diskCharacteristics.getSize())).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1676,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testCreateCommandCLVM() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final String templateUrl = \"http://template\";\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, templateUrl, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n        final KVMPhysicalDisk baseVol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.getPhysicalDisk(command.getTemplateUrl())).thenReturn(baseVol);\n        when(poolManager.createDiskFromTemplate(baseVol,\n                diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), primary, 0)).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","date":"2018-01-20 05:49:27","endLine":1760,"groupId":"16730","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateCommandCLVM","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testCreateCommandCLVM() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final String templateUrl = \"http://template\";\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, templateUrl, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n        final KVMPhysicalDisk baseVol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.getPhysicalDisk(command.getTemplateUrl())).thenReturn(baseVol);\n        when(poolManager.createDiskFromTemplate(baseVol,\n                diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), primary, 0)).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1732,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-12-14 19:01:28","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testCreateCommandNoTemplate() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.createPhysicalDisk(diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), diskCharacteristics.getSize())).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","date":"2018-01-20 05:49:27","endLine":1700,"groupId":"103187","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateCommandNoTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testCreateCommandNoTemplate() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.createPhysicalDisk(diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), diskCharacteristics.getSize())).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1676,"status":"N"},{"authorDate":"2018-12-14 19:01:28","commitOrder":2,"curCode":"    public void testCreateCommandCLVM() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final String templateUrl = \"http://template\";\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, templateUrl, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n        final KVMPhysicalDisk baseVol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.getPhysicalDisk(command.getTemplateUrl())).thenReturn(baseVol);\n        when(poolManager.createDiskFromTemplate(baseVol, diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), primary, baseVol.getSize(), 0)).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","date":"2018-12-14 19:01:28","endLine":1778,"groupId":"103187","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateCommandCLVM","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/69/954d0c805fe5ea304b338ac91afea7aa37f03b.src","preCode":"    public void testCreateCommandCLVM() {\n        final DiskProfile diskCharacteristics = Mockito.mock(DiskProfile.class);\n        final StorageFilerTO pool = Mockito.mock(StorageFilerTO.class);\n        final String templateUrl = \"http://template\";\n        final boolean executeInSequence = false;\n\n        final CreateCommand command = new CreateCommand(diskCharacteristics, templateUrl, pool, executeInSequence );\n\n        final KVMStoragePoolManager poolManager = Mockito.mock(KVMStoragePoolManager.class);\n        final KVMStoragePool primary = Mockito.mock(KVMStoragePool.class);\n        final KVMPhysicalDisk vol = Mockito.mock(KVMPhysicalDisk.class);\n        final KVMPhysicalDisk baseVol = Mockito.mock(KVMPhysicalDisk.class);\n\n        when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(poolManager);\n        when(poolManager.getStoragePool(pool.getType(), pool.getUuid())).thenReturn(primary);\n\n        when(primary.getPhysicalDisk(command.getTemplateUrl())).thenReturn(baseVol);\n        when(poolManager.createDiskFromTemplate(baseVol,\n                diskCharacteristics.getPath(), diskCharacteristics.getProvisioningType(), primary, 0)).thenReturn(vol);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getStoragePoolMgr();\n        verify(poolManager, times(1)).getStoragePool(pool.getType(), pool.getUuid());\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1751,"status":"M"}],"commitId":"bf209405e7d60b6a5abf87677d368c429359d98a","commitMessage":"@@@Allow KVM VM live migration with ROOT volume on file storage type (#2997)\n\n* Allow KVM VM live migration with ROOT volume on file\n\n* Allow KVM VM live migration with ROOT volume on file\n- Add JUnit tests\n\n* Address reviewers and change some variable names to ease future\nimplementation (developers can easily guess the name and use\nautocomplete)\n","date":"2018-12-14 19:01:28","modifiedFileCount":"14","status":"M","submitter":"Gabriel Beims Br?scher"}]
