[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void setUp() throws LibvirtException, ConfigurationException {\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(\"alubr0\", \"alubr0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, \"alubr0\");\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","date":"2018-01-20 05:49:27","endLine":224,"groupId":"25003","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/86/e455be27128a9d6416e85fb6db4bb00ac65aea.src","preCode":"    public void setUp() throws LibvirtException, ConfigurationException {\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(\"alubr0\", \"alubr0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, \"alubr0\");\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void setUp() throws LibvirtException, ConfigurationException {\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","date":"2018-01-20 05:49:27","endLine":236,"groupId":"24351","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4d/068350f3f09b1feb129d8cf4bce774a914c6ad.src","preCode":"    public void setUp() throws LibvirtException, ConfigurationException {\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtNetworkElementCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-04-24 19:33:06","codes":[{"authorDate":"2019-04-24 19:33:06","commitOrder":2,"curCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(\"alubr0\", \"alubr0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, \"alubr0\");\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","date":"2019-04-24 19:33:06","endLine":236,"groupId":"25003","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/b9e5c2f1d0b625a8bd5a30c00cfc6df2ed1319.src","preCode":"    public void setUp() throws LibvirtException, ConfigurationException {\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(\"alubr0\", \"alubr0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, \"alubr0\");\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2019-04-24 19:33:06","commitOrder":2,"curCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","date":"2019-04-24 19:33:06","endLine":252,"groupId":"24351","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/29/fb67bca29bd9f3ecf27926040495911cd4f938.src","preCode":"    public void setUp() throws LibvirtException, ConfigurationException {\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtNetworkElementCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"8f7b27bbdc15051852968c7d5d843043a1169dab","commitMessage":"@@@Mock Scanner.  instead of scan the computer running the test. (#3173)\n\n* Mock Scanner.  instead of scan the computer running the test.\n\nThis allows non linux machines to run the tests without scanning for a\nnon existing /proc/meminfo.\n\n* test fixes on 'other' platforms libvirt wrapper unit tests (#3)","date":"2019-04-24 19:33:06","modifiedFileCount":"7","status":"M","submitter":"Gabriel Beims Br?scher"},{"authorTime":"2019-04-24 19:33:06","codes":[{"authorDate":"2019-05-14 16:58:24","commitOrder":3,"curCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(GUEST_BR, \"eth0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, GUEST_BR);\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","date":"2019-05-14 16:58:24","endLine":238,"groupId":"25003","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/47bfc94c05c1a0cf31f27a3d9eeb4d15d4855d.src","preCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(\"alubr0\", \"alubr0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, \"alubr0\");\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2019-04-24 19:33:06","commitOrder":3,"curCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","date":"2019-04-24 19:33:06","endLine":252,"groupId":"24351","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/29/fb67bca29bd9f3ecf27926040495911cd4f938.src","preCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtNetworkElementCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"}],"commitId":"e11f7ee1bad4f5a91b9cb82fdabb34231c04c102","commitMessage":"@@@RIP Nuage Cloudstack Plugin (#3146)\n\nmay it rest in peaces","date":"2019-05-14 16:58:24","modifiedFileCount":"16","status":"M","submitter":"Frank Maximus"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2019-05-14 16:58:24","commitOrder":4,"curCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(GUEST_BR, \"eth0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, GUEST_BR);\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","date":"2019-05-14 16:58:24","endLine":238,"groupId":"103270","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/47bfc94c05c1a0cf31f27a3d9eeb4d15d4855d.src","preCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource();\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0))\n                .thenReturn(fullfile)\n                .thenReturn(part_1 + part_3);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n        PowerMockito.mockStatic(Script.class);\n        BDDMockito.given(Script.findScript(anyString(), anyString())).willReturn(\"dummypath/tofile.sh\");\n\n        Map<String, String> pifs = new HashMap<>();\n        pifs.put(GUEST_BR, \"eth0\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"libvirt.computing.resource\", res);\n        params.put(\"libvirt.host.pifs\", pifs);\n\n        BridgeVifDriver bridgeVifDriver = spy(new BridgeVifDriver());\n        OvsVifDriver ovsVifDriver = spy(new OvsVifDriver());\n\n        doNothing().when(bridgeVifDriver).getPifs();\n        doNothing().when(ovsVifDriver).getPifs();\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n        doReturn(bridgeVifDriver).when(res).getVifDriver(eq(Networks.TrafficType.Guest), anyString());\n        doReturn(ovsVifDriver).when(res).getVifDriver(Networks.TrafficType.Guest, GUEST_BR);\n        doReturn(bridgeVifDriver).when(res).getVifDriver(not(eq(Networks.TrafficType.Guest)));\n        doReturn(Arrays.asList(bridgeVifDriver, ovsVifDriver)).when(res).getAllVifDrivers();\n\n        bridgeVifDriver.configure(params);\n        ovsVifDriver.configure(params);\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"},{"authorDate":"2020-02-12 15:28:25","commitOrder":4,"curCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(nullable(String.class))).thenReturn(_domain);\n        when(helper.getConnectionByVmName(nullable(String.class))).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","date":"2020-02-12 15:28:25","endLine":254,"groupId":"103270","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5a/734908731f435787119bab6e4ef25ca5bfc4ab.src","preCode":"    public void setUp() throws Exception {\n        Scanner scanner = new Scanner(memInfo);\n        PowerMockito.whenNew(Scanner.class).withAnyArguments().thenReturn(scanner);\n        \r\n        LibvirtComputingResource resReal = new LibvirtComputingResource() {\n            {\n                _linkLocalBridgeName = \"cloud0\";\n                _guestBridgeName = \"guestbr\";\n                _publicBridgeName = \"publicbr\";\n                _privBridgeName = \"mgmtbr\";\n            }\n        };\n\n        res = spy(resReal);\n\n        Connect conn = mock(Connect.class);\n        LibvirtUtilitiesHelper helper = mock(LibvirtUtilitiesHelper.class);\n\n        when(_domain.getXMLDesc(0)).thenReturn(fullfile);\n        when(conn.domainLookupByName(anyString())).thenReturn(_domain);\n        when(helper.getConnectionByVmName(anyString())).thenReturn(conn);\n\n        doReturn(helper).when(res).getLibvirtUtilitiesHelper();\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtNetworkElementCommandWrapperTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
