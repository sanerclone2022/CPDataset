[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testWithHosts() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        FenceAnswer answer = new FenceAnswer(null, true, \"ok\");\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenReturn(answer);\n\n        Assert.assertTrue(fencer.fenceOff(virtualMachine, host));\n    }\n","date":"2018-01-20 05:49:27","endLine":125,"groupId":"12428","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithHosts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/da/120af5edbfd673b42a521e7311d603bb3af89e.src","preCode":"    public void testWithHosts() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        FenceAnswer answer = new FenceAnswer(null, true, \"ok\");\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenReturn(answer);\n\n        Assert.assertTrue(fencer.fenceOff(virtualMachine, host));\n    }\n","realPath":"server/src/test/java/com/cloud/ha/KVMFencerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testWithFailingFence() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenThrow(new AgentUnavailableException(2l));\n\n        Assert.assertFalse(fencer.fenceOff(virtualMachine, host));\n    }\n","date":"2018-01-20 05:49:27","endLine":152,"groupId":"12428","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithFailingFence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/da/120af5edbfd673b42a521e7311d603bb3af89e.src","preCode":"    public void testWithFailingFence() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenThrow(new AgentUnavailableException(2l));\n\n        Assert.assertFalse(fencer.fenceOff(virtualMachine, host));\n    }\n","realPath":"server/src/test/java/com/cloud/ha/KVMFencerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testWithHosts() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.lenient().when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.lenient().when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.lenient().when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.lenient().when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.lenient().when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        FenceAnswer answer = new FenceAnswer(null, true, \"ok\");\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenReturn(answer);\n\n        Assert.assertTrue(fencer.fenceOff(virtualMachine, host));\n    }\n","date":"2020-02-12 15:28:25","endLine":125,"groupId":"101094","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testWithHosts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ff/bbcd3b58e304e59af28809f0bdc2c64fef5a02.src","preCode":"    public void testWithHosts() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        FenceAnswer answer = new FenceAnswer(null, true, \"ok\");\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenReturn(answer);\n\n        Assert.assertTrue(fencer.fenceOff(virtualMachine, host));\n    }\n","realPath":"server/src/test/java/com/cloud/ha/KVMFencerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testWithFailingFence() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.lenient().when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.lenient().when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.lenient().when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenThrow(new AgentUnavailableException(2l));\n\n        Assert.assertFalse(fencer.fenceOff(virtualMachine, host));\n    }\n","date":"2020-02-12 15:28:25","endLine":152,"groupId":"101094","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testWithFailingFence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ff/bbcd3b58e304e59af28809f0bdc2c64fef5a02.src","preCode":"    public void testWithFailingFence() throws AgentUnavailableException, OperationTimedoutException {\n        HostVO host = Mockito.mock(HostVO.class);\n        Mockito.when(host.getClusterId()).thenReturn(1l);\n        Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(host.getStatus()).thenReturn(Status.Up);\n        Mockito.when(host.getDataCenterId()).thenReturn(1l);\n        Mockito.when(host.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(1l);\n\n        HostVO secondHost = Mockito.mock(HostVO.class);\n        Mockito.when(secondHost.getClusterId()).thenReturn(1l);\n        Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);\n        Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);\n        Mockito.when(secondHost.getDataCenterId()).thenReturn(1l);\n        Mockito.when(secondHost.getPodId()).thenReturn(1l);\n        Mockito.when(host.getId()).thenReturn(2l);\n\n        VirtualMachine virtualMachine = Mockito.mock(VirtualMachine.class);\n\n        Mockito.when(resourceManager.listAllHostsInCluster(1l)).thenReturn(Arrays.asList(host, secondHost));\n\n        Mockito.when(agentManager.send(Matchers.anyLong(), Matchers.any(FenceCommand.class))).thenThrow(new AgentUnavailableException(2l));\n\n        Assert.assertFalse(fencer.fenceOff(virtualMachine, host));\n    }\n","realPath":"server/src/test/java/com/cloud/ha/KVMFencerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
