[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected boolean applyDhcpEntries (final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final Network.Service service) throws ResourceUnavailableException {\n\n        boolean result = true;\n        if (canHandle(network, service)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyDhcpEntry(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":1003,"groupId":"23707","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"applyDhcpEntries","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm@finalDeployDestinationdest@finalNetwork.Serviceservice)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    protected boolean applyDhcpEntries (final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final Network.Service service) throws ResourceUnavailableException {\n\n        boolean result = true;\n        if (canHandle(network, service)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyDhcpEntry(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":980,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n            final ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.UserData)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            if (network.getIp6Gateway() != null) {\n                s_logger.info(\"Skip password and userdata service setup for IPv6 VM\");\n                return true;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyUserData(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":1035,"groupId":"23707","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addPasswordAndUserdata","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    public boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n            final ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.UserData)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            if (network.getIp6Gateway() != null) {\n                s_logger.info(\"Skip password and userdata service setup for IPv6 VM\");\n                return true;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyUserData(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-12-25 02:12:57","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected boolean applyDhcpEntries (final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final Network.Service service) throws ResourceUnavailableException {\n\n        boolean result = true;\n        if (canHandle(network, service)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyDhcpEntry(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":1003,"groupId":"23707","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"applyDhcpEntries","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm@finalDeployDestinationdest@finalNetwork.Serviceservice)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    protected boolean applyDhcpEntries (final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final Network.Service service) throws ResourceUnavailableException {\n\n        boolean result = true;\n        if (canHandle(network, service)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyDhcpEntry(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":980,"status":"N"},{"authorDate":"2018-12-25 02:12:57","commitOrder":2,"curCode":"    public boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n            final ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.UserData)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyUserData(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2018-12-25 02:12:57","endLine":1041,"groupId":"23707","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addPasswordAndUserdata","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/86/2ccfe69e6313cb0258d129ce2672c710c97138.src","preCode":"    public boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n            final ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.UserData)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            if (network.getIp6Gateway() != null) {\n                s_logger.info(\"Skip password and userdata service setup for IPv6 VM\");\n                return true;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyUserData(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1017,"status":"M"}],"commitId":"2699586d92c79017b8de09b0ad888f103b7d72f0","commitMessage":"@@@network: Send userdata to Virtual Router if IPv6 is enabled (#3100)\n\nThere is no reason to not send userdata+password to the VR as all\nInstances in CloudStack are Dual-Stacked. They have IPv4 and IPv6\nso they can query their metadata over IPv4 at the VR.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2018-12-25 02:12:57","modifiedFileCount":"2","status":"M","submitter":"Wido den Hollander"},{"authorTime":"2020-07-01 11:14:11","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    protected boolean applyDhcpEntries (final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final Network.Service service) throws ResourceUnavailableException {\n\n        boolean result = true;\n        if (canHandle(network, service)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyDhcpEntry(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":1003,"groupId":"101659","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"applyDhcpEntries","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm@finalDeployDestinationdest@finalNetwork.Serviceservice)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    protected boolean applyDhcpEntries (final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final Network.Service service) throws ResourceUnavailableException {\n\n        boolean result = true;\n        if (canHandle(network, service)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyDhcpEntry(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":980,"status":"N"},{"authorDate":"2020-07-01 11:14:11","commitOrder":3,"curCode":"    public boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n            final ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.UserData)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n            List<java.lang.String[]> vmData = uservm.getVmData();\n            uservm.setVmData(vmData);\n\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyUserData(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2020-07-01 11:14:11","endLine":1120,"groupId":"101659","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addPasswordAndUserdata","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bb/c6aa77b7900edffb2e887655f06d38811df88d.src","preCode":"    public boolean addPasswordAndUserdata(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest,\n            final ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.UserData)) {\n            if (vm.getType() != VirtualMachine.Type.User) {\n                return false;\n            }\n\n            final VirtualMachineProfile uservm = vm;\n\n            final List<DomainRouterVO> routers = getRouters(network, dest);\n\n            if (routers == null || routers.size() == 0) {\n                throw new ResourceUnavailableException(\"Can't find at least one router!\", DataCenter.class, network.getDataCenterId());\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyUserData(network, nic, uservm, dest, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1094,"status":"M"}],"commitId":"a73712ec4ea0deae58d0b43edcbe9ca5e8f33fd4","commitMessage":"@@@server: Enable sending hypervior host name via metadata - VR and Config Drive (#3976)\n\nEnable sending hypervisor host details via metadata for VR and Config Drive providers\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2020-07-01 11:14:11","modifiedFileCount":"23","status":"M","submitter":"Pearl Dsilva"}]
