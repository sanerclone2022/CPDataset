[{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2020-06-26 19:31:43","commitOrder":1,"curCode":"    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n\n        AccountVO account = new AccountVO(\"admin\", 1L, \"\", Account.ACCOUNT_TYPE_ADMIN, \"uuid\");\n        UserVO user = new UserVO(1, \"adminuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n        CallContext.register(user, account);\n\n        UnmanagedInstanceTO instance = new UnmanagedInstanceTO();\n        instance.setName(\"TestInstance\");\n        instance.setCpuCores(2);\n        instance.setCpuCoresPerSocket(1);\n        instance.setCpuSpeed(1000);\n        instance.setMemory(1024);\n        instance.setOperatingSystem(\"CentOS 7\");\n        List<UnmanagedInstanceTO.Disk> instanceDisks = new ArrayList<>();\n        UnmanagedInstanceTO.Disk instanceDisk = new UnmanagedInstanceTO.Disk();\n        instanceDisk.setDiskId(\"1000-1\");\n        instanceDisk.setLabel(\"DiskLabel\");\n        instanceDisk.setController(\"scsi\");\n        instanceDisk.setImagePath(\"[b6ccf44a1fa13e29b3667b4954fa10ee] TestInstance/ROOT-1.vmdk\");\n        instanceDisk.setCapacity(5242880L);\n        instanceDisk.setDatastoreName(\"Test\");\n        instanceDisk.setDatastoreHost(\"Test\");\n        instanceDisk.setDatastorePath(\"Test\");\n        instanceDisk.setDatastoreType(\"NFS\");\n        instanceDisks.add(instanceDisk);\n        instance.setDisks(instanceDisks);\n        List<UnmanagedInstanceTO.Nic> instanceNics = new ArrayList<>();\n        UnmanagedInstanceTO.Nic instanceNic = new UnmanagedInstanceTO.Nic();\n        instanceNic.setNicId(\"NIC 1\");\n        instanceNic.setAdapterType(\"VirtualE1000E\");\n        instanceNic.setMacAddress(\"02:00:2e:0f:00:02\");\n        instanceNic.setVlan(1024);\n        instanceNics.add(instanceNic);\n        instance.setNics(instanceNics);\n        instance.setPowerState(UnmanagedInstanceTO.PowerState.PowerOn);\n\n        ClusterVO clusterVO = new ClusterVO(1L, 1L, \"Cluster\");\n        clusterVO.setHypervisorType(Hypervisor.HypervisorType.VMware.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(clusterVO);\n        when(configurationDao.getValue(Mockito.anyString())).thenReturn(null);\n        doNothing().when(resourceLimitService).checkResourceLimit(any(Account.class), any(Resource.ResourceType.class), anyLong());\n        List<HostVO> hosts = new ArrayList<>();\n        HostVO hostVO = Mockito.mock(HostVO.class);\n        when(hostVO.isInMaintenanceStates()).thenReturn(false);\n        hosts.add(hostVO);\n        when(resourceManager.listHostsInClusterByStatus(Mockito.anyLong(), Mockito.any(Status.class))).thenReturn(hosts);\n        List<VMTemplateStoragePoolVO> templates = new ArrayList<>();\n        when(templatePoolDao.listAll()).thenReturn(templates);\n        List<VolumeVO> volumes = new ArrayList<>();\n        when(volumeDao.findIncludingRemovedByZone(Mockito.anyLong())).thenReturn(volumes);\n        List<VMInstanceVO> vms = new ArrayList<>();\n        when(vmDao.listByHostId(Mockito.anyLong())).thenReturn(vms);\n        when(vmDao.listByLastHostIdAndStates(Mockito.anyLong())).thenReturn(vms);\n        GetUnmanagedInstancesCommand cmd = Mockito.mock(GetUnmanagedInstancesCommand.class);\n        HashMap<String, UnmanagedInstanceTO> map = new HashMap<>();\n        map.put(instance.getName(), instance);\n        Answer answer = new GetUnmanagedInstancesAnswer(cmd, \"\", map);\n        when(agentManager.easySend(Mockito.anyLong(), Mockito.any(GetUnmanagedInstancesCommand.class))).thenReturn(answer);\n        DataCenterVO zone = Mockito.mock(DataCenterVO.class);\n        when(zone.getId()).thenReturn(1L);\n        when(dataCenterDao.findById(Mockito.anyLong())).thenReturn(zone);\n        when(accountService.getActiveAccountById(Mockito.anyLong())).thenReturn(Mockito.mock(Account.class));\n        List<UserVO> users = new ArrayList<>();\n        users.add(Mockito.mock(UserVO.class));\n        when(userDao.listByAccount(Mockito.anyLong())).thenReturn(users);\n        VMTemplateVO template = Mockito.mock(VMTemplateVO.class);\n        when(template.getId()).thenReturn(1L);\n        when(template.getName()).thenReturn(\"Template\");\n        when(templateDao.findById(Mockito.anyLong())).thenReturn(template);\n        when(templateDao.findByName(Mockito.anyString())).thenReturn(template);\n        ServiceOfferingVO serviceOffering = Mockito.mock(ServiceOfferingVO.class);\n        when(serviceOffering.getId()).thenReturn(1L);\n        when(serviceOffering.getTags()).thenReturn(\"\");\n        when(serviceOffering.isDynamic()).thenReturn(false);\n        when(serviceOffering.getCpu()).thenReturn(instance.getCpuCores());\n        when(serviceOffering.getRamSize()).thenReturn(instance.getMemory());\n        when(serviceOffering.getSpeed()).thenReturn(instance.getCpuSpeed());\n        when(serviceOfferingDao.findById(Mockito.anyLong())).thenReturn(serviceOffering);\n        DiskOfferingVO diskOfferingVO = Mockito.mock(DiskOfferingVO.class);\n        when(diskOfferingVO.isCustomized()).thenReturn(false);\n        when(diskOfferingVO.getDiskSize()).thenReturn(Long.MAX_VALUE);\n        when(diskOfferingDao.findById(Mockito.anyLong())).thenReturn(diskOfferingVO);\n        UserVmVO userVm = Mockito.mock(UserVmVO.class);\n        when(userVm.getAccountId()).thenReturn(1L);\n        when(userVm.getDataCenterId()).thenReturn(1L);\n        when(userVm.getHostName()).thenReturn(instance.getName());\n        when(userVm.getTemplateId()).thenReturn(1L);\n        when(userVm.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.VMware);\n        when(userVm.getUuid()).thenReturn(\"abcd\");\n        when(userVm.isDisplayVm()).thenReturn(true);\n        \r\n        when(userVm.getType()).thenReturn(VirtualMachine.Type.Instance);\n        userVm.setInstanceName(instance.getName());\n        userVm.setHostName(instance.getName());\n        StoragePoolVO poolVO = Mockito.mock(StoragePoolVO.class);\n        when(poolVO.getDataCenterId()).thenReturn(1L);\n        when(poolVO.getClusterId()).thenReturn(clusterVO.getId());\n        List<StoragePoolVO> pools = new ArrayList<>();\n        pools.add(poolVO);\n        when(primaryDataStoreDao.listPoolByHostPath(Mockito.anyString(), Mockito.anyString())).thenReturn(pools);\n        when(userVmManager.importVM(nullable(DataCenter.class), nullable(Host.class), nullable(VirtualMachineTemplate.class), nullable(String.class), nullable(String.class),\n                nullable(Account.class), nullable(String.class), nullable(Account.class), nullable(Boolean.class), nullable(String.class),\n                nullable(Long.class), nullable(Long.class), nullable(ServiceOffering.class), nullable(String.class),\n                nullable(String.class), nullable(Hypervisor.HypervisorType.class), nullable(Map.class), nullable(VirtualMachine.PowerState.class))).thenReturn(userVm);\n        when(volumeApiService.doesTargetStorageSupportDiskOffering(Mockito.any(StoragePool.class), Mockito.anyString())).thenReturn(true);\n        NetworkVO networkVO = Mockito.mock(NetworkVO.class);\n        when(networkVO.getGuestType()).thenReturn(Network.GuestType.L2);\n        when(networkVO.getBroadcastUri()).thenReturn(URI.create(String.format(\"vlan://%d\", instanceNic.getVlan())));\n        when(networkVO.getDataCenterId()).thenReturn(1L);\n        when(networkDao.findById(Mockito.anyLong())).thenReturn(networkVO);\n        List<NetworkVO> networks = new ArrayList<>();\n        networks.add(networkVO);\n        when(networkDao.listByZone(Mockito.anyLong())).thenReturn(networks);\n        doNothing().when(networkModel).checkNetworkPermissions(Mockito.any(Account.class), Mockito.any(Network.class));\n        doNothing().when(networkModel).checkRequestedIpAddresses(Mockito.anyLong(), Mockito.any(Network.IpAddresses.class));\n        NicProfile profile = Mockito.mock(NicProfile.class);\n        Integer deviceId = 100;\n        Pair<NicProfile, Integer> pair = new Pair<NicProfile, Integer>(profile, deviceId);\n        when(networkOrchestrationService.importNic(nullable(String.class), nullable(Integer.class), nullable(Network.class), nullable(Boolean.class), nullable(VirtualMachine.class), nullable(Network.IpAddresses.class), anyBoolean())).thenReturn(pair);\n        when(volumeManager.importVolume(Mockito.any(Volume.Type.class), Mockito.anyString(), Mockito.any(DiskOffering.class), Mockito.anyLong(),\n                Mockito.anyLong(), Mockito.anyLong(), Mockito.any(VirtualMachine.class), Mockito.any(VirtualMachineTemplate.class),\n                Mockito.any(Account.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn(Mockito.mock(DiskProfile.class));\n        when(volumeDao.findByInstance(Mockito.anyLong())).thenReturn(volumes);\n        List<UserVmResponse> userVmResponses = new ArrayList<>();\n        UserVmResponse userVmResponse = new UserVmResponse();\n        userVmResponse.setInstanceName(instance.getName());\n        userVmResponses.add(userVmResponse);\n        when(responseGenerator.createUserVmResponse(Mockito.any(ResponseObject.ResponseView.class), Mockito.anyString(), Mockito.any(UserVm.class))).thenReturn(userVmResponses);\n\n        when(vmDao.findById(virtualMachineId)).thenReturn(virtualMachine);\n        when(virtualMachine.getState()).thenReturn(VirtualMachine.State.Running);\n        when(virtualMachine.getInstanceName()).thenReturn(\"i-2-7-VM\");\n        when(virtualMachine.getId()).thenReturn(virtualMachineId);\n        VolumeVO volumeVO = mock(VolumeVO.class);\n        when(volumeDao.findByInstance(virtualMachineId)).thenReturn(Collections.singletonList(volumeVO));\n        when(volumeVO.getInstanceId()).thenReturn(virtualMachineId);\n        when(volumeVO.getId()).thenReturn(virtualMachineId);\n        when(nicDao.listByVmId(virtualMachineId)).thenReturn(Collections.singletonList(nicVO));\n        when(nicVO.getNetworkId()).thenReturn(1L);\n        when(networkDao.findById(1L)).thenReturn(networkVO);\n    }\n","date":"2020-06-26 19:31:43","endLine":333,"groupId":"14778","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/32/b0e433534ed5a16fa803123fa6bbe737b130a5.src","preCode":"    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n\n        AccountVO account = new AccountVO(\"admin\", 1L, \"\", Account.ACCOUNT_TYPE_ADMIN, \"uuid\");\n        UserVO user = new UserVO(1, \"adminuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n        CallContext.register(user, account);\n\n        UnmanagedInstanceTO instance = new UnmanagedInstanceTO();\n        instance.setName(\"TestInstance\");\n        instance.setCpuCores(2);\n        instance.setCpuCoresPerSocket(1);\n        instance.setCpuSpeed(1000);\n        instance.setMemory(1024);\n        instance.setOperatingSystem(\"CentOS 7\");\n        List<UnmanagedInstanceTO.Disk> instanceDisks = new ArrayList<>();\n        UnmanagedInstanceTO.Disk instanceDisk = new UnmanagedInstanceTO.Disk();\n        instanceDisk.setDiskId(\"1000-1\");\n        instanceDisk.setLabel(\"DiskLabel\");\n        instanceDisk.setController(\"scsi\");\n        instanceDisk.setImagePath(\"[b6ccf44a1fa13e29b3667b4954fa10ee] TestInstance/ROOT-1.vmdk\");\n        instanceDisk.setCapacity(5242880L);\n        instanceDisk.setDatastoreName(\"Test\");\n        instanceDisk.setDatastoreHost(\"Test\");\n        instanceDisk.setDatastorePath(\"Test\");\n        instanceDisk.setDatastoreType(\"NFS\");\n        instanceDisks.add(instanceDisk);\n        instance.setDisks(instanceDisks);\n        List<UnmanagedInstanceTO.Nic> instanceNics = new ArrayList<>();\n        UnmanagedInstanceTO.Nic instanceNic = new UnmanagedInstanceTO.Nic();\n        instanceNic.setNicId(\"NIC 1\");\n        instanceNic.setAdapterType(\"VirtualE1000E\");\n        instanceNic.setMacAddress(\"02:00:2e:0f:00:02\");\n        instanceNic.setVlan(1024);\n        instanceNics.add(instanceNic);\n        instance.setNics(instanceNics);\n        instance.setPowerState(UnmanagedInstanceTO.PowerState.PowerOn);\n\n        ClusterVO clusterVO = new ClusterVO(1L, 1L, \"Cluster\");\n        clusterVO.setHypervisorType(Hypervisor.HypervisorType.VMware.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(clusterVO);\n        when(configurationDao.getValue(Mockito.anyString())).thenReturn(null);\n        doNothing().when(resourceLimitService).checkResourceLimit(any(Account.class), any(Resource.ResourceType.class), anyLong());\n        List<HostVO> hosts = new ArrayList<>();\n        HostVO hostVO = Mockito.mock(HostVO.class);\n        when(hostVO.isInMaintenanceStates()).thenReturn(false);\n        hosts.add(hostVO);\n        when(resourceManager.listHostsInClusterByStatus(Mockito.anyLong(), Mockito.any(Status.class))).thenReturn(hosts);\n        List<VMTemplateStoragePoolVO> templates = new ArrayList<>();\n        when(templatePoolDao.listAll()).thenReturn(templates);\n        List<VolumeVO> volumes = new ArrayList<>();\n        when(volumeDao.findIncludingRemovedByZone(Mockito.anyLong())).thenReturn(volumes);\n        List<VMInstanceVO> vms = new ArrayList<>();\n        when(vmDao.listByHostId(Mockito.anyLong())).thenReturn(vms);\n        when(vmDao.listByLastHostIdAndStates(Mockito.anyLong())).thenReturn(vms);\n        GetUnmanagedInstancesCommand cmd = Mockito.mock(GetUnmanagedInstancesCommand.class);\n        HashMap<String, UnmanagedInstanceTO> map = new HashMap<>();\n        map.put(instance.getName(), instance);\n        Answer answer = new GetUnmanagedInstancesAnswer(cmd, \"\", map);\n        when(agentManager.easySend(Mockito.anyLong(), Mockito.any(GetUnmanagedInstancesCommand.class))).thenReturn(answer);\n        DataCenterVO zone = Mockito.mock(DataCenterVO.class);\n        when(zone.getId()).thenReturn(1L);\n        when(dataCenterDao.findById(Mockito.anyLong())).thenReturn(zone);\n        when(accountService.getActiveAccountById(Mockito.anyLong())).thenReturn(Mockito.mock(Account.class));\n        List<UserVO> users = new ArrayList<>();\n        users.add(Mockito.mock(UserVO.class));\n        when(userDao.listByAccount(Mockito.anyLong())).thenReturn(users);\n        VMTemplateVO template = Mockito.mock(VMTemplateVO.class);\n        when(template.getId()).thenReturn(1L);\n        when(template.getName()).thenReturn(\"Template\");\n        when(templateDao.findById(Mockito.anyLong())).thenReturn(template);\n        when(templateDao.findByName(Mockito.anyString())).thenReturn(template);\n        ServiceOfferingVO serviceOffering = Mockito.mock(ServiceOfferingVO.class);\n        when(serviceOffering.getId()).thenReturn(1L);\n        when(serviceOffering.getTags()).thenReturn(\"\");\n        when(serviceOffering.isDynamic()).thenReturn(false);\n        when(serviceOffering.getCpu()).thenReturn(instance.getCpuCores());\n        when(serviceOffering.getRamSize()).thenReturn(instance.getMemory());\n        when(serviceOffering.getSpeed()).thenReturn(instance.getCpuSpeed());\n        when(serviceOfferingDao.findById(Mockito.anyLong())).thenReturn(serviceOffering);\n        DiskOfferingVO diskOfferingVO = Mockito.mock(DiskOfferingVO.class);\n        when(diskOfferingVO.isCustomized()).thenReturn(false);\n        when(diskOfferingVO.getDiskSize()).thenReturn(Long.MAX_VALUE);\n        when(diskOfferingDao.findById(Mockito.anyLong())).thenReturn(diskOfferingVO);\n        UserVmVO userVm = Mockito.mock(UserVmVO.class);\n        when(userVm.getAccountId()).thenReturn(1L);\n        when(userVm.getDataCenterId()).thenReturn(1L);\n        when(userVm.getHostName()).thenReturn(instance.getName());\n        when(userVm.getTemplateId()).thenReturn(1L);\n        when(userVm.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.VMware);\n        when(userVm.getUuid()).thenReturn(\"abcd\");\n        when(userVm.isDisplayVm()).thenReturn(true);\n        \r\n        when(userVm.getType()).thenReturn(VirtualMachine.Type.Instance);\n        userVm.setInstanceName(instance.getName());\n        userVm.setHostName(instance.getName());\n        StoragePoolVO poolVO = Mockito.mock(StoragePoolVO.class);\n        when(poolVO.getDataCenterId()).thenReturn(1L);\n        when(poolVO.getClusterId()).thenReturn(clusterVO.getId());\n        List<StoragePoolVO> pools = new ArrayList<>();\n        pools.add(poolVO);\n        when(primaryDataStoreDao.listPoolByHostPath(Mockito.anyString(), Mockito.anyString())).thenReturn(pools);\n        when(userVmManager.importVM(nullable(DataCenter.class), nullable(Host.class), nullable(VirtualMachineTemplate.class), nullable(String.class), nullable(String.class),\n                nullable(Account.class), nullable(String.class), nullable(Account.class), nullable(Boolean.class), nullable(String.class),\n                nullable(Long.class), nullable(Long.class), nullable(ServiceOffering.class), nullable(String.class),\n                nullable(String.class), nullable(Hypervisor.HypervisorType.class), nullable(Map.class), nullable(VirtualMachine.PowerState.class))).thenReturn(userVm);\n        when(volumeApiService.doesTargetStorageSupportDiskOffering(Mockito.any(StoragePool.class), Mockito.anyString())).thenReturn(true);\n        NetworkVO networkVO = Mockito.mock(NetworkVO.class);\n        when(networkVO.getGuestType()).thenReturn(Network.GuestType.L2);\n        when(networkVO.getBroadcastUri()).thenReturn(URI.create(String.format(\"vlan://%d\", instanceNic.getVlan())));\n        when(networkVO.getDataCenterId()).thenReturn(1L);\n        when(networkDao.findById(Mockito.anyLong())).thenReturn(networkVO);\n        List<NetworkVO> networks = new ArrayList<>();\n        networks.add(networkVO);\n        when(networkDao.listByZone(Mockito.anyLong())).thenReturn(networks);\n        doNothing().when(networkModel).checkNetworkPermissions(Mockito.any(Account.class), Mockito.any(Network.class));\n        doNothing().when(networkModel).checkRequestedIpAddresses(Mockito.anyLong(), Mockito.any(Network.IpAddresses.class));\n        NicProfile profile = Mockito.mock(NicProfile.class);\n        Integer deviceId = 100;\n        Pair<NicProfile, Integer> pair = new Pair<NicProfile, Integer>(profile, deviceId);\n        when(networkOrchestrationService.importNic(nullable(String.class), nullable(Integer.class), nullable(Network.class), nullable(Boolean.class), nullable(VirtualMachine.class), nullable(Network.IpAddresses.class), anyBoolean())).thenReturn(pair);\n        when(volumeManager.importVolume(Mockito.any(Volume.Type.class), Mockito.anyString(), Mockito.any(DiskOffering.class), Mockito.anyLong(),\n                Mockito.anyLong(), Mockito.anyLong(), Mockito.any(VirtualMachine.class), Mockito.any(VirtualMachineTemplate.class),\n                Mockito.any(Account.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn(Mockito.mock(DiskProfile.class));\n        when(volumeDao.findByInstance(Mockito.anyLong())).thenReturn(volumes);\n        List<UserVmResponse> userVmResponses = new ArrayList<>();\n        UserVmResponse userVmResponse = new UserVmResponse();\n        userVmResponse.setInstanceName(instance.getName());\n        userVmResponses.add(userVmResponse);\n        when(responseGenerator.createUserVmResponse(Mockito.any(ResponseObject.ResponseView.class), Mockito.anyString(), Mockito.any(UserVm.class))).thenReturn(userVmResponses);\n\n        when(vmDao.findById(virtualMachineId)).thenReturn(virtualMachine);\n        when(virtualMachine.getState()).thenReturn(VirtualMachine.State.Running);\n        when(virtualMachine.getInstanceName()).thenReturn(\"i-2-7-VM\");\n        when(virtualMachine.getId()).thenReturn(virtualMachineId);\n        VolumeVO volumeVO = mock(VolumeVO.class);\n        when(volumeDao.findByInstance(virtualMachineId)).thenReturn(Collections.singletonList(volumeVO));\n        when(volumeVO.getInstanceId()).thenReturn(virtualMachineId);\n        when(volumeVO.getId()).thenReturn(virtualMachineId);\n        when(nicDao.listByVmId(virtualMachineId)).thenReturn(Collections.singletonList(nicVO));\n        when(nicVO.getNetworkId()).thenReturn(1L);\n        when(networkDao.findById(1L)).thenReturn(networkVO);\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/vm/UnmanagedVMsManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"},{"authorDate":"2020-06-26 19:31:43","commitOrder":1,"curCode":"    public void listUnmanagedInstancesInvalidHypervisorTest() {\n        ListUnmanagedInstancesCmd cmd = Mockito.mock(ListUnmanagedInstancesCmd.class);\n        ClusterVO cluster = new ClusterVO(1, 1, \"Cluster\");\n        cluster.setHypervisorType(Hypervisor.HypervisorType.KVM.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(cluster);\n        unmanagedVMsManager.listUnmanagedInstances(cmd);\n    }\n","date":"2020-06-26 19:31:43","endLine":353,"groupId":"13866","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listUnmanagedInstancesInvalidHypervisorTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/32/b0e433534ed5a16fa803123fa6bbe737b130a5.src","preCode":"    public void listUnmanagedInstancesInvalidHypervisorTest() {\n        ListUnmanagedInstancesCmd cmd = Mockito.mock(ListUnmanagedInstancesCmd.class);\n        ClusterVO cluster = new ClusterVO(1, 1, \"Cluster\");\n        cluster.setHypervisorType(Hypervisor.HypervisorType.KVM.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(cluster);\n        unmanagedVMsManager.listUnmanagedInstances(cmd);\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/vm/UnmanagedVMsManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"B"}],"commitId":"8c1d749360657a4909c558c3df5dec57ca66c977","commitMessage":"@@@[VMware] Enable unmanaging guest VMs (#4103)\n\n* Enable unmanaging guest VMs\n\n* Minor fixes\n\n* Fix stop usage event only if VM is not stopped when unmanaging\n\n* Rename unmanaged VMs manager\n\n* Generate netofferingremove usage event if VM is not stopped\n\n* Generate usage event VM snapshot primary off when unmanaging","date":"2020-06-26 19:31:43","modifiedFileCount":"28","status":"B","submitter":"Nicolas Vazquez"},{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2021-08-16 23:08:40","commitOrder":2,"curCode":"    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n\n        AccountVO account = new AccountVO(\"admin\", 1L, \"\", Account.ACCOUNT_TYPE_ADMIN, \"uuid\");\n        UserVO user = new UserVO(1, \"adminuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n        CallContext.register(user, account);\n\n        UnmanagedInstanceTO instance = new UnmanagedInstanceTO();\n        instance.setName(\"TestInstance\");\n        instance.setCpuCores(2);\n        instance.setCpuCoresPerSocket(1);\n        instance.setCpuSpeed(1000);\n        instance.setMemory(1024);\n        instance.setOperatingSystem(\"CentOS 7\");\n        List<UnmanagedInstanceTO.Disk> instanceDisks = new ArrayList<>();\n        UnmanagedInstanceTO.Disk instanceDisk = new UnmanagedInstanceTO.Disk();\n        instanceDisk.setDiskId(\"1000-1\");\n        instanceDisk.setLabel(\"DiskLabel\");\n        instanceDisk.setController(\"scsi\");\n        instanceDisk.setImagePath(\"[b6ccf44a1fa13e29b3667b4954fa10ee] TestInstance/ROOT-1.vmdk\");\n        instanceDisk.setCapacity(5242880L);\n        instanceDisk.setDatastoreName(\"Test\");\n        instanceDisk.setDatastoreHost(\"Test\");\n        instanceDisk.setDatastorePath(\"Test\");\n        instanceDisk.setDatastoreType(\"NFS\");\n        instanceDisks.add(instanceDisk);\n        instance.setDisks(instanceDisks);\n        List<UnmanagedInstanceTO.Nic> instanceNics = new ArrayList<>();\n        UnmanagedInstanceTO.Nic instanceNic = new UnmanagedInstanceTO.Nic();\n        instanceNic.setNicId(\"NIC 1\");\n        instanceNic.setAdapterType(\"VirtualE1000E\");\n        instanceNic.setMacAddress(\"02:00:2e:0f:00:02\");\n        instanceNic.setVlan(1024);\n        instanceNics.add(instanceNic);\n        instance.setNics(instanceNics);\n        instance.setPowerState(UnmanagedInstanceTO.PowerState.PowerOn);\n\n        ClusterVO clusterVO = new ClusterVO(1L, 1L, \"Cluster\");\n        clusterVO.setHypervisorType(Hypervisor.HypervisorType.VMware.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(clusterVO);\n        when(configurationDao.getValue(Mockito.anyString())).thenReturn(null);\n        doNothing().when(resourceLimitService).checkResourceLimit(any(Account.class), any(Resource.ResourceType.class), anyLong());\n        List<HostVO> hosts = new ArrayList<>();\n        HostVO hostVO = Mockito.mock(HostVO.class);\n        when(hostVO.isInMaintenanceStates()).thenReturn(false);\n        hosts.add(hostVO);\n        when(hostVO.checkHostServiceOfferingTags(Mockito.any())).thenReturn(true);\n        when(resourceManager.listHostsInClusterByStatus(Mockito.anyLong(), Mockito.any(Status.class))).thenReturn(hosts);\n        List<VMTemplateStoragePoolVO> templates = new ArrayList<>();\n        when(templatePoolDao.listAll()).thenReturn(templates);\n        List<VolumeVO> volumes = new ArrayList<>();\n        when(volumeDao.findIncludingRemovedByZone(Mockito.anyLong())).thenReturn(volumes);\n        List<VMInstanceVO> vms = new ArrayList<>();\n        when(vmDao.listByHostId(Mockito.anyLong())).thenReturn(vms);\n        when(vmDao.listByLastHostIdAndStates(Mockito.anyLong())).thenReturn(vms);\n        GetUnmanagedInstancesCommand cmd = Mockito.mock(GetUnmanagedInstancesCommand.class);\n        HashMap<String, UnmanagedInstanceTO> map = new HashMap<>();\n        map.put(instance.getName(), instance);\n        Answer answer = new GetUnmanagedInstancesAnswer(cmd, \"\", map);\n        when(agentManager.easySend(Mockito.anyLong(), Mockito.any(GetUnmanagedInstancesCommand.class))).thenReturn(answer);\n        DataCenterVO zone = Mockito.mock(DataCenterVO.class);\n        when(zone.getId()).thenReturn(1L);\n        when(dataCenterDao.findById(Mockito.anyLong())).thenReturn(zone);\n        when(accountService.getActiveAccountById(Mockito.anyLong())).thenReturn(Mockito.mock(Account.class));\n        List<UserVO> users = new ArrayList<>();\n        users.add(Mockito.mock(UserVO.class));\n        when(userDao.listByAccount(Mockito.anyLong())).thenReturn(users);\n        VMTemplateVO template = Mockito.mock(VMTemplateVO.class);\n        when(template.getId()).thenReturn(1L);\n        when(template.getName()).thenReturn(\"Template\");\n        when(templateDao.findById(Mockito.anyLong())).thenReturn(template);\n        when(templateDao.findByName(Mockito.anyString())).thenReturn(template);\n        ServiceOfferingVO serviceOffering = Mockito.mock(ServiceOfferingVO.class);\n        when(serviceOffering.getId()).thenReturn(1L);\n        when(serviceOffering.getTags()).thenReturn(\"\");\n        when(serviceOffering.isDynamic()).thenReturn(false);\n        when(serviceOffering.getCpu()).thenReturn(instance.getCpuCores());\n        when(serviceOffering.getRamSize()).thenReturn(instance.getMemory());\n        when(serviceOffering.getSpeed()).thenReturn(instance.getCpuSpeed());\n        when(serviceOfferingDao.findById(Mockito.anyLong())).thenReturn(serviceOffering);\n        DiskOfferingVO diskOfferingVO = Mockito.mock(DiskOfferingVO.class);\n        when(diskOfferingVO.isCustomized()).thenReturn(false);\n        when(diskOfferingVO.getDiskSize()).thenReturn(Long.MAX_VALUE);\n        when(diskOfferingDao.findById(Mockito.anyLong())).thenReturn(diskOfferingVO);\n        UserVmVO userVm = Mockito.mock(UserVmVO.class);\n        when(userVm.getAccountId()).thenReturn(1L);\n        when(userVm.getDataCenterId()).thenReturn(1L);\n        when(userVm.getHostName()).thenReturn(instance.getName());\n        when(userVm.getTemplateId()).thenReturn(1L);\n        when(userVm.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.VMware);\n        when(userVm.getUuid()).thenReturn(\"abcd\");\n        when(userVm.isDisplayVm()).thenReturn(true);\n        \r\n        when(userVm.getType()).thenReturn(VirtualMachine.Type.Instance);\n        userVm.setInstanceName(instance.getName());\n        userVm.setHostName(instance.getName());\n        StoragePoolVO poolVO = Mockito.mock(StoragePoolVO.class);\n        when(poolVO.getDataCenterId()).thenReturn(1L);\n        when(poolVO.getClusterId()).thenReturn(clusterVO.getId());\n        List<StoragePoolVO> pools = new ArrayList<>();\n        pools.add(poolVO);\n        when(primaryDataStoreDao.listPoolByHostPath(Mockito.anyString(), Mockito.anyString())).thenReturn(pools);\n        when(userVmManager.importVM(nullable(DataCenter.class), nullable(Host.class), nullable(VirtualMachineTemplate.class), nullable(String.class), nullable(String.class),\n                nullable(Account.class), nullable(String.class), nullable(Account.class), nullable(Boolean.class), nullable(String.class),\n                nullable(Long.class), nullable(Long.class), nullable(ServiceOffering.class), nullable(String.class),\n                nullable(String.class), nullable(Hypervisor.HypervisorType.class), nullable(Map.class), nullable(VirtualMachine.PowerState.class))).thenReturn(userVm);\n        when(volumeApiService.doesTargetStorageSupportDiskOffering(Mockito.any(StoragePool.class), Mockito.anyString())).thenReturn(true);\n        NetworkVO networkVO = Mockito.mock(NetworkVO.class);\n        when(networkVO.getGuestType()).thenReturn(Network.GuestType.L2);\n        when(networkVO.getBroadcastUri()).thenReturn(URI.create(String.format(\"vlan://%d\", instanceNic.getVlan())));\n        when(networkVO.getDataCenterId()).thenReturn(1L);\n        when(networkDao.findById(Mockito.anyLong())).thenReturn(networkVO);\n        List<NetworkVO> networks = new ArrayList<>();\n        networks.add(networkVO);\n        when(networkDao.listByZone(Mockito.anyLong())).thenReturn(networks);\n        doNothing().when(networkModel).checkNetworkPermissions(Mockito.any(Account.class), Mockito.any(Network.class));\n        doNothing().when(networkModel).checkRequestedIpAddresses(Mockito.anyLong(), Mockito.any(Network.IpAddresses.class));\n        NicProfile profile = Mockito.mock(NicProfile.class);\n        Integer deviceId = 100;\n        Pair<NicProfile, Integer> pair = new Pair<NicProfile, Integer>(profile, deviceId);\n        when(networkOrchestrationService.importNic(nullable(String.class), nullable(Integer.class), nullable(Network.class), nullable(Boolean.class), nullable(VirtualMachine.class), nullable(Network.IpAddresses.class), anyBoolean())).thenReturn(pair);\n        when(volumeManager.importVolume(Mockito.any(Volume.Type.class), Mockito.anyString(), Mockito.any(DiskOffering.class), Mockito.anyLong(),\n                Mockito.anyLong(), Mockito.anyLong(), Mockito.any(VirtualMachine.class), Mockito.any(VirtualMachineTemplate.class),\n                Mockito.any(Account.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn(Mockito.mock(DiskProfile.class));\n        when(volumeDao.findByInstance(Mockito.anyLong())).thenReturn(volumes);\n        List<UserVmResponse> userVmResponses = new ArrayList<>();\n        UserVmResponse userVmResponse = new UserVmResponse();\n        userVmResponse.setInstanceName(instance.getName());\n        userVmResponses.add(userVmResponse);\n        when(responseGenerator.createUserVmResponse(Mockito.any(ResponseObject.ResponseView.class), Mockito.anyString(), Mockito.any(UserVm.class))).thenReturn(userVmResponses);\n\n        when(vmDao.findById(virtualMachineId)).thenReturn(virtualMachine);\n        when(virtualMachine.getState()).thenReturn(VirtualMachine.State.Running);\n        when(virtualMachine.getInstanceName()).thenReturn(\"i-2-7-VM\");\n        when(virtualMachine.getId()).thenReturn(virtualMachineId);\n        VolumeVO volumeVO = mock(VolumeVO.class);\n        when(volumeDao.findByInstance(virtualMachineId)).thenReturn(Collections.singletonList(volumeVO));\n        when(volumeVO.getInstanceId()).thenReturn(virtualMachineId);\n        when(volumeVO.getId()).thenReturn(virtualMachineId);\n        when(nicDao.listByVmId(virtualMachineId)).thenReturn(Collections.singletonList(nicVO));\n        when(nicVO.getNetworkId()).thenReturn(1L);\n        when(networkDao.findById(1L)).thenReturn(networkVO);\n    }\n","date":"2021-08-16 23:08:40","endLine":337,"groupId":"101221","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a8/c64f39d5fae6b08a7d4bf2411ba1ab6711d0d1.src","preCode":"    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n\n        AccountVO account = new AccountVO(\"admin\", 1L, \"\", Account.ACCOUNT_TYPE_ADMIN, \"uuid\");\n        UserVO user = new UserVO(1, \"adminuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n        CallContext.register(user, account);\n\n        UnmanagedInstanceTO instance = new UnmanagedInstanceTO();\n        instance.setName(\"TestInstance\");\n        instance.setCpuCores(2);\n        instance.setCpuCoresPerSocket(1);\n        instance.setCpuSpeed(1000);\n        instance.setMemory(1024);\n        instance.setOperatingSystem(\"CentOS 7\");\n        List<UnmanagedInstanceTO.Disk> instanceDisks = new ArrayList<>();\n        UnmanagedInstanceTO.Disk instanceDisk = new UnmanagedInstanceTO.Disk();\n        instanceDisk.setDiskId(\"1000-1\");\n        instanceDisk.setLabel(\"DiskLabel\");\n        instanceDisk.setController(\"scsi\");\n        instanceDisk.setImagePath(\"[b6ccf44a1fa13e29b3667b4954fa10ee] TestInstance/ROOT-1.vmdk\");\n        instanceDisk.setCapacity(5242880L);\n        instanceDisk.setDatastoreName(\"Test\");\n        instanceDisk.setDatastoreHost(\"Test\");\n        instanceDisk.setDatastorePath(\"Test\");\n        instanceDisk.setDatastoreType(\"NFS\");\n        instanceDisks.add(instanceDisk);\n        instance.setDisks(instanceDisks);\n        List<UnmanagedInstanceTO.Nic> instanceNics = new ArrayList<>();\n        UnmanagedInstanceTO.Nic instanceNic = new UnmanagedInstanceTO.Nic();\n        instanceNic.setNicId(\"NIC 1\");\n        instanceNic.setAdapterType(\"VirtualE1000E\");\n        instanceNic.setMacAddress(\"02:00:2e:0f:00:02\");\n        instanceNic.setVlan(1024);\n        instanceNics.add(instanceNic);\n        instance.setNics(instanceNics);\n        instance.setPowerState(UnmanagedInstanceTO.PowerState.PowerOn);\n\n        ClusterVO clusterVO = new ClusterVO(1L, 1L, \"Cluster\");\n        clusterVO.setHypervisorType(Hypervisor.HypervisorType.VMware.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(clusterVO);\n        when(configurationDao.getValue(Mockito.anyString())).thenReturn(null);\n        doNothing().when(resourceLimitService).checkResourceLimit(any(Account.class), any(Resource.ResourceType.class), anyLong());\n        List<HostVO> hosts = new ArrayList<>();\n        HostVO hostVO = Mockito.mock(HostVO.class);\n        when(hostVO.isInMaintenanceStates()).thenReturn(false);\n        hosts.add(hostVO);\n        when(resourceManager.listHostsInClusterByStatus(Mockito.anyLong(), Mockito.any(Status.class))).thenReturn(hosts);\n        List<VMTemplateStoragePoolVO> templates = new ArrayList<>();\n        when(templatePoolDao.listAll()).thenReturn(templates);\n        List<VolumeVO> volumes = new ArrayList<>();\n        when(volumeDao.findIncludingRemovedByZone(Mockito.anyLong())).thenReturn(volumes);\n        List<VMInstanceVO> vms = new ArrayList<>();\n        when(vmDao.listByHostId(Mockito.anyLong())).thenReturn(vms);\n        when(vmDao.listByLastHostIdAndStates(Mockito.anyLong())).thenReturn(vms);\n        GetUnmanagedInstancesCommand cmd = Mockito.mock(GetUnmanagedInstancesCommand.class);\n        HashMap<String, UnmanagedInstanceTO> map = new HashMap<>();\n        map.put(instance.getName(), instance);\n        Answer answer = new GetUnmanagedInstancesAnswer(cmd, \"\", map);\n        when(agentManager.easySend(Mockito.anyLong(), Mockito.any(GetUnmanagedInstancesCommand.class))).thenReturn(answer);\n        DataCenterVO zone = Mockito.mock(DataCenterVO.class);\n        when(zone.getId()).thenReturn(1L);\n        when(dataCenterDao.findById(Mockito.anyLong())).thenReturn(zone);\n        when(accountService.getActiveAccountById(Mockito.anyLong())).thenReturn(Mockito.mock(Account.class));\n        List<UserVO> users = new ArrayList<>();\n        users.add(Mockito.mock(UserVO.class));\n        when(userDao.listByAccount(Mockito.anyLong())).thenReturn(users);\n        VMTemplateVO template = Mockito.mock(VMTemplateVO.class);\n        when(template.getId()).thenReturn(1L);\n        when(template.getName()).thenReturn(\"Template\");\n        when(templateDao.findById(Mockito.anyLong())).thenReturn(template);\n        when(templateDao.findByName(Mockito.anyString())).thenReturn(template);\n        ServiceOfferingVO serviceOffering = Mockito.mock(ServiceOfferingVO.class);\n        when(serviceOffering.getId()).thenReturn(1L);\n        when(serviceOffering.getTags()).thenReturn(\"\");\n        when(serviceOffering.isDynamic()).thenReturn(false);\n        when(serviceOffering.getCpu()).thenReturn(instance.getCpuCores());\n        when(serviceOffering.getRamSize()).thenReturn(instance.getMemory());\n        when(serviceOffering.getSpeed()).thenReturn(instance.getCpuSpeed());\n        when(serviceOfferingDao.findById(Mockito.anyLong())).thenReturn(serviceOffering);\n        DiskOfferingVO diskOfferingVO = Mockito.mock(DiskOfferingVO.class);\n        when(diskOfferingVO.isCustomized()).thenReturn(false);\n        when(diskOfferingVO.getDiskSize()).thenReturn(Long.MAX_VALUE);\n        when(diskOfferingDao.findById(Mockito.anyLong())).thenReturn(diskOfferingVO);\n        UserVmVO userVm = Mockito.mock(UserVmVO.class);\n        when(userVm.getAccountId()).thenReturn(1L);\n        when(userVm.getDataCenterId()).thenReturn(1L);\n        when(userVm.getHostName()).thenReturn(instance.getName());\n        when(userVm.getTemplateId()).thenReturn(1L);\n        when(userVm.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.VMware);\n        when(userVm.getUuid()).thenReturn(\"abcd\");\n        when(userVm.isDisplayVm()).thenReturn(true);\n        \r\n        when(userVm.getType()).thenReturn(VirtualMachine.Type.Instance);\n        userVm.setInstanceName(instance.getName());\n        userVm.setHostName(instance.getName());\n        StoragePoolVO poolVO = Mockito.mock(StoragePoolVO.class);\n        when(poolVO.getDataCenterId()).thenReturn(1L);\n        when(poolVO.getClusterId()).thenReturn(clusterVO.getId());\n        List<StoragePoolVO> pools = new ArrayList<>();\n        pools.add(poolVO);\n        when(primaryDataStoreDao.listPoolByHostPath(Mockito.anyString(), Mockito.anyString())).thenReturn(pools);\n        when(userVmManager.importVM(nullable(DataCenter.class), nullable(Host.class), nullable(VirtualMachineTemplate.class), nullable(String.class), nullable(String.class),\n                nullable(Account.class), nullable(String.class), nullable(Account.class), nullable(Boolean.class), nullable(String.class),\n                nullable(Long.class), nullable(Long.class), nullable(ServiceOffering.class), nullable(String.class),\n                nullable(String.class), nullable(Hypervisor.HypervisorType.class), nullable(Map.class), nullable(VirtualMachine.PowerState.class))).thenReturn(userVm);\n        when(volumeApiService.doesTargetStorageSupportDiskOffering(Mockito.any(StoragePool.class), Mockito.anyString())).thenReturn(true);\n        NetworkVO networkVO = Mockito.mock(NetworkVO.class);\n        when(networkVO.getGuestType()).thenReturn(Network.GuestType.L2);\n        when(networkVO.getBroadcastUri()).thenReturn(URI.create(String.format(\"vlan://%d\", instanceNic.getVlan())));\n        when(networkVO.getDataCenterId()).thenReturn(1L);\n        when(networkDao.findById(Mockito.anyLong())).thenReturn(networkVO);\n        List<NetworkVO> networks = new ArrayList<>();\n        networks.add(networkVO);\n        when(networkDao.listByZone(Mockito.anyLong())).thenReturn(networks);\n        doNothing().when(networkModel).checkNetworkPermissions(Mockito.any(Account.class), Mockito.any(Network.class));\n        doNothing().when(networkModel).checkRequestedIpAddresses(Mockito.anyLong(), Mockito.any(Network.IpAddresses.class));\n        NicProfile profile = Mockito.mock(NicProfile.class);\n        Integer deviceId = 100;\n        Pair<NicProfile, Integer> pair = new Pair<NicProfile, Integer>(profile, deviceId);\n        when(networkOrchestrationService.importNic(nullable(String.class), nullable(Integer.class), nullable(Network.class), nullable(Boolean.class), nullable(VirtualMachine.class), nullable(Network.IpAddresses.class), anyBoolean())).thenReturn(pair);\n        when(volumeManager.importVolume(Mockito.any(Volume.Type.class), Mockito.anyString(), Mockito.any(DiskOffering.class), Mockito.anyLong(),\n                Mockito.anyLong(), Mockito.anyLong(), Mockito.any(VirtualMachine.class), Mockito.any(VirtualMachineTemplate.class),\n                Mockito.any(Account.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn(Mockito.mock(DiskProfile.class));\n        when(volumeDao.findByInstance(Mockito.anyLong())).thenReturn(volumes);\n        List<UserVmResponse> userVmResponses = new ArrayList<>();\n        UserVmResponse userVmResponse = new UserVmResponse();\n        userVmResponse.setInstanceName(instance.getName());\n        userVmResponses.add(userVmResponse);\n        when(responseGenerator.createUserVmResponse(Mockito.any(ResponseObject.ResponseView.class), Mockito.anyString(), Mockito.any(UserVm.class))).thenReturn(userVmResponses);\n\n        when(vmDao.findById(virtualMachineId)).thenReturn(virtualMachine);\n        when(virtualMachine.getState()).thenReturn(VirtualMachine.State.Running);\n        when(virtualMachine.getInstanceName()).thenReturn(\"i-2-7-VM\");\n        when(virtualMachine.getId()).thenReturn(virtualMachineId);\n        VolumeVO volumeVO = mock(VolumeVO.class);\n        when(volumeDao.findByInstance(virtualMachineId)).thenReturn(Collections.singletonList(volumeVO));\n        when(volumeVO.getInstanceId()).thenReturn(virtualMachineId);\n        when(volumeVO.getId()).thenReturn(virtualMachineId);\n        when(nicDao.listByVmId(virtualMachineId)).thenReturn(Collections.singletonList(nicVO));\n        when(nicVO.getNetworkId()).thenReturn(1L);\n        when(networkDao.findById(1L)).thenReturn(networkVO);\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/vm/UnmanagedVMsManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2020-06-26 19:31:43","commitOrder":2,"curCode":"    public void listUnmanagedInstancesInvalidHypervisorTest() {\n        ListUnmanagedInstancesCmd cmd = Mockito.mock(ListUnmanagedInstancesCmd.class);\n        ClusterVO cluster = new ClusterVO(1, 1, \"Cluster\");\n        cluster.setHypervisorType(Hypervisor.HypervisorType.KVM.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(cluster);\n        unmanagedVMsManager.listUnmanagedInstances(cmd);\n    }\n","date":"2020-06-26 19:31:43","endLine":353,"groupId":"101221","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listUnmanagedInstancesInvalidHypervisorTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/32/b0e433534ed5a16fa803123fa6bbe737b130a5.src","preCode":"    public void listUnmanagedInstancesInvalidHypervisorTest() {\n        ListUnmanagedInstancesCmd cmd = Mockito.mock(ListUnmanagedInstancesCmd.class);\n        ClusterVO cluster = new ClusterVO(1, 1, \"Cluster\");\n        cluster.setHypervisorType(Hypervisor.HypervisorType.KVM.toString());\n        when(clusterDao.findById(Mockito.anyLong())).thenReturn(cluster);\n        unmanagedVMsManager.listUnmanagedInstances(cmd);\n    }\n","realPath":"server/src/test/java/org/apache/cloudstack/vm/UnmanagedVMsManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"}],"commitId":"664a46a525847feeef2500c292c8f9e2a47337de","commitMessage":"@@@PR multi tags in compute offering [#4398] (#4399)\n\n* [#4398] adapt code to handle multi tag string with commas\n\n* [#4398] remove trailing spaces\n\n* [#4398] add multi host tag support for ingest process\n\n* [#4398] add test for multi tag support in offerings\n\n* [#4398]  update multitag support for DeploymentPlanningManagerImpl\n\nencapsulate multi tag check from Ingest Feature.  DepolymentPlanningManager into\nHostDaoImpl to prevent code duplicates\n\n* [#4398] move logic to HostVO and add tests\n\n* rename test method\n\n* [#4398] Change string method to apaches StringUtils\n\n* [#4398] modify test for multi tag support\n\n* adapt sql for double tags\n\nCo-authored-by: Dirk Klahre <Dirk.Klahre@Itelligence.de>","date":"2021-08-16 23:08:40","modifiedFileCount":"5","status":"M","submitter":"DK101010"}]
