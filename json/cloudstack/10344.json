[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = (isAscending == null ? true : isAscending);\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", isAscending, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.getUseLocalStorage());\n\n            \r\n            if(vmInstance.getState() == VirtualMachine.State.Running){\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId()))\n                || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL)\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if ( domainRecord == null ){\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if ( domainRecord == null ){\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null ){\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n             }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":2838,"groupId":"12288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9c/728ef0f78a89a60fa81fa6bfab723232623813.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = (isAscending == null ? true : isAscending);\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", isAscending, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.getUseLocalStorage());\n\n            \r\n            if(vmInstance.getState() == VirtualMachine.State.Running){\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId()))\n                || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL)\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if ( domainRecord == null ){\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if ( domainRecord == null ){\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null ){\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n             }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2691,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-05-22 19:33:24","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2018-05-22 19:33:24","commitOrder":2,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = (isAscending == null ? true : isAscending);\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", isAscending, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.getUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2018-05-22 19:33:24","endLine":2783,"groupId":"12288","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/24417e732d695cf45b2e99871ba73e87e4995d.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = (isAscending == null ? true : isAscending);\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", isAscending, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.getUseLocalStorage());\n\n            \r\n            if(vmInstance.getState() == VirtualMachine.State.Running){\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId()))\n                || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL)\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if ( domainRecord == null ){\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if ( domainRecord == null ){\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null ){\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n             }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2636,"status":"M"}],"commitId":"ada1e730c82da2ffd9c565a43c1617aff920ad89","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-05-22 19:33:24","modifiedFileCount":"3","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-09-22 23:20:48","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2018-09-22 23:20:48","commitOrder":3,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = (isAscending == null ? true : isAscending);\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", isAscending, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2018-09-22 23:20:48","endLine":2783,"groupId":"12288","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/93/51470049291fc3bfaa7db5d6e32b92f9292473.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = (isAscending == null ? true : isAscending);\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", isAscending, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.getUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2636,"status":"M"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2019-06-19 20:33:56","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2019-06-19 20:33:56","commitOrder":4,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2019-06-19 20:33:56","endLine":2774,"groupId":"12288","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/003185da26c67e2f84c7b5a878ea1599bf1940.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Boolean isAscending = Boolean.parseBoolean(_configDao.getValue(\"sortkey.algorithm\"));\n        isAscending = (isAscending == null ? true : isAscending);\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", isAscending, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2629,"status":"M"}],"commitId":"90cd8aa73d1efec3db39fea6d25ca969c3e3152a","commitMessage":"@@@server: add support for sorting zones in UI/API (#3242)\n\nProblem: Not able to configure a sort order for the zones that are listed in various views in the UI.\n\nRoot Cause: There is no mechanism to accept sort key for existing zones or UI widget.  that would allow to listing zones in the UI in a certain order.\n\nSolution: The order of zones in listed in various views in the UI can now be configured through the newly added ?sort_key? field added for the zone. It can be set using updateZone API by providing ?sort_key? parameter for a zone.  or by reordering the items in the zones list in the UI. UI has been updated to show ordering controls in zones list view. Database changes include updating table ?data_center? by adding ?sort_key? column (containing integer values and defaults to zero).\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-06-19 20:33:56","modifiedFileCount":"9","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-07-16 17:25:35","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2019-07-16 17:25:35","commitOrder":5,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, filteredOfferings.size());\n    }\n","date":"2019-07-16 17:25:35","endLine":2859,"groupId":"24830","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/92/a110b83a9d994f589340a0b97def818fa3c801.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n                DomainVO domainRecord = _domainDao.findById(caller.getDomainId());\n                sc.addAnd(\"domainPath\", SearchCriteria.Op.LIKE, domainRecord.getPath() + \"%\");\n            } else { \r\n                \r\n                List<Long> domainIds = new ArrayList<Long>();\n                DomainVO domainRecord;\n                if (vmId != null) {\n                    UserVmVO vmInstance = _userVmDao.findById(vmId);\n                    domainRecord = _domainDao.findById(vmInstance.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for vmId:\" + vmId);\n                        throw new CloudAuthenticationException(\"Could not find the domainId for vmId:\" + vmId);\n                    }\n                } else {\n                    domainRecord = _domainDao.findById(caller.getDomainId());\n                    if (domainRecord == null) {\n                        s_logger.error(\"Could not find the domainId for account:\" + caller.getAccountName());\n                        throw new CloudAuthenticationException(\"Could not find the domainId for account:\" + caller.getAccountName());\n                    }\n                }\n                domainIds.add(domainRecord.getId());\n                while (domainRecord.getParent() != null) {\n                    domainRecord = _domainDao.findById(domainRecord.getParent());\n                    domainIds.add(domainRecord.getId());\n                }\n\n                SearchCriteria<ServiceOfferingJoinVO> spc = _srvOfferingJoinDao.createSearchCriteria();\n                spc.addOr(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n                spc.addOr(\"domainId\", SearchCriteria.Op.NULL); \r\n                sc.addAnd(\"domainId\", SearchCriteria.Op.SC, spc);\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2677,"status":"M"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"},{"authorTime":"2020-02-26 23:18:41","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":6,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2020-02-26 23:18:41","commitOrder":6,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2020-02-26 23:18:41","endLine":2952,"groupId":"24830","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3d/a75bf9262e3a18f6551f7cd585db6755349c9d.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, filteredOfferings.size());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2770,"status":"M"}],"commitId":"a62a10c81439fc0af18ddd604c29b2314ff725cc","commitMessage":"@@@Merge branch '4.13'\n","date":"2020-02-26 23:18:41","modifiedFileCount":"23","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":7,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2020-10-26 21:24:14","commitOrder":7,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2020-10-26 21:24:14","endLine":3083,"groupId":"3460","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e8/161bc4c652567bab2d567b664638c0381c2712.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2895,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2021-02-01 17:58:52","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":8,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2021-02-01 17:58:52","commitOrder":8,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2021-02-01 17:58:52","endLine":3094,"groupId":"3460","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cf/01b8db3409432d4ae07f200b4302419c32ab28.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2904,"status":"M"}],"commitId":"ff376d8187ec2687fef06c611740e8d4befba6e7","commitMessage":"@@@Merge release branch 4.15 to master\n\n* 4.15:\n  server: select root disk based on user input during vm import (#4591)\n  kvm: Use Q35 chipset for UEFI x86_64 (#4576)\n  server: fix wrong error message when create isolated network without SourceNat (#4624)\n  server: add possibility to scale vm to current customer offerings (#4622)\n  server: keep networks order and ips while move a vm with multiple networks (#4602)\n  server: throw exception when update vm nic on L2 network (#4625)\n  doc: fix typo in install notes (#4633)\n","date":"2021-02-01 17:58:52","modifiedFileCount":"7","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2021-05-04 22:07:45","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":9,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2021-05-04 22:07:45","commitOrder":9,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2021-05-04 22:07:45","endLine":3103,"groupId":"3460","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f2/04ead3055a8fd5c551b8748064477b6c74a11d.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, currentVmOffering.isUseLocalStorage());\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2911,"status":"M"}],"commitId":"1abd10199cee4ba2358a9aed46ed76fe97550216","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-05-04 22:07:45","modifiedFileCount":"8","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-06-08 19:40:00","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":10,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2021-06-08 19:40:00","commitOrder":10,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n                sc.addAnd(\"dynamicScalingEnabled\", Op.EQ, currentVmOffering.isDynamicScalingEnabled());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2021-06-08 19:40:00","endLine":3104,"groupId":"8258","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e3/88a7539ec808cb718f5feee41dd9158a90eab7.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2911,"status":"M"}],"commitId":"083646b3c3f05f4100c5de0c28b231109ebc98c3","commitMessage":"@@@server: VM dynamic scaling option granularity (#4643)\n\nThis PR introduces new granularity levels to configure VM dynamic scalability. Previously VM is configured to be dynamically scalable based on the template and global setting. Now we bringing this option to configure at service offering and VM level also.\n\nVM can dynamically scale only when all flags are ON at VM level.  template.  service offering and global setting. If any of the flags is set to false then VM cannot be scalable. This result will be persisted in DB for each VM and will be honoured for that VM till it is updated.\n\nWe are introducing 'dynamicscalingallowed' parameter with permitted values of true or false for deployVM API and createServiceOffering API.\n\nFollowing are the API parameter changes:\ncreateServiceOffering API: \n          dynamicscalingenabled: an optional parameter of type Boolean with default value ?true?.\ndeployVirtualMachine API: \n          dynamicscalingenabled: an optional parameter of type Boolean with default value ?true?.\n\nFollowing are the UI changes:\nService offering creation has ON/OFF switch for dynamic scaling enabled with default value true","date":"2021-06-08 19:40:00","modifiedFileCount":"26","status":"M","submitter":"Harikrishna"},{"authorTime":"2021-08-18 19:22:25","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":11,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2021-08-18 19:22:25","commitOrder":11,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        searchFilter.addOrderBy(ServiceOfferingJoinVO.class, \"id\", true);\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n                sc.addAnd(\"dynamicScalingEnabled\", Op.EQ, currentVmOffering.isDynamicScalingEnabled());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","date":"2021-08-18 19:22:25","endLine":3147,"groupId":"8258","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6e/fe2e8a4171d49f068666b2d2a1f245b984e7a7.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n                sc.addAnd(\"dynamicScalingEnabled\", Op.EQ, currentVmOffering.isDynamicScalingEnabled());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2953,"status":"M"}],"commitId":"7bfc7f04fed4d32d135d4bac24cfd3de0c4271a9","commitMessage":"@@@server: use id column as secondary sort criteria with sortKey (#5320)\n\nFor tables that use sort_key field.  incorrect results can be returned by the list* APIs while using pagination and with the same values for sort-key field. (Default value for sort_key field remains 0).\nThis change adds id column as secondary sort criteria in such cases.\n\nFixes #5316\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-08-18 19:22:25","modifiedFileCount":"4","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2021-09-03 11:06:08","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":12,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"18305","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2021-09-03 11:06:08","commitOrder":12,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        searchFilter.addOrderBy(ServiceOfferingJoinVO.class, \"id\", true);\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n                sc.addAnd(\"dynamicScalingEnabled\", Op.EQ, currentVmOffering.isDynamicScalingEnabled());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            Domain callerDomain = _domainDao.findById(caller.getDomainId());\n            List<Long> domainIds = findRelatedDomainIds(callerDomain, isRecursive);\n\n            List<Long> ids = _srvOfferingDetailsDao.findOfferingIdsByDomainIds(domainIds);\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            if (ids != null && !ids.isEmpty()) {\n                sb.and(\"id\", sb.entity().getId(), Op.IN);\n            }\n            sb.or(\"domainId\", sb.entity().getDomainId(), Op.NULL);\n            sb.done();\n\n            SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n            if (ids != null && !ids.isEmpty()) {\n                scc.setParameters(\"id\", ids.toArray());\n            }\n            sc.addAnd(\"domainId\", SearchCriteria.Op.SC, scc);\n        }\n\n        if (currentVmOffering != null) {\n            List<String> storageTags = StringUtils.csvTagsToList(currentVmOffering.getTags());\n            if (!storageTags.isEmpty()) {\n                SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n                for(String tag : storageTags) {\n                    sb.and(tag, sb.entity().getTags(), Op.FIND_IN_SET);\n                }\n                sb.done();\n\n                SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n                for(String tag : storageTags) {\n                    scc.setParameters(tag, tag);\n                }\n                sc.addAnd(\"storageTags\", SearchCriteria.Op.SC, scc);\n            }\n\n            List<String> hostTags = StringUtils.csvTagsToList(currentVmOffering.getHostTag());\n            if (!hostTags.isEmpty()) {\n                SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n                for(String tag : hostTags) {\n                    sb.and(tag, sb.entity().getHostTag(), Op.FIND_IN_SET);\n                }\n                sb.done();\n\n                SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n                for(String tag : hostTags) {\n                    scc.setParameters(tag, tag);\n                }\n                sc.addAnd(\"hostTags\", SearchCriteria.Op.SC, scc);\n            }\n        }\n\n        return _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n    }\n","date":"2021-09-03 11:06:08","endLine":3136,"groupId":"8258","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/20/41e9207f6cf32950eec5fda171b77e1f3c9674.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        searchFilter.addOrderBy(ServiceOfferingJoinVO.class, \"id\", true);\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n                sc.addAnd(\"dynamicScalingEnabled\", Op.EQ, currentVmOffering.isDynamicScalingEnabled());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        Pair<List<ServiceOfferingJoinVO>, Integer> result = _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n\n        \r\n        List<ServiceOfferingJoinVO> filteredOfferings = filterOfferingsOnCurrentTags(result.first(), currentVmOffering);\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && CollectionUtils.isNotEmpty(filteredOfferings)) {\n            ListIterator<ServiceOfferingJoinVO> it = filteredOfferings.listIterator();\n            while (it.hasNext()) {\n                ServiceOfferingJoinVO offering = it.next();\n                if(!Strings.isNullOrEmpty(offering.getDomainId())) {\n                    boolean toRemove = true;\n                    String[] domainIdsArray = offering.getDomainId().split(\",\");\n                    for (String domainIdString : domainIdsArray) {\n                        Long dId = Long.valueOf(domainIdString.trim());\n                        if (isRecursive) {\n                            if (_domainDao.isChildDomain(caller.getDomainId(), dId)) {\n                                toRemove = false;\n                                break;\n                            }\n                        } else {\n                            if (_domainDao.isChildDomain(dId, caller.getDomainId())) {\n                                toRemove = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        it.remove();\n                    }\n                }\n            }\n        }\n        return new Pair<>(filteredOfferings, result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2921,"status":"M"}],"commitId":"13d84894783bd64022a23cd861d4a331f70709a0","commitMessage":"@@@Merge branch '4.15' into main\n","date":"2021-09-03 11:06:08","modifiedFileCount":"8","status":"M","submitter":"nicolas"},{"authorTime":"2021-09-17 04:18:24","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":13,"curCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"10344","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"listVpcNetworks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/444b0d008a9601a3ca478d70e2d344512e8762.src","preCode":"    public List<NetworkVO> listVpcNetworks() {\n        final SearchBuilder<NetworkVO> sb = createSearchBuilder();\n        sb.and(\"vpcId\", sb.entity().getVpcId(), Op.NNULL);\n        sb.done();\n\n        final SearchCriteria<NetworkVO> sc = sb.create();\n\n        return listBy(sc);\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2021-09-17 04:18:24","commitOrder":13,"curCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        searchFilter.addOrderBy(ServiceOfferingJoinVO.class, \"id\", true);\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                Integer vmCpu = currentVmOffering.getCpu();\n                Integer vmMemory = currentVmOffering.getRamSize();\n                Integer vmSpeed = currentVmOffering.getSpeed();\n                if ((vmCpu == null || vmMemory == null || vmSpeed == null) && VirtualMachine.Type.User.equals(vmInstance.getType())) {\n                    UserVmVO userVmVO = _userVmDao.findById(vmId);\n                    _userVmDao.loadDetails(userVmVO);\n                    Map<String, String> details = userVmVO.getDetails();\n                    vmCpu = NumbersUtil.parseInt(details.get(ApiConstants.CPU_NUMBER), 0);\n                    if (vmSpeed == null) {\n                        vmSpeed = NumbersUtil.parseInt(details.get(ApiConstants.CPU_SPEED), 0);\n                    }\n                    vmMemory = NumbersUtil.parseInt(details.get(ApiConstants.MEMORY), 0);\n                }\n                if (vmCpu != null && vmCpu > 0) {\n                    sc.addAnd(\"cpu\", Op.SC, getMinimumCpuServiceOfferingJoinSearchCriteria(vmCpu));\n                }\n                if (vmSpeed != null && vmSpeed > 0) {\n                    sc.addAnd(\"speed\", Op.SC, getMinimumCpuSpeedServiceOfferingJoinSearchCriteria(vmSpeed));\n                }\n                if (vmMemory != null && vmMemory > 0) {\n                    sc.addAnd(\"ramSize\", Op.SC, getMinimumMemoryServiceOfferingJoinSearchCriteria(vmMemory));\n                }\n                sc.addAnd(\"dynamicScalingEnabled\", Op.EQ, currentVmOffering.isDynamicScalingEnabled());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            Domain callerDomain = _domainDao.findById(caller.getDomainId());\n            List<Long> domainIds = findRelatedDomainIds(callerDomain, isRecursive);\n\n            List<Long> ids = _srvOfferingDetailsDao.findOfferingIdsByDomainIds(domainIds);\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            if (ids != null && !ids.isEmpty()) {\n                sb.and(\"id\", sb.entity().getId(), Op.IN);\n            }\n            sb.or(\"domainId\", sb.entity().getDomainId(), Op.NULL);\n            sb.done();\n\n            SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n            if (ids != null && !ids.isEmpty()) {\n                scc.setParameters(\"id\", ids.toArray());\n            }\n            sc.addAnd(\"domainId\", SearchCriteria.Op.SC, scc);\n        }\n\n        if (currentVmOffering != null) {\n            List<String> storageTags = StringUtils.csvTagsToList(currentVmOffering.getTags());\n            if (!storageTags.isEmpty()) {\n                SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n                for(String tag : storageTags) {\n                    sb.and(tag, sb.entity().getTags(), Op.FIND_IN_SET);\n                }\n                sb.done();\n\n                SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n                for(String tag : storageTags) {\n                    scc.setParameters(tag, tag);\n                }\n                sc.addAnd(\"storageTags\", SearchCriteria.Op.SC, scc);\n            }\n\n            List<String> hostTags = StringUtils.csvTagsToList(currentVmOffering.getHostTag());\n            if (!hostTags.isEmpty()) {\n                SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n                for(String tag : hostTags) {\n                    sb.and(tag, sb.entity().getHostTag(), Op.FIND_IN_SET);\n                }\n                sb.done();\n\n                SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n                for(String tag : hostTags) {\n                    scc.setParameters(tag, tag);\n                }\n                sc.addAnd(\"hostTags\", SearchCriteria.Op.SC, scc);\n            }\n        }\n\n        return _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n    }\n","date":"2021-09-17 04:18:24","endLine":3205,"groupId":"10344","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"searchForServiceOfferingsInternal","params":"(ListServiceOfferingsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7c/5a4864b3ef0696733016123908bd0d58923ac9.src","preCode":"    private Pair<List<ServiceOfferingJoinVO>, Integer> searchForServiceOfferingsInternal(ListServiceOfferingsCmd cmd) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Filter searchFilter = new Filter(ServiceOfferingJoinVO.class, \"sortKey\", SortKeyAscending.value(), cmd.getStartIndex(), cmd.getPageSizeVal());\n        searchFilter.addOrderBy(ServiceOfferingJoinVO.class, \"id\", true);\n\n        Account caller = CallContext.current().getCallingAccount();\n        Object name = cmd.getServiceOfferingName();\n        Object id = cmd.getId();\n        Object keyword = cmd.getKeyword();\n        Long vmId = cmd.getVirtualMachineId();\n        Long domainId = cmd.getDomainId();\n        Boolean isSystem = cmd.getIsSystem();\n        String vmTypeStr = cmd.getSystemVmType();\n        ServiceOfferingVO currentVmOffering = null;\n        Boolean isRecursive = cmd.isRecursive();\n        Long zoneId = cmd.getZoneId();\n        Integer cpuNumber = cmd.getCpuNumber();\n        Integer memory = cmd.getMemory();\n        Integer cpuSpeed = cmd.getCpuSpeed();\n\n        SearchCriteria<ServiceOfferingJoinVO> sc = _srvOfferingJoinDao.createSearchCriteria();\n        if (!_accountMgr.isRootAdmin(caller.getId()) && isSystem) {\n            throw new InvalidParameterValueException(\"Only ROOT admins can access system's offering\");\n        }\n\n        \r\n        \r\n        \r\n        if (domainId != null && !_accountMgr.isRootAdmin(caller.getId())) {\n            \r\n            \r\n            if (!isPermissible(caller.getDomainId(), domainId)) {\n                throw new PermissionDeniedException(\"The account:\" + caller.getAccountName() + \" does not fall in the same domain hierarchy as the service offering\");\n            }\n        }\n\n        if (vmId != null) {\n            VMInstanceVO vmInstance = _vmInstanceDao.findById(vmId);\n            if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"unable to find a virtual machine with specified id\");\n                ex.addProxyObject(vmId.toString(), \"vmId\");\n                throw ex;\n            }\n\n            _accountMgr.checkAccess(caller, null, true, vmInstance);\n\n            currentVmOffering = _srvOfferingDao.findByIdIncludingRemoved(vmInstance.getId(), vmInstance.getServiceOfferingId());\n            if (! currentVmOffering.isDynamic()) {\n                sc.addAnd(\"id\", SearchCriteria.Op.NEQ, currentVmOffering.getId());\n            }\n\n            boolean isRootVolumeUsingLocalStorage = virtualMachineManager.isRootVolumeOnLocalStorage(vmId);\n\n            \r\n            sc.addAnd(\"useLocalStorage\", SearchCriteria.Op.EQ, isRootVolumeUsingLocalStorage);\n\n            \r\n            if (vmInstance.getState() == VirtualMachine.State.Running) {\n                sc.addAnd(\"cpu\", Op.GTEQ, currentVmOffering.getCpu());\n                sc.addAnd(\"speed\", Op.GTEQ, currentVmOffering.getSpeed());\n                sc.addAnd(\"ramSize\", Op.GTEQ, currentVmOffering.getRamSize());\n                sc.addAnd(\"dynamicScalingEnabled\", Op.EQ, currentVmOffering.isDynamicScalingEnabled());\n            }\n        }\n\n        \r\n        if ((_accountMgr.isNormalUser(caller.getId()) || _accountMgr.isDomainAdmin(caller.getId())) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n            \r\n            if (isSystem) {\n                throw new InvalidParameterValueException(\"Only root admins can access system's offering\");\n            }\n            if (isRecursive) { \r\n                if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {\n                    throw new InvalidParameterValueException(\"Only ROOT admins and Domain admins can list service offerings with isrecursive=true\");\n                }\n            }\n        } else {\n            \r\n            if (caller.getDomainId() != 1 && isSystem) { \r\n                throw new InvalidParameterValueException(\"Non ROOT admins cannot access system's offering\");\n            }\n            if (domainId != null) {\n                sc.addAnd(\"domainId\", Op.FIND_IN_SET, String.valueOf(domainId));\n            }\n        }\n\n        if (keyword != null) {\n            SearchCriteria<ServiceOfferingJoinVO> ssc = _srvOfferingJoinDao.createSearchCriteria();\n            ssc.addOr(\"displayText\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n\n            sc.addAnd(\"name\", SearchCriteria.Op.SC, ssc);\n        }\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (isSystem != null) {\n            \r\n            \r\n            sc.addAnd(\"systemUse\", SearchCriteria.Op.EQ, isSystem);\n        }\n\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n\n        if (vmTypeStr != null) {\n            sc.addAnd(\"vmType\", SearchCriteria.Op.EQ, vmTypeStr);\n        }\n\n        if (zoneId != null) {\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            sb.and(\"zoneId\", sb.entity().getZoneId(), Op.FIND_IN_SET);\n            sb.or(\"zId\", sb.entity().getZoneId(), Op.NULL);\n            sb.done();\n            SearchCriteria<ServiceOfferingJoinVO> zoneSC = sb.create();\n            zoneSC.setParameters(\"zoneId\", String.valueOf(zoneId));\n            sc.addAnd(\"zoneId\", SearchCriteria.Op.SC, zoneSC);\n        }\n\n        if (cpuNumber != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuConstraintSearchCriteria.addAnd(\"minCpu\", Op.LTEQ, cpuNumber);\n            cpuConstraintSearchCriteria.addAnd(\"maxCpu\", Op.GTEQ, cpuNumber);\n\n            SearchCriteria<ServiceOfferingJoinVO> cpuSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSearchCriteria.addOr(\"minCpu\", Op.NULL);\n            cpuSearchCriteria.addOr(\"constraints\", Op.SC, cpuConstraintSearchCriteria);\n\n            sc.addAnd(\"cpuConstraints\", SearchCriteria.Op.SC, cpuSearchCriteria);\n        }\n\n        if (memory != null) {\n            SearchCriteria<ServiceOfferingJoinVO> memoryConstraintSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memoryConstraintSearchCriteria.addAnd(\"minMemory\", Op.LTEQ, memory);\n            memoryConstraintSearchCriteria.addAnd(\"maxMemory\", Op.GTEQ, memory);\n\n            SearchCriteria<ServiceOfferingJoinVO> memSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            memSearchCriteria.addOr(\"minMemory\", Op.NULL);\n            memSearchCriteria.addOr(\"memconstraints\", Op.SC, memoryConstraintSearchCriteria);\n\n            sc.addAnd(\"memoryConstraints\", SearchCriteria.Op.SC, memSearchCriteria);\n        }\n\n        if (cpuSpeed != null) {\n            SearchCriteria<ServiceOfferingJoinVO> cpuSpeedSearchCriteria = _srvOfferingJoinDao.createSearchCriteria();\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.NULL);\n            cpuSpeedSearchCriteria.addOr(\"speed\", Op.EQ, cpuSpeed);\n            sc.addAnd(\"cpuspeedconstraints\", SearchCriteria.Op.SC, cpuSpeedSearchCriteria);\n        }\n\n        \r\n        \r\n        if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            Domain callerDomain = _domainDao.findById(caller.getDomainId());\n            List<Long> domainIds = findRelatedDomainIds(callerDomain, isRecursive);\n\n            List<Long> ids = _srvOfferingDetailsDao.findOfferingIdsByDomainIds(domainIds);\n            SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n            if (ids != null && !ids.isEmpty()) {\n                sb.and(\"id\", sb.entity().getId(), Op.IN);\n            }\n            sb.or(\"domainId\", sb.entity().getDomainId(), Op.NULL);\n            sb.done();\n\n            SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n            if (ids != null && !ids.isEmpty()) {\n                scc.setParameters(\"id\", ids.toArray());\n            }\n            sc.addAnd(\"domainId\", SearchCriteria.Op.SC, scc);\n        }\n\n        if (currentVmOffering != null) {\n            List<String> storageTags = StringUtils.csvTagsToList(currentVmOffering.getTags());\n            if (!storageTags.isEmpty()) {\n                SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n                for(String tag : storageTags) {\n                    sb.and(tag, sb.entity().getTags(), Op.FIND_IN_SET);\n                }\n                sb.done();\n\n                SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n                for(String tag : storageTags) {\n                    scc.setParameters(tag, tag);\n                }\n                sc.addAnd(\"storageTags\", SearchCriteria.Op.SC, scc);\n            }\n\n            List<String> hostTags = StringUtils.csvTagsToList(currentVmOffering.getHostTag());\n            if (!hostTags.isEmpty()) {\n                SearchBuilder<ServiceOfferingJoinVO> sb = _srvOfferingJoinDao.createSearchBuilder();\n                for(String tag : hostTags) {\n                    sb.and(tag, sb.entity().getHostTag(), Op.FIND_IN_SET);\n                }\n                sb.done();\n\n                SearchCriteria<ServiceOfferingJoinVO> scc = sb.create();\n                for(String tag : hostTags) {\n                    scc.setParameters(tag, tag);\n                }\n                sc.addAnd(\"hostTags\", SearchCriteria.Op.SC, scc);\n            }\n        }\n\n        return _srvOfferingJoinDao.searchAndCount(sc, searchFilter);\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/QueryManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2971,"status":"M"}],"commitId":"981dac7bca911a137d63e837b9dcc2b199534b44","commitMessage":"@@@server: allow listing custom offerings for a running VM (#5420)\n\n* server: allow listing custom offerings for a running VM\n\nlistServiceOffering API when called for a running VM only fails to list all possible offerings especially the custom offerings and all offerings when VM is deployed using a custom offering.\nThis improves the list behviour by adding adding appropriate conditions for the custom offerings.\n\nFixes #5412\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-17 04:18:24","modifiedFileCount":"1","status":"M","submitter":"Abhishek Kumar"}]
