[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        final NicProfile nicProfile =\n                new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                        _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n        \r\n        if (vm.getState() == State.Running) {\n            final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n            s_logger.debug(\"Un-plugging nic \" + nic + \" for vm \" + vm + \" from network \" + network);\n            final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n            if (result) {\n                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n            } else {\n                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                return false;\n            }\n        } else if (vm.getState() != State.Stopped) {\n            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n\n        \r\n        _networkMgr.releaseNic(vmProfile, nic);\n        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n        \r\n        _networkMgr.removeNic(vmProfile, nic);\n        _nicsDao.expunge(nic.getId());\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":3447,"groupId":"20286","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateRemoveNicFromVm","params":"(finalVirtualMachinevm@finalNicnic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    private boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        final NicProfile nicProfile =\n                new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                        _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n        \r\n        if (vm.getState() == State.Running) {\n            final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n            s_logger.debug(\"Un-plugging nic \" + nic + \" for vm \" + vm + \" from network \" + network);\n            final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n            if (result) {\n                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n            } else {\n                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                return false;\n            }\n        } else if (vm.getState() != State.Stopped) {\n            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n\n        \r\n        _networkMgr.releaseNic(vmProfile, nic);\n        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n        \r\n        _networkMgr.removeNic(vmProfile, nic);\n        _nicsDao.expunge(nic.getId());\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3402,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        Nic nic = null;\n        if (broadcastUri != null) {\n            nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n        } else {\n            nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n        }\n\n        if (nic == null) {\n            s_logger.warn(\"Could not get a nic with \" + network);\n            return false;\n        }\n\n        \r\n        if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n            s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n            throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n        }\n\n        \r\n        final Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n        if (lock == null) {\n            \r\n            if (_nicsDao.findById(nic.getId()) == null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n                }\n                return true;\n            }\n            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n        }\n\n        try {\n            final NicProfile nicProfile =\n                    new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                            _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n            \r\n            if (vm.getState() == State.Running) {\n                final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n                final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                } else {\n                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                    return false;\n                }\n            } else if (vm.getState() != State.Stopped) {\n                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n            }\n\n            \r\n            _networkMgr.releaseNic(vmProfile, nic);\n            s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n            \r\n            _networkMgr.removeNic(vmProfile, nic);\n            return true;\n        } finally {\n            if (lock != null) {\n                _nicsDao.releaseFromLockTable(lock.getId());\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3541,"groupId":"12489","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"orchestrateRemoveVmFromNetwork","params":"(finalVirtualMachinevm@finalNetworknetwork@finalURIbroadcastUri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    private boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        Nic nic = null;\n        if (broadcastUri != null) {\n            nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n        } else {\n            nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n        }\n\n        if (nic == null) {\n            s_logger.warn(\"Could not get a nic with \" + network);\n            return false;\n        }\n\n        \r\n        if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n            s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n            throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n        }\n\n        \r\n        final Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n        if (lock == null) {\n            \r\n            if (_nicsDao.findById(nic.getId()) == null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n                }\n                return true;\n            }\n            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n        }\n\n        try {\n            final NicProfile nicProfile =\n                    new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                            _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n            \r\n            if (vm.getState() == State.Running) {\n                final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n                final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                } else {\n                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                    return false;\n                }\n            } else if (vm.getState() != State.Stopped) {\n                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n            }\n\n            \r\n            _networkMgr.releaseNic(vmProfile, nic);\n            s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n            \r\n            _networkMgr.removeNic(vmProfile, nic);\n            return true;\n        } finally {\n            if (lock != null) {\n                _nicsDao.releaseFromLockTable(lock.getId());\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3457,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-02-19 22:02:12","commitOrder":2,"curCode":"    private boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        final NicProfile nicProfile =\n                new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                        _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n        \r\n        if (vm.getState() == State.Running) {\n            final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n            s_logger.debug(\"Un-plugging nic \" + nic + \" for vm \" + vm + \" from network \" + network);\n            final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n            if (result) {\n                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n            } else {\n                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                return false;\n            }\n        } else if (vm.getState() != State.Stopped) {\n            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n\n        \r\n        _networkMgr.releaseNic(vmProfile, nic);\n        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n        \r\n        _networkMgr.removeNic(vmProfile, nic);\n        _nicsDao.remove(nic.getId());\n        return true;\n    }\n","date":"2020-02-19 22:02:12","endLine":3709,"groupId":"20286","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateRemoveNicFromVm","params":"(finalVirtualMachinevm@finalNicnic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8e/52c38902cc17f3efd8f1a1db674ec91e66d23a.src","preCode":"    private boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        final NicProfile nicProfile =\n                new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                        _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n        \r\n        if (vm.getState() == State.Running) {\n            final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n            s_logger.debug(\"Un-plugging nic \" + nic + \" for vm \" + vm + \" from network \" + network);\n            final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n            if (result) {\n                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n            } else {\n                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                return false;\n            }\n        } else if (vm.getState() != State.Stopped) {\n            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n\n        \r\n        _networkMgr.releaseNic(vmProfile, nic);\n        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n        \r\n        _networkMgr.removeNic(vmProfile, nic);\n        _nicsDao.expunge(nic.getId());\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3664,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        Nic nic = null;\n        if (broadcastUri != null) {\n            nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n        } else {\n            nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n        }\n\n        if (nic == null) {\n            s_logger.warn(\"Could not get a nic with \" + network);\n            return false;\n        }\n\n        \r\n        if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n            s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n            throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n        }\n\n        \r\n        final Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n        if (lock == null) {\n            \r\n            if (_nicsDao.findById(nic.getId()) == null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n                }\n                return true;\n            }\n            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n        }\n\n        try {\n            final NicProfile nicProfile =\n                    new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                            _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n            \r\n            if (vm.getState() == State.Running) {\n                final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n                final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                } else {\n                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                    return false;\n                }\n            } else if (vm.getState() != State.Stopped) {\n                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n            }\n\n            \r\n            _networkMgr.releaseNic(vmProfile, nic);\n            s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n            \r\n            _networkMgr.removeNic(vmProfile, nic);\n            return true;\n        } finally {\n            if (lock != null) {\n                _nicsDao.releaseFromLockTable(lock.getId());\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3541,"groupId":"12489","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"orchestrateRemoveVmFromNetwork","params":"(finalVirtualMachinevm@finalNetworknetwork@finalURIbroadcastUri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    private boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        Nic nic = null;\n        if (broadcastUri != null) {\n            nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n        } else {\n            nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n        }\n\n        if (nic == null) {\n            s_logger.warn(\"Could not get a nic with \" + network);\n            return false;\n        }\n\n        \r\n        if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n            s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n            throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n        }\n\n        \r\n        final Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n        if (lock == null) {\n            \r\n            if (_nicsDao.findById(nic.getId()) == null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n                }\n                return true;\n            }\n            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n        }\n\n        try {\n            final NicProfile nicProfile =\n                    new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                            _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n            \r\n            if (vm.getState() == State.Running) {\n                final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n                final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                } else {\n                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                    return false;\n                }\n            } else if (vm.getState() != State.Stopped) {\n                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n            }\n\n            \r\n            _networkMgr.releaseNic(vmProfile, nic);\n            s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n            \r\n            _networkMgr.removeNic(vmProfile, nic);\n            return true;\n        } finally {\n            if (lock != null) {\n                _nicsDao.releaseFromLockTable(lock.getId());\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3457,"status":"N"}],"commitId":"458d3b5b4753b16b1f07bfa1fe667037cb2623d6","commitMessage":"@@@Multiple networks support for vms in advanced zone with securit? (#3639)\n\n","date":"2020-02-19 22:02:12","modifiedFileCount":"16","status":"M","submitter":"Wei Zhou"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-20 18:16:34","commitOrder":3,"curCode":"    private boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        final NicProfile nicProfile =\n                new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                        _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n        \r\n        if (vm.getState() == State.Running) {\n            final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n            s_logger.debug(\"Un-plugging nic \" + nic + \" for vm \" + vm + \" from network \" + network);\n            final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n            if (result) {\n                _userVmMgr.setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n            } else {\n                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                return false;\n            }\n        } else if (vm.getState() != State.Stopped) {\n            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n\n        \r\n        _networkMgr.releaseNic(vmProfile, nic);\n        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n        \r\n        _networkMgr.removeNic(vmProfile, nic);\n        _nicsDao.remove(nic.getId());\n        return true;\n    }\n","date":"2020-08-20 18:16:34","endLine":3889,"groupId":"12564","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateRemoveNicFromVm","params":"(finalVirtualMachinevm@finalNicnic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/722c92fdea686b3481103c2c74c1003de77777.src","preCode":"    private boolean orchestrateRemoveNicFromVm(final VirtualMachine vm, final Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        final NicProfile nicProfile =\n                new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                        _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n        \r\n        if (vm.getState() == State.Running) {\n            final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n            s_logger.debug(\"Un-plugging nic \" + nic + \" for vm \" + vm + \" from network \" + network);\n            final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n            if (result) {\n                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(),\n                        Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n            } else {\n                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                return false;\n            }\n        } else if (vm.getState() != State.Stopped) {\n            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n\n        \r\n        _networkMgr.releaseNic(vmProfile, nic);\n        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n        \r\n        _networkMgr.removeNic(vmProfile, nic);\n        _nicsDao.remove(nic.getId());\n        return true;\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3843,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        Nic nic = null;\n        if (broadcastUri != null) {\n            nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n        } else {\n            nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n        }\n\n        if (nic == null) {\n            s_logger.warn(\"Could not get a nic with \" + network);\n            return false;\n        }\n\n        \r\n        if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n            s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n            throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n        }\n\n        \r\n        final Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n        if (lock == null) {\n            \r\n            if (_nicsDao.findById(nic.getId()) == null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n                }\n                return true;\n            }\n            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n        }\n\n        try {\n            final NicProfile nicProfile =\n                    new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                            _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n            \r\n            if (vm.getState() == State.Running) {\n                final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n                final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                } else {\n                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                    return false;\n                }\n            } else if (vm.getState() != State.Stopped) {\n                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n            }\n\n            \r\n            _networkMgr.releaseNic(vmProfile, nic);\n            s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n            \r\n            _networkMgr.removeNic(vmProfile, nic);\n            return true;\n        } finally {\n            if (lock != null) {\n                _nicsDao.releaseFromLockTable(lock.getId());\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3541,"groupId":"12564","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"orchestrateRemoveVmFromNetwork","params":"(finalVirtualMachinevm@finalNetworknetwork@finalURIbroadcastUri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    private boolean orchestrateRemoveVmFromNetwork(final VirtualMachine vm, final Network network, final URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n        final CallContext cctx = CallContext.current();\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n        final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n        Nic nic = null;\n        if (broadcastUri != null) {\n            nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n        } else {\n            nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n        }\n\n        if (nic == null) {\n            s_logger.warn(\"Could not get a nic with \" + network);\n            return false;\n        }\n\n        \r\n        if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n            s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n            throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n        }\n\n        \r\n        final Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n        if (lock == null) {\n            \r\n            if (_nicsDao.findById(nic.getId()) == null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n                }\n                return true;\n            }\n            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n        }\n\n        try {\n            final NicProfile nicProfile =\n                    new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), _networkModel.getNetworkRate(network.getId(), vm.getId()),\n                            _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n\n            \r\n            if (vm.getState() == State.Running) {\n                final NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n                final boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n                } else {\n                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n                    return false;\n                }\n            } else if (vm.getState() != State.Stopped) {\n                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n            }\n\n            \r\n            _networkMgr.releaseNic(vmProfile, nic);\n            s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n\n            \r\n            _networkMgr.removeNic(vmProfile, nic);\n            return true;\n        } finally {\n            if (lock != null) {\n                _nicsDao.releaseFromLockTable(lock.getId());\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3457,"status":"N"}],"commitId":"3872bf1ff94659fb234a7dd938ccdf6254fad3e7","commitMessage":"@@@kvm: Enable PVLAN support on L2 networks (#4040)\n\nThis is an extention of #3732 for kvm.\nThis is restricted to ovs > 2.9.2\nSince Xen uses ovs 2.6.  pvlan is unsupported.\nThis also fixes issues of vms on the same pvlan unable to communicate if they're on the same host","date":"2020-08-20 18:16:34","modifiedFileCount":"14","status":"M","submitter":"davidjumani"}]
