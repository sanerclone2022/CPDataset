[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n\n        List<Long> poolIdsByVolCount = _volumeDao.listZoneWidePoolIdsByVolumeCount(dcId, account.getAccountId());\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<Long, StoragePool>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<Long>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<StoragePool>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","date":"2018-01-20 05:49:27","endLine":136,"groupId":"12945","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reorderPoolsByNumberOfVolumes","params":"(DeploymentPlanplan@List<StoragePool>pools@Accountaccount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7a/109669ab75e78c47c6b347888d3fc68a7dada3.src","preCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n\n        List<Long> poolIdsByVolCount = _volumeDao.listZoneWidePoolIdsByVolumeCount(dcId, account.getAccountId());\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<Long, StoragePool>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<Long>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<StoragePool>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/ZoneWideStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n\n        List<Long> poolIdsByVolCount = _volumeDao.listPoolIdsByVolumeCount(dcId, podId, clusterId, account.getAccountId());\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<Long, StoragePool>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<Long>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<StoragePool>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","date":"2018-01-20 05:49:27","endLine":168,"groupId":"12945","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reorderPoolsByNumberOfVolumes","params":"(DeploymentPlanplan@List<StoragePool>pools@Accountaccount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/19/4f7bd857c509e32e87beb97af80afa052261f0.src","preCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n\n        List<Long> poolIdsByVolCount = _volumeDao.listPoolIdsByVolumeCount(dcId, podId, clusterId, account.getAccountId());\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<Long, StoragePool>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<Long>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<StoragePool>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-09-11 22:23:19","codes":[{"authorDate":"2018-09-11 22:23:19","commitOrder":2,"curCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n\n        List<Long> poolIdsByVolCount = volumeDao.listZoneWidePoolIdsByVolumeCount(dcId, account.getAccountId());\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","date":"2018-09-11 22:23:19","endLine":140,"groupId":"10801","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reorderPoolsByNumberOfVolumes","params":"(DeploymentPlanplan@List<StoragePool>pools@Accountaccount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/aa/077f33fef005adc8e98461e38fe49dcb4f6cb8.src","preCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n\n        List<Long> poolIdsByVolCount = _volumeDao.listZoneWidePoolIdsByVolumeCount(dcId, account.getAccountId());\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<Long, StoragePool>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<Long>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<StoragePool>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/ZoneWideStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2018-09-11 22:23:19","commitOrder":2,"curCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n\n        List<Long> poolIdsByVolCount = volumeDao.listPoolIdsByVolumeCount(dcId, podId, clusterId, account.getAccountId());\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","date":"2018-09-11 22:23:19","endLine":155,"groupId":"10801","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reorderPoolsByNumberOfVolumes","params":"(DeploymentPlanplan@List<StoragePool>pools@Accountaccount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ef/5e21d8899ee537a97cf76156876cc19e9d033b.src","preCode":"    protected List<StoragePool> reorderPoolsByNumberOfVolumes(DeploymentPlan plan, List<StoragePool> pools, Account account) {\n        if (account == null) {\n            return pools;\n        }\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n\n        List<Long> poolIdsByVolCount = _volumeDao.listPoolIdsByVolumeCount(dcId, podId, clusterId, account.getAccountId());\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"List of pools in ascending order of number of volumes for account id: \" + account.getAccountId() + \" is: \" + poolIdsByVolCount);\n        }\n\n        \r\n        Map<Long, StoragePool> poolMap = new HashMap<Long, StoragePool>();\n        for (StoragePool pool : pools) {\n            poolMap.put(pool.getId(), pool);\n        }\n        List<Long> matchingPoolIds = new ArrayList<Long>(poolMap.keySet());\n\n        poolIdsByVolCount.retainAll(matchingPoolIds);\n\n        List<StoragePool> reorderedPools = new ArrayList<StoragePool>();\n        for (Long id : poolIdsByVolCount) {\n            reorderedPools.add(poolMap.get(id));\n        }\n\n        return reorderedPools;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"d12c106a47db1e2fc5634a9f8dc8c521eba65bfc","commitMessage":"@@@Restrict the number of managed clustered file systems per compute cluster (#2500)\n\n* Restrict the number of managed clustered file systems per compute cluster","date":"2018-09-11 22:23:19","modifiedFileCount":"8","status":"M","submitter":"Mike Tutkowski"}]
