[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n\n        super.configure(params);\n\n        getPifs();\n\n        \r\n        params.put(\"domr.scripts.dir\", \"scripts/network/domr/kvm\");\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n\n        bridgeNameSchema = (String)params.get(\"network.bridge.name.schema\");\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n\n        libvirtVersion = (Long) params.get(\"libvirtVersion\");\n        if (libvirtVersion == null) {\n            libvirtVersion = 0L;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":88,"groupId":"3248","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/b22c494f46f1276bb7fddf6e98ed95a4b36882.src","preCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n\n        super.configure(params);\n\n        getPifs();\n\n        \r\n        params.put(\"domr.scripts.dir\", \"scripts/network/domr/kvm\");\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n\n        bridgeNameSchema = (String)params.get(\"network.bridge.name.schema\");\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n\n        libvirtVersion = (Long) params.get(\"libvirtVersion\");\n        if (libvirtVersion == null) {\n            libvirtVersion = 0L;\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n        super.configure(params);\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n        String utilScriptsDir = \"scripts/util/\";\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n        _ivsIfUpPath = Script.findScript(utilScriptsDir, \"qemu-ivs-ifup\");\n\n        libvirtVersion = (Long) params.get(\"libvirtVersion\");\n        if (libvirtVersion == null) {\n            libvirtVersion = 0L;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":77,"groupId":"4215","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8e/73d859039f7866e09fc6a6528c1798db29a119.src","preCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n        super.configure(params);\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n        String utilScriptsDir = \"scripts/util/\";\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n        _ivsIfUpPath = Script.findScript(utilScriptsDir, \"qemu-ivs-ifup\");\n\n        libvirtVersion = (Long) params.get(\"libvirtVersion\");\n        if (libvirtVersion == null) {\n            libvirtVersion = 0L;\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/IvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-07-25 14:43:39","codes":[{"authorDate":"2019-07-25 14:43:39","commitOrder":2,"curCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n\n        super.configure(params);\n\n        getPifs();\n\n        \r\n        params.put(\"domr.scripts.dir\", \"scripts/network/domr/kvm\");\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n\n        String controlCidr = (String)params.get(\"control.cidr\");\n        if (StringUtils.isNotBlank(controlCidr)) {\n            _controlCidr = controlCidr;\n        }\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n\n        libvirtVersion = (Long) params.get(\"libvirtVersion\");\n        if (libvirtVersion == null) {\n            libvirtVersion = 0L;\n        }\n    }\n","date":"2019-07-25 14:43:39","endLine":91,"groupId":"103278","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/bb763d54e45833213fd89f3cf2bbb263c9a524.src","preCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n\n        super.configure(params);\n\n        getPifs();\n\n        \r\n        params.put(\"domr.scripts.dir\", \"scripts/network/domr/kvm\");\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n\n        bridgeNameSchema = (String)params.get(\"network.bridge.name.schema\");\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n\n        libvirtVersion = (Long) params.get(\"libvirtVersion\");\n        if (libvirtVersion == null) {\n            libvirtVersion = 0L;\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-07-25 14:43:39","commitOrder":2,"curCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n        super.configure(params);\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n        String utilScriptsDir = \"scripts/util/\";\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n        _ivsIfUpPath = Script.findScript(utilScriptsDir, \"qemu-ivs-ifup\");\n\n        String controlCidr = (String)params.get(\"control.cidr\");\n        if (StringUtils.isNotBlank(controlCidr)) {\n            _controlCidr = controlCidr;\n        }\n    }\n","date":"2019-07-25 14:43:39","endLine":78,"groupId":"103278","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/7a360616cba2edc4ad7acb2e5d797e91f260aa.src","preCode":"    public void configure(Map<String, Object> params) throws ConfigurationException {\n        super.configure(params);\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = \"scripts/vm/network/vnet\";\n        }\n        String utilScriptsDir = \"scripts/util/\";\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 30 * 60) * 1000;\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n        _modifyVxlanPath = Script.findScript(networkScriptsDir, \"modifyvxlan.sh\");\n        if (_modifyVxlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvxlan.sh\");\n        }\n        _ivsIfUpPath = Script.findScript(utilScriptsDir, \"qemu-ivs-ifup\");\n\n        libvirtVersion = (Long) params.get(\"libvirtVersion\");\n        if (libvirtVersion == null) {\n            libvirtVersion = 0L;\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/IvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"e894658f8c3584f572a5e6c5fe292a2bae03c79c","commitMessage":"@@@kvm: Allow Link Local Cidr (cloud0 interface) to be configured (#3500)\n\nThere are certain scenarios where the 169.254.0.0/16 subnet is used for different\npurposes then CloudStack on a hypervisor.\n\nOnce of such scenarios is a BGP+EVPN+VXLAN setup using BGP Unnumbered where the\n169.254.0.1 address is used by Frr/Zebra BGP routing to send traffic to the\nneighboring router.\n\nThe following settings can be changed in the agent.properties (default values added):\n\ncontrol.cidr=169.254.0.0/16\n\nMake sure the global setting 'control.cidr' matches the values defined in the agent.propeties!\n\nIn the future the mgmt server can send this parameter to a KVM Agent on startup.  but at the moment\nthis framework is not in place and thus these values can't be send to the Agent in a proper manner.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2019-07-25 14:43:39","modifiedFileCount":"9","status":"M","submitter":"Wido den Hollander"}]
