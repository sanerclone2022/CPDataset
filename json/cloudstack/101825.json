[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementHostIPAdr.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementHostIPAdr.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1497,"groupId":"14201","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(finalVirtualMachineProfileprofile@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f3/035d05e61271ea58a41be185404248abc43aea.src","preCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementHostIPAdr.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementHostIPAdr.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1311,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementHostIPAdr.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":489,"groupId":"25736","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d9/175548649da5cdd85c73d61dfd57f4dafcbfa2.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementHostIPAdr.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/elastic-loadbalancer/src/main/java/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-03-15 19:16:50","codes":[{"authorDate":"2018-03-15 19:16:50","commitOrder":2,"curCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementServerAddresses.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementServerAddresses.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":1497,"groupId":"24004","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(finalVirtualMachineProfileprofile@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/19/85deaefa8023926f5061283bd5f889a94cc0ed.src","preCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementHostIPAdr.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementHostIPAdr.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1311,"status":"M"},{"authorDate":"2018-03-15 19:16:50","commitOrder":2,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementServerAddresses.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":489,"groupId":"25736","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/78/e04b5dc53f85c3653ce0db00097a3cfde8376a.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementHostIPAdr.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/elastic-loadbalancer/src/main/java/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"8ef131745a5ef0e5e6ddc7e498f3a0208f1bfb71","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-03-15 19:16:50","modifiedFileCount":"28","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-03-15 19:16:50","codes":[{"authorDate":"2020-03-29 02:30:17","commitOrder":3,"curCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementServerAddresses.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        if (profile.getHypervisorType() == HypervisorType.VMware) {\n                            buf.append(\" sshonguest=false\");\n                        } else {\n                            buf.append(\" sshonguest=true\");\n                        }\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementServerAddresses.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","date":"2020-03-29 02:30:17","endLine":2148,"groupId":"24004","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(finalVirtualMachineProfileprofile@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/1f70bcf2b6f3ca67434409195ccb308ac761b7.src","preCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementServerAddresses.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementServerAddresses.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1958,"status":"M"},{"authorDate":"2018-03-15 19:16:50","commitOrder":3,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementServerAddresses.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":489,"groupId":"25736","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/78/e04b5dc53f85c3653ce0db00097a3cfde8376a.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementServerAddresses.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/elastic-loadbalancer/src/main/java/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"}],"commitId":"66f5ecf908f26cf2617cdbb700180b34c7012897","commitMessage":"@@@Merge branch '4.13'\n","date":"2020-03-29 02:30:17","modifiedFileCount":"4","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2018-03-15 19:16:50","codes":[{"authorDate":"2020-04-16 21:27:52","commitOrder":4,"curCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementServerAddresses.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        if (profile.getHypervisorType() == HypervisorType.VMware) {\n                            buf.append(\" sshonguest=false\");\n                        } else {\n                            buf.append(\" sshonguest=true\");\n                        }\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.TRUE.equals(ExposeDnsAndBootpServer.valueIn(dc.getId()))) {\n            buf.append(\" exposedns=true\");\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementServerAddresses.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","date":"2020-04-16 21:27:52","endLine":2152,"groupId":"101825","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(finalVirtualMachineProfileprofile@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/95307b95ef26210fc9e0d50057b27ae5193296.src","preCode":"    public boolean finalizeVirtualMachineProfile(final VirtualMachineProfile profile, final DeployDestination dest, final ReservationContext context) {\n\n        boolean dnsProvided = true;\n        boolean dhcpProvided = true;\n        boolean publicNetwork = false;\n        final DataCenterVO dc = _dcDao.findById(dest.getDataCenter().getId());\n        _dcDao.loadDetails(dc);\n\n        \r\n        final DomainRouterVO router = _routerDao.findById(profile.getVirtualMachine().getId());\n        final Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(router.getId());\n        router.setDetails(details);\n\n        \r\n\n        final StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP\");\n        buf.append(\" name=\").append(profile.getHostName());\n\n        if (Boolean.valueOf(_configDao.getValue(\"system.vm.random.password\"))) {\n            buf.append(\" vmpassword=\").append(_configDao.getValue(\"system.vm.password\"));\n        }\n\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n        String defaultIp6Dns1 = null;\n        String defaultIp6Dns2 = null;\n        for (final NicProfile nic : profile.getNics()) {\n            final int deviceId = nic.getDeviceId();\n            boolean ipv4 = false, ipv6 = false;\n            if (nic.getIPv4Address() != null) {\n                ipv4 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            }\n            if (nic.getIPv6Address() != null) {\n                ipv6 = true;\n                buf.append(\" eth\").append(deviceId).append(\"ip6=\").append(nic.getIPv6Address());\n                buf.append(\" eth\").append(deviceId).append(\"ip6prelen=\").append(NetUtils.getIp6CidrSize(nic.getIPv6Cidr()));\n            }\n\n            if (nic.isDefaultNic()) {\n                if (ipv4) {\n                    buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                }\n                if (ipv6) {\n                    buf.append(\" ip6gateway=\").append(nic.getIPv6Gateway());\n                }\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n                defaultIp6Dns1 = nic.getIPv6Dns1();\n                defaultIp6Dns2 = nic.getIPv6Dns2();\n            }\n\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                controlNic = nic;\n                buf.append(createRedundantRouterArgs(controlNic, router));\n\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware || dest.getHost().getHypervisorType() == HypervisorType.Hyperv) {\n                    s_logger.info(\"Check if we need to add management server explicit route to DomR. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                            + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                            + ApiServiceConfiguration.ManagementServerAddresses.value());\n\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Add management server explicit route to DomR.\");\n                    }\n\n                    \r\n                    \r\n                    \r\n                    _mgmtCidr = _configDao.getValue(Config.ManagementNetwork.key());\n                    if (NetUtils.isValidIp4Cidr(_mgmtCidr)) {\n                        buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                        buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                    }\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        if (profile.getHypervisorType() == HypervisorType.VMware) {\n                            buf.append(\" sshonguest=false\");\n                        } else {\n                            buf.append(\" sshonguest=true\");\n                        }\n                    }\n\n                }\n            } else if (nic.getTrafficType() == TrafficType.Guest) {\n                dnsProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dns, Provider.VirtualRouter);\n                dhcpProvided = _networkModel.isProviderSupportServiceInNetwork(nic.getNetworkId(), Service.Dhcp, Provider.VirtualRouter);\n                \r\n                buf.append(createGuestBootLoadArgs(nic, defaultDns1, defaultDns2, router));\n            } else if (nic.getTrafficType() == TrafficType.Public) {\n                publicNetwork = true;\n            }\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        final String rpValue = _configDao.getValue(Config.NetworkRouterRpFilter.key());\n        if (rpValue != null && rpValue.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        } else {\n            _disableRpFilter = false;\n        }\n\n        String rpFilter = \" \";\n        String type = null;\n        if (router.getVpcId() != null) {\n            type = \"vpcrouter\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        } else if (!publicNetwork) {\n            type = \"dhcpsrvr\";\n        } else {\n            type = \"router\";\n            if (_disableRpFilter) {\n                rpFilter = \" disable_rp_filter=true\";\n            }\n        }\n\n        if (_disableRpFilter) {\n            rpFilter = \" disable_rp_filter=true\";\n        }\n\n        buf.append(\" type=\" + type + rpFilter);\n\n        final String domain_suffix = dc.getDetail(ZoneConfig.DnsSearchOrder.getName());\n        if (domain_suffix != null) {\n            buf.append(\" dnssearchorder=\").append(domain_suffix);\n        }\n\n        if (profile.getHypervisorType() == HypervisorType.VMware || profile.getHypervisorType() == HypervisorType.Hyperv) {\n            buf.append(\" extra_pubnics=\" + _routerExtraPublicNics);\n        }\n\n        \r\n\r\n\r\n\r\n\n        if (dnsProvided || dhcpProvided) {\n            if (defaultDns1 != null) {\n                buf.append(\" dns1=\").append(defaultDns1);\n            }\n            if (defaultDns2 != null) {\n                buf.append(\" dns2=\").append(defaultDns2);\n            }\n            if (defaultIp6Dns1 != null) {\n                buf.append(\" ip6dns1=\").append(defaultIp6Dns1);\n            }\n            if (defaultIp6Dns2 != null) {\n                buf.append(\" ip6dns2=\").append(defaultIp6Dns2);\n            }\n\n            boolean useExtDns = !dnsProvided;\n            \n            useExtDns = useExtDns || UseExternalDnsServers.valueIn(dc.getId());\n\n            if (useExtDns) {\n                buf.append(\" useextdns=true\");\n            }\n        }\n\n        if (Boolean.valueOf(_configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()))) {\n            final QueryBuilder<UserVO> acntq = QueryBuilder.create(UserVO.class);\n            acntq.and(acntq.entity().getUsername(), SearchCriteria.Op.EQ, \"baremetal-system-account\");\n            final UserVO user = acntq.find();\n            if (user == null) {\n                s_logger.warn(String\n                        .format(\"global setting[baremetal.provision.done.notification] is enabled but user baremetal-system-account is not found. Baremetal provision done notification will not be enabled\"));\n            } else {\n                buf.append(String.format(\" baremetalnotificationsecuritykey=%s\", user.getSecretKey()));\n                buf.append(String.format(\" baremetalnotificationapikey=%s\", user.getApiKey()));\n                buf.append(\" host=\").append(ApiServiceConfiguration.ManagementServerAddresses.value());\n                buf.append(\" port=\").append(_configDao.getValue(Config.BaremetalProvisionDoneNotificationPort.key()));\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1958,"status":"M"},{"authorDate":"2018-03-15 19:16:50","commitOrder":4,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementServerAddresses.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","date":"2018-03-15 19:16:50","endLine":489,"groupId":"101825","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/78/e04b5dc53f85c3653ce0db00097a3cfde8376a.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n\n        List<NicProfile> elbNics = profile.getNics();\n        Long guestNtwkId = null;\n        for (NicProfile routerNic : elbNics) {\n            if (routerNic.getTrafficType() == TrafficType.Guest) {\n                guestNtwkId = routerNic.getNetworkId();\n                break;\n            }\n        }\n\n        NetworkVO guestNetwork = _networkDao.findById(guestNtwkId);\n\n        DataCenter dc = dest.getDataCenter();\n\n        StringBuilder buf = profile.getBootArgsBuilder();\n        buf.append(\" template=domP type=\" + SystemVmType);\n        buf.append(\" name=\").append(profile.getHostName());\n        NicProfile controlNic = null;\n        String defaultDns1 = null;\n        String defaultDns2 = null;\n\n        for (NicProfile nic : profile.getNics()) {\n            int deviceId = nic.getDeviceId();\n            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIPv4Address());\n            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getIPv4Netmask());\n            if (nic.isDefaultNic()) {\n                buf.append(\" gateway=\").append(nic.getIPv4Gateway());\n                defaultDns1 = nic.getIPv4Dns1();\n                defaultDns2 = nic.getIPv4Dns2();\n            }\n            if (nic.getTrafficType() == TrafficType.Management) {\n                buf.append(\" localgw=\").append(dest.getPod().getGateway());\n            } else if (nic.getTrafficType() == TrafficType.Control) {\n                \r\n                if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {\n                    if (s_logger.isInfoEnabled()) {\n                        s_logger.info(\"Check if we need to add management server explicit route to ELB vm. pod cidr: \" + dest.getPod().getCidrAddress() + \"/\"\n                                + dest.getPod().getCidrSize() + \", pod gateway: \" + dest.getPod().getGateway() + \", management host: \"\n                                + ApiServiceConfiguration.ManagementServerAddresses.value());\n                    }\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Added management server explicit route to ELB vm.\");\n                    }\n                    \r\n                    buf.append(\" mgmtcidr=\").append(_mgmtCidr);\n                    buf.append(\" localgw=\").append(dest.getPod().getGateway());\n\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        \r\n                        buf.append(\" sshonguest=true\");\n                    }\n\n                }\n\n                controlNic = nic;\n            }\n        }\n        String domain = guestNetwork.getNetworkDomain();\n        if (domain != null) {\n            buf.append(\" domain=\" + domain);\n        }\n\n        buf.append(\" dns1=\").append(defaultDns1);\n        if (defaultDns2 != null) {\n            buf.append(\" dns2=\").append(defaultDns2);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Boot Args for \" + profile + \": \" + buf.toString());\n        }\n\n        if (controlNic == null) {\n            throw new CloudRuntimeException(\"Didn't start a control port\");\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/elastic-loadbalancer/src/main/java/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"}],"commitId":"8e4be6dc60ad2bed1d393384d00887b858ee7cf4","commitMessage":"@@@Merge branch '4.13'\n","date":"2020-04-16 21:27:52","modifiedFileCount":"4","status":"M","submitter":"Daan Hoogland"}]
