[{"authorTime":"2020-03-06 15:51:23","codes":[{"authorDate":"2020-03-06 15:51:23","commitOrder":1,"curCode":"    private boolean removeKubernetesClusterNode(final String ipAddress, final int port, final UserVm userVm, final int retries, final int waitDuration) {\n        File pkFile = getManagementServerSshPublicKeyFile();\n        int retryCounter = 0;\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (retryCounter < retries) {\n            retryCounter++;\n            try {\n                Pair<Boolean, String> result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                        pkFile, null, String.format(\"sudo kubectl drain %s --ignore-daemonsets --delete-local-data\", hostName),\n                        10000, 10000, 60000);\n                if (!result.first()) {\n                    LOGGER.warn(String.format(\"Draining node: %s on VM ID: %s in Kubernetes cluster ID: %s unsuccessful\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()));\n                } else {\n                    result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                            pkFile, null, String.format(\"sudo kubectl delete node %s\", hostName),\n                            10000, 10000, 30000);\n                    if (result.first()) {\n                        return true;\n                    } else {\n                        LOGGER.warn(String.format(\"Deleting node: %s on VM ID: %s in Kubernetes cluster ID: %s unsuccessful\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()));\n                    }\n                }\n                break;\n            } catch (Exception e) {\n                String msg = String.format(\"Failed to remove Kubernetes cluster ID: %s node: %s on VM ID: %s\", kubernetesCluster.getUuid(), hostName, userVm.getUuid());\n                LOGGER.warn(msg, e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.error(String.format(\"Error while waiting for Kubernetes cluster ID: %s node: %s on VM ID: %s removal\", kubernetesCluster.getUuid(), hostName, userVm.getUuid()), ie);\n            }\n            retryCounter++;\n        }\n        return false;\n    }\n","date":"2020-03-06 15:51:23","endLine":222,"groupId":"20539","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"removeKubernetesClusterNode","params":"(finalStringipAddress@finalintport@finalUserVmuserVm@finalintretries@finalintwaitDuration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/6a028c9a807e8d1b5790259001fb5e88df98f4.src","preCode":"    private boolean removeKubernetesClusterNode(final String ipAddress, final int port, final UserVm userVm, final int retries, final int waitDuration) {\n        File pkFile = getManagementServerSshPublicKeyFile();\n        int retryCounter = 0;\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (retryCounter < retries) {\n            retryCounter++;\n            try {\n                Pair<Boolean, String> result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                        pkFile, null, String.format(\"sudo kubectl drain %s --ignore-daemonsets --delete-local-data\", hostName),\n                        10000, 10000, 60000);\n                if (!result.first()) {\n                    LOGGER.warn(String.format(\"Draining node: %s on VM ID: %s in Kubernetes cluster ID: %s unsuccessful\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()));\n                } else {\n                    result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                            pkFile, null, String.format(\"sudo kubectl delete node %s\", hostName),\n                            10000, 10000, 30000);\n                    if (result.first()) {\n                        return true;\n                    } else {\n                        LOGGER.warn(String.format(\"Deleting node: %s on VM ID: %s in Kubernetes cluster ID: %s unsuccessful\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()));\n                    }\n                }\n                break;\n            } catch (Exception e) {\n                String msg = String.format(\"Failed to remove Kubernetes cluster ID: %s node: %s on VM ID: %s\", kubernetesCluster.getUuid(), hostName, userVm.getUuid());\n                LOGGER.warn(msg, e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.error(String.format(\"Error while waiting for Kubernetes cluster ID: %s node: %s on VM ID: %s removal\", kubernetesCluster.getUuid(), hostName, userVm.getUuid()), ie);\n            }\n            retryCounter++;\n        }\n        return false;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterScaleWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"},{"authorDate":"2020-03-06 15:51:23","commitOrder":1,"curCode":"    public static boolean uncordonKubernetesClusterNode(final KubernetesCluster kubernetesCluster,\n                                                        final String ipAddress, final int port,\n                                                        final String user, final File sshKeyFile,\n                                                        final UserVm userVm, final long timeoutTime,\n                                                        final int waitDuration) {\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (System.currentTimeMillis() < timeoutTime) {\n            Pair<Boolean, String> result = null;\n            try {\n                result = SshHelper.sshExecute(ipAddress, port, user, sshKeyFile, null,\n                        String.format(\"sudo kubectl uncordon %s\", hostName),\n                        10000, 10000, 30000);\n                if (result.first()) {\n                    return true;\n                }\n            } catch (Exception e) {\n                LOGGER.warn(String.format(\"Failed to uncordon node: %s on VM ID: %s in Kubernetes cluster ID: %s\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()), e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.warn(String.format(\"Error while waiting for uncordon Kubernetes cluster ID: %s node: %s on VM ID: %s\", kubernetesCluster.getUuid(), hostName, userVm.getUuid()), ie);\n            }\n        }\n        return false;\n    }\n","date":"2020-03-06 15:51:23","endLine":120,"groupId":"18129","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"uncordonKubernetesClusterNode","params":"(finalKubernetesClusterkubernetesCluster@finalStringipAddress@finalintport@finalStringuser@finalFilesshKeyFile@finalUserVmuserVm@finallongtimeoutTime@finalintwaitDuration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/68/cd91601939eb9214e95ec9ef0ad4ac00ab62c1.src","preCode":"    public static boolean uncordonKubernetesClusterNode(final KubernetesCluster kubernetesCluster,\n                                                        final String ipAddress, final int port,\n                                                        final String user, final File sshKeyFile,\n                                                        final UserVm userVm, final long timeoutTime,\n                                                        final int waitDuration) {\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (System.currentTimeMillis() < timeoutTime) {\n            Pair<Boolean, String> result = null;\n            try {\n                result = SshHelper.sshExecute(ipAddress, port, user, sshKeyFile, null,\n                        String.format(\"sudo kubectl uncordon %s\", hostName),\n                        10000, 10000, 30000);\n                if (result.first()) {\n                    return true;\n                }\n            } catch (Exception e) {\n                LOGGER.warn(String.format(\"Failed to uncordon node: %s on VM ID: %s in Kubernetes cluster ID: %s\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()), e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.warn(String.format(\"Error while waiting for uncordon Kubernetes cluster ID: %s node: %s on VM ID: %s\", kubernetesCluster.getUuid(), hostName, userVm.getUuid()), ie);\n            }\n        }\n        return false;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/utils/KubernetesClusterUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"8cc70c7d8725319ba5455c5fe17ede275e372f1c","commitMessage":"@@@CloudStack Kubernetes Service (#3680)\n\n","date":"2020-03-06 15:51:23","modifiedFileCount":"10","status":"B","submitter":"Abhishek Kumar"},{"authorTime":"2020-10-27 14:45:43","codes":[{"authorDate":"2020-10-27 14:45:43","commitOrder":2,"curCode":"    private boolean removeKubernetesClusterNode(final String ipAddress, final int port, final UserVm userVm, final int retries, final int waitDuration) {\n        File pkFile = getManagementServerSshPublicKeyFile();\n        int retryCounter = 0;\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (retryCounter < retries) {\n            retryCounter++;\n            try {\n                Pair<Boolean, String> result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                        pkFile, null, String.format(\"sudo kubectl drain %s --ignore-daemonsets --delete-local-data\", hostName),\n                        10000, 10000, 60000);\n                if (!result.first()) {\n                    LOGGER.warn(String.format(\"Draining node: %s on VM : %s in Kubernetes cluster : %s unsuccessful\", hostName, userVm.getDisplayName(), kubernetesCluster.getName()));\n                } else {\n                    result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                            pkFile, null, String.format(\"sudo kubectl delete node %s\", hostName),\n                            10000, 10000, 30000);\n                    if (result.first()) {\n                        return true;\n                    } else {\n                        LOGGER.warn(String.format(\"Deleting node: %s on VM : %s in Kubernetes cluster : %s unsuccessful\", hostName, userVm.getDisplayName(), kubernetesCluster.getName()));\n                    }\n                }\n                break;\n            } catch (Exception e) {\n                String msg = String.format(\"Failed to remove Kubernetes cluster : %s node: %s on VM : %s\", kubernetesCluster.getName(), hostName, userVm.getDisplayName());\n                LOGGER.warn(msg, e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.error(String.format(\"Error while waiting for Kubernetes cluster : %s node: %s on VM : %s removal\", kubernetesCluster.getName(), hostName, userVm.getDisplayName()), ie);\n            }\n            retryCounter++;\n        }\n        return false;\n    }\n","date":"2020-10-27 14:45:43","endLine":222,"groupId":"104222","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"removeKubernetesClusterNode","params":"(finalStringipAddress@finalintport@finalUserVmuserVm@finalintretries@finalintwaitDuration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1f/ce00ba81d516e68a4ff4e63493645518307386.src","preCode":"    private boolean removeKubernetesClusterNode(final String ipAddress, final int port, final UserVm userVm, final int retries, final int waitDuration) {\n        File pkFile = getManagementServerSshPublicKeyFile();\n        int retryCounter = 0;\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (retryCounter < retries) {\n            retryCounter++;\n            try {\n                Pair<Boolean, String> result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                        pkFile, null, String.format(\"sudo kubectl drain %s --ignore-daemonsets --delete-local-data\", hostName),\n                        10000, 10000, 60000);\n                if (!result.first()) {\n                    LOGGER.warn(String.format(\"Draining node: %s on VM ID: %s in Kubernetes cluster ID: %s unsuccessful\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()));\n                } else {\n                    result = SshHelper.sshExecute(ipAddress, port, CLUSTER_NODE_VM_USER,\n                            pkFile, null, String.format(\"sudo kubectl delete node %s\", hostName),\n                            10000, 10000, 30000);\n                    if (result.first()) {\n                        return true;\n                    } else {\n                        LOGGER.warn(String.format(\"Deleting node: %s on VM ID: %s in Kubernetes cluster ID: %s unsuccessful\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()));\n                    }\n                }\n                break;\n            } catch (Exception e) {\n                String msg = String.format(\"Failed to remove Kubernetes cluster ID: %s node: %s on VM ID: %s\", kubernetesCluster.getUuid(), hostName, userVm.getUuid());\n                LOGGER.warn(msg, e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.error(String.format(\"Error while waiting for Kubernetes cluster ID: %s node: %s on VM ID: %s removal\", kubernetesCluster.getUuid(), hostName, userVm.getUuid()), ie);\n            }\n            retryCounter++;\n        }\n        return false;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterScaleWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-10-27 14:45:43","commitOrder":2,"curCode":"    public static boolean uncordonKubernetesClusterNode(final KubernetesCluster kubernetesCluster,\n                                                        final String ipAddress, final int port,\n                                                        final String user, final File sshKeyFile,\n                                                        final UserVm userVm, final long timeoutTime,\n                                                        final int waitDuration) {\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (System.currentTimeMillis() < timeoutTime) {\n            Pair<Boolean, String> result = null;\n            try {\n                result = SshHelper.sshExecute(ipAddress, port, user, sshKeyFile, null,\n                        String.format(\"sudo kubectl uncordon %s\", hostName),\n                        10000, 10000, 30000);\n                if (result.first()) {\n                    return true;\n                }\n            } catch (Exception e) {\n                LOGGER.warn(String.format(\"Failed to uncordon node: %s on VM ID : %s in Kubernetes cluster : %s\",\n                    hostName, userVm.getUuid(), kubernetesCluster.getName()), e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.warn(String.format(\"Error while waiting for uncordon Kubernetes cluster : %s node: %s on VM : %s\",\n                    kubernetesCluster.getName(), hostName, userVm.getUuid()), ie);\n            }\n        }\n        return false;\n    }\n","date":"2020-10-27 14:45:43","endLine":122,"groupId":"104222","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"uncordonKubernetesClusterNode","params":"(finalKubernetesClusterkubernetesCluster@finalStringipAddress@finalintport@finalStringuser@finalFilesshKeyFile@finalUserVmuserVm@finallongtimeoutTime@finalintwaitDuration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b0/6cc00c9229e1840a36cef5a4cf76eba76cda1a.src","preCode":"    public static boolean uncordonKubernetesClusterNode(final KubernetesCluster kubernetesCluster,\n                                                        final String ipAddress, final int port,\n                                                        final String user, final File sshKeyFile,\n                                                        final UserVm userVm, final long timeoutTime,\n                                                        final int waitDuration) {\n        String hostName = userVm.getHostName();\n        if (!Strings.isNullOrEmpty(hostName)) {\n            hostName = hostName.toLowerCase();\n        }\n        while (System.currentTimeMillis() < timeoutTime) {\n            Pair<Boolean, String> result = null;\n            try {\n                result = SshHelper.sshExecute(ipAddress, port, user, sshKeyFile, null,\n                        String.format(\"sudo kubectl uncordon %s\", hostName),\n                        10000, 10000, 30000);\n                if (result.first()) {\n                    return true;\n                }\n            } catch (Exception e) {\n                LOGGER.warn(String.format(\"Failed to uncordon node: %s on VM ID: %s in Kubernetes cluster ID: %s\", hostName, userVm.getUuid(), kubernetesCluster.getUuid()), e);\n            }\n            try {\n                Thread.sleep(waitDuration);\n            } catch (InterruptedException ie) {\n                LOGGER.warn(String.format(\"Error while waiting for uncordon Kubernetes cluster ID: %s node: %s on VM ID: %s\", kubernetesCluster.getUuid(), hostName, userVm.getUuid()), ie);\n            }\n        }\n        return false;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/utils/KubernetesClusterUtil.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"86f2b796cfd4d6758dff322ce31ae880a9c4e02b","commitMessage":"@@@CKS : More log changes from uuid to name (#4415)\n\n","date":"2020-10-27 14:45:43","modifiedFileCount":"9","status":"M","submitter":"davidjumani"}]
