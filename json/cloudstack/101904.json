[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (offeringHandle.getDomainId() == null) {\n                throw new InvalidParameterValueException(\"Unable to update public service offering by id \" + userId + \" because it is domain-admin\");\n            }\n            if (! _domainDao.isChildDomain(account.getDomainId(), offeringHandle.getDomainId() )) {\n                throw new InvalidParameterValueException(\"Unable to update service offering by another domain admin with id \" + userId);\n            }\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(\"Unable to update service offering by id \" + userId + \" because it is not root-admin or domain-admin\");\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        if (!updateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (_serviceOfferingDao.update(id, offering)) {\n            offering = _serviceOfferingDao.findById(id);\n            CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n            return offering;\n        } else {\n            return null;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2546,"groupId":"14190","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateServiceOffering","params":"(finalUpdateServiceOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (offeringHandle.getDomainId() == null) {\n                throw new InvalidParameterValueException(\"Unable to update public service offering by id \" + userId + \" because it is domain-admin\");\n            }\n            if (! _domainDao.isChildDomain(account.getDomainId(), offeringHandle.getDomainId() )) {\n                throw new InvalidParameterValueException(\"Unable to update service offering by another domain admin with id \" + userId);\n            }\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(\"Unable to update service offering by id \" + userId + \" because it is not root-admin or domain-admin\");\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        if (!updateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (_serviceOfferingDao.update(id, offering)) {\n            offering = _serviceOfferingDao.findById(id);\n            CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n            return offering;\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2462,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (diskOfferingHandle.getDomainId() == null) {\n                throw new InvalidParameterValueException(\"Unable to update public disk offering by id \" + userId + \" because it is domain-admin\");\n            }\n            if (! _domainDao.isChildDomain(account.getDomainId(), diskOfferingHandle.getDomainId() )) {\n                throw new InvalidParameterValueException(\"Unable to update disk offering by another domain admin with id \" + userId);\n            }\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(\"Unable to update disk offering by id \" + userId + \" because it is not root-admin or domain-admin\");\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null || displayDiskOffering != null;\n        if (!updateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n            return _diskOfferingDao.findById(diskOfferingId);\n        } else {\n            return null;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2797,"groupId":"14966","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDiskOffering","params":"(finalUpdateDiskOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (diskOfferingHandle.getDomainId() == null) {\n                throw new InvalidParameterValueException(\"Unable to update public disk offering by id \" + userId + \" because it is domain-admin\");\n            }\n            if (! _domainDao.isChildDomain(account.getDomainId(), diskOfferingHandle.getDomainId() )) {\n                throw new InvalidParameterValueException(\"Unable to update disk offering by another domain admin with id \" + userId);\n            }\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(\"Unable to update disk offering by id \" + userId + \" because it is not root-admin or domain-admin\");\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null || displayDiskOffering != null;\n        if (!updateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n            return _diskOfferingDao.findById(diskOfferingId);\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2709,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-07-16 17:25:35","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":2,"curCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        List<Long> existingDomainIds = _serviceOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = _serviceOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for service offering: %s by admin: %s as it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public service offering: %s by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s to a public offering by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", offeringHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", offeringHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by id user: %s because it is not root-admin or domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_serviceOfferingDao.update(id, offering)) {\n            return null;\n        }\n        List<ServiceOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<ServiceOfferingDetailsVO> sb = _serviceOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<ServiceOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (ServiceOfferingDetailsVO detailVO : detailsVO) {\n                _serviceOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        offering = _serviceOfferingDao.findById(id);\n        CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n        return offering;\n    }\n","date":"2019-07-16 17:25:35","endLine":2744,"groupId":"21664","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateServiceOffering","params":"(finalUpdateServiceOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/238b0a7255951e2e8502ab50894397ce10784e.src","preCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (offeringHandle.getDomainId() == null) {\n                throw new InvalidParameterValueException(\"Unable to update public service offering by id \" + userId + \" because it is domain-admin\");\n            }\n            if (! _domainDao.isChildDomain(account.getDomainId(), offeringHandle.getDomainId() )) {\n                throw new InvalidParameterValueException(\"Unable to update service offering by another domain admin with id \" + userId);\n            }\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(\"Unable to update service offering by id \" + userId + \" because it is not root-admin or domain-admin\");\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        if (!updateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (_serviceOfferingDao.update(id, offering)) {\n            offering = _serviceOfferingDao.findById(id);\n            CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n            return offering;\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2577,"status":"M"},{"authorDate":"2019-07-16 17:25:35","commitOrder":2,"curCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        List<Long> existingDomainIds = diskOfferingDetailsDao.findDomainIds(diskOfferingId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = diskOfferingDetailsDao.findZoneIds(diskOfferingId);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for disk offering: %s by admin: %s as it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public disk offering: %s by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s to a public offering by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", diskOfferingHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", diskOfferingHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by id user: %s because it is not root-admin or domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null || displayDiskOffering != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            return null;\n        }\n        List<DiskOfferingDetailVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<DiskOfferingDetailVO> sb = diskOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<DiskOfferingDetailVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(diskOfferingId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (DiskOfferingDetailVO detailVO : detailsVO) {\n                diskOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n        return _diskOfferingDao.findById(diskOfferingId);\n    }\n","date":"2019-07-16 17:25:35","endLine":3151,"groupId":"6513","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDiskOffering","params":"(finalUpdateDiskOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/238b0a7255951e2e8502ab50894397ce10784e.src","preCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (diskOfferingHandle.getDomainId() == null) {\n                throw new InvalidParameterValueException(\"Unable to update public disk offering by id \" + userId + \" because it is domain-admin\");\n            }\n            if (! _domainDao.isChildDomain(account.getDomainId(), diskOfferingHandle.getDomainId() )) {\n                throw new InvalidParameterValueException(\"Unable to update disk offering by another domain admin with id \" + userId);\n            }\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(\"Unable to update disk offering by id \" + userId + \" because it is not root-admin or domain-admin\");\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null || displayDiskOffering != null;\n        if (!updateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n            return _diskOfferingDao.findById(diskOfferingId);\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2980,"status":"M"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"},{"authorTime":"2020-10-16 15:22:42","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":3,"curCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        List<Long> existingDomainIds = _serviceOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = _serviceOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for service offering: %s by admin: %s as it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public service offering: %s by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s to a public offering by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", offeringHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", offeringHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by id user: %s because it is not root-admin or domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_serviceOfferingDao.update(id, offering)) {\n            return null;\n        }\n        List<ServiceOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<ServiceOfferingDetailsVO> sb = _serviceOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<ServiceOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (ServiceOfferingDetailsVO detailVO : detailsVO) {\n                _serviceOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        offering = _serviceOfferingDao.findById(id);\n        CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n        return offering;\n    }\n","date":"2019-07-16 17:25:35","endLine":2744,"groupId":"21664","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updateServiceOffering","params":"(finalUpdateServiceOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/238b0a7255951e2e8502ab50894397ce10784e.src","preCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        List<Long> existingDomainIds = _serviceOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = _serviceOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for service offering: %s by admin: %s as it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public service offering: %s by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s to a public offering by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", offeringHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", offeringHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by id user: %s because it is not root-admin or domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_serviceOfferingDao.update(id, offering)) {\n            return null;\n        }\n        List<ServiceOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<ServiceOfferingDetailsVO> sb = _serviceOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<ServiceOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (ServiceOfferingDetailsVO detailVO : detailsVO) {\n                _serviceOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        offering = _serviceOfferingDao.findById(id);\n        CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n        return offering;\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2577,"status":"N"},{"authorDate":"2020-10-16 15:22:42","commitOrder":3,"curCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n        final String tags = cmd.getTags();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        List<Long> existingDomainIds = diskOfferingDetailsDao.findDomainIds(diskOfferingId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = diskOfferingDetailsDao.findZoneIds(diskOfferingId);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for disk offering: %s by admin: %s as it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public disk offering: %s by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s to a public offering by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", diskOfferingHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", diskOfferingHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by id user: %s because it is not root-admin or domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = shouldUpdateDiskOffering(name, displayText, sortKey, displayDiskOffering, tags);\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        updateDiskOfferingTagsIfIsNotNull(tags, diskOffering);\n\n        if (updateNeeded && !_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            return null;\n        }\n        List<DiskOfferingDetailVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<DiskOfferingDetailVO> sb = diskOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<DiskOfferingDetailVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(diskOfferingId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (DiskOfferingDetailVO detailVO : detailsVO) {\n                diskOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n        return _diskOfferingDao.findById(diskOfferingId);\n    }\n","date":"2020-10-16 15:22:42","endLine":3253,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDiskOffering","params":"(finalUpdateDiskOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ac/2ff0762bc608753ec81424a982ed6990fbb46a.src","preCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        List<Long> existingDomainIds = diskOfferingDetailsDao.findDomainIds(diskOfferingId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = diskOfferingDetailsDao.findZoneIds(diskOfferingId);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for disk offering: %s by admin: %s as it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public disk offering: %s by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s to a public offering by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", diskOfferingHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", diskOfferingHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by id user: %s because it is not root-admin or domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null || displayDiskOffering != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            return null;\n        }\n        List<DiskOfferingDetailVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<DiskOfferingDetailVO> sb = diskOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<DiskOfferingDetailVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(diskOfferingId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (DiskOfferingDetailVO detailVO : detailsVO) {\n                diskOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n        return _diskOfferingDao.findById(diskOfferingId);\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3104,"status":"M"}],"commitId":"c222d0bf607efd5685f49cc24d3538f5a4722b39","commitMessage":"@@@enable update tags on disk offerings (#4194)\n\n","date":"2020-10-16 15:22:42","modifiedFileCount":"4","status":"M","submitter":"Rodrigo D. Lopez"},{"authorTime":"2020-10-24 19:00:11","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":4,"curCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        List<Long> existingDomainIds = _serviceOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = _serviceOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for service offering: %s by admin: %s as it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public service offering: %s by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s to a public offering by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", offeringHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", offeringHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by id user: %s because it is not root-admin or domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_serviceOfferingDao.update(id, offering)) {\n            return null;\n        }\n        List<ServiceOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<ServiceOfferingDetailsVO> sb = _serviceOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<ServiceOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (ServiceOfferingDetailsVO detailVO : detailsVO) {\n                _serviceOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        offering = _serviceOfferingDao.findById(id);\n        CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n        return offering;\n    }\n","date":"2019-07-16 17:25:35","endLine":2744,"groupId":"21664","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"updateServiceOffering","params":"(finalUpdateServiceOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/238b0a7255951e2e8502ab50894397ce10784e.src","preCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        List<Long> existingDomainIds = _serviceOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = _serviceOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for service offering: %s by admin: %s as it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public service offering: %s by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s to a public offering by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", offeringHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", offeringHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by id user: %s because it is not root-admin or domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_serviceOfferingDao.update(id, offering)) {\n            return null;\n        }\n        List<ServiceOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<ServiceOfferingDetailsVO> sb = _serviceOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<ServiceOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (ServiceOfferingDetailsVO detailVO : detailsVO) {\n                _serviceOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        offering = _serviceOfferingDao.findById(id);\n        CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n        return offering;\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2577,"status":"N"},{"authorDate":"2020-10-24 19:00:11","commitOrder":4,"curCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n        final String tags = cmd.getTags();\n\n        Long bytesReadRate = cmd.getBytesReadRate();\n        Long bytesReadRateMax = cmd.getBytesReadRateMax();\n        Long bytesReadRateMaxLength = cmd.getBytesReadRateMaxLength();\n        Long bytesWriteRate = cmd.getBytesWriteRate();\n        Long bytesWriteRateMax = cmd.getBytesWriteRateMax();\n        Long bytesWriteRateMaxLength = cmd.getBytesWriteRateMaxLength();\n        Long iopsReadRate = cmd.getIopsReadRate();\n        Long iopsReadRateMax = cmd.getIopsReadRateMax();\n        Long iopsReadRateMaxLength = cmd.getIopsReadRateMaxLength();\n        Long iopsWriteRate = cmd.getIopsWriteRate();\n        Long iopsWriteRateMax = cmd.getIopsWriteRateMax();\n        Long iopsWriteRateMaxLength = cmd.getIopsWriteRateMaxLength();\n        String cacheMode = cmd.getCacheMode();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        List<Long> existingDomainIds = diskOfferingDetailsDao.findDomainIds(diskOfferingId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = diskOfferingDetailsDao.findZoneIds(diskOfferingId);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for disk offering: %s by admin: %s as it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public disk offering: %s by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s to a public offering by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", diskOfferingHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", diskOfferingHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by id user: %s because it is not root-admin or domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n        }\n\n        boolean updateNeeded = shouldUpdateDiskOffering(name, displayText, sortKey, displayDiskOffering, tags, cacheMode) ||\n                shouldUpdateIopsRateParameters(iopsReadRate, iopsReadRateMax, iopsReadRateMaxLength, iopsWriteRate, iopsWriteRateMax, iopsWriteRateMaxLength) ||\n                shouldUpdateBytesRateParameters(bytesReadRate, bytesReadRateMax, bytesReadRateMaxLength, bytesWriteRate, bytesWriteRateMax, bytesWriteRateMaxLength);\n\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        updateDiskOfferingTagsIfIsNotNull(tags, diskOffering);\n\n        validateMaxRateEqualsOrGreater(iopsReadRate, iopsReadRateMax, IOPS_READ_RATE);\n        validateMaxRateEqualsOrGreater(iopsWriteRate, iopsWriteRateMax, IOPS_WRITE_RATE);\n        validateMaxRateEqualsOrGreater(bytesReadRate, bytesReadRateMax, BYTES_READ_RATE);\n        validateMaxRateEqualsOrGreater(bytesWriteRate, bytesWriteRateMax, BYTES_WRITE_RATE);\n        validateMaximumIopsAndBytesLength(iopsReadRateMaxLength, iopsWriteRateMaxLength, bytesReadRateMaxLength, bytesWriteRateMaxLength);\n\n        setBytesRate(diskOffering, bytesReadRate, bytesReadRateMax, bytesReadRateMaxLength, bytesWriteRate, bytesWriteRateMax, bytesWriteRateMaxLength);\n        setIopsRate(diskOffering, iopsReadRate, iopsReadRateMax, iopsReadRateMaxLength, iopsWriteRate, iopsWriteRateMax, iopsWriteRateMaxLength);\n\n        if (cacheMode != null) {\n            validateCacheMode(cacheMode);\n            diskOffering.setCacheMode(DiskOffering.DiskCacheMode.valueOf(cacheMode.toUpperCase()));\n        }\n\n        if (updateNeeded && !_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            return null;\n        }\n        List<DiskOfferingDetailVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<DiskOfferingDetailVO> sb = diskOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<DiskOfferingDetailVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(diskOfferingId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (DiskOfferingDetailVO detailVO : detailsVO) {\n                diskOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n        return _diskOfferingDao.findById(diskOfferingId);\n    }\n","date":"2020-10-24 19:00:11","endLine":3260,"groupId":"238","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDiskOffering","params":"(finalUpdateDiskOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/24a45a08f87786ad06a04e89f67b571deb8cca.src","preCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n        final String tags = cmd.getTags();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        List<Long> existingDomainIds = diskOfferingDetailsDao.findDomainIds(diskOfferingId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = diskOfferingDetailsDao.findZoneIds(diskOfferingId);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for disk offering: %s by admin: %s as it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public disk offering: %s by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s to a public offering by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", diskOfferingHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", diskOfferingHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by id user: %s because it is not root-admin or domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = shouldUpdateDiskOffering(name, displayText, sortKey, displayDiskOffering, tags);\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        updateDiskOfferingTagsIfIsNotNull(tags, diskOffering);\n\n        if (updateNeeded && !_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            return null;\n        }\n        List<DiskOfferingDetailVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<DiskOfferingDetailVO> sb = diskOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<DiskOfferingDetailVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(diskOfferingId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (DiskOfferingDetailVO detailVO : detailsVO) {\n                diskOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n        return _diskOfferingDao.findById(diskOfferingId);\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3080,"status":"M"}],"commitId":"f4f35a8995a044446883e8e41c5a5de014e27581","commitMessage":"@@@Enhance UpdateDiskOfferingCmd (#4409)\n\n","date":"2020-10-24 19:00:11","modifiedFileCount":"3","status":"M","submitter":"Gabriel Beims Br?scher"},{"authorTime":"2021-08-02 21:48:07","codes":[{"authorDate":"2021-08-02 21:48:07","commitOrder":5,"curCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n        String storageTags = cmd.getStorageTags();\n        String hostTags = cmd.getHostTags();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        List<Long> existingDomainIds = _serviceOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = _serviceOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for service offering: %s by admin: %s as it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public service offering: %s by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s to a public offering by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", offeringHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", offeringHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by id user: %s because it is not root-admin or domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null || storageTags != null || hostTags != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        updateOfferingTagsIfIsNotNull(storageTags, offering);\n\n        updateServiceOfferingHostTagsIfNotNull(hostTags, offering);\n\n        if (updateNeeded && !_serviceOfferingDao.update(id, offering)) {\n            return null;\n        }\n        List<ServiceOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<ServiceOfferingDetailsVO> sb = _serviceOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<ServiceOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (ServiceOfferingDetailsVO detailVO : detailsVO) {\n                _serviceOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        offering = _serviceOfferingDao.findById(id);\n        CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n        return offering;\n    }\n","date":"2021-08-02 21:48:07","endLine":2857,"groupId":"101904","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"updateServiceOffering","params":"(finalUpdateServiceOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d0/6f7481710f4f7a8f8753d59f73d3fe8c28ddac.src","preCode":"    public ServiceOffering updateServiceOffering(final UpdateServiceOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getServiceOfferingName();\n        final Integer sortKey = cmd.getSortKey();\n        Long userId = CallContext.current().getCallingUserId();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n\n        \r\n        final ServiceOffering offeringHandle = _entityMgr.findById(ServiceOffering.class, id);\n        if (offeringHandle == null) {\n            throw new InvalidParameterValueException(\"unable to find service offering \" + id);\n        }\n\n        List<Long> existingDomainIds = _serviceOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = _serviceOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for service offering: %s by admin: %s as it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public service offering: %s by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s to a public offering by user: %s because it is domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", offeringHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", offeringHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update service offering: %s by id user: %s because it is not root-admin or domain-admin\", offeringHandle.getUuid(), user.getUuid()));\n        }\n\n        final boolean updateNeeded = name != null || displayText != null || sortKey != null;\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _serviceOfferingDao.findById(id);\n        }\n\n        ServiceOfferingVO offering = _serviceOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        if (updateNeeded && !_serviceOfferingDao.update(id, offering)) {\n            return null;\n        }\n        List<ServiceOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<ServiceOfferingDetailsVO> sb = _serviceOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<ServiceOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                _serviceOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new ServiceOfferingDetailsVO(id, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (ServiceOfferingDetailsVO detailVO : detailsVO) {\n                _serviceOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        offering = _serviceOfferingDao.findById(id);\n        CallContext.current().setEventDetails(\"Service offering id=\" + offering.getId());\n        return offering;\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2708,"status":"M"},{"authorDate":"2021-08-02 21:48:07","commitOrder":5,"curCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n        final String tags = cmd.getTags();\n\n        Long bytesReadRate = cmd.getBytesReadRate();\n        Long bytesReadRateMax = cmd.getBytesReadRateMax();\n        Long bytesReadRateMaxLength = cmd.getBytesReadRateMaxLength();\n        Long bytesWriteRate = cmd.getBytesWriteRate();\n        Long bytesWriteRateMax = cmd.getBytesWriteRateMax();\n        Long bytesWriteRateMaxLength = cmd.getBytesWriteRateMaxLength();\n        Long iopsReadRate = cmd.getIopsReadRate();\n        Long iopsReadRateMax = cmd.getIopsReadRateMax();\n        Long iopsReadRateMaxLength = cmd.getIopsReadRateMaxLength();\n        Long iopsWriteRate = cmd.getIopsWriteRate();\n        Long iopsWriteRateMax = cmd.getIopsWriteRateMax();\n        Long iopsWriteRateMaxLength = cmd.getIopsWriteRateMaxLength();\n        String cacheMode = cmd.getCacheMode();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        List<Long> existingDomainIds = diskOfferingDetailsDao.findDomainIds(diskOfferingId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = diskOfferingDetailsDao.findZoneIds(diskOfferingId);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for disk offering: %s by admin: %s as it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public disk offering: %s by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s to a public offering by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", diskOfferingHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", diskOfferingHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by id user: %s because it is not root-admin or domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n        }\n\n        boolean updateNeeded = shouldUpdateDiskOffering(name, displayText, sortKey, displayDiskOffering, tags, cacheMode) ||\n                shouldUpdateIopsRateParameters(iopsReadRate, iopsReadRateMax, iopsReadRateMaxLength, iopsWriteRate, iopsWriteRateMax, iopsWriteRateMaxLength) ||\n                shouldUpdateBytesRateParameters(bytesReadRate, bytesReadRateMax, bytesReadRateMaxLength, bytesWriteRate, bytesWriteRateMax, bytesWriteRateMaxLength);\n\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        updateOfferingTagsIfIsNotNull(tags, diskOffering);\n\n        validateMaxRateEqualsOrGreater(iopsReadRate, iopsReadRateMax, IOPS_READ_RATE);\n        validateMaxRateEqualsOrGreater(iopsWriteRate, iopsWriteRateMax, IOPS_WRITE_RATE);\n        validateMaxRateEqualsOrGreater(bytesReadRate, bytesReadRateMax, BYTES_READ_RATE);\n        validateMaxRateEqualsOrGreater(bytesWriteRate, bytesWriteRateMax, BYTES_WRITE_RATE);\n        validateMaximumIopsAndBytesLength(iopsReadRateMaxLength, iopsWriteRateMaxLength, bytesReadRateMaxLength, bytesWriteRateMaxLength);\n\n        setBytesRate(diskOffering, bytesReadRate, bytesReadRateMax, bytesReadRateMaxLength, bytesWriteRate, bytesWriteRateMax, bytesWriteRateMaxLength);\n        setIopsRate(diskOffering, iopsReadRate, iopsReadRateMax, iopsReadRateMaxLength, iopsWriteRate, iopsWriteRateMax, iopsWriteRateMaxLength);\n\n        if (cacheMode != null) {\n            validateCacheMode(cacheMode);\n            diskOffering.setCacheMode(DiskOffering.DiskCacheMode.valueOf(cacheMode.toUpperCase()));\n        }\n\n        if (updateNeeded && !_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            return null;\n        }\n        List<DiskOfferingDetailVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<DiskOfferingDetailVO> sb = diskOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<DiskOfferingDetailVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(diskOfferingId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (DiskOfferingDetailVO detailVO : detailsVO) {\n                diskOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n        return _diskOfferingDao.findById(diskOfferingId);\n    }\n","date":"2021-08-02 21:48:07","endLine":3325,"groupId":"101904","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDiskOffering","params":"(finalUpdateDiskOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d0/6f7481710f4f7a8f8753d59f73d3fe8c28ddac.src","preCode":"    public DiskOffering updateDiskOffering(final UpdateDiskOfferingCmd cmd) {\n        final Long diskOfferingId = cmd.getId();\n        final String name = cmd.getDiskOfferingName();\n        final String displayText = cmd.getDisplayText();\n        final Integer sortKey = cmd.getSortKey();\n        final Boolean displayDiskOffering = cmd.getDisplayOffering();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n        final String tags = cmd.getTags();\n\n        Long bytesReadRate = cmd.getBytesReadRate();\n        Long bytesReadRateMax = cmd.getBytesReadRateMax();\n        Long bytesReadRateMaxLength = cmd.getBytesReadRateMaxLength();\n        Long bytesWriteRate = cmd.getBytesWriteRate();\n        Long bytesWriteRateMax = cmd.getBytesWriteRateMax();\n        Long bytesWriteRateMaxLength = cmd.getBytesWriteRateMaxLength();\n        Long iopsReadRate = cmd.getIopsReadRate();\n        Long iopsReadRateMax = cmd.getIopsReadRateMax();\n        Long iopsReadRateMaxLength = cmd.getIopsReadRateMaxLength();\n        Long iopsWriteRate = cmd.getIopsWriteRate();\n        Long iopsWriteRateMax = cmd.getIopsWriteRateMax();\n        Long iopsWriteRateMaxLength = cmd.getIopsWriteRateMaxLength();\n        String cacheMode = cmd.getCacheMode();\n\n        \r\n        final DiskOffering diskOfferingHandle = _entityMgr.findById(DiskOffering.class, diskOfferingId);\n        if (diskOfferingHandle == null) {\n            throw new InvalidParameterValueException(\"Unable to find disk offering by id \" + diskOfferingId);\n        }\n\n        List<Long> existingDomainIds = diskOfferingDetailsDao.findDomainIds(diskOfferingId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = diskOfferingDetailsDao.findZoneIds(diskOfferingId);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        Long userId = CallContext.current().getCallingUserId();\n        if (userId == null) {\n            userId = Long.valueOf(User.UID_SYSTEM);\n        }\n        final User user = _userDao.findById(userId);\n        if (user == null || user.getRemoved() != null) {\n            throw new InvalidParameterValueException(\"Unable to find active user by id \" + userId);\n        }\n        final Account account = _accountDao.findById(user.getAccountId());\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {\n            if (!filteredZoneIds.equals(existingZoneIds)) { \r\n                throw new InvalidParameterValueException(String.format(\"Unable to update zone(s) for disk offering: %s by admin: %s as it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            }\n            if (existingDomainIds.isEmpty()) {\n                throw new InvalidParameterValueException(String.format(\"Unable to update public disk offering: %s by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n            } else {\n                if (filteredDomainIds.isEmpty()) {\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s to a public offering by user: %s because it is domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n                }\n            }\n            List<Long> nonChildDomains = new ArrayList<>();\n            for (Long domainId : existingDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    if (name != null || displayText != null || sortKey != null) { \r\n                        throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s as it has linked domain(s) which are not child domain for domain-admin: %s\", diskOfferingHandle.getUuid(), user.getUuid()));\n                    }\n                    nonChildDomains.add(domainId);\n                }\n            }\n            for (Long domainId : filteredDomainIds) {\n                if (!_domainDao.isChildDomain(account.getDomainId(), domainId)) {\n                    Domain domain = _entityMgr.findById(Domain.class, domainId);\n                    throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by domain-admin: %s with domain: %3$s which is not a child domain\", diskOfferingHandle.getUuid(), user.getUuid(), domain.getUuid()));\n                }\n            }\n            filteredDomainIds.addAll(nonChildDomains); \r\n        } else if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {\n            throw new InvalidParameterValueException(String.format(\"Unable to update disk offering: %s by id user: %s because it is not root-admin or domain-admin\", diskOfferingHandle.getUuid(), user.getUuid()));\n        }\n\n        boolean updateNeeded = shouldUpdateDiskOffering(name, displayText, sortKey, displayDiskOffering, tags, cacheMode) ||\n                shouldUpdateIopsRateParameters(iopsReadRate, iopsReadRateMax, iopsReadRateMaxLength, iopsWriteRate, iopsWriteRateMax, iopsWriteRateMaxLength) ||\n                shouldUpdateBytesRateParameters(bytesReadRate, bytesReadRateMax, bytesReadRateMaxLength, bytesWriteRate, bytesWriteRateMax, bytesWriteRateMaxLength);\n\n        final boolean detailsUpdateNeeded = !filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds);\n        if (!updateNeeded && !detailsUpdateNeeded) {\n            return _diskOfferingDao.findById(diskOfferingId);\n        }\n\n        final DiskOfferingVO diskOffering = _diskOfferingDao.createForUpdate(diskOfferingId);\n\n        if (name != null) {\n            diskOffering.setName(name);\n        }\n\n        if (displayText != null) {\n            diskOffering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            diskOffering.setSortKey(sortKey);\n        }\n\n        if (displayDiskOffering != null) {\n            diskOffering.setDisplayOffering(displayDiskOffering);\n        }\n\n        updateDiskOfferingTagsIfIsNotNull(tags, diskOffering);\n\n        validateMaxRateEqualsOrGreater(iopsReadRate, iopsReadRateMax, IOPS_READ_RATE);\n        validateMaxRateEqualsOrGreater(iopsWriteRate, iopsWriteRateMax, IOPS_WRITE_RATE);\n        validateMaxRateEqualsOrGreater(bytesReadRate, bytesReadRateMax, BYTES_READ_RATE);\n        validateMaxRateEqualsOrGreater(bytesWriteRate, bytesWriteRateMax, BYTES_WRITE_RATE);\n        validateMaximumIopsAndBytesLength(iopsReadRateMaxLength, iopsWriteRateMaxLength, bytesReadRateMaxLength, bytesWriteRateMaxLength);\n\n        setBytesRate(diskOffering, bytesReadRate, bytesReadRateMax, bytesReadRateMaxLength, bytesWriteRate, bytesWriteRateMax, bytesWriteRateMaxLength);\n        setIopsRate(diskOffering, iopsReadRate, iopsReadRateMax, iopsReadRateMaxLength, iopsWriteRate, iopsWriteRateMax, iopsWriteRateMaxLength);\n\n        if (cacheMode != null) {\n            validateCacheMode(cacheMode);\n            diskOffering.setCacheMode(DiskOffering.DiskCacheMode.valueOf(cacheMode.toUpperCase()));\n        }\n\n        if (updateNeeded && !_diskOfferingDao.update(diskOfferingId, diskOffering)) {\n            return null;\n        }\n        List<DiskOfferingDetailVO> detailsVO = new ArrayList<>();\n        if(detailsUpdateNeeded) {\n            SearchBuilder<DiskOfferingDetailVO> sb = diskOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<DiskOfferingDetailVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(diskOfferingId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                diskOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new DiskOfferingDetailVO(diskOfferingId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (DiskOfferingDetailVO detailVO : detailsVO) {\n                diskOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        CallContext.current().setEventDetails(\"Disk offering id=\" + diskOffering.getId());\n        return _diskOfferingDao.findById(diskOfferingId);\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3145,"status":"M"}],"commitId":"d6a77a72f00d01e82b536c2b9d43c00690ee96fd","commitMessage":"@@@Allow updating the storage/host tags of service offerings (#5043)\n\n","date":"2021-08-02 21:48:07","modifiedFileCount":"9","status":"M","submitter":"slavkap"}]
