[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"        public VmJobVMSnapshotOutcome(final AsyncJob job, final long vmSnapshotId) {\n            super(VMSnapshot.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS)\n                        return true;\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _vmSnapshotId = vmSnapshotId;\n        }\n","date":"2018-01-20 05:49:27","endLine":1036,"groupId":"17067","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"VmJobVMSnapshotOutcome","params":"(finalAsyncJobjob@finallongvmSnapshotId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/42faca6583e4cf6e24c98b2ce7573d735752d7.src","preCode":"        public VmJobVMSnapshotOutcome(final AsyncJob job, final long vmSnapshotId) {\n            super(VMSnapshot.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS)\n                        return true;\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _vmSnapshotId = vmSnapshotId;\n        }\n","realPath":"server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1023,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"        public VmJobVolumeOutcome(final AsyncJob job, final long volumeId) {\n            super(Volume.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS)\n                        return true;\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _volumeId = volumeId;\n        }\n","date":"2018-01-20 05:49:27","endLine":2882,"groupId":"17067","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"VmJobVolumeOutcome","params":"(finalAsyncJobjob@finallongvolumeId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/be/a9b4ad5bfb40d1fc2f11f88b454aac2e518b50.src","preCode":"        public VmJobVolumeOutcome(final AsyncJob job, final long volumeId) {\n            super(Volume.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS)\n                        return true;\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _volumeId = volumeId;\n        }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2869,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-03-08 05:23:15","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"        public VmJobVMSnapshotOutcome(final AsyncJob job, final long vmSnapshotId) {\n            super(VMSnapshot.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS)\n                        return true;\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _vmSnapshotId = vmSnapshotId;\n        }\n","date":"2018-01-20 05:49:27","endLine":1036,"groupId":"101327","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"VmJobVMSnapshotOutcome","params":"(finalAsyncJobjob@finallongvmSnapshotId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/42faca6583e4cf6e24c98b2ce7573d735752d7.src","preCode":"        public VmJobVMSnapshotOutcome(final AsyncJob job, final long vmSnapshotId) {\n            super(VMSnapshot.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS)\n                        return true;\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _vmSnapshotId = vmSnapshotId;\n        }\n","realPath":"server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1023,"status":"N"},{"authorDate":"2018-03-08 05:23:15","commitOrder":2,"curCode":"        public VmJobVolumeOutcome(final AsyncJob job, final long volumeId) {\n            super(Volume.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS) {\n                        return true;\n                    }\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _volumeId = volumeId;\n        }\n","date":"2018-03-08 05:23:15","endLine":2856,"groupId":"101327","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"VmJobVolumeOutcome","params":"(finalAsyncJobjob@finallongvolumeId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2a/c317c660f92cd8faf2e626aa2c6ec95a6b3a4b.src","preCode":"        public VmJobVolumeOutcome(final AsyncJob job, final long volumeId) {\n            super(Volume.class, job, VmJobCheckInterval.value(), new Predicate() {\n                @Override\n                public boolean checkCondition() {\n                    AsyncJobVO jobVo = _entityMgr.findById(AsyncJobVO.class, job.getId());\n                    assert (jobVo != null);\n                    if (jobVo == null || jobVo.getStatus() != JobInfo.Status.IN_PROGRESS)\n                        return true;\n\n                    return false;\n                }\n            }, AsyncJob.Topics.JOB_STATE);\n            _volumeId = volumeId;\n        }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2842,"status":"M"}],"commitId":"f2efbcececb3cfb06a51e5d3a2e77417c19c667f","commitMessage":"@@@[CLOUDSTACK-10240] ACS cannot migrate a local volume to shared storage (#2425)\n\n* [CLOUDSTACK-10240] ACS cannot migrate a volume from local to shared storage.\n\nCloudStack is logically restricting the migration of local storages to shared storage and vice versa. This restriction is a logical one and can be removed for XenServer deployments. Therefore.  we will enable migration of volumes between local-shared storages in XenServers independently of their service offering. This will work as an override mechanism to the disk offering used by volumes. If administrators want to migrate local volumes to a shared storage.  they should be able to do so (the hypervisor already allows that). The same the other way around.\n\n* Cleanups implemented while working on [CLOUDSTACK-10240]\n\n* Fix test case test_03_migrate_options_storage_tags\n\nThe changes applied were:\n- When loading hypervisors capabilities we must use \"default\" instead of nulls\n- \"Enable\" storage migration for simulator hypervisor\n- Remove restriction on \"ClusterScopeStoragePoolAllocator\" to find shared pools\n","date":"2018-03-08 05:23:15","modifiedFileCount":"10","status":"M","submitter":"Rafael Weing?rtner"}]
