[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Map<String, UsageVmDiskVO> getRecentVmDiskStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageVmDiskVO> returnMap = new HashMap<String, UsageVmDiskVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long vmId = rs.getLong(3);\n                Long volumeId = rs.getLong(4);\n                long ioRead = rs.getLong(5);\n                long ioWrite = rs.getLong(6);\n                long aggIORead = rs.getLong(7);\n                long aggIOWrite = rs.getLong(8);\n                long bytesRead = rs.getLong(9);\n                long bytesWrite = rs.getLong(10);\n                long aggBytesRead = rs.getLong(11);\n                long aggBytesWrite = rs.getLong(12);\n                long eventTimeMillis = rs.getLong(13);\n                if (vmId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Vm-\" + vmId + \"-Disk-\" + volumeId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite,\n                        aggIORead, aggIOWrite, bytesRead, bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite, aggIORead, aggIOWrite, bytesRead,\n                        bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage disk stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":89,"groupId":"7106","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"getRecentVmDiskStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2b/934770b7dec6750bf0c2b5b0b8e005f304f32a.src","preCode":"    public Map<String, UsageVmDiskVO> getRecentVmDiskStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageVmDiskVO> returnMap = new HashMap<String, UsageVmDiskVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long vmId = rs.getLong(3);\n                Long volumeId = rs.getLong(4);\n                long ioRead = rs.getLong(5);\n                long ioWrite = rs.getLong(6);\n                long aggIORead = rs.getLong(7);\n                long aggIOWrite = rs.getLong(8);\n                long bytesRead = rs.getLong(9);\n                long bytesWrite = rs.getLong(10);\n                long aggBytesRead = rs.getLong(11);\n                long aggBytesWrite = rs.getLong(12);\n                long eventTimeMillis = rs.getLong(13);\n                if (vmId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Vm-\" + vmId + \"-Disk-\" + volumeId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite,\n                        aggIORead, aggIOWrite, bytesRead, bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite, aggIORead, aggIOWrite, bytesRead,\n                        bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage disk stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/usage/dao/UsageVmDiskDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Map<String, UsageNetworkVO> getRecentNetworkStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageNetworkVO> returnMap = new HashMap<String, UsageNetworkVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                Long hostId = rs.getLong(3);\n                String hostType = rs.getString(4);\n                Long networkId = rs.getLong(5);\n                long bytesSent = rs.getLong(6);\n                long bytesReceived = rs.getLong(7);\n                long aggBytesReceived = rs.getLong(8);\n                long aggBytesSent = rs.getLong(9);\n                long eventTimeMillis = rs.getLong(10);\n                if (hostId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Host-\" + hostId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent,\n                        bytesReceived, aggBytesReceived, aggBytesSent, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent, bytesReceived,\n                        aggBytesReceived, aggBytesSent, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage network stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":85,"groupId":"1676","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRecentNetworkStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/22e1f0aa55507dbe2cbfc9b07f10843fa713cc.src","preCode":"    public Map<String, UsageNetworkVO> getRecentNetworkStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageNetworkVO> returnMap = new HashMap<String, UsageNetworkVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                Long hostId = rs.getLong(3);\n                String hostType = rs.getString(4);\n                Long networkId = rs.getLong(5);\n                long bytesSent = rs.getLong(6);\n                long bytesReceived = rs.getLong(7);\n                long aggBytesReceived = rs.getLong(8);\n                long aggBytesSent = rs.getLong(9);\n                long eventTimeMillis = rs.getLong(10);\n                if (hostId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Host-\" + hostId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent,\n                        bytesReceived, aggBytesReceived, aggBytesSent, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent, bytesReceived,\n                        aggBytesReceived, aggBytesSent, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage network stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/usage/dao/UsageNetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2021-09-15 10:54:34","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Map<String, UsageVmDiskVO> getRecentVmDiskStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageVmDiskVO> returnMap = new HashMap<String, UsageVmDiskVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long vmId = rs.getLong(3);\n                Long volumeId = rs.getLong(4);\n                long ioRead = rs.getLong(5);\n                long ioWrite = rs.getLong(6);\n                long aggIORead = rs.getLong(7);\n                long aggIOWrite = rs.getLong(8);\n                long bytesRead = rs.getLong(9);\n                long bytesWrite = rs.getLong(10);\n                long aggBytesRead = rs.getLong(11);\n                long aggBytesWrite = rs.getLong(12);\n                long eventTimeMillis = rs.getLong(13);\n                if (vmId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Vm-\" + vmId + \"-Disk-\" + volumeId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite,\n                        aggIORead, aggIOWrite, bytesRead, bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite, aggIORead, aggIOWrite, bytesRead,\n                        bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage disk stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":89,"groupId":"10116","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getRecentVmDiskStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2b/934770b7dec6750bf0c2b5b0b8e005f304f32a.src","preCode":"    public Map<String, UsageVmDiskVO> getRecentVmDiskStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageVmDiskVO> returnMap = new HashMap<String, UsageVmDiskVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                long vmId = rs.getLong(3);\n                Long volumeId = rs.getLong(4);\n                long ioRead = rs.getLong(5);\n                long ioWrite = rs.getLong(6);\n                long aggIORead = rs.getLong(7);\n                long aggIOWrite = rs.getLong(8);\n                long bytesRead = rs.getLong(9);\n                long bytesWrite = rs.getLong(10);\n                long aggBytesRead = rs.getLong(11);\n                long aggBytesWrite = rs.getLong(12);\n                long eventTimeMillis = rs.getLong(13);\n                if (vmId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Vm-\" + vmId + \"-Disk-\" + volumeId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite,\n                        aggIORead, aggIOWrite, bytesRead, bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageVmDiskVO(accountId, zoneId, vmId, volumeId, ioRead, ioWrite, aggIORead, aggIOWrite, bytesRead,\n                        bytesWrite, aggBytesRead, aggBytesWrite, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage disk stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/usage/dao/UsageVmDiskDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2021-09-15 10:54:34","commitOrder":2,"curCode":"    public Map<String, UsageNetworkVO> getRecentNetworkStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageNetworkVO> returnMap = new HashMap<String, UsageNetworkVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                Long hostId = rs.getLong(3);\n                String hostType = rs.getString(4);\n                Long networkId = rs.getLong(5);\n                long bytesSent = rs.getLong(6);\n                long bytesReceived = rs.getLong(7);\n                long aggBytesReceived = rs.getLong(8);\n                long aggBytesSent = rs.getLong(9);\n                long eventTimeMillis = rs.getLong(10);\n                if (hostId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Host-\" + hostId + \"-Network-\" + networkId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent,\n                        bytesReceived, aggBytesReceived, aggBytesSent, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent, bytesReceived,\n                        aggBytesReceived, aggBytesSent, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage network stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","date":"2021-09-15 10:54:34","endLine":85,"groupId":"10116","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getRecentNetworkStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b0/ff29102411400c0c0b7e004e98f3231490f0d7.src","preCode":"    public Map<String, UsageNetworkVO> getRecentNetworkStats() {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        String sql = SELECT_LATEST_STATS;\n        PreparedStatement pstmt = null;\n        try {\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            Map<String, UsageNetworkVO> returnMap = new HashMap<String, UsageNetworkVO>();\n            while (rs.next()) {\n                long accountId = rs.getLong(1);\n                long zoneId = rs.getLong(2);\n                Long hostId = rs.getLong(3);\n                String hostType = rs.getString(4);\n                Long networkId = rs.getLong(5);\n                long bytesSent = rs.getLong(6);\n                long bytesReceived = rs.getLong(7);\n                long aggBytesReceived = rs.getLong(8);\n                long aggBytesSent = rs.getLong(9);\n                long eventTimeMillis = rs.getLong(10);\n                if (hostId != 0) {\n                    returnMap.put(zoneId + \"-\" + accountId + \"-Host-\" + hostId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent,\n                        bytesReceived, aggBytesReceived, aggBytesSent, eventTimeMillis));\n                } else {\n                    returnMap.put(zoneId + \"-\" + accountId, new UsageNetworkVO(accountId, zoneId, hostId, hostType, networkId, bytesSent, bytesReceived,\n                        aggBytesReceived, aggBytesSent, eventTimeMillis));\n                }\n            }\n            return returnMap;\n        } catch (Exception ex) {\n            s_logger.error(\"error getting recent usage network stats\", ex);\n        } finally {\n            txn.close();\n        }\n        return null;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/usage/dao/UsageNetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"3c2360c9d28fab1f9092dd5f275231427716937d","commitMessage":"@@@VM has wrong network statistics with multiple nics in shared networks (#4741)\n\nIf vm has multiple nics belonging to different shared networks then\nwrong statistics will be collected since network id is not considred\nas primary key. Make the change so that primary key contains network\nid so that traffic belonging to that corresponding network is shown\n\nIf network id is not added to primary key then all the traffic of all\nshared networks will show up in one nic.\n\nCo-authored-by: Rakesh Venkatesh <rakeshv@apache.org>","date":"2021-09-15 10:54:34","modifiedFileCount":"3","status":"M","submitter":"Rakesh"}]
