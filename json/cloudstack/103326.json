[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = _storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            final KVMPhysicalDisk primaryVol = _storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, 0);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                _storagePoolMgr.deleteStoragePool(secondaryPool.getType(), secondaryPool.getUuid());\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1571,"groupId":"2055","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"templateToPrimaryDownload","params":"(finalStringtemplateUrl@finalKVMStoragePoolprimaryPool@finalStringvolUuid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    public KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = _storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            final KVMPhysicalDisk primaryVol = _storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, 0);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                _storagePoolMgr.deleteStoragePool(secondaryPool.getType(), secondaryPool.getUuid());\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1525,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid, final Long size, final int timeout) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            if (size > templateVol.getSize()) {\n                s_logger.debug(\"Overriding provided template's size with new size \" + size);\n                templateVol.setSize(size);\n                templateVol.setVirtualSize(size);\n            } else {\n                s_logger.debug(\"Using templates disk size of \" + templateVol.getVirtualSize() + \"since size passed was \" + size);\n            }\n\n            final KVMPhysicalDisk primaryVol = storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, timeout);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                secondaryPool.delete();\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":350,"groupId":"2055","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"templateToPrimaryDownload","params":"(finalStringtemplateUrl@finalKVMStoragePoolprimaryPool@finalStringvolUuid@finalLongsize@finalinttimeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    private KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid, final Long size, final int timeout) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            if (size > templateVol.getSize()) {\n                s_logger.debug(\"Overriding provided template's size with new size \" + size);\n                templateVol.setSize(size);\n                templateVol.setVirtualSize(size);\n            } else {\n                s_logger.debug(\"Using templates disk size of \" + templateVol.getVirtualSize() + \"since size passed was \" + size);\n            }\n\n            final KVMPhysicalDisk primaryVol = storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, timeout);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                secondaryPool.delete();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-08-13 18:25:16","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = _storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            final KVMPhysicalDisk primaryVol = _storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, 0);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                _storagePoolMgr.deleteStoragePool(secondaryPool.getType(), secondaryPool.getUuid());\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1571,"groupId":"103326","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"templateToPrimaryDownload","params":"(finalStringtemplateUrl@finalKVMStoragePoolprimaryPool@finalStringvolUuid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    public KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = _storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            final KVMPhysicalDisk primaryVol = _storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, 0);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                _storagePoolMgr.deleteStoragePool(secondaryPool.getType(), secondaryPool.getUuid());\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1525,"status":"N"},{"authorDate":"2020-08-13 18:25:16","commitOrder":2,"curCode":"    private KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid, final Long size, final int timeout) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            if (size > templateVol.getSize()) {\n                s_logger.debug(\"Overriding provided template's size with new size \" + toHumanReadableSize(size));\n                templateVol.setSize(size);\n                templateVol.setVirtualSize(size);\n            } else {\n                s_logger.debug(\"Using templates disk size of \" + toHumanReadableSize(templateVol.getVirtualSize()) + \"since size passed was \" + toHumanReadableSize(size));\n            }\n\n            final KVMPhysicalDisk primaryVol = storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, timeout);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                secondaryPool.delete();\n            }\n        }\n    }\n","date":"2020-08-13 18:25:16","endLine":361,"groupId":"103326","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"templateToPrimaryDownload","params":"(finalStringtemplateUrl@finalKVMStoragePoolprimaryPool@finalStringvolUuid@finalLongsize@finalinttimeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/92ff22204db8ca6c02065f28b0eee4d110f003.src","preCode":"    private KVMPhysicalDisk templateToPrimaryDownload(final String templateUrl, final KVMStoragePool primaryPool, final String volUuid, final Long size, final int timeout) {\n        final int index = templateUrl.lastIndexOf(\"/\");\n        final String mountpoint = templateUrl.substring(0, index);\n        String templateName = null;\n        if (index < templateUrl.length() - 1) {\n            templateName = templateUrl.substring(index + 1);\n        }\n\n        KVMPhysicalDisk templateVol = null;\n        KVMStoragePool secondaryPool = null;\n        try {\n            secondaryPool = storagePoolMgr.getStoragePoolByURI(mountpoint);\n            \n            if (templateName == null) {\n                secondaryPool.refresh();\n                final List<KVMPhysicalDisk> disks = secondaryPool.listPhysicalDisks();\n                if (disks == null || disks.isEmpty()) {\n                    s_logger.error(\"Failed to get volumes from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n                for (final KVMPhysicalDisk disk : disks) {\n                    if (disk.getName().endsWith(\"qcow2\")) {\n                        templateVol = disk;\n                        break;\n                    }\n                }\n                if (templateVol == null) {\n                    s_logger.error(\"Failed to get template from pool: \" + secondaryPool.getUuid());\n                    return null;\n                }\n            } else {\n                templateVol = secondaryPool.getPhysicalDisk(templateName);\n            }\n\n            \n\n            if (size > templateVol.getSize()) {\n                s_logger.debug(\"Overriding provided template's size with new size \" + size);\n                templateVol.setSize(size);\n                templateVol.setVirtualSize(size);\n            } else {\n                s_logger.debug(\"Using templates disk size of \" + templateVol.getVirtualSize() + \"since size passed was \" + size);\n            }\n\n            final KVMPhysicalDisk primaryVol = storagePoolMgr.copyPhysicalDisk(templateVol, volUuid, primaryPool, timeout);\n            return primaryVol;\n        } catch (final CloudRuntimeException e) {\n            s_logger.error(\"Failed to download template to primary storage\", e);\n            return null;\n        } finally {\n            if (secondaryPool != null) {\n                secondaryPool.delete();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"b586eb22f1b31f3cab2f2cb1aaeafca4f4646abd","commitMessage":"@@@Human readable sizes in logs (#4207)\n\nThis PR adds outputting human readable byte sizes in the management server logs.  agent logs.  and usage records. A non-dynamic global variable is added (display.human.readable.sizes) to control switching this feature on and off. This setting is sent to the agent on connection and is only read from the database when the management server is started up. The setting is kept in memory by the use of a static field on the NumbersUtil class and is available throughout the codebase.\n\nInstead of seeing things like:\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"106496\". \"bytesReceived\":\"0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nThe KB MB and GB values will be printed out:\n\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"(104.00 KB) 106496\". \"bytesReceived\":\"(0 bytes) 0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Human+Readable+Byte+sizes","date":"2020-08-13 18:25:16","modifiedFileCount":"55","status":"M","submitter":"Spaceman1984"}]
