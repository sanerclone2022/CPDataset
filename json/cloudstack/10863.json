[{"authorTime":"2018-06-06 15:11:18","codes":[{"authorDate":"2018-06-06 15:11:18","commitOrder":1,"curCode":"    public void generateAndRetrieveIsoAsBase64IsoTestIsoTooBig() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withAnyArguments().thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L + 1l).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class), Mockito.any(File.class), Mockito.any(File.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n    }\n","date":"2018-06-06 15:11:18","endLine":339,"groupId":"13009","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateAndRetrieveIsoAsBase64IsoTestIsoTooBig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/96/032738edcb97e5037d3b4289330980b2794431.src","preCode":"    public void generateAndRetrieveIsoAsBase64IsoTestIsoTooBig() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withAnyArguments().thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L + 1l).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class), Mockito.any(File.class), Mockito.any(File.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"},{"authorDate":"2018-06-06 15:11:18","commitOrder":1,"curCode":"    public void generateAndRetrieveIsoAsBase64IsoTest() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withArguments(\"tempDirName\", \"isoFileName\").thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.when(fileMock.getAbsolutePath()).thenReturn(\"absolutePath\");\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class), Mockito.any(File.class), Mockito.any(File.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n\n        InOrder inOrder = Mockito.inOrder(scriptMock);\n        inOrder.verify(scriptMock).add(\"-o\", \"absolutePath\");\n        inOrder.verify(scriptMock).add(\"-ldots\");\n        inOrder.verify(scriptMock).add(\"-allow-lowercase\");\n        inOrder.verify(scriptMock).add(\"-allow-multidot\");\n        inOrder.verify(scriptMock).add(\"-cache-inodes\");\n        inOrder.verify(scriptMock).add(\"-l\");\n        inOrder.verify(scriptMock).add(\"-quiet\");\n        inOrder.verify(scriptMock).add(\"-J\");\n        inOrder.verify(scriptMock).add(\"-r\");\n        inOrder.verify(scriptMock).add(\"-V\", \"driveLabel\");\n        inOrder.verify(scriptMock).add(\"tempDirName\");\n        inOrder.verify(scriptMock).execute();\n\n        PowerMockito.verifyStatic();\n        ConfigDriveBuilder.fileToBase64String(Mockito.any(File.class));\n\n    }\n","date":"2018-06-06 15:11:18","endLine":382,"groupId":"13009","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateAndRetrieveIsoAsBase64IsoTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/96/032738edcb97e5037d3b4289330980b2794431.src","preCode":"    public void generateAndRetrieveIsoAsBase64IsoTest() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withArguments(\"tempDirName\", \"isoFileName\").thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.when(fileMock.getAbsolutePath()).thenReturn(\"absolutePath\");\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class), Mockito.any(File.class), Mockito.any(File.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n\n        InOrder inOrder = Mockito.inOrder(scriptMock);\n        inOrder.verify(scriptMock).add(\"-o\", \"absolutePath\");\n        inOrder.verify(scriptMock).add(\"-ldots\");\n        inOrder.verify(scriptMock).add(\"-allow-lowercase\");\n        inOrder.verify(scriptMock).add(\"-allow-multidot\");\n        inOrder.verify(scriptMock).add(\"-cache-inodes\");\n        inOrder.verify(scriptMock).add(\"-l\");\n        inOrder.verify(scriptMock).add(\"-quiet\");\n        inOrder.verify(scriptMock).add(\"-J\");\n        inOrder.verify(scriptMock).add(\"-r\");\n        inOrder.verify(scriptMock).add(\"-V\", \"driveLabel\");\n        inOrder.verify(scriptMock).add(\"tempDirName\");\n        inOrder.verify(scriptMock).execute();\n\n        PowerMockito.verifyStatic();\n        ConfigDriveBuilder.fileToBase64String(Mockito.any(File.class));\n\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"B"}],"commitId":"9146d7b7a0df2867d86e3cec352c631b4826962e","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-06-06 15:11:18","modifiedFileCount":"15","status":"B","submitter":"Rohit Yadav"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void generateAndRetrieveIsoAsBase64IsoTestIsoTooBig() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withAnyArguments().thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L + 1l).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(nullable(String.class), nullable(String.class), nullable(String.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n    }\n","date":"2020-02-12 15:28:25","endLine":349,"groupId":"10863","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"generateAndRetrieveIsoAsBase64IsoTestIsoTooBig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/50/cab35e78d1ed9d909d55fbb9ed4c8a22ec2d48.src","preCode":"    public void generateAndRetrieveIsoAsBase64IsoTestIsoTooBig() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withAnyArguments().thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L + 1l).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class), Mockito.any(File.class), Mockito.any(File.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void generateAndRetrieveIsoAsBase64IsoTest() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withArguments(\"tempDirName\", \"isoFileName\").thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.when(fileMock.getAbsolutePath()).thenReturn(\"absolutePath\");\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(nullable(String.class), nullable(String.class), nullable(String.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n\n        InOrder inOrder = Mockito.inOrder(scriptMock);\n        inOrder.verify(scriptMock).add(\"-o\", \"absolutePath\");\n        inOrder.verify(scriptMock).add(\"-ldots\");\n        inOrder.verify(scriptMock).add(\"-allow-lowercase\");\n        inOrder.verify(scriptMock).add(\"-allow-multidot\");\n        inOrder.verify(scriptMock).add(\"-cache-inodes\");\n        inOrder.verify(scriptMock).add(\"-l\");\n        inOrder.verify(scriptMock).add(\"-quiet\");\n        inOrder.verify(scriptMock).add(\"-J\");\n        inOrder.verify(scriptMock).add(\"-r\");\n        inOrder.verify(scriptMock).add(\"-V\", \"driveLabel\");\n        inOrder.verify(scriptMock).add(\"tempDirName\");\n        inOrder.verify(scriptMock).execute();\n\n        PowerMockito.verifyStatic(ConfigDriveBuilder.class);\n        ConfigDriveBuilder.fileToBase64String(nullable(File.class));\n\n    }\n","date":"2020-02-12 15:28:25","endLine":392,"groupId":"10863","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"generateAndRetrieveIsoAsBase64IsoTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/50/cab35e78d1ed9d909d55fbb9ed4c8a22ec2d48.src","preCode":"    public void generateAndRetrieveIsoAsBase64IsoTest() throws Exception {\n        PowerMockito.mockStatic(File.class, Script.class, ConfigDriveBuilder.class);\n\n        File fileMock = Mockito.mock(File.class);\n        PowerMockito.whenNew(File.class).withArguments(\"tempDirName\", \"isoFileName\").thenReturn(fileMock);\n\n        Script scriptMock = Mockito.mock(Script.class);\n        PowerMockito.whenNew(Script.class).withAnyArguments().thenReturn(scriptMock);\n\n        Mockito.when(fileMock.getAbsolutePath()).thenReturn(\"absolutePath\");\n        Mockito.doReturn(StringUtils.EMPTY).when(scriptMock).execute();\n        Mockito.doReturn(64L * 1024L * 1024L).when(fileMock).length();\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class), Mockito.any(File.class), Mockito.any(File.class)).thenCallRealMethod();\n\n        Method getProgramToGenerateIsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"getProgramToGenerateIso\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, getProgramToGenerateIsoMethod).withNoArguments().thenReturn(\"/usr/bin/genisoimage\");\n\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(\"isoFileName\", \"driveLabel\", \"tempDirName\");\n\n        InOrder inOrder = Mockito.inOrder(scriptMock);\n        inOrder.verify(scriptMock).add(\"-o\", \"absolutePath\");\n        inOrder.verify(scriptMock).add(\"-ldots\");\n        inOrder.verify(scriptMock).add(\"-allow-lowercase\");\n        inOrder.verify(scriptMock).add(\"-allow-multidot\");\n        inOrder.verify(scriptMock).add(\"-cache-inodes\");\n        inOrder.verify(scriptMock).add(\"-l\");\n        inOrder.verify(scriptMock).add(\"-quiet\");\n        inOrder.verify(scriptMock).add(\"-J\");\n        inOrder.verify(scriptMock).add(\"-r\");\n        inOrder.verify(scriptMock).add(\"-V\", \"driveLabel\");\n        inOrder.verify(scriptMock).add(\"tempDirName\");\n        inOrder.verify(scriptMock).execute();\n\n        PowerMockito.verifyStatic();\n        ConfigDriveBuilder.fileToBase64String(Mockito.any(File.class));\n\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
