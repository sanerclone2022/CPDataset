[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void extractVolume(UploadVO uploadVolumeObj, DataStore secStore, VolumeVO volume, String url, Long dataCenterId, String installPath, long eventId,\n        long asyncJobId, AsyncJobManager asyncMgr) {\n\n        uploadVolumeObj.setUploadState(Upload.Status.NOT_UPLOADED);\n        _uploadDao.update(uploadVolumeObj.getId(), uploadVolumeObj);\n\n        start();\n        UploadCommand ucmd = new UploadCommand(url, volume.getId(), volume.getSize(), installPath, Type.VOLUME);\n        UploadListener ul =\n            new UploadListener(secStore, _timer, _uploadDao, uploadVolumeObj, this, ucmd, volume.getAccountId(), volume.getName(), Type.VOLUME, eventId, asyncJobId,\n                asyncMgr);\n        _listenerMap.put(uploadVolumeObj, ul);\n\n        try {\n            EndPoint ep = _epSelector.select(secStore);\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                return;\n            }\n            ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n        } catch (Exception e) {\n            s_logger.warn(\"Unable to start upload of volume \" + volume.getName() + \" from \" + secStore.getName() + \" to \" + url, e);\n            ul.setDisconnected();\n            ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":171,"groupId":"17689","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"extractVolume","params":"(UploadVOuploadVolumeObj@DataStoresecStore@VolumeVOvolume@Stringurl@LongdataCenterId@StringinstallPath@longeventId@longasyncJobId@AsyncJobManagerasyncMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e8/f2980a082c5eaa9f4a4c2e214fc7686e5de87f.src","preCode":"    public void extractVolume(UploadVO uploadVolumeObj, DataStore secStore, VolumeVO volume, String url, Long dataCenterId, String installPath, long eventId,\n        long asyncJobId, AsyncJobManager asyncMgr) {\n\n        uploadVolumeObj.setUploadState(Upload.Status.NOT_UPLOADED);\n        _uploadDao.update(uploadVolumeObj.getId(), uploadVolumeObj);\n\n        start();\n        UploadCommand ucmd = new UploadCommand(url, volume.getId(), volume.getSize(), installPath, Type.VOLUME);\n        UploadListener ul =\n            new UploadListener(secStore, _timer, _uploadDao, uploadVolumeObj, this, ucmd, volume.getAccountId(), volume.getName(), Type.VOLUME, eventId, asyncJobId,\n                asyncMgr);\n        _listenerMap.put(uploadVolumeObj, ul);\n\n        try {\n            EndPoint ep = _epSelector.select(secStore);\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                return;\n            }\n            ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n        } catch (Exception e) {\n            s_logger.warn(\"Unable to start upload of volume \" + volume.getName() + \" from \" + secStore.getName() + \" to \" + url, e);\n            ul.setDisconnected();\n            ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/upload/UploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Long extractTemplate(VMTemplateVO template, String url, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId, long asyncJobId,\n        AsyncJobManager asyncMgr) {\n\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        DataStore secStore = storeMgr.getImageStore(dataCenterId);\n\n        UploadVO uploadTemplateObj = new UploadVO(secStore.getId(), template.getId(), new Date(), Upload.Status.NOT_UPLOADED, type, url, Mode.FTP_UPLOAD);\n        _uploadDao.persist(uploadTemplateObj);\n\n        if (vmTemplateHost != null) {\n            start();\n            UploadCommand ucmd = new UploadCommand(template, url, vmTemplateHost.getInstallPath(), vmTemplateHost.getSize());\n            UploadListener ul =\n                new UploadListener(secStore, _timer, _uploadDao, uploadTemplateObj, this, ucmd, template.getAccountId(), template.getName(), type, eventId, asyncJobId,\n                    asyncMgr);\n            _listenerMap.put(uploadTemplateObj, ul);\n            try {\n                EndPoint ep = _epSelector.select(secStore);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    return null;\n                }\n                ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n            } catch (Exception e) {\n                s_logger.warn(\"Unable to start upload of \" + template.getUniqueName() + \" from \" + secStore.getName() + \" to \" + url, e);\n                ul.setDisconnected();\n                ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n            }\n            return uploadTemplateObj.getId();\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":207,"groupId":"793","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"extractTemplate","params":"(VMTemplateVOtemplate@Stringurl@TemplateDataStoreVOvmTemplateHost@LongdataCenterId@longeventId@longasyncJobId@AsyncJobManagerasyncMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e8/f2980a082c5eaa9f4a4c2e214fc7686e5de87f.src","preCode":"    public Long extractTemplate(VMTemplateVO template, String url, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId, long asyncJobId,\n        AsyncJobManager asyncMgr) {\n\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        DataStore secStore = storeMgr.getImageStore(dataCenterId);\n\n        UploadVO uploadTemplateObj = new UploadVO(secStore.getId(), template.getId(), new Date(), Upload.Status.NOT_UPLOADED, type, url, Mode.FTP_UPLOAD);\n        _uploadDao.persist(uploadTemplateObj);\n\n        if (vmTemplateHost != null) {\n            start();\n            UploadCommand ucmd = new UploadCommand(template, url, vmTemplateHost.getInstallPath(), vmTemplateHost.getSize());\n            UploadListener ul =\n                new UploadListener(secStore, _timer, _uploadDao, uploadTemplateObj, this, ucmd, template.getAccountId(), template.getName(), type, eventId, asyncJobId,\n                    asyncMgr);\n            _listenerMap.put(uploadTemplateObj, ul);\n            try {\n                EndPoint ep = _epSelector.select(secStore);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    return null;\n                }\n                ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n            } catch (Exception e) {\n                s_logger.warn(\"Unable to start upload of \" + template.getUniqueName() + \" from \" + secStore.getName() + \" to \" + url, e);\n                ul.setDisconnected();\n                ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n            }\n            return uploadTemplateObj.getId();\n        }\n        return null;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/upload/UploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-07-31 18:07:59","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void extractVolume(UploadVO uploadVolumeObj, DataStore secStore, VolumeVO volume, String url, Long dataCenterId, String installPath, long eventId,\n        long asyncJobId, AsyncJobManager asyncMgr) {\n\n        uploadVolumeObj.setUploadState(Upload.Status.NOT_UPLOADED);\n        _uploadDao.update(uploadVolumeObj.getId(), uploadVolumeObj);\n\n        start();\n        UploadCommand ucmd = new UploadCommand(url, volume.getId(), volume.getSize(), installPath, Type.VOLUME);\n        UploadListener ul =\n            new UploadListener(secStore, _timer, _uploadDao, uploadVolumeObj, this, ucmd, volume.getAccountId(), volume.getName(), Type.VOLUME, eventId, asyncJobId,\n                asyncMgr);\n        _listenerMap.put(uploadVolumeObj, ul);\n\n        try {\n            EndPoint ep = _epSelector.select(secStore);\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                return;\n            }\n            ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n        } catch (Exception e) {\n            s_logger.warn(\"Unable to start upload of volume \" + volume.getName() + \" from \" + secStore.getName() + \" to \" + url, e);\n            ul.setDisconnected();\n            ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":171,"groupId":"101973","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"extractVolume","params":"(UploadVOuploadVolumeObj@DataStoresecStore@VolumeVOvolume@Stringurl@LongdataCenterId@StringinstallPath@longeventId@longasyncJobId@AsyncJobManagerasyncMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e8/f2980a082c5eaa9f4a4c2e214fc7686e5de87f.src","preCode":"    public void extractVolume(UploadVO uploadVolumeObj, DataStore secStore, VolumeVO volume, String url, Long dataCenterId, String installPath, long eventId,\n        long asyncJobId, AsyncJobManager asyncMgr) {\n\n        uploadVolumeObj.setUploadState(Upload.Status.NOT_UPLOADED);\n        _uploadDao.update(uploadVolumeObj.getId(), uploadVolumeObj);\n\n        start();\n        UploadCommand ucmd = new UploadCommand(url, volume.getId(), volume.getSize(), installPath, Type.VOLUME);\n        UploadListener ul =\n            new UploadListener(secStore, _timer, _uploadDao, uploadVolumeObj, this, ucmd, volume.getAccountId(), volume.getName(), Type.VOLUME, eventId, asyncJobId,\n                asyncMgr);\n        _listenerMap.put(uploadVolumeObj, ul);\n\n        try {\n            EndPoint ep = _epSelector.select(secStore);\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                return;\n            }\n            ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n        } catch (Exception e) {\n            s_logger.warn(\"Unable to start upload of volume \" + volume.getName() + \" from \" + secStore.getName() + \" to \" + url, e);\n            ul.setDisconnected();\n            ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/upload/UploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"},{"authorDate":"2019-07-31 18:07:59","commitOrder":2,"curCode":"    public Long extractTemplate(VMTemplateVO template, String url, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId, long asyncJobId,\n        AsyncJobManager asyncMgr) {\n\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        DataStore secStore = storeMgr.getImageStoreWithFreeCapacity(dataCenterId);\n        if(secStore == null) {\n            s_logger.error(\"Unable to extract template, secondary storage to satisfy storage needs cannot be found!\");\n            return null;\n        }\n\n        UploadVO uploadTemplateObj = new UploadVO(secStore.getId(), template.getId(), new Date(), Upload.Status.NOT_UPLOADED, type, url, Mode.FTP_UPLOAD);\n        _uploadDao.persist(uploadTemplateObj);\n\n        if (vmTemplateHost != null) {\n            start();\n            UploadCommand ucmd = new UploadCommand(template, url, vmTemplateHost.getInstallPath(), vmTemplateHost.getSize());\n            UploadListener ul =\n                new UploadListener(secStore, _timer, _uploadDao, uploadTemplateObj, this, ucmd, template.getAccountId(), template.getName(), type, eventId, asyncJobId,\n                    asyncMgr);\n            _listenerMap.put(uploadTemplateObj, ul);\n            try {\n                EndPoint ep = _epSelector.select(secStore);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    return null;\n                }\n                ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n            } catch (Exception e) {\n                s_logger.warn(\"Unable to start upload of \" + template.getUniqueName() + \" from \" + secStore.getName() + \" to \" + url, e);\n                ul.setDisconnected();\n                ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n            }\n            return uploadTemplateObj.getId();\n        }\n        return null;\n    }\n","date":"2019-07-31 18:07:59","endLine":211,"groupId":"101973","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"extractTemplate","params":"(VMTemplateVOtemplate@Stringurl@TemplateDataStoreVOvmTemplateHost@LongdataCenterId@longeventId@longasyncJobId@AsyncJobManagerasyncMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/64/ada6dc30966c7c643e8065dc1249380a1458f4.src","preCode":"    public Long extractTemplate(VMTemplateVO template, String url, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId, long asyncJobId,\n        AsyncJobManager asyncMgr) {\n\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        DataStore secStore = storeMgr.getImageStore(dataCenterId);\n\n        UploadVO uploadTemplateObj = new UploadVO(secStore.getId(), template.getId(), new Date(), Upload.Status.NOT_UPLOADED, type, url, Mode.FTP_UPLOAD);\n        _uploadDao.persist(uploadTemplateObj);\n\n        if (vmTemplateHost != null) {\n            start();\n            UploadCommand ucmd = new UploadCommand(template, url, vmTemplateHost.getInstallPath(), vmTemplateHost.getSize());\n            UploadListener ul =\n                new UploadListener(secStore, _timer, _uploadDao, uploadTemplateObj, this, ucmd, template.getAccountId(), template.getName(), type, eventId, asyncJobId,\n                    asyncMgr);\n            _listenerMap.put(uploadTemplateObj, ul);\n            try {\n                EndPoint ep = _epSelector.select(secStore);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    return null;\n                }\n                ep.sendMessageAsync(ucmd, new UploadListener.Callback(ep.getId(), ul));\n            } catch (Exception e) {\n                s_logger.warn(\"Unable to start upload of \" + template.getUniqueName() + \" from \" + secStore.getName() + \" to \" + url, e);\n                ul.setDisconnected();\n                ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);\n            }\n            return uploadTemplateObj.getId();\n        }\n        return null;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/upload/UploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"b2db8979f2249b0b6c0d8d0dfe40e05ba9ef9649","commitMessage":"@@@server: fix for respecting secondary storage threshold limit (#3480)\n\nRetrieval of an image store using ImageStoreProviderManager has been refactored by introducing three different methods. \nDataStore getRandomImageStore(List<DataStore> imageStores);\nTo get an image store for reading purpose. Threshold capacity check will not be used here.\nDataStore getImageStoreWithFreeCapacity(List<DataStore> imageStores);\nTo get an image store for reading purpose. Threshold capacity check will be used here and the store with max free space will be returned. If no store with filled storage less than the threshold is found.  the NULL value will be returned.\nList<DataStore> listImageStoresWithFreeCapacity(List<DataStore> imageStores);\nTo get a list of image stores for writing purpose which fulfills threshold capacity check.\n\nCorrespondingly DataStoreManager methods have been refactored to return similar values for a given zone.\n\nFixes #3287 - NULL value will be returned when secondary storage is needed for writing but there is not store with free space.\nFixes #3041 - Rather than returning random secondary storage for writing.  storage with max. free space will be returned.\nFixes #3478 - For migration on VMware.  all writable secondary storage will be mounted while preparation.\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2019-07-31 18:07:59","modifiedFileCount":"21","status":"M","submitter":"Abhishek Kumar"}]
