[{"authorTime":"2015-09-02 17:25:54","codes":[{"authorDate":"2015-09-02 17:25:54","commitOrder":1,"curCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 5;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        long startTime = System.currentTimeMillis();\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","date":"2015-09-02 17:25:54","endLine":74,"groupId":"10455","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3b/13c6b9b7ddc6a819d990b6bba9a0c6345abe4a.src","preCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 5;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        long startTime = System.currentTimeMillis();\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2015-09-02 17:25:54","commitOrder":1,"curCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","date":"2015-09-02 17:25:54","endLine":94,"groupId":"8222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3b/13c6b9b7ddc6a819d990b6bba9a0c6345abe4a.src","preCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"dd9ba48efa0fceb842c707567606be28298c4488","commitMessage":"@@@Merge pull request #753 from shapeblue/master-CLOUDSTACK-8762\n\nCLOUDSTACK-8762: Check to confirm disk activity before starting a VMImplements a VM volume/disk file activity checker that checks if QCOW2 file\nhas been changed before starting the VM. This is useful as a pessimistic\napproach to save VMs that were running on faulty hosts that CloudStack could\ntry to launch on other hosts while the host was not cleanly fenced. This is\noptional and available only if you enable the settings in agent.properties\nfile.  on per-host basis.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* pr/753:\n  CLOUDSTACK-8762: Check to confirm disk activity before starting a VM\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2015-09-02 17:25:54","modifiedFileCount":"1","status":"B","submitter":"Rohit Yadav"},{"authorTime":"2015-09-02 17:25:54","codes":[{"authorDate":"2015-12-10 23:24:36","commitOrder":2,"curCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 5;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, _minFileSize);\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","date":"2015-12-10 23:24:36","endLine":72,"groupId":"8218","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/54/d002f8f8115ef8e8004b4225f14399b36cf329.src","preCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 5;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        long startTime = System.currentTimeMillis();\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2015-09-02 17:25:54","commitOrder":2,"curCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","date":"2015-09-02 17:25:54","endLine":94,"groupId":"8222","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3b/13c6b9b7ddc6a819d990b6bba9a0c6345abe4a.src","preCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"312b9aff9490214c51cf6adf90661262c3670cd3","commitMessage":"@@@Merge release branch 4.6 to master\n\n* 4.6:\n  Adapted HypervisorUtilsTest to no longer give false positives\n","date":"2015-12-10 23:24:36","modifiedFileCount":"1","status":"M","submitter":"Remi Bergsma"},{"authorTime":"2015-09-02 17:25:54","codes":[{"authorDate":"2016-05-12 23:06:13","commitOrder":3,"curCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 8;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, _minFileSize);\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","date":"2016-05-12 23:06:13","endLine":72,"groupId":"8218","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f6/8776760d2bc443e655399064041616420fb467.src","preCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 5;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, _minFileSize);\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2015-09-02 17:25:54","commitOrder":3,"curCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","date":"2015-09-02 17:25:54","endLine":94,"groupId":"8222","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3b/13c6b9b7ddc6a819d990b6bba9a0c6345abe4a.src","preCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"143265c49fcd573999d43c5811d2c69103c49a67","commitMessage":"@@@Merge pull request #1502 from shapeblue/outofband-master\n\nCLOUDSTACK-9299: Out-of-band Management for CloudStackSupport access to a hosts out-of-band management interface (e.g. IPMI.  iLO. \nDRAC.  etc.) to manage host power operations (on/off etc.) and querying current\npower state in CloudStack.\n\nGiven the wide range of out-of-band management interfaces such as iLO and iDRA. \nthe service implementation allows for development of separate drivers as plugins.\nThis feature comes with a ipmitool based driver that uses the\nipmitool (http://linux.die.net/man/1/ipmitool) to communicate with any\nout-of-band management interface that support IPMI 2.0.\n\nThis feature allows following common use-cases:\n- Restarting stalled/failed hosts\n- Powering off under-utilised hosts\n- Powering on hosts for provisioning or to increase capacity\n- Allowing system administrators to see the current power state of the host\n\nFor testing this feature.  please install `ipmitool` (using yum/apt/brew) and `ipmisim`:\nhttps://pypi.python.org/pypi/ipmisim\n\nThe default ipmitool location is assumed in /usr/bin.  if this is different in your env please fix the global setting.  see FS for details on various global settings.\n\nFS:\nhttps://cwiki.apache.org/confluence/display/CLOUDSTACK/Out-of-band+Management+for+CloudStack\n\n/cc @jburwell @swill @abhinandanprateek @murali-reddy @borisstoyanov\n\n* pr/1502:\n  maven: ignore utils/testsmallfileinactive for rat checking\n  CLOUDSTACK-9378: Fix for #1497\n  HypervisorUtilsTest: increate timeout to 8seconds\n  travis: Use patched version of ipmitool for tests\n  CLOUDSTACK-9299: Out-of-band Management for CloudStack\n\nSigned-off-by: Will Stevens <williamstevens@gmail.com>\n","date":"2016-05-12 23:06:13","modifiedFileCount":"26","status":"M","submitter":"Will Stevens"},{"authorTime":"2015-09-02 17:25:54","codes":[{"authorDate":"2017-08-08 17:50:07","commitOrder":4,"curCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 8;\n        long thresholdMilliseconds = 1000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, _minFileSize);\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","date":"2017-08-08 17:50:07","endLine":72,"groupId":"8218","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/62/969c8403ca64197a1e859d0329d4b1af5f5c7d.src","preCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 8;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, _minFileSize);\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2015-09-02 17:25:54","commitOrder":4,"curCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","date":"2015-09-02 17:25:54","endLine":94,"groupId":"8222","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3b/13c6b9b7ddc6a819d990b6bba9a0c6345abe4a.src","preCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"18ffd7b199fdca2011ea4f86f9de7b379156a961","commitMessage":"@@@CLOUDSTACK-10036: Decreasing timeout of failing unit test (#2228)\n\nThis test occasionally fails on CentOS6 environments by failing to meet the 2000 milliseconds threshold. Usually it ends up executing the method for ~1100. So decreasing the timeout to 1000 would prevent it from failing.","date":"2017-08-08 17:50:07","modifiedFileCount":"1","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2015-09-02 17:25:54","codes":[{"authorDate":"2018-01-11 00:40:41","commitOrder":5,"curCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 8;\n        long thresholdMilliseconds = 1000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, _minFileSize);\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"fail\");\n            return;\n        }\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","date":"2018-01-11 00:40:41","endLine":77,"groupId":"102600","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"checkVolumeFileForActivityTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/64/b6972c033de6b53e8b7c7e55d8d94634b9395c.src","preCode":"    public void checkVolumeFileForActivityTest() throws IOException {\n        System.out.print(\"Testing block on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 8;\n        long thresholdMilliseconds = 1000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, _minFileSize);\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long duration = System.currentTimeMillis() - startTime;\n\n        Assert.assertFalse(\"Didn't block long enough, expected at least \" + thresholdMilliseconds + \" and got \" + duration, duration < thresholdMilliseconds);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2015-09-02 17:25:54","commitOrder":5,"curCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","date":"2015-09-02 17:25:54","endLine":94,"groupId":"102600","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkVolumeFileForActivityTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3b/13c6b9b7ddc6a819d990b6bba9a0c6345abe4a.src","preCode":"    public void checkVolumeFileForActivityTimeoutTest() throws IOException {\n        System.out.print(\"Testing timeout of blocking on modified files - \");\n        String filePath = \"./testfileinactive\";\n        int timeoutSeconds = 3;\n        long thresholdMilliseconds = 5000;\n        File file = new File(filePath);\n        setupcheckVolumeFileForActivityFile(file, _minFileSize);\n\n        try {\n            HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        } catch (CloudRuntimeException ex) {\n            System.out.println(\"pass\");\n            throw ex;\n        } finally {\n            file.delete();\n        }\n        System.out.println(\"Fail\");\n    }\n","realPath":"utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"64832fd70afdde668ffe7be864d8015a89f96c6d","commitMessage":"@@@CLOUDSTACK-4757: Support OVA files with multiple disks for templates (#2146)\n\nCloudStack volumes and templates are one single virtual disk in case of XenServer/XCP and KVM hypervisors since the files used for templates and volumes are virtual disks (VHD.  QCOW2). However.  VMware volumes and templates are in OVA format.  which are archives that can contain a complete VM including multiple VMDKs and other files such as ISOs. And currently.  Cloudstack only supports Template creation based on OVA files containing a single disk. If a user creates a template from a OVA file containing more than 1 disk and launches an instance using this template.  only the first disk is attached to the new instance and other disks are ignored.\nSimilarly with uploaded volumes.  attaching an uploaded volume that contains multiple disks to a VM will result in only one VMDK to being attached to the VM.\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Support+OVA+files+containing+multiple+disks\n\nThis behavior needs to be improved in VMWare to support OVA files with multiple disks for both uploaded volumes and templates. i.e. If a user creates a template from a OVA file containing more than 1 disk and launches an instance using this template.  the first disk should be attached to the new instance as the ROOT disk and volumes should be created based on other VMDK disks in the OVA file and should be attached to the instance.\n\nSigned-off-by: Abhinandan Prateek <abhinandan.prateek@shapeblue.com>\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-01-11 00:40:41","modifiedFileCount":"49","status":"M","submitter":"Abhinandan Prateek"}]
