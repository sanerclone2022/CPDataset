[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testSecurityGroupRulesCmdFalse() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2970,"groupId":"25582","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSecurityGroupRulesCmdFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testSecurityGroupRulesCmdFalse() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2917,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testSecurityGroupRulesCmdTrue() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(interfaceDef.getDevName()).thenReturn(\"eth0\");\n        when(interfaceDef.getBrName()).thenReturn(\"br0\");\n\n        final String vif = nics.get(0).getDevName();\n        final String brname = nics.get(0).getBrName();\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(libvirtComputingResource.addNetworkRules(command.getVmName(), Long.toString(command.getVmId()), command.getGuestIp(), command.getGuestIp6(), command.getSignature(),\n                Long.toString(command.getSeqNum()), command.getGuestMac(), command.stringifyRules(), vif, brname, command.getSecIpsString())).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3035,"groupId":"25580","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSecurityGroupRulesCmdTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testSecurityGroupRulesCmdTrue() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(interfaceDef.getDevName()).thenReturn(\"eth0\");\n        when(interfaceDef.getBrName()).thenReturn(\"br0\");\n\n        final String vif = nics.get(0).getDevName();\n        final String brname = nics.get(0).getBrName();\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(libvirtComputingResource.addNetworkRules(command.getVmName(), Long.toString(command.getVmId()), command.getGuestIp(), command.getGuestIp6(), command.getSignature(),\n                Long.toString(command.getSeqNum()), command.getGuestMac(), command.stringifyRules(), vif, brname, command.getSecIpsString())).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2973,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-19 22:02:12","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testSecurityGroupRulesCmdFalse() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2970,"groupId":"103207","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSecurityGroupRulesCmdFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testSecurityGroupRulesCmdFalse() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertFalse(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2917,"status":"N"},{"authorDate":"2020-02-19 22:02:12","commitOrder":2,"curCode":"    public void testSecurityGroupRulesCmdTrue() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n        final VirtualMachineTO vm = Mockito.mock(VirtualMachineTO.class);\n        command.setVmTO(vm);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(interfaceDef.getDevName()).thenReturn(\"eth0\");\n        when(interfaceDef.getBrName()).thenReturn(\"br0\");\n\n        final String vif = nics.get(0).getDevName();\n        final String brname = nics.get(0).getBrName();\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(libvirtComputingResource.applyDefaultNetworkRules(conn, vm, true)).thenReturn(true);\n        when(libvirtComputingResource.addNetworkRules(command.getVmName(), Long.toString(command.getVmId()), command.getGuestIp(), command.getGuestIp6(), command.getSignature(),\n                Long.toString(command.getSeqNum()), command.getGuestMac(), command.stringifyRules(), vif, brname, command.getSecIpsString())).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2020-02-19 22:02:12","endLine":3074,"groupId":"103207","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSecurityGroupRulesCmdTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1b/f27d06ef685a3b7c7052f1db4a5dd086a30ec1.src","preCode":"    public void testSecurityGroupRulesCmdTrue() {\n        final String guestIp = \"127.0.0.1\";\n        final String guestIp6 = \"2001:db8::cad:40ff:fefd:75c4\";\n        final String guestMac = \"00:00:00:00\";\n        final String vmName = \"Test\";\n        final Long vmId = 1l;\n        final String signature = \"signature\";\n        final Long seqNum = 1l;\n        final IpPortAndProto[] ingressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final IpPortAndProto[] egressRuleSet = new IpPortAndProto[]{Mockito.mock(IpPortAndProto.class)};\n        final List<String> secIps = new Vector<String>();\n        final List<String> cidrs = new Vector<String>();\n        cidrs.add(\"0.0.0.0/0\");\n\n        final SecurityGroupRulesCmd command = new SecurityGroupRulesCmd(guestIp, guestIp6, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n        nics.add(interfaceDef);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        when(interfaceDef.getDevName()).thenReturn(\"eth0\");\n        when(interfaceDef.getBrName()).thenReturn(\"br0\");\n\n        final String vif = nics.get(0).getDevName();\n        final String brname = nics.get(0).getBrName();\n\n        when(ingressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(ingressRuleSet[0].getStartPort()).thenReturn(22);\n        when(ingressRuleSet[0].getEndPort()).thenReturn(22);\n        when(ingressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(egressRuleSet[0].getProto()).thenReturn(\"tcp\");\n        when(egressRuleSet[0].getStartPort()).thenReturn(22);\n        when(egressRuleSet[0].getEndPort()).thenReturn(22);\n        when(egressRuleSet[0].getAllowedCidrs()).thenReturn(cidrs);\n\n        when(libvirtComputingResource.addNetworkRules(command.getVmName(), Long.toString(command.getVmId()), command.getGuestIp(), command.getGuestIp6(), command.getSignature(),\n                Long.toString(command.getSeqNum()), command.getGuestMac(), command.stringifyRules(), vif, brname, command.getSecIpsString())).thenReturn(true);\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3009,"status":"M"}],"commitId":"458d3b5b4753b16b1f07bfa1fe667037cb2623d6","commitMessage":"@@@Multiple networks support for vms in advanced zone with securit? (#3639)\n\n","date":"2020-02-19 22:02:12","modifiedFileCount":"16","status":"M","submitter":"Wei Zhou"}]
