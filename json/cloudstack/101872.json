[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void createVmDataCommandForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        for (final UserVmVO vm : vms) {\n            boolean createVmData = true;\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()) {\n                createVmData = false;\n            }\n\n            if (createVmData) {\n                final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n                if (nic != null) {\n                    s_logger.debug(\"Creating user data entry for vm \" + vm + \" on domR \" + router);\n\n                    _userVmDao.loadDetails(vm);\n                    createVmDataCommand(router, vm, nic, vm.getDetail(\"SSH.PublicKey\"), cmds);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":610,"groupId":"8871","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createVmDataCommandForVMs","params":"(finalDomainRouterVOrouter@finalCommandscmds@finallongguestNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createVmDataCommandForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        for (final UserVmVO vm : vms) {\n            boolean createVmData = true;\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()) {\n                createVmData = false;\n            }\n\n            if (createVmData) {\n                final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n                if (nic != null) {\n                    s_logger.debug(\"Creating user data entry for vm \" + vm + \" on domR \" + router);\n\n                    _userVmDao.loadDetails(vm);\n                    createVmDataCommand(router, vm, nic, vm.getDetail(\"SSH.PublicKey\"), cmds);\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void createDhcpEntryCommandsForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        String dnsBasicZoneUpdates = _configDao.getValue(Config.DnsBasicZoneUpdates.key());\n        for (final UserVmVO vm : vms) {\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()\n                    && dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                continue;\n            }\n\n            final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n            if (nic != null) {\n                s_logger.debug(\"Creating dhcp entry for vm \" + vm + \" on domR \" + router + \".\");\n                createDhcpEntryCommand(router, vm, nic, cmds);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":628,"groupId":"24235","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDhcpEntryCommandsForVMs","params":"(finalDomainRouterVOrouter@finalCommandscmds@finallongguestNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createDhcpEntryCommandsForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        String dnsBasicZoneUpdates = _configDao.getValue(Config.DnsBasicZoneUpdates.key());\n        for (final UserVmVO vm : vms) {\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()\n                    && dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                continue;\n            }\n\n            final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n            if (nic != null) {\n                s_logger.debug(\"Creating dhcp entry for vm \" + vm + \" on domR \" + router + \".\");\n                createDhcpEntryCommand(router, vm, nic, cmds);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-06-03 19:47:51","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void createVmDataCommandForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        for (final UserVmVO vm : vms) {\n            boolean createVmData = true;\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()) {\n                createVmData = false;\n            }\n\n            if (createVmData) {\n                final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n                if (nic != null) {\n                    s_logger.debug(\"Creating user data entry for vm \" + vm + \" on domR \" + router);\n\n                    _userVmDao.loadDetails(vm);\n                    createVmDataCommand(router, vm, nic, vm.getDetail(\"SSH.PublicKey\"), cmds);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":610,"groupId":"101872","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createVmDataCommandForVMs","params":"(finalDomainRouterVOrouter@finalCommandscmds@finallongguestNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createVmDataCommandForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        for (final UserVmVO vm : vms) {\n            boolean createVmData = true;\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()) {\n                createVmData = false;\n            }\n\n            if (createVmData) {\n                final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n                if (nic != null) {\n                    s_logger.debug(\"Creating user data entry for vm \" + vm + \" on domR \" + router);\n\n                    _userVmDao.loadDetails(vm);\n                    createVmDataCommand(router, vm, nic, vm.getDetail(\"SSH.PublicKey\"), cmds);\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"N"},{"authorDate":"2019-06-03 19:47:51","commitOrder":2,"curCode":"    public void createDhcpEntryCommandsForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        String dnsBasicZoneUpdates = _configDao.getValue(Config.DnsBasicZoneUpdates.key());\n        for (final UserVmVO vm : vms) {\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()\n                    && dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                continue;\n            }\n\n            final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n            if (nic != null) {\n                s_logger.debug(\"Creating dhcp entry for vm \" + vm + \" on domR \" + router + \".\");\n                createDhcpEntryCommand(router, vm, nic, false, cmds);\n            }\n        }\n    }\n","date":"2019-06-03 19:47:51","endLine":629,"groupId":"101872","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDhcpEntryCommandsForVMs","params":"(finalDomainRouterVOrouter@finalCommandscmds@finallongguestNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/a2b984264946f2f4c820874516f25e266c170e.src","preCode":"    public void createDhcpEntryCommandsForVMs(final DomainRouterVO router, final Commands cmds, final long guestNetworkId) {\n        final List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(guestNetworkId, VirtualMachine.State.Running, VirtualMachine.State.Migrating, VirtualMachine.State.Stopping);\n        final DataCenterVO dc = _dcDao.findById(router.getDataCenterId());\n        String dnsBasicZoneUpdates = _configDao.getValue(Config.DnsBasicZoneUpdates.key());\n        for (final UserVmVO vm : vms) {\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()\n                    && dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                continue;\n            }\n\n            final NicVO nic = _nicDao.findByNtwkIdAndInstanceId(guestNetworkId, vm.getId());\n            if (nic != null) {\n                s_logger.debug(\"Creating dhcp entry for vm \" + vm + \" on domR \" + router + \".\");\n                createDhcpEntryCommand(router, vm, nic, cmds);\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"}],"commitId":"1c5244a0c58510c467707d5d9f2c4fbc72d784d0","commitMessage":"@@@Merge remote-tracking branch 'origin/4.12'\n","date":"2019-06-03 19:47:51","modifiedFileCount":"19","status":"M","submitter":"Rohit Yadav"}]
