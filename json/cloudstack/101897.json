[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected void checkIfPodIsDeletable(final long podId) {\n        final HostPodVO pod = _podDao.findById(podId);\n\n        final String errorMsg = \"The pod cannot be deleted because \";\n\n        \r\n        if (_privateIpAddressDao.countIPs(podId, pod.getDataCenterId(), true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this pod.\");\n        }\n\n        \r\n        if (!_volumeDao.findByPod(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this pod.\");\n        }\n\n        \r\n        if (!_hostDao.findByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this pod.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this pod.\");\n        }\n\n        \r\n        if (!_clusterDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are clusters in this pod.\");\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1006,"groupId":"24380","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkIfPodIsDeletable","params":"(finallongpodId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    protected void checkIfPodIsDeletable(final long podId) {\n        final HostPodVO pod = _podDao.findById(podId);\n\n        final String errorMsg = \"The pod cannot be deleted because \";\n\n        \r\n        if (_privateIpAddressDao.countIPs(podId, pod.getDataCenterId(), true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this pod.\");\n        }\n\n        \r\n        if (!_volumeDao.findByPod(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this pod.\");\n        }\n\n        \r\n        if (!_hostDao.findByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this pod.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this pod.\");\n        }\n\n        \r\n        if (!_clusterDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are clusters in this pod.\");\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":977,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected void checkIfZoneIsDeletable(final long zoneId) {\n        final String errorMsg = \"The zone cannot be deleted because \";\n\n\n        \r\n        if (!_hostDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this zone.\");\n        }\n\n        \r\n        if (!_podDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are pods in this zone.\");\n        }\n\n        \r\n        if (_privateIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (_publicIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are public IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByZoneId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this zone.\");\n        }\n\n        \r\n        if (!_volumeDao.findByDc(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this zone.\");\n        }\n\n        \r\n        if (!_physicalNetworkDao.listByZone(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are physical networks in this zone.\");\n        }\n\n        \r\n        if(!_imageStoreDao.findByScope(new ZoneScope(zoneId)).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are Secondary storages in this zone\");\n        }\n\n        \r\n        \r\n        \r\n        \r\n    }\n","date":"2018-01-20 05:49:27","endLine":1653,"groupId":"7776","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIfZoneIsDeletable","params":"(finallongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    protected void checkIfZoneIsDeletable(final long zoneId) {\n        final String errorMsg = \"The zone cannot be deleted because \";\n\n\n        \r\n        if (!_hostDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this zone.\");\n        }\n\n        \r\n        if (!_podDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are pods in this zone.\");\n        }\n\n        \r\n        if (_privateIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (_publicIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are public IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByZoneId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this zone.\");\n        }\n\n        \r\n        if (!_volumeDao.findByDc(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this zone.\");\n        }\n\n        \r\n        if (!_physicalNetworkDao.listByZone(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are physical networks in this zone.\");\n        }\n\n        \r\n        if(!_imageStoreDao.findByScope(new ZoneScope(zoneId)).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are Secondary storages in this zone\");\n        }\n\n        \r\n        \r\n        \r\n        \r\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1605,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-09-17 12:42:10","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected void checkIfPodIsDeletable(final long podId) {\n        final HostPodVO pod = _podDao.findById(podId);\n\n        final String errorMsg = \"The pod cannot be deleted because \";\n\n        \r\n        if (_privateIpAddressDao.countIPs(podId, pod.getDataCenterId(), true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this pod.\");\n        }\n\n        \r\n        if (!_volumeDao.findByPod(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this pod.\");\n        }\n\n        \r\n        if (!_hostDao.findByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this pod.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this pod.\");\n        }\n\n        \r\n        if (!_clusterDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are clusters in this pod.\");\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1006,"groupId":"101897","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkIfPodIsDeletable","params":"(finallongpodId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    protected void checkIfPodIsDeletable(final long podId) {\n        final HostPodVO pod = _podDao.findById(podId);\n\n        final String errorMsg = \"The pod cannot be deleted because \";\n\n        \r\n        if (_privateIpAddressDao.countIPs(podId, pod.getDataCenterId(), true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this pod.\");\n        }\n\n        \r\n        if (!_volumeDao.findByPod(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this pod.\");\n        }\n\n        \r\n        if (!_hostDao.findByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this pod.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this pod.\");\n        }\n\n        \r\n        if (!_clusterDao.listByPodId(podId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are clusters in this pod.\");\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":977,"status":"N"},{"authorDate":"2020-09-17 12:42:10","commitOrder":2,"curCode":"    protected void checkIfZoneIsDeletable(final long zoneId) {\n        final String errorMsg = \"The zone cannot be deleted because \";\n\n\n        \r\n        if (!_hostDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this zone.\");\n        }\n\n        \r\n        if (!_podDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are pods in this zone.\");\n        }\n\n        \r\n        if (_privateIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (_publicIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are public IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByZoneId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this zone.\");\n        }\n\n        \r\n        if (!_volumeDao.findByDc(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this zone.\");\n        }\n\n        \r\n        if (!_physicalNetworkDao.listByZone(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are physical networks in this zone.\");\n        }\n\n        \r\n        if(!_imageStoreDao.findByZone(new ZoneScope(zoneId), null).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are Secondary storages in this zone\");\n        }\n\n        \r\n        \r\n        \r\n        \r\n    }\n","date":"2020-09-17 12:42:10","endLine":1719,"groupId":"101897","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIfZoneIsDeletable","params":"(finallongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f9/5cc6556dd9bb573b43290adfed73ac0522df4e.src","preCode":"    protected void checkIfZoneIsDeletable(final long zoneId) {\n        final String errorMsg = \"The zone cannot be deleted because \";\n\n\n        \r\n        if (!_hostDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are servers in this zone.\");\n        }\n\n        \r\n        if (!_podDao.listByDataCenterId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are pods in this zone.\");\n        }\n\n        \r\n        if (_privateIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are private IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (_publicIpAddressDao.countIPs(zoneId, true) != 0) {\n            throw new CloudRuntimeException(errorMsg + \"there are public IP addresses allocated in this zone.\");\n        }\n\n        \r\n        if (!_vmInstanceDao.listByZoneId(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are virtual machines in this zone.\");\n        }\n\n        \r\n        if (!_volumeDao.findByDc(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are storage volumes in this zone.\");\n        }\n\n        \r\n        if (!_physicalNetworkDao.listByZone(zoneId).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are physical networks in this zone.\");\n        }\n\n        \r\n        if(!_imageStoreDao.findByScope(new ZoneScope(zoneId)).isEmpty()) {\n            throw new CloudRuntimeException(errorMsg + \"there are Secondary storages in this zone\");\n        }\n\n        \r\n        \r\n        \r\n        \r\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1671,"status":"M"}],"commitId":"b464fe41c67812145731c7c6c3edebb94bc47487","commitMessage":"@@@server: Secondary Storage Usage Improvements (#4053)\n\nThis feature enables the following:\nBalanced migration of data objects from source Image store to destination Image store(s)\nComplete migration of data\nsetting an image store to read-only\nviewing download progress of templates across all data stores\nRelated Primate PR: apache/cloudstack-primate#326","date":"2020-09-17 12:42:10","modifiedFileCount":"55","status":"M","submitter":"Pearl Dsilva"}]
