[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void storageMigration(final String vmUuid, final StoragePool destPool) {\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateStorageMigration(vmUuid, destPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmStorageThroughJobQueue(vmUuid, destPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobResult != null) {\n                if (jobResult instanceof RuntimeException) {\n                    throw (RuntimeException)jobResult;\n                } else if (jobResult instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1981,"groupId":"7487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"storageMigration","params":"(finalStringvmUuid@finalStoragePooldestPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public void storageMigration(final String vmUuid, final StoragePool destPool) {\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateStorageMigration(vmUuid, destPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmStorageThroughJobQueue(vmUuid, destPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobResult != null) {\n                if (jobResult instanceof RuntimeException) {\n                    throw (RuntimeException)jobResult;\n                } else if (jobResult instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1947,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)\n            throws ResourceUnavailableException, ConcurrentOperationException {\n\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateMigrateWithStorage(vmUuid, srcHostId, destHostId, volumeToPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmWithStorageThroughJobQueue(vmUuid, srcHostId, destHostId, volumeToPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobException = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobException != null) {\n                if (jobException instanceof ResourceUnavailableException) {\n                    throw (ResourceUnavailableException)jobException;\n                } else if (jobException instanceof ConcurrentOperationException) {\n                    throw (ConcurrentOperationException)jobException;\n                } else if (jobException instanceof RuntimeException) {\n                    throw (RuntimeException)jobException;\n                } else if (jobException instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobException);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2457,"groupId":"1345","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)\n            throws ResourceUnavailableException, ConcurrentOperationException {\n\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateMigrateWithStorage(vmUuid, srcHostId, destHostId, volumeToPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmWithStorageThroughJobQueue(vmUuid, srcHostId, destHostId, volumeToPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobException = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobException != null) {\n                if (jobException instanceof ResourceUnavailableException) {\n                    throw (ResourceUnavailableException)jobException;\n                } else if (jobException instanceof ConcurrentOperationException) {\n                    throw (ConcurrentOperationException)jobException;\n                } else if (jobException instanceof RuntimeException) {\n                    throw (RuntimeException)jobException;\n                } else if (jobException instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobException);\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2415,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-02-12 15:11:41","commitOrder":2,"curCode":"    public void storageMigration(final String vmUuid, final Map<Long, Long> volumeToPool) {\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateStorageMigration(vmUuid, volumeToPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmStorageThroughJobQueue(vmUuid, volumeToPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobResult != null) {\n                if (jobResult instanceof RuntimeException) {\n                    throw (RuntimeException)jobResult;\n                } else if (jobResult instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                }\n            }\n        }\n    }\n","date":"2021-02-12 15:11:41","endLine":2182,"groupId":"10553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"storageMigration","params":"(finalStringvmUuid@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/1ef20f883ee21b0b04ce2d977f024d7b8f7b32.src","preCode":"    public void storageMigration(final String vmUuid, final StoragePool destPool) {\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateStorageMigration(vmUuid, destPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmStorageThroughJobQueue(vmUuid, destPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobResult != null) {\n                if (jobResult instanceof RuntimeException) {\n                    throw (RuntimeException)jobResult;\n                } else if (jobResult instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2148,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)\n            throws ResourceUnavailableException, ConcurrentOperationException {\n\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateMigrateWithStorage(vmUuid, srcHostId, destHostId, volumeToPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmWithStorageThroughJobQueue(vmUuid, srcHostId, destHostId, volumeToPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobException = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobException != null) {\n                if (jobException instanceof ResourceUnavailableException) {\n                    throw (ResourceUnavailableException)jobException;\n                } else if (jobException instanceof ConcurrentOperationException) {\n                    throw (ConcurrentOperationException)jobException;\n                } else if (jobException instanceof RuntimeException) {\n                    throw (RuntimeException)jobException;\n                } else if (jobException instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobException);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2457,"groupId":"10553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public void migrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool)\n            throws ResourceUnavailableException, ConcurrentOperationException {\n\n        final AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n        if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n            \r\n\n            VmWorkJobVO placeHolder = null;\n            final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n            placeHolder = createPlaceHolderWork(vm.getId());\n            try {\n                orchestrateMigrateWithStorage(vmUuid, srcHostId, destHostId, volumeToPool);\n            } finally {\n                if (placeHolder != null) {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n            }\n\n        } else {\n            final Outcome<VirtualMachine> outcome = migrateVmWithStorageThroughJobQueue(vmUuid, srcHostId, destHostId, volumeToPool);\n\n            try {\n                final VirtualMachine vm = outcome.get();\n            } catch (final InterruptedException e) {\n                throw new RuntimeException(\"Operation is interrupted\", e);\n            } catch (final java.util.concurrent.ExecutionException e) {\n                throw new RuntimeException(\"Execution excetion\", e);\n            }\n\n            final Object jobException = _jobMgr.unmarshallResultObject(outcome.getJob());\n            if (jobException != null) {\n                if (jobException instanceof ResourceUnavailableException) {\n                    throw (ResourceUnavailableException)jobException;\n                } else if (jobException instanceof ConcurrentOperationException) {\n                    throw (ConcurrentOperationException)jobException;\n                } else if (jobException instanceof RuntimeException) {\n                    throw (RuntimeException)jobException;\n                } else if (jobException instanceof Throwable) {\n                    throw new RuntimeException(\"Unexpected exception\", (Throwable)jobException);\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2415,"status":"N"}],"commitId":"d6e8b53736d92363d0f8689997259769356122de","commitMessage":"@@@vmware: vm migration improvements (#4385)\n\n- Fixes inter-cluster migration of VMs\n- Allows migration of stopped VM with disks attached to different and suitable pools\n- Improves inter-cluster detached volume migration\n- Allows inter-cluster migration (clusters of same Pod) for system VMs.  VRs on VMware\n- Allows storage migration for stopped system VMs.  VRs on VMware within same Pod if StoragePool cluster scopetype\n\nLinked Primate PR: https://github.com/apache/cloudstack-primate/pull/789 [Changes merged in this PR after new UI merge]\nDocumentation PR: https://github.com/apache/cloudstack-documentation/pull/170\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-02-12 15:11:41","modifiedFileCount":"26","status":"M","submitter":"Abhishek Kumar"}]
