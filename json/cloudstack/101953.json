[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolumeDataStore.getDataStoreId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2018-01-20 05:49:27","endLine":373,"groupId":"9429","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleVolumeStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVolumeVOvolume@finalVolumeDataStoreVOvolumeDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/10/406b569db2de54a7ad8d7580680cf4141b5200.src","preCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolumeDataStore.getDataStoreId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), tmpTemplateDataStore.getDataStoreId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2018-01-20 05:49:27","endLine":462,"groupId":"12768","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleTemplateStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVMTemplateVOtemplate@finalTemplateDataStoreVOtemplateDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/10/406b569db2de54a7ad8d7580680cf4141b5200.src","preCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), tmpTemplateDataStore.getDataStoreId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-06-06 01:37:40","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolumeDataStore.getDataStoreId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2018-01-20 05:49:27","endLine":373,"groupId":"9429","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleVolumeStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVolumeVOvolume@finalVolumeDataStoreVOvolumeDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/10/406b569db2de54a7ad8d7580680cf4141b5200.src","preCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolumeDataStore.getDataStoreId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"},{"authorDate":"2019-06-06 01:37:40","commitOrder":2,"curCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            \r\n                            if (tmpTemplate.getFormat().equals(Storage.ImageFormat.OVA)) {\n                                final DataStore store = dataStoreManager.getDataStore(templateDataStore.getDataStoreId(), templateDataStore.getDataStoreRole());\n                                final TemplateInfo templateInfo = templateFactory.getTemplate(tmpTemplate.getId(), store);\n                                if (!templateService.createOvaDataDiskTemplates(templateInfo)) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Multi-disk OVA template \" + tmpTemplate.getUuid() + \" failed to process data disks\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                    break;\n                                }\n                            }\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), tmpTemplateDataStore.getDataStoreId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2019-06-06 01:37:40","endLine":485,"groupId":"12768","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleTemplateStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVMTemplateVOtemplate@finalTemplateDataStoreVOtemplateDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2b/39518f8b8dbfd41e53878d4ed49a0e4d17e6ca.src","preCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), tmpTemplateDataStore.getDataStoreId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"bbc0ae873d5a2cb94b5adafb326c836513175203","commitMessage":"@@@storage: post process locally uploaded multi-disk ova template (#3215)\n\nProblem: When a multi-disk OVA template is uploaded.  only the root disk is recognized and VMs deployed using such template only get the root disk provisioned.\nRoot Cause: The template processor for multi-disk OVA was not used in the template upload processor.\nSolution: Added support for local multi-disk OVA template upload. After a multi-disk OVA template is\nuploaded.  the mechanism that worked on multi-disk OVA templates registered using URL is now also used to discovers and creates data-disk templates in cloud.vm_template table and on the secondary storage.\n\nTo enable SSL on SSVMs :\n? Upload the certificates like you usually do via the API or UI->Infrastructure tab\n? Set the global settings secstorage.encrypt.copy.  secstorage.ssl.cert.domain to appropriate values\nalong with the CPVM ones\n? Restart management server (no need to destroy/restart SSVM (or the ssvm agent))\n\nTest cases:\n- Upload template and check it creates multi-disk folders on secondary \nstorage and entries in cloud.vm_template table\n- Upload template and kill/shutdown management server. Then restart MS\nto check if template sync works\n- Copy template across zone of an uploaded template\n\nSigned-off-by: Rohit Yadav rohit.yadav@shapeblue.com","date":"2019-06-06 01:37:40","modifiedFileCount":"4","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-02-06 14:02:09","codes":[{"authorDate":"2020-02-06 14:02:09","commitOrder":3,"curCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolume.getDataCenterId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2020-02-06 14:02:09","endLine":386,"groupId":"9429","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"handleVolumeStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVolumeVOvolume@finalVolumeDataStoreVOvolumeDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/f97e8412784ac2834a9f37ff24137a9536f166.src","preCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolumeDataStore.getDataStoreId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2020-02-06 14:02:09","commitOrder":3,"curCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            \r\n                            if (tmpTemplate.getFormat().equals(Storage.ImageFormat.OVA)) {\n                                final DataStore store = dataStoreManager.getDataStore(templateDataStore.getDataStoreId(), templateDataStore.getDataStoreRole());\n                                final TemplateInfo templateInfo = templateFactory.getTemplate(tmpTemplate.getId(), store);\n                                if (!templateService.createOvaDataDiskTemplates(templateInfo)) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Multi-disk OVA template \" + tmpTemplate.getUuid() + \" failed to process data disks\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                    break;\n                                }\n                            }\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            TemplateJoinVO vo = templateJoinDao.findById(tmpTemplate.getId());\n                            assert (vo != null) : \"Couldn't find the template view for given template ID\";\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), vo.getDataCenterId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2020-02-06 14:02:09","endLine":491,"groupId":"12768","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleTemplateStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVMTemplateVOtemplate@finalTemplateDataStoreVOtemplateDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/f97e8412784ac2834a9f37ff24137a9536f166.src","preCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            \r\n                            if (tmpTemplate.getFormat().equals(Storage.ImageFormat.OVA)) {\n                                final DataStore store = dataStoreManager.getDataStore(templateDataStore.getDataStoreId(), templateDataStore.getDataStoreRole());\n                                final TemplateInfo templateInfo = templateFactory.getTemplate(tmpTemplate.getId(), store);\n                                if (!templateService.createOvaDataDiskTemplates(templateInfo)) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Multi-disk OVA template \" + tmpTemplate.getUuid() + \" failed to process data disks\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                    break;\n                                }\n                            }\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), tmpTemplateDataStore.getDataStoreId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"}],"commitId":"33e9a50945052fcf0b288410d0acf98f87f7f601","commitMessage":"@@@Merge remote-tracking branch 'origin/4.13'\n","date":"2020-02-06 14:02:09","modifiedFileCount":"1","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-02-06 14:02:09","commitOrder":4,"curCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolume.getDataCenterId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2020-02-06 14:02:09","endLine":386,"groupId":"9429","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"handleVolumeStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVolumeVOvolume@finalVolumeDataStoreVOvolumeDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/f97e8412784ac2834a9f37ff24137a9536f166.src","preCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolume.getDataCenterId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"},{"authorDate":"2020-10-26 21:24:14","commitOrder":4,"curCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            \r\n                            if (tmpTemplate.getFormat().equals(Storage.ImageFormat.OVA)) {\n                                final DataStore store = dataStoreManager.getDataStore(templateDataStore.getDataStoreId(), templateDataStore.getDataStoreRole());\n                                final TemplateInfo templateInfo = templateFactory.getTemplate(tmpTemplate.getId(), store);\n                                if (!templateService.createOvaDataDiskTemplates(templateInfo, template.isDeployAsIs())) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Multi-disk OVA template \" + tmpTemplate.getUuid() + \" failed to process data disks\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                    break;\n                                }\n                            }\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            TemplateJoinVO vo = templateJoinDao.findById(tmpTemplate.getId());\n                            assert (vo != null) : \"Couldn't find the template view for given template ID\";\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), vo.getDataCenterId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2020-10-26 21:24:14","endLine":491,"groupId":"12768","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleTemplateStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVMTemplateVOtemplate@finalTemplateDataStoreVOtemplateDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1c/e5b362eb9011c6cf735a0d84819be4896df384.src","preCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            \r\n                            if (tmpTemplate.getFormat().equals(Storage.ImageFormat.OVA)) {\n                                final DataStore store = dataStoreManager.getDataStore(templateDataStore.getDataStoreId(), templateDataStore.getDataStoreRole());\n                                final TemplateInfo templateInfo = templateFactory.getTemplate(tmpTemplate.getId(), store);\n                                if (!templateService.createOvaDataDiskTemplates(templateInfo)) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Multi-disk OVA template \" + tmpTemplate.getUuid() + \" failed to process data disks\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                    break;\n                                }\n                            }\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            TemplateJoinVO vo = templateJoinDao.findById(tmpTemplate.getId());\n                            assert (vo != null) : \"Couldn't find the template view for given template ID\";\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), vo.getDataCenterId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2020-12-23 17:43:39","codes":[{"authorDate":"2020-02-06 14:02:09","commitOrder":5,"curCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolume.getDataCenterId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2020-02-06 14:02:09","endLine":386,"groupId":"101953","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"handleVolumeStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVolumeVOvolume@finalVolumeDataStoreVOvolumeDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/f97e8412784ac2834a9f37ff24137a9536f166.src","preCode":"        private void handleVolumeStatusResponse(final UploadStatusAnswer answer, final VolumeVO volume, final VolumeDataStoreVO volumeDataStore) {\n            final StateMachine2<Volume.State, Event, Volume> stateMachine = Volume.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VolumeVO tmpVolume = _volumeDao.findById(volume.getId());\n                    VolumeDataStoreVO tmpVolumeDataStore = _volumeDataStoreDao.findById(volumeDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpVolumeDataStore.setState(State.Ready);\n                            tmpVolumeDataStore.setInstallPath(answer.getInstallPath());\n                            tmpVolumeDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpVolumeDataStore.setSize(answer.getVirtualSize());\n                            tmpVolumeDataStore.setDownloadPercent(100);\n\n                            VolumeVO volumeUpdate = _volumeDao.createForUpdate();\n                            volumeUpdate.setSize(answer.getVirtualSize());\n                            _volumeDao.update(tmpVolume.getId(), volumeUpdate);\n                            stateMachine.transitTo(tmpVolume, Event.OperationSucceeded, null, _volumeDao);\n                            _resourceLimitMgr.incrementResourceCount(volume.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n\n                            \r\n                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_UPLOAD, tmpVolume.getAccountId(),\n                                    tmpVolume.getDataCenterId(), tmpVolume.getId(), tmpVolume.getName(),\n                                    null, null, tmpVolumeDataStore.getPhysicalSize(), tmpVolumeDataStore.getSize(),\n                                    Volume.class.getName(), tmpVolume.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Volume \" + tmpVolume.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) {\n                                tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                stateMachine.transitTo(tmpVolume, Event.UploadRequested, null, _volumeDao);\n                            } else if (tmpVolume.getState() == Volume.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpVolumeDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpVolumeDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpVolume, Event.OperationFailed, null, _volumeDao);\n                            msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpVolume.getState() == Volume.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpVolumeDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpVolumeDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpVolumeDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpVolume, Event.OperationTimeout, null, _volumeDao);\n                                    msg = \"Volume \" + tmpVolume.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _volumeDataStoreDao.update(tmpVolumeDataStore.getId(), tmpVolumeDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED, tmpVolume.getDataCenterId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"},{"authorDate":"2020-12-23 17:43:39","commitOrder":5,"curCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            if (template.getHypervisorType() == Hypervisor.HypervisorType.VMware) {\n                                Pair<String, String> guestOsInfo = answer.getGuestOsInfo();\n                                String minimumHardwareVersion = answer.getMinimumHardwareVersion();\n                                String osType = guestOsInfo.first();\n                                String osDescription = guestOsInfo.second();\n                                s_logger.info(\"Guest OS information retrieved from the template: \" + osType + \" - \" + osDescription);\n                                try {\n                                    Long guestOsId = deployAsIsHelper.retrieveTemplateGuestOsIdFromGuestOsInfo(template.getId(),\n                                            osType, osDescription, minimumHardwareVersion);\n                                    templateUpdate.setGuestOSId(guestOsId);\n                                } catch (CloudRuntimeException e) {\n                                    s_logger.error(\"Could not map the guest OS to a CloudStack guest OS\", e);\n                                }\n                            }\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            \r\n                            if (tmpTemplate.getFormat().equals(Storage.ImageFormat.OVA)) {\n                                final DataStore store = dataStoreManager.getDataStore(templateDataStore.getDataStoreId(), templateDataStore.getDataStoreRole());\n                                final TemplateInfo templateInfo = templateFactory.getTemplate(tmpTemplate.getId(), store);\n                                if (!templateService.createOvaDataDiskTemplates(templateInfo, template.isDeployAsIs())) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Multi-disk OVA template \" + tmpTemplate.getUuid() + \" failed to process data disks\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                    break;\n                                }\n                            }\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            TemplateJoinVO vo = templateJoinDao.findById(tmpTemplate.getId());\n                            assert (vo != null) : \"Couldn't find the template view for given template ID\";\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), vo.getDataCenterId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","date":"2020-12-23 17:43:39","endLine":510,"groupId":"101953","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"handleTemplateStatusResponse","params":"(finalUploadStatusAnsweranswer@finalVMTemplateVOtemplate@finalTemplateDataStoreVOtemplateDataStore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/07/2092780eadd970d861326c833de3c2b2e26da8.src","preCode":"        private void handleTemplateStatusResponse(final UploadStatusAnswer answer, final VMTemplateVO template, final TemplateDataStoreVO templateDataStore) {\n            final StateMachine2<VirtualMachineTemplate.State, VirtualMachineTemplate.Event, VirtualMachineTemplate> stateMachine = VirtualMachineTemplate.State.getStateMachine();\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    VMTemplateVO tmpTemplate = _templateDao.findById(template.getId());\n                    TemplateDataStoreVO tmpTemplateDataStore = _templateDataStoreDao.findById(templateDataStore.getId());\n                    boolean sendAlert = false;\n                    String msg = null;\n                    try {\n                        switch (answer.getStatus()) {\n                        case COMPLETED:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOADED);\n                            tmpTemplateDataStore.setState(State.Ready);\n                            tmpTemplateDataStore.setInstallPath(answer.getInstallPath());\n                            tmpTemplateDataStore.setPhysicalSize(answer.getPhysicalSize());\n                            tmpTemplateDataStore.setSize(answer.getVirtualSize());\n                            tmpTemplateDataStore.setDownloadPercent(100);\n                            tmpTemplateDataStore.setExtractUrl(null);\n\n                            VMTemplateVO templateUpdate = _templateDao.createForUpdate();\n                            templateUpdate.setSize(answer.getVirtualSize());\n                            _templateDao.update(tmpTemplate.getId(), templateUpdate);\n                            \r\n                            if (tmpTemplate.getFormat().equals(Storage.ImageFormat.OVA)) {\n                                final DataStore store = dataStoreManager.getDataStore(templateDataStore.getDataStoreId(), templateDataStore.getDataStoreRole());\n                                final TemplateInfo templateInfo = templateFactory.getTemplate(tmpTemplate.getId(), store);\n                                if (!templateService.createOvaDataDiskTemplates(templateInfo, template.isDeployAsIs())) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Multi-disk OVA template \" + tmpTemplate.getUuid() + \" failed to process data disks\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                    break;\n                                }\n                            }\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationSucceeded, null, _templateDao);\n                            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), Resource.ResourceType.secondary_storage, answer.getVirtualSize());\n                            \r\n                            String etype = EventTypes.EVENT_TEMPLATE_CREATE;\n                            if (tmpTemplate.getFormat() == Storage.ImageFormat.ISO) {\n                                etype = EventTypes.EVENT_ISO_CREATE;\n                            }\n                            TemplateJoinVO vo = templateJoinDao.findById(tmpTemplate.getId());\n                            assert (vo != null) : \"Couldn't find the template view for given template ID\";\n                            UsageEventUtils.publishUsageEvent(etype, tmpTemplate.getAccountId(), vo.getDataCenterId(), tmpTemplate.getId(), tmpTemplate.getName(), null, null,\n                                    tmpTemplateDataStore.getPhysicalSize(), tmpTemplateDataStore.getSize(), VirtualMachineTemplate.class.getName(), tmpTemplate.getUuid());\n\n                            if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"Template \" + tmpTemplate.getUuid() + \" uploaded successfully\");\n                            }\n                            break;\n                        case IN_PROGRESS:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) {\n                                tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_IN_PROGRESS);\n                                stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.UploadRequested, null, _templateDao);\n                                tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                            } else if (tmpTemplate.getState() == VirtualMachineTemplate.State.UploadInProgress) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                } else {\n                                    tmpTemplateDataStore.setDownloadPercent(answer.getDownloadPercent());\n                                }\n                            }\n                            break;\n                        case ERROR:\n                            tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.DOWNLOAD_ERROR);\n                            tmpTemplateDataStore.setState(State.Failed);\n                            stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationFailed, null, _templateDao);\n                            msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload. Error details: \" + answer.getDetails();\n                            s_logger.error(msg);\n                            sendAlert = true;\n                            break;\n                        case UNKNOWN:\n                            if (tmpTemplate.getState() == VirtualMachineTemplate.State.NotUploaded) { \r\n                                if (System.currentTimeMillis() - tmpTemplateDataStore.getCreated().getTime() > _uploadOperationTimeout) {\n                                    tmpTemplateDataStore.setDownloadState(VMTemplateStorageResourceAssoc.Status.ABANDONED);\n                                    tmpTemplateDataStore.setState(State.Failed);\n                                    stateMachine.transitTo(tmpTemplate, VirtualMachineTemplate.Event.OperationTimeout, null, _templateDao);\n                                    msg = \"Template \" + tmpTemplate.getUuid() + \" failed to upload due to operation timed out\";\n                                    s_logger.error(msg);\n                                    sendAlert = true;\n                                }\n                            }\n                            break;\n                        }\n                        _templateDataStoreDao.update(tmpTemplateDataStore.getId(), tmpTemplateDataStore);\n                    } catch (NoTransitionException e) {\n                        s_logger.error(\"Unexpected error \" + e.getMessage());\n                    } finally {\n                        if (sendAlert) {\n                            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_UPLOAD_FAILED,\n                                    _vmTemplateZoneDao.listByTemplateId(tmpTemplate.getId()).get(0).getZoneId(), null, msg, msg);\n                        }\n                    }\n                }\n            });\n        }\n","realPath":"server/src/main/java/com/cloud/storage/ImageStoreUploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"4617be458387421bbbfc120c1f054c9939ba52eb","commitMessage":"@@@vmware: Fix template upload from local (#4555)\n\nUpdate the guest OS from the OVF file after upload is completed\nThis PR fixes the template upload from local on VMware\n\nCo-authored-by: dahn <daan.hoogland@gmail.com>\nCo-authored-by: dahn <daan.hoogland@gmail.com>","date":"2020-12-23 17:43:39","modifiedFileCount":"7","status":"M","submitter":"Nicolas Vazquez"}]
