[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testValidateRuleBeforeUpdateLB() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(anyLong())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(true);\n        when(lbDao.update(anyLong(), eq(lb))).thenReturn(true);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n\n        InOrder inOrder = Mockito.inOrder(lbServiceProvider, lbDao);\n        inOrder.verify(lbServiceProvider).validateLBRule(any(Network.class), any(LoadBalancingRule.class));\n        inOrder.verify(lbDao).update(anyLong(), eq(lb));\n    }\n","date":"2018-01-20 05:49:27","endLine":108,"groupId":"3024","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateRuleBeforeUpdateLB","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0b/67eb72367a3c750e90c490b313ce6659e2c320.src","preCode":"    public void testValidateRuleBeforeUpdateLB() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(anyLong())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(true);\n        when(lbDao.update(anyLong(), eq(lb))).thenReturn(true);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n\n        InOrder inOrder = Mockito.inOrder(lbServiceProvider, lbDao);\n        inOrder.verify(lbServiceProvider).validateLBRule(any(Network.class), any(LoadBalancingRule.class));\n        inOrder.verify(lbDao).update(anyLong(), eq(lb));\n    }\n","realPath":"server/src/test/java/com/cloud/network/lb/UpdateLoadBalancerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testRuleNotValidated() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(anyLong())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(false);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":121,"groupId":"3024","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuleNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0b/67eb72367a3c750e90c490b313ce6659e2c320.src","preCode":"    public void testRuleNotValidated() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(anyLong())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(false);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n    }\n","realPath":"server/src/test/java/com/cloud/network/lb/UpdateLoadBalancerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testValidateRuleBeforeUpdateLB() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(isNull())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(true);\n        when(lbDao.update(isNull(), eq(lb))).thenReturn(true);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n\n        InOrder inOrder = Mockito.inOrder(lbServiceProvider, lbDao);\n        inOrder.verify(lbServiceProvider).validateLBRule(any(Network.class), any(LoadBalancingRule.class));\n        inOrder.verify(lbDao).update(isNull(),eq(lb));\n    }\n","date":"2020-02-12 15:28:25","endLine":109,"groupId":"101017","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testValidateRuleBeforeUpdateLB","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8a/ef1b97c2eb788af3e7a3730ddc23a346effb3b.src","preCode":"    public void testValidateRuleBeforeUpdateLB() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(anyLong())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(true);\n        when(lbDao.update(anyLong(), eq(lb))).thenReturn(true);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n\n        InOrder inOrder = Mockito.inOrder(lbServiceProvider, lbDao);\n        inOrder.verify(lbServiceProvider).validateLBRule(any(Network.class), any(LoadBalancingRule.class));\n        inOrder.verify(lbDao).update(anyLong(), eq(lb));\n    }\n","realPath":"server/src/test/java/com/cloud/network/lb/UpdateLoadBalancerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testRuleNotValidated() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(anyLong())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(false);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":121,"groupId":"101017","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuleNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0b/67eb72367a3c750e90c490b313ce6659e2c320.src","preCode":"    public void testRuleNotValidated() throws ResourceAllocationException, ResourceUnavailableException, InsufficientCapacityException {\n\n        LoadBalancerVO lb = new LoadBalancerVO(null, null, null, 0L, 0, 0, null, 0L, 0L, domainId, null);\n\n        when(lbDao.findById(anyLong())).thenReturn(lb);\n        when(netModel.getPublicIpAddress(anyLong())).thenReturn(Mockito.mock(PublicIpAddress.class));\n        when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));\n        when(lbServiceProvider.validateLBRule(any(Network.class), any(LoadBalancingRule.class))).thenReturn(false);\n\n        _lbMgr.updateLoadBalancerRule(updateLbRuleCmd);\n    }\n","realPath":"server/src/test/java/com/cloud/network/lb/UpdateLoadBalancerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
