[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public StoragePoolResponse newStoragePoolResponse(StoragePoolJoinVO pool) {\n        StoragePool storagePool = storagePoolDao.findById(pool.getId());\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        poolResponse.setType(pool.getPoolType().toString());\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        if (pool.getScope() != null) {\n            poolResponse.setScope(pool.getScope().toString());\n        }\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity() + pool.getReservedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n\n        if (storagePool.isManaged()) {\n            DataStore store = dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n            PrimaryDataStoreDriver driver = (PrimaryDataStoreDriver) store.getDriver();\n            long usedIops = driver.getUsedIops(storagePool);\n            poolResponse.setAllocatedIops(usedIops);\n        }\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        if (pool.getJobId() != null) {\n            poolResponse.setJobId(pool.getJobUuid());\n            poolResponse.setJobStatus(pool.getJobStatus());\n        }\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":130,"groupId":"1818","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newStoragePoolResponse","params":"(StoragePoolJoinVOpool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b8/b312bd267badddb500856bfa02492620baee1b.src","preCode":"    public StoragePoolResponse newStoragePoolResponse(StoragePoolJoinVO pool) {\n        StoragePool storagePool = storagePoolDao.findById(pool.getId());\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        poolResponse.setType(pool.getPoolType().toString());\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        if (pool.getScope() != null) {\n            poolResponse.setScope(pool.getScope().toString());\n        }\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity() + pool.getReservedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n\n        if (storagePool.isManaged()) {\n            DataStore store = dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n            PrimaryDataStoreDriver driver = (PrimaryDataStoreDriver) store.getDriver();\n            long usedIops = driver.getUsedIops(storagePool);\n            poolResponse.setAllocatedIops(usedIops);\n        }\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        if (pool.getJobId() != null) {\n            poolResponse.setJobId(pool.getJobUuid());\n            poolResponse.setJobStatus(pool.getJobStatus());\n        }\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/StoragePoolJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public StoragePoolResponse newStoragePoolForMigrationResponse(StoragePoolJoinVO pool) {\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        if (pool.getPoolType() != null) {\n            poolResponse.setType(pool.getPoolType().toString());\n        }\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        poolResponse.setScope(pool.getScope().toString());\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n\n        \r\n        poolResponse.setJobId(pool.getJobUuid());\n        poolResponse.setJobStatus(pool.getJobStatus());\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":193,"groupId":"13717","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newStoragePoolForMigrationResponse","params":"(StoragePoolJoinVOpool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b8/b312bd267badddb500856bfa02492620baee1b.src","preCode":"    public StoragePoolResponse newStoragePoolForMigrationResponse(StoragePoolJoinVO pool) {\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        if (pool.getPoolType() != null) {\n            poolResponse.setType(pool.getPoolType().toString());\n        }\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        poolResponse.setScope(pool.getScope().toString());\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n\n        \r\n        poolResponse.setJobId(pool.getJobUuid());\n        poolResponse.setJobStatus(pool.getJobStatus());\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/StoragePoolJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    public StoragePoolResponse newStoragePoolResponse(StoragePoolJoinVO pool) {\n        StoragePool storagePool = storagePoolDao.findById(pool.getId());\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        poolResponse.setType(pool.getPoolType().toString());\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        if (pool.getScope() != null) {\n            poolResponse.setScope(pool.getScope().toString());\n        }\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        StoragePoolDetailVO poolType = storagePoolDetailsDao.findDetail(pool.getId(), \"pool_type\");\n        if (poolType != null) {\n            poolResponse.setType(poolType.getValue());\n        }\n        long allocatedSize = pool.getUsedCapacity() + pool.getReservedCapacity();\n        if (pool.getPoolType() == Storage.StoragePoolType.DatastoreCluster) {\n            List<StoragePoolVO> childDatastores = storagePoolDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n            if (childDatastores != null) {\n                for (StoragePoolVO childDatastore: childDatastores) {\n                    StoragePoolJoinVO childDSJoinVO = findById(childDatastore.getId());\n                    allocatedSize += (childDSJoinVO.getUsedCapacity() + childDSJoinVO.getReservedCapacity());\n                }\n            }\n        }\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n\n        if (storagePool.isManaged()) {\n            DataStore store = dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n            PrimaryDataStoreDriver driver = (PrimaryDataStoreDriver) store.getDriver();\n            long usedIops = driver.getUsedIops(storagePool);\n            poolResponse.setAllocatedIops(usedIops);\n        }\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        if (pool.getJobId() != null) {\n            poolResponse.setJobId(pool.getJobUuid());\n            poolResponse.setJobStatus(pool.getJobStatus());\n        }\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","date":"2020-10-26 21:24:14","endLine":150,"groupId":"13716","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newStoragePoolResponse","params":"(StoragePoolJoinVOpool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d2/fe6a55edc31ed59e7f119eb1f6bfd79f37c5d9.src","preCode":"    public StoragePoolResponse newStoragePoolResponse(StoragePoolJoinVO pool) {\n        StoragePool storagePool = storagePoolDao.findById(pool.getId());\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        poolResponse.setType(pool.getPoolType().toString());\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        if (pool.getScope() != null) {\n            poolResponse.setScope(pool.getScope().toString());\n        }\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity() + pool.getReservedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n\n        if (storagePool.isManaged()) {\n            DataStore store = dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n            PrimaryDataStoreDriver driver = (PrimaryDataStoreDriver) store.getDriver();\n            long usedIops = driver.getUsedIops(storagePool);\n            poolResponse.setAllocatedIops(usedIops);\n        }\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        if (pool.getJobId() != null) {\n            poolResponse.setJobId(pool.getJobUuid());\n            poolResponse.setJobStatus(pool.getJobStatus());\n        }\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/StoragePoolJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public StoragePoolResponse newStoragePoolForMigrationResponse(StoragePoolJoinVO pool) {\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        if (pool.getPoolType() != null) {\n            poolResponse.setType(pool.getPoolType().toString());\n        }\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        poolResponse.setScope(pool.getScope().toString());\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n\n        \r\n        poolResponse.setJobId(pool.getJobUuid());\n        poolResponse.setJobStatus(pool.getJobStatus());\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":193,"groupId":"13717","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newStoragePoolForMigrationResponse","params":"(StoragePoolJoinVOpool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b8/b312bd267badddb500856bfa02492620baee1b.src","preCode":"    public StoragePoolResponse newStoragePoolForMigrationResponse(StoragePoolJoinVO pool) {\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        if (pool.getPoolType() != null) {\n            poolResponse.setType(pool.getPoolType().toString());\n        }\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        poolResponse.setScope(pool.getScope().toString());\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n\n        \r\n        poolResponse.setJobId(pool.getJobUuid());\n        poolResponse.setJobStatus(pool.getJobStatus());\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/StoragePoolJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":3,"curCode":"    public StoragePoolResponse newStoragePoolResponse(StoragePoolJoinVO pool) {\n        StoragePool storagePool = storagePoolDao.findById(pool.getId());\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        poolResponse.setType(pool.getPoolType().toString());\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        if (pool.getScope() != null) {\n            poolResponse.setScope(pool.getScope().toString());\n        }\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        StoragePoolDetailVO poolType = storagePoolDetailsDao.findDetail(pool.getId(), \"pool_type\");\n        if (poolType != null) {\n            poolResponse.setType(poolType.getValue());\n        }\n        long allocatedSize = pool.getUsedCapacity() + pool.getReservedCapacity();\n        if (pool.getPoolType() == Storage.StoragePoolType.DatastoreCluster) {\n            List<StoragePoolVO> childDatastores = storagePoolDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n            if (childDatastores != null) {\n                for (StoragePoolVO childDatastore: childDatastores) {\n                    StoragePoolJoinVO childDSJoinVO = findById(childDatastore.getId());\n                    allocatedSize += (childDSJoinVO.getUsedCapacity() + childDSJoinVO.getReservedCapacity());\n                }\n            }\n        }\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n\n        if (storagePool.isManaged()) {\n            DataStore store = dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n            PrimaryDataStoreDriver driver = (PrimaryDataStoreDriver) store.getDriver();\n            long usedIops = driver.getUsedIops(storagePool);\n            poolResponse.setAllocatedIops(usedIops);\n        }\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        if (pool.getJobId() != null) {\n            poolResponse.setJobId(pool.getJobUuid());\n            poolResponse.setJobStatus(pool.getJobStatus());\n        }\n        poolResponse.setHasAnnotation(annotationDao.hasAnnotations(pool.getUuid(), AnnotationService.EntityType.PRIMARY_STORAGE.name(),\n                accountManager.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","date":"2021-09-08 12:44:06","endLine":160,"groupId":"101492","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"newStoragePoolResponse","params":"(StoragePoolJoinVOpool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/ba1f63fc68d4c429c459b5b49d70b3d7ce622a.src","preCode":"    public StoragePoolResponse newStoragePoolResponse(StoragePoolJoinVO pool) {\n        StoragePool storagePool = storagePoolDao.findById(pool.getId());\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        poolResponse.setType(pool.getPoolType().toString());\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        if (pool.getScope() != null) {\n            poolResponse.setScope(pool.getScope().toString());\n        }\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        StoragePoolDetailVO poolType = storagePoolDetailsDao.findDetail(pool.getId(), \"pool_type\");\n        if (poolType != null) {\n            poolResponse.setType(poolType.getValue());\n        }\n        long allocatedSize = pool.getUsedCapacity() + pool.getReservedCapacity();\n        if (pool.getPoolType() == Storage.StoragePoolType.DatastoreCluster) {\n            List<StoragePoolVO> childDatastores = storagePoolDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n            if (childDatastores != null) {\n                for (StoragePoolVO childDatastore: childDatastores) {\n                    StoragePoolJoinVO childDSJoinVO = findById(childDatastore.getId());\n                    allocatedSize += (childDSJoinVO.getUsedCapacity() + childDSJoinVO.getReservedCapacity());\n                }\n            }\n        }\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n\n        if (storagePool.isManaged()) {\n            DataStore store = dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n            PrimaryDataStoreDriver driver = (PrimaryDataStoreDriver) store.getDriver();\n            long usedIops = driver.getUsedIops(storagePool);\n            poolResponse.setAllocatedIops(usedIops);\n        }\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        if (pool.getJobId() != null) {\n            poolResponse.setJobId(pool.getJobUuid());\n            poolResponse.setJobStatus(pool.getJobStatus());\n        }\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/StoragePoolJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public StoragePoolResponse newStoragePoolForMigrationResponse(StoragePoolJoinVO pool) {\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        if (pool.getPoolType() != null) {\n            poolResponse.setType(pool.getPoolType().toString());\n        }\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        poolResponse.setScope(pool.getScope().toString());\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n\n        \r\n        poolResponse.setJobId(pool.getJobUuid());\n        poolResponse.setJobStatus(pool.getJobStatus());\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":193,"groupId":"101492","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"newStoragePoolForMigrationResponse","params":"(StoragePoolJoinVOpool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b8/b312bd267badddb500856bfa02492620baee1b.src","preCode":"    public StoragePoolResponse newStoragePoolForMigrationResponse(StoragePoolJoinVO pool) {\n        StoragePoolResponse poolResponse = new StoragePoolResponse();\n        poolResponse.setId(pool.getUuid());\n        poolResponse.setName(pool.getName());\n        poolResponse.setState(pool.getStatus());\n        String path = pool.getPath();\n        \r\n        path = StringUtils.cleanString(path);\n        poolResponse.setPath(path);\n        poolResponse.setIpAddress(pool.getHostAddress());\n        poolResponse.setZoneId(pool.getZoneUuid());\n        poolResponse.setZoneName(pool.getZoneName());\n        if (pool.getPoolType() != null) {\n            poolResponse.setType(pool.getPoolType().toString());\n        }\n        poolResponse.setPodId(pool.getPodUuid());\n        poolResponse.setPodName(pool.getPodName());\n        poolResponse.setCreated(pool.getCreated());\n        poolResponse.setScope(pool.getScope().toString());\n        if (pool.getHypervisor() != null) {\n            poolResponse.setHypervisor(pool.getHypervisor().toString());\n        }\n\n        long allocatedSize = pool.getUsedCapacity();\n        poolResponse.setDiskSizeTotal(pool.getCapacityBytes());\n        poolResponse.setDiskSizeAllocated(allocatedSize);\n        poolResponse.setCapacityIops(pool.getCapacityIops());\n        poolResponse.setOverProvisionFactor(Double.toString(CapacityManager.StorageOverprovisioningFactor.valueIn(pool.getId())));\n\n        \r\n        StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n        if (stats != null) {\n            Long used = stats.getByteUsed();\n            poolResponse.setDiskSizeUsed(used);\n        }\n\n        poolResponse.setClusterId(pool.getClusterUuid());\n        poolResponse.setClusterName(pool.getClusterName());\n        poolResponse.setProvider(pool.getStorageProviderName());\n        poolResponse.setTags(pool.getTag());\n\n        \r\n        poolResponse.setJobId(pool.getJobUuid());\n        poolResponse.setJobStatus(pool.getJobStatus());\n\n        poolResponse.setObjectName(\"storagepool\");\n        return poolResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/StoragePoolJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"}]
