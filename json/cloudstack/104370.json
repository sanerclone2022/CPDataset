[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testAuthenticate() throws Exception {\n        SAML2LoginAPIAuthenticatorCmd cmd = Mockito.spy(new SAML2LoginAPIAuthenticatorCmd());\n\n        Field apiServerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        Field accountServiceField = BaseCmd.class.getDeclaredField(\"_accountService\");\n        accountServiceField.setAccessible(true);\n        accountServiceField.set(cmd, accountService);\n\n        Field domainMgrField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_domainMgr\");\n        domainMgrField.setAccessible(true);\n        domainMgrField.set(cmd, domainMgr);\n\n        Field userAccountDaoField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_userAccountDao\");\n        userAccountDaoField.setAccessible(true);\n        userAccountDaoField.set(cmd, userAccountDao);\n\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(session.getAttribute(Mockito.anyString())).thenReturn(null);\n\n        Mockito.when(domain.getId()).thenReturn(1L);\n        Mockito.when(domainMgr.getDomain(Mockito.anyString())).thenReturn(domain);\n        UserAccountVO user = new UserAccountVO();\n        user.setId(1000L);\n        Mockito.when(userAccountDao.getUserAccount(Mockito.anyString(), Mockito.anyLong())).thenReturn(user);\n        Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(false);\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n        Mockito.when(samlAuthManager.getIdPMetadata(Mockito.anyString())).thenReturn(providerMetadata);\n\n        Map<String, Object[]> params = new HashMap<String, Object[]>();\n\n        \r\n        cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Mockito.verify(resp, Mockito.times(1)).sendRedirect(Mockito.anyString());\n\n        \r\n        params.put(SAMLPluginConstants.SAML_RESPONSE, new String[]{\"Some String\"});\n        Mockito.stub(cmd.processSAMLResponse(Mockito.anyString())).toReturn(buildMockResponse());\n        boolean failing = true;\n        try {\n            cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        } catch (ServerApiException ignored) {\n            failing = false;\n        }\n        assertFalse(\"authentication should not have succeeded\", failing);\n        Mockito.verify(userAccountDao, Mockito.times(0)).getUserAccount(Mockito.anyString(), Mockito.anyLong());\n        Mockito.verify(apiServer, Mockito.times(0)).verifyUser(Mockito.anyLong());\n    }\n","date":"2018-01-20 05:49:27","endLine":202,"groupId":"1540","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAuthenticate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2c/e88414b409d0216d675689cf3c6cc30818dbb9.src","preCode":"    public void testAuthenticate() throws Exception {\n        SAML2LoginAPIAuthenticatorCmd cmd = Mockito.spy(new SAML2LoginAPIAuthenticatorCmd());\n\n        Field apiServerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        Field accountServiceField = BaseCmd.class.getDeclaredField(\"_accountService\");\n        accountServiceField.setAccessible(true);\n        accountServiceField.set(cmd, accountService);\n\n        Field domainMgrField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_domainMgr\");\n        domainMgrField.setAccessible(true);\n        domainMgrField.set(cmd, domainMgr);\n\n        Field userAccountDaoField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_userAccountDao\");\n        userAccountDaoField.setAccessible(true);\n        userAccountDaoField.set(cmd, userAccountDao);\n\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(session.getAttribute(Mockito.anyString())).thenReturn(null);\n\n        Mockito.when(domain.getId()).thenReturn(1L);\n        Mockito.when(domainMgr.getDomain(Mockito.anyString())).thenReturn(domain);\n        UserAccountVO user = new UserAccountVO();\n        user.setId(1000L);\n        Mockito.when(userAccountDao.getUserAccount(Mockito.anyString(), Mockito.anyLong())).thenReturn(user);\n        Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(false);\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n        Mockito.when(samlAuthManager.getIdPMetadata(Mockito.anyString())).thenReturn(providerMetadata);\n\n        Map<String, Object[]> params = new HashMap<String, Object[]>();\n\n        \r\n        cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Mockito.verify(resp, Mockito.times(1)).sendRedirect(Mockito.anyString());\n\n        \r\n        params.put(SAMLPluginConstants.SAML_RESPONSE, new String[]{\"Some String\"});\n        Mockito.stub(cmd.processSAMLResponse(Mockito.anyString())).toReturn(buildMockResponse());\n        boolean failing = true;\n        try {\n            cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        } catch (ServerApiException ignored) {\n            failing = false;\n        }\n        assertFalse(\"authentication should not have succeeded\", failing);\n        Mockito.verify(userAccountDao, Mockito.times(0)).getUserAccount(Mockito.anyString(), Mockito.anyLong());\n        Mockito.verify(apiServer, Mockito.times(0)).verifyUser(Mockito.anyLong());\n    }\n","realPath":"plugins/user-authenticators/saml2/src/test/java/org/apache/cloudstack/api/command/SAML2LoginAPIAuthenticatorCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testAuthenticate() throws Exception {\n        GetServiceProviderMetaDataCmd cmd = new GetServiceProviderMetaDataCmd();\n\n        Field apiServerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        String spId = \"someSPID\";\n        String url = \"someUrl\";\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n\n        String result = cmd.authenticate(\"command\", null, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Assert.assertTrue(result.contains(\"md:EntityDescriptor\"));\n    }\n","date":"2018-01-20 05:49:27","endLine":94,"groupId":"2069","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"testAuthenticate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3d/f0fccadfadc7f0ef79c4423f774d1da261c2a2.src","preCode":"    public void testAuthenticate() throws Exception {\n        GetServiceProviderMetaDataCmd cmd = new GetServiceProviderMetaDataCmd();\n\n        Field apiServerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        String spId = \"someSPID\";\n        String url = \"someUrl\";\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n\n        String result = cmd.authenticate(\"command\", null, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Assert.assertTrue(result.contains(\"md:EntityDescriptor\"));\n    }\n","realPath":"plugins/user-authenticators/saml2/src/test/java/org/apache/cloudstack/GetServiceProviderMetaDataCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-10-28 03:25:06","commitOrder":2,"curCode":"    public void testAuthenticate() throws Exception {\n        SAML2LoginAPIAuthenticatorCmd cmd = Mockito.spy(new SAML2LoginAPIAuthenticatorCmd());\n\n        Field apiServerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        Field accountServiceField = BaseCmd.class.getDeclaredField(\"_accountService\");\n        accountServiceField.setAccessible(true);\n        accountServiceField.set(cmd, accountService);\n\n        Field domainMgrField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"domainMgr\");\n        domainMgrField.setAccessible(true);\n        domainMgrField.set(cmd, domainMgr);\n\n        Field userAccountDaoField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"userAccountDao\");\n        userAccountDaoField.setAccessible(true);\n        userAccountDaoField.set(cmd, userAccountDao);\n\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(session.getAttribute(Mockito.anyString())).thenReturn(null);\n\n        Mockito.when(domain.getId()).thenReturn(1L);\n        Mockito.when(domainMgr.getDomain(Mockito.anyString())).thenReturn(domain);\n        UserAccountVO user = new UserAccountVO();\n        user.setId(1000L);\n        Mockito.when(userAccountDao.getUserAccount(Mockito.anyString(), Mockito.anyLong())).thenReturn(user);\n        Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(false);\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n        Mockito.when(samlAuthManager.getIdPMetadata(Mockito.anyString())).thenReturn(providerMetadata);\n\n        Map<String, Object[]> params = new HashMap<String, Object[]>();\n\n        \r\n        cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Mockito.verify(resp, Mockito.times(1)).sendRedirect(Mockito.anyString());\n\n        \r\n        params.put(SAMLPluginConstants.SAML_RESPONSE, new String[]{\"Some String\"});\n        Mockito.stub(cmd.processSAMLResponse(Mockito.anyString())).toReturn(buildMockResponse());\n        boolean failing = true;\n        try {\n            cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        } catch (ServerApiException ignored) {\n            failing = false;\n        }\n        assertFalse(\"authentication should not have succeeded\", failing);\n        Mockito.verify(userAccountDao, Mockito.times(0)).getUserAccount(Mockito.anyString(), Mockito.anyLong());\n        Mockito.verify(apiServer, Mockito.times(0)).verifyUser(Mockito.anyLong());\n    }\n","date":"2018-10-28 03:25:06","endLine":210,"groupId":"1540","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAuthenticate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/45cbb987dad3ec3ff49b29c3aecd98f9dd575d.src","preCode":"    public void testAuthenticate() throws Exception {\n        SAML2LoginAPIAuthenticatorCmd cmd = Mockito.spy(new SAML2LoginAPIAuthenticatorCmd());\n\n        Field apiServerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        Field accountServiceField = BaseCmd.class.getDeclaredField(\"_accountService\");\n        accountServiceField.setAccessible(true);\n        accountServiceField.set(cmd, accountService);\n\n        Field domainMgrField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_domainMgr\");\n        domainMgrField.setAccessible(true);\n        domainMgrField.set(cmd, domainMgr);\n\n        Field userAccountDaoField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"_userAccountDao\");\n        userAccountDaoField.setAccessible(true);\n        userAccountDaoField.set(cmd, userAccountDao);\n\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(session.getAttribute(Mockito.anyString())).thenReturn(null);\n\n        Mockito.when(domain.getId()).thenReturn(1L);\n        Mockito.when(domainMgr.getDomain(Mockito.anyString())).thenReturn(domain);\n        UserAccountVO user = new UserAccountVO();\n        user.setId(1000L);\n        Mockito.when(userAccountDao.getUserAccount(Mockito.anyString(), Mockito.anyLong())).thenReturn(user);\n        Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(false);\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n        Mockito.when(samlAuthManager.getIdPMetadata(Mockito.anyString())).thenReturn(providerMetadata);\n\n        Map<String, Object[]> params = new HashMap<String, Object[]>();\n\n        \r\n        cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Mockito.verify(resp, Mockito.times(1)).sendRedirect(Mockito.anyString());\n\n        \r\n        params.put(SAMLPluginConstants.SAML_RESPONSE, new String[]{\"Some String\"});\n        Mockito.stub(cmd.processSAMLResponse(Mockito.anyString())).toReturn(buildMockResponse());\n        boolean failing = true;\n        try {\n            cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        } catch (ServerApiException ignored) {\n            failing = false;\n        }\n        assertFalse(\"authentication should not have succeeded\", failing);\n        Mockito.verify(userAccountDao, Mockito.times(0)).getUserAccount(Mockito.anyString(), Mockito.anyLong());\n        Mockito.verify(apiServer, Mockito.times(0)).verifyUser(Mockito.anyLong());\n    }\n","realPath":"plugins/user-authenticators/saml2/src/test/java/org/apache/cloudstack/api/command/SAML2LoginAPIAuthenticatorCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testAuthenticate() throws Exception {\n        GetServiceProviderMetaDataCmd cmd = new GetServiceProviderMetaDataCmd();\n\n        Field apiServerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        String spId = \"someSPID\";\n        String url = \"someUrl\";\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n\n        String result = cmd.authenticate(\"command\", null, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Assert.assertTrue(result.contains(\"md:EntityDescriptor\"));\n    }\n","date":"2018-01-20 05:49:27","endLine":94,"groupId":"2069","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testAuthenticate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3d/f0fccadfadc7f0ef79c4423f774d1da261c2a2.src","preCode":"    public void testAuthenticate() throws Exception {\n        GetServiceProviderMetaDataCmd cmd = new GetServiceProviderMetaDataCmd();\n\n        Field apiServerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        String spId = \"someSPID\";\n        String url = \"someUrl\";\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n\n        String result = cmd.authenticate(\"command\", null, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Assert.assertTrue(result.contains(\"md:EntityDescriptor\"));\n    }\n","realPath":"plugins/user-authenticators/saml2/src/test/java/org/apache/cloudstack/GetServiceProviderMetaDataCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"bfc326384d9c453490a2e0b14d20989e7dcb76ad","commitMessage":"@@@saml: redirect saml2 failed login message to a configurable URL (#2185)\n\nWhen a user fails to authenticate with SAML2.  it returns an error page\nshowing the content of the attached image.\n\nTo make it more user-friendly and customizable.  one could configure a\ndesirable URL to redirect when such authentication failure happens.\n\nThis ticket proposes a global settings variable\n(saml2.failed.login.redirect.url). If null.  the SAML2 authentication\nflow does not change from the current; however.  if the user configures\nan URL then ACS redirects to that URL.","date":"2018-10-28 03:25:06","modifiedFileCount":"2","status":"M","submitter":"Gabriel Beims Br?scher"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":3,"curCode":"    public void testAuthenticate() throws Exception {\n        SAML2LoginAPIAuthenticatorCmd cmd = Mockito.spy(new SAML2LoginAPIAuthenticatorCmd());\n\n        Field apiServerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        Field accountServiceField = BaseCmd.class.getDeclaredField(\"_accountService\");\n        accountServiceField.setAccessible(true);\n        accountServiceField.set(cmd, accountService);\n\n        Field domainMgrField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"domainMgr\");\n        domainMgrField.setAccessible(true);\n        domainMgrField.set(cmd, domainMgr);\n\n        Field userAccountDaoField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"userAccountDao\");\n        userAccountDaoField.setAccessible(true);\n        userAccountDaoField.set(cmd, userAccountDao);\n\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.lenient().when(session.getAttribute(Mockito.anyString())).thenReturn(null);\n\n        Mockito.lenient().when(domain.getId()).thenReturn(1L);\n        Mockito.lenient().when(domainMgr.getDomain(Mockito.anyString())).thenReturn(domain);\n        UserAccountVO user = new UserAccountVO();\n        user.setId(1000L);\n        Mockito.lenient().when(userAccountDao.getUserAccount(Mockito.anyString(), Mockito.anyLong())).thenReturn(user);\n        Mockito.lenient().when(apiServer.verifyUser(nullable(Long.class))).thenReturn(false);\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n        Mockito.when(samlAuthManager.getIdPMetadata(nullable(String.class))).thenReturn(providerMetadata);\n\n        Map<String, Object[]> params = new HashMap<String, Object[]>();\n\n        \r\n        cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Mockito.verify(resp, Mockito.times(1)).sendRedirect(Mockito.anyString());\n\n        \r\n        params.put(SAMLPluginConstants.SAML_RESPONSE, new String[]{\"Some String\"});\n        Mockito.when(cmd.processSAMLResponse(Mockito.anyString())).thenReturn(buildMockResponse());\n        boolean failing = true;\n        try {\n            cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        } catch (ServerApiException ignored) {\n            failing = false;\n        }\n        assertFalse(\"authentication should not have succeeded\", failing);\n        Mockito.verify(userAccountDao, Mockito.times(0)).getUserAccount(Mockito.anyString(), Mockito.anyLong());\n        Mockito.verify(apiServer, Mockito.times(0)).verifyUser(Mockito.anyLong());\n    }\n","date":"2020-02-12 15:28:25","endLine":211,"groupId":"104370","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAuthenticate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/39/c8c231bf019759ccdb9b603101020c163f2bce.src","preCode":"    public void testAuthenticate() throws Exception {\n        SAML2LoginAPIAuthenticatorCmd cmd = Mockito.spy(new SAML2LoginAPIAuthenticatorCmd());\n\n        Field apiServerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        Field accountServiceField = BaseCmd.class.getDeclaredField(\"_accountService\");\n        accountServiceField.setAccessible(true);\n        accountServiceField.set(cmd, accountService);\n\n        Field domainMgrField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"domainMgr\");\n        domainMgrField.setAccessible(true);\n        domainMgrField.set(cmd, domainMgr);\n\n        Field userAccountDaoField = SAML2LoginAPIAuthenticatorCmd.class.getDeclaredField(\"userAccountDao\");\n        userAccountDaoField.setAccessible(true);\n        userAccountDaoField.set(cmd, userAccountDao);\n\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(session.getAttribute(Mockito.anyString())).thenReturn(null);\n\n        Mockito.when(domain.getId()).thenReturn(1L);\n        Mockito.when(domainMgr.getDomain(Mockito.anyString())).thenReturn(domain);\n        UserAccountVO user = new UserAccountVO();\n        user.setId(1000L);\n        Mockito.when(userAccountDao.getUserAccount(Mockito.anyString(), Mockito.anyLong())).thenReturn(user);\n        Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(false);\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n        Mockito.when(samlAuthManager.getIdPMetadata(Mockito.anyString())).thenReturn(providerMetadata);\n\n        Map<String, Object[]> params = new HashMap<String, Object[]>();\n\n        \r\n        cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Mockito.verify(resp, Mockito.times(1)).sendRedirect(Mockito.anyString());\n\n        \r\n        params.put(SAMLPluginConstants.SAML_RESPONSE, new String[]{\"Some String\"});\n        Mockito.stub(cmd.processSAMLResponse(Mockito.anyString())).toReturn(buildMockResponse());\n        boolean failing = true;\n        try {\n            cmd.authenticate(\"command\", params, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        } catch (ServerApiException ignored) {\n            failing = false;\n        }\n        assertFalse(\"authentication should not have succeeded\", failing);\n        Mockito.verify(userAccountDao, Mockito.times(0)).getUserAccount(Mockito.anyString(), Mockito.anyLong());\n        Mockito.verify(apiServer, Mockito.times(0)).verifyUser(Mockito.anyLong());\n    }\n","realPath":"plugins/user-authenticators/saml2/src/test/java/org/apache/cloudstack/api/command/SAML2LoginAPIAuthenticatorCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void testAuthenticate() throws Exception {\n        GetServiceProviderMetaDataCmd cmd = new GetServiceProviderMetaDataCmd();\n\n        Field apiServerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        String spId = \"someSPID\";\n        String url = \"someUrl\";\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n\n        String result = cmd.authenticate(\"command\", null, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Assert.assertTrue(result.contains(\"md:EntityDescriptor\"));\n    }\n","date":"2018-01-20 05:49:27","endLine":94,"groupId":"104370","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testAuthenticate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3d/f0fccadfadc7f0ef79c4423f774d1da261c2a2.src","preCode":"    public void testAuthenticate() throws Exception {\n        GetServiceProviderMetaDataCmd cmd = new GetServiceProviderMetaDataCmd();\n\n        Field apiServerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_apiServer\");\n        apiServerField.setAccessible(true);\n        apiServerField.set(cmd, apiServer);\n\n        Field managerField = GetServiceProviderMetaDataCmd.class.getDeclaredField(\"_samlAuthManager\");\n        managerField.setAccessible(true);\n        managerField.set(cmd, samlAuthManager);\n\n        String spId = \"someSPID\";\n        String url = \"someUrl\";\n        KeyPair kp = CertUtils.generateRandomKeyPair(4096);\n        X509Certificate cert = SAMLUtils.generateRandomX509Certificate(kp);\n\n        SAMLProviderMetadata providerMetadata = new SAMLProviderMetadata();\n        providerMetadata.setEntityId(\"random\");\n        providerMetadata.setSigningCertificate(cert);\n        providerMetadata.setEncryptionCertificate(cert);\n        providerMetadata.setKeyPair(kp);\n        providerMetadata.setSsoUrl(\"http://test.local\");\n        providerMetadata.setSloUrl(\"http://test.local\");\n\n        Mockito.when(samlAuthManager.getSPMetadata()).thenReturn(providerMetadata);\n\n        String result = cmd.authenticate(\"command\", null, session, InetAddress.getByName(\"127.0.0.1\"), HttpUtils.RESPONSE_TYPE_JSON, new StringBuilder(), req, resp);\n        Assert.assertTrue(result.contains(\"md:EntityDescriptor\"));\n    }\n","realPath":"plugins/user-authenticators/saml2/src/test/java/org/apache/cloudstack/GetServiceProviderMetaDataCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
