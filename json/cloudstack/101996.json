[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.getAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (NicVO nic : nics) {\n            NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":4394,"groupId":"1309","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/da/b741c3c274ded6ea2d8ba461cb81d920542cb3.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.getAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (NicVO nic : nics) {\n            NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4367,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1306,"groupId":"12012","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/58c9c0e6824403a7fc6575a694f76829e8889a.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":2,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.isAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (NicVO nic : nics) {\n            NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","date":"2018-09-22 23:20:48","endLine":4382,"groupId":"1309","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8d/bdf4bd862c76d5243ed3a85344222c16528eae.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.getAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (NicVO nic : nics) {\n            NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4355,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1306,"groupId":"12012","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/58c9c0e6824403a7fc6575a694f76829e8889a.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"N"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-03 19:47:51","commitOrder":3,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.isAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network != null && network.getTrafficType() == TrafficType.Guest) {\n                final String nicIp = Strings.isNullOrEmpty(nic.getIPv4Address()) ? nic.getIPv6Address() : nic.getIPv4Address();\n                if (!Strings.isNullOrEmpty(nicIp)) {\n                    NicProfile nicProfile = new NicProfile(nic.getIPv4Address(), nic.getIPv6Address(), nic.getMacAddress());\n                    nicProfile.setId(nic.getId());\n                    _networkMgr.cleanupNicDhcpDnsEntry(network, profile, nicProfile);\n                }\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","date":"2019-06-03 19:47:51","endLine":4451,"groupId":"1309","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/66/50dbe75f098b500efbc9645b76546915026885.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.isAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (NicVO nic : nics) {\n            NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4418,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1306,"groupId":"12012","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/58c9c0e6824403a7fc6575a694f76829e8889a.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"N"}],"commitId":"1c5244a0c58510c467707d5d9f2c4fbc72d784d0","commitMessage":"@@@Merge remote-tracking branch 'origin/4.12'\n","date":"2019-06-03 19:47:51","modifiedFileCount":"19","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-09-26 20:48:20","commitOrder":4,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.isAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network != null && network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","date":"2019-09-26 20:48:20","endLine":4564,"groupId":"1309","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/03b33e33314356120acf72e520e7feb527340b.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.isAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network != null && network.getTrafficType() == TrafficType.Guest) {\n                final String nicIp = Strings.isNullOrEmpty(nic.getIPv4Address()) ? nic.getIPv6Address() : nic.getIPv4Address();\n                if (!Strings.isNullOrEmpty(nicIp)) {\n                    NicProfile nicProfile = new NicProfile(nic.getIPv4Address(), nic.getIPv6Address(), nic.getMacAddress());\n                    nicProfile.setId(nic.getId());\n                    _networkMgr.cleanupNicDhcpDnsEntry(network, profile, nicProfile);\n                }\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4537,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1306,"groupId":"12012","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/58c9c0e6824403a7fc6575a694f76829e8889a.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"N"}],"commitId":"666ec698a2d774f72d6ce27a2f489492d9f865af","commitMessage":"@@@Merge remote-tracking branch 'origin/4.13'\n","date":"2019-09-26 20:48:20","modifiedFileCount":"1","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-05-10 15:47:42","codes":[{"authorDate":"2019-09-26 20:48:20","commitOrder":5,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.isAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network != null && network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","date":"2019-09-26 20:48:20","endLine":4564,"groupId":"101996","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/03b33e33314356120acf72e520e7feb527340b.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        VirtualMachine vm = profile.getVirtualMachine();\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                long networkId = ip.getAssociatedWithNetworkId();\n                Network guestNetwork = _networkDao.findById(networkId);\n                NetworkOffering offering = _entityMgr.findById(NetworkOffering.class, guestNetwork.getNetworkOfferingId());\n                assert (offering.isAssociatePublicIP() == true) : \"User VM should not have system owned public IP associated with it when offering configured not to associate public IP.\";\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \", ex);\n            }\n        }\n\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networkDao.findById(nic.getNetworkId());\n            if (network != null && network.getTrafficType() == TrafficType.Guest) {\n                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                    NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                    setupVmForPvlan(false, vm.getHostId(), nicProfile);\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4537,"status":"N"},{"authorDate":"2021-05-10 15:47:42","commitOrder":5,"curCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (ResourceUnavailableException ex) {\n                s_logger.error(String.format(\"Failed to disable static NAT and release system IP [%s] as a part of VM [%s] stop due to [%s].\", ip, profile.toString(), ex.getMessage()), ex);\n            }\n        }\n    }\n","date":"2021-05-10 15:47:42","endLine":1254,"groupId":"101996","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeStop","params":"(VirtualMachineProfileprofile@Answeranswer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/f8bbb803bc65cb60ba132e109ff04fc94b63b5.src","preCode":"    public void finalizeStop(VirtualMachineProfile profile, Answer answer) {\n        \r\n        IPAddressVO ip = _ipAddressDao.findByAssociatedVmId(profile.getId());\n        if (ip != null && ip.getSystem()) {\n            CallContext ctx = CallContext.current();\n            try {\n                _rulesMgr.disableStaticNat(ip.getId(), ctx.getCallingAccount(), ctx.getCallingUserId(), true);\n            } catch (Exception ex) {\n                s_logger.warn(\"Failed to disable static nat and release system ip \" + ip + \" as a part of vm \" + profile.getVirtualMachine() + \" stop due to exception \",\n                    ex);\n            }\n        }\n    }\n","realPath":"services/secondary-storage/controller/src/main/java/org/apache/cloudstack/secondarystorage/SecondaryStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1244,"status":"M"}],"commitId":"3674e80219d0be9e940bd948060fa10a467e4b7e","commitMessage":"@@@Improve logs on SecondaryStorageManagerImpl and few refactors (#4955)\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <daniel@scclouds.com.br>","date":"2021-05-10 15:47:42","modifiedFileCount":"4","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
