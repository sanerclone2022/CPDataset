[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testUnPlugNicCommandMatchMack() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef intDef = Mockito.mock(InterfaceDef.class);\n        nics.add(intDef);\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        when(intDef.getDevName()).thenReturn(\"eth0\");\n        when(intDef.getBrName()).thenReturn(\"br0\");\n        when(intDef.getMacAddress()).thenReturn(\"00:00:00:00\");\n\n        when(nic.getMac()).thenReturn(\"00:00:00:00\");\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n\n            when(interfaceDef.toString()).thenReturn(\"Interface\");\n\n            final String interfaceDefStr = interfaceDef.toString();\n            doNothing().when(vm).detachDevice(interfaceDefStr);\n\n            when(libvirtComputingResource.getAllVifDrivers()).thenReturn(drivers);\n\n            doNothing().when(vifDriver).unplug(intDef);\n\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n            verify(libvirtComputingResource, times(1)).getAllVifDrivers();\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3347,"groupId":"21092","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnPlugNicCommandMatchMack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testUnPlugNicCommandMatchMack() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef intDef = Mockito.mock(InterfaceDef.class);\n        nics.add(intDef);\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        when(intDef.getDevName()).thenReturn(\"eth0\");\n        when(intDef.getBrName()).thenReturn(\"br0\");\n        when(intDef.getMacAddress()).thenReturn(\"00:00:00:00\");\n\n        when(nic.getMac()).thenReturn(\"00:00:00:00\");\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n\n            when(interfaceDef.toString()).thenReturn(\"Interface\");\n\n            final String interfaceDefStr = interfaceDef.toString();\n            doNothing().when(vm).detachDevice(interfaceDefStr);\n\n            when(libvirtComputingResource.getAllVifDrivers()).thenReturn(drivers);\n\n            doNothing().when(vifDriver).unplug(intDef);\n\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n            verify(libvirtComputingResource, times(1)).getAllVifDrivers();\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3288,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testUnPlugNicCommandNoNics() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3389,"groupId":"21091","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnPlugNicCommandNoNics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testUnPlugNicCommandNoNics() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3350,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-04-05 17:07:11","commitOrder":2,"curCode":"    public void testUnPlugNicCommandMatchMack() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef intDef = Mockito.mock(InterfaceDef.class);\n        nics.add(intDef);\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        when(intDef.getDevName()).thenReturn(\"eth0\");\n        when(intDef.getBrName()).thenReturn(\"br0\");\n        when(intDef.getMacAddress()).thenReturn(\"00:00:00:00\");\n\n        when(nic.getMac()).thenReturn(\"00:00:00:00\");\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n\n            when(interfaceDef.toString()).thenReturn(\"Interface\");\n\n            final String interfaceDefStr = interfaceDef.toString();\n            doNothing().when(vm).detachDevice(interfaceDefStr);\n\n            when(libvirtComputingResource.getAllVifDrivers()).thenReturn(drivers);\n\n            doNothing().when(vifDriver).unplug(intDef, true);\n\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n            verify(libvirtComputingResource, times(1)).getAllVifDrivers();\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2021-04-05 17:07:11","endLine":3387,"groupId":"103209","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnPlugNicCommandMatchMack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/84/d08531c2bf11f58f6a4645fb558b7d6f1bcc9c.src","preCode":"    public void testUnPlugNicCommandMatchMack() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n        final InterfaceDef interfaceDef = Mockito.mock(InterfaceDef.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n        final InterfaceDef intDef = Mockito.mock(InterfaceDef.class);\n        nics.add(intDef);\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        when(intDef.getDevName()).thenReturn(\"eth0\");\n        when(intDef.getBrName()).thenReturn(\"br0\");\n        when(intDef.getMacAddress()).thenReturn(\"00:00:00:00\");\n\n        when(nic.getMac()).thenReturn(\"00:00:00:00\");\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n\n            when(interfaceDef.toString()).thenReturn(\"Interface\");\n\n            final String interfaceDefStr = interfaceDef.toString();\n            doNothing().when(vm).detachDevice(interfaceDefStr);\n\n            when(libvirtComputingResource.getAllVifDrivers()).thenReturn(drivers);\n\n            doNothing().when(vifDriver).unplug(intDef);\n\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n            verify(libvirtComputingResource, times(1)).getAllVifDrivers();\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3328,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testUnPlugNicCommandNoNics() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3389,"groupId":"103209","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnPlugNicCommandNoNics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2f/d7692df58eba74eb0aa325e4562be65e6cf043.src","preCode":"    public void testUnPlugNicCommandNoNics() {\n        final NicTO nic = Mockito.mock(NicTO.class);\n        final String instanceName = \"Test\";\n\n        final UnPlugNicCommand command = new UnPlugNicCommand(nic, instanceName);\n\n        final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock(LibvirtUtilitiesHelper.class);\n        final Connect conn = Mockito.mock(Connect.class);\n        final Domain vm = Mockito.mock(Domain.class);\n\n        final List<InterfaceDef> nics = new ArrayList<InterfaceDef>();\n\n        final VifDriver vifDriver = Mockito.mock(VifDriver.class);\n        final List<VifDriver> drivers = new ArrayList<VifDriver>();\n        drivers.add(vifDriver);\n\n        when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);\n        when(libvirtComputingResource.getInterfaces(conn, command.getVmName())).thenReturn(nics);\n\n        try {\n            when(libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName())).thenReturn(conn);\n            when(libvirtComputingResource.getDomain(conn, instanceName)).thenReturn(vm);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n\n        final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance();\n        assertNotNull(wrapper);\n\n        final Answer answer = wrapper.execute(command, libvirtComputingResource);\n        assertTrue(answer.getResult());\n\n        verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper();\n        try {\n            verify(libvirtUtilitiesHelper, times(1)).getConnectionByVmName(command.getVmName());\n            verify(libvirtComputingResource, times(1)).getDomain(conn, instanceName);\n        } catch (final LibvirtException e) {\n            fail(e.getMessage());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3350,"status":"N"}],"commitId":"0dbeb262e4f483e06ca335aadcee9664cf7f35c4","commitMessage":"@@@server: Support for persistence mode in L2 networks (#4561)\n\nThis PR aims at introducing persistence mode in L2 networks and enhancing the behavior in Isolated networks\nDoc PR apache/cloudstack-documentation#183\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2021-04-05 17:07:11","modifiedFileCount":"27","status":"M","submitter":"Pearl Dsilva"}]
