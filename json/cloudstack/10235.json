[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private void fixIndexes(Connection conn) {\n        \r\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute usage_event table update\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud_usage.usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud_usage`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute cloud_usage usage_event table update\", e);\n        }\n\n        \r\n        DbUpgradeUtils.dropPrimaryKeyIfExists(conn, \"cloud.netapp_volume\");\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`netapp_volume` add PRIMARY KEY (`id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update primary key for netapp_volume\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_snapshots__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.snapshots\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`snapshots` ADD INDEX `i_snapshots__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in snapshots\", e);\n        }\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n\n        keys = new ArrayList<String>();\n        keys.add(\"u_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`op_vm_ruleset_log` ADD CONSTRAINT `u_op_vm_ruleset_log__instance_id` UNIQUE (`instance_id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute changes for op_vm_ruleset_log\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, true);\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, false);\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__account_id` FOREIGN KEY `fk_ssh_keypairs__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding account_id foreign key\", e);\n        }\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__domain_id` FOREIGN KEY `fk_ssh_keypairs__domain_id` (`domain_id`) REFERENCES `domain` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding domain_id foreign key\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_storage_pool__pool_id\");\n        keys.add(\"fk_storage_pool_details__pool_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`storage_pool_details` ADD CONSTRAINT `fk_storage_pool_details__pool_id` FOREIGN KEY `fk_storage_pool_details__pool_id`(`pool_id`) REFERENCES `storage_pool`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in storage_pool_details \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_security_group___account_id\");\n        keys.add(\"fk_security_group__account_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` ADD CONSTRAINT `fk_security_group__account_id` FOREIGN KEY `fk_security_group__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in security_group table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_vm_instance__host_id\");\n        keys.add(\"fk_vm_instance__host_id\");\n\n        keys.add(\"fk_vm_instance__last_host_id\");\n        keys.add(\"i_vm_instance__last_host_id\");\n\n        keys.add(\"fk_vm_instance__service_offering_id\");\n        keys.add(\"i_vm_instance__service_offering_id\");\n\n        keys.add(\"fk_vm_instance__account_id\");\n        keys.add(\"i_vm_instance__account_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__host_id` FOREIGN KEY (`host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__last_host_id` FOREIGN KEY (`last_host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__account_id` FOREIGN KEY (`account_id`) REFERENCES `account` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__service_offering_id` FOREIGN KEY (`service_offering_id`) REFERENCES `service_offering` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_user_ip_address__account_id\");\n        keys.add(\"i_user_ip_address__account_id\");\n\n        keys.add(\"fk_user_ip_address__vlan_db_id\");\n        keys.add(\"i_user_ip_address__vlan_db_id\");\n\n        keys.add(\"fk_user_ip_address__data_center_id\");\n        keys.add(\"i_user_ip_address__data_center_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__account_id` FOREIGN KEY (`account_id`) REFERENCES `account`(`id`)\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__vlan_db_id` FOREIGN KEY (`vlan_db_id`) REFERENCES `vlan`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__data_center_id`\" +\n                    \" FOREIGN KEY (`data_center_id`) REFERENCES `data_center`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":285,"groupId":"8552","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fixIndexes","params":"(Connectionconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f1/55d6fe91d85b28ac9d4d3d28e1b98142af77d1.src","preCode":"    private void fixIndexes(Connection conn) {\n        \r\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute usage_event table update\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud_usage.usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud_usage`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute cloud_usage usage_event table update\", e);\n        }\n\n        \r\n        DbUpgradeUtils.dropPrimaryKeyIfExists(conn, \"cloud.netapp_volume\");\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`netapp_volume` add PRIMARY KEY (`id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update primary key for netapp_volume\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_snapshots__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.snapshots\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`snapshots` ADD INDEX `i_snapshots__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in snapshots\", e);\n        }\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n\n        keys = new ArrayList<String>();\n        keys.add(\"u_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`op_vm_ruleset_log` ADD CONSTRAINT `u_op_vm_ruleset_log__instance_id` UNIQUE (`instance_id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute changes for op_vm_ruleset_log\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, true);\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, false);\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__account_id` FOREIGN KEY `fk_ssh_keypairs__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding account_id foreign key\", e);\n        }\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__domain_id` FOREIGN KEY `fk_ssh_keypairs__domain_id` (`domain_id`) REFERENCES `domain` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding domain_id foreign key\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_storage_pool__pool_id\");\n        keys.add(\"fk_storage_pool_details__pool_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`storage_pool_details` ADD CONSTRAINT `fk_storage_pool_details__pool_id` FOREIGN KEY `fk_storage_pool_details__pool_id`(`pool_id`) REFERENCES `storage_pool`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in storage_pool_details \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_security_group___account_id\");\n        keys.add(\"fk_security_group__account_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` ADD CONSTRAINT `fk_security_group__account_id` FOREIGN KEY `fk_security_group__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in security_group table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_vm_instance__host_id\");\n        keys.add(\"fk_vm_instance__host_id\");\n\n        keys.add(\"fk_vm_instance__last_host_id\");\n        keys.add(\"i_vm_instance__last_host_id\");\n\n        keys.add(\"fk_vm_instance__service_offering_id\");\n        keys.add(\"i_vm_instance__service_offering_id\");\n\n        keys.add(\"fk_vm_instance__account_id\");\n        keys.add(\"i_vm_instance__account_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__host_id` FOREIGN KEY (`host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__last_host_id` FOREIGN KEY (`last_host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__account_id` FOREIGN KEY (`account_id`) REFERENCES `account` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__service_offering_id` FOREIGN KEY (`service_offering_id`) REFERENCES `service_offering` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_user_ip_address__account_id\");\n        keys.add(\"i_user_ip_address__account_id\");\n\n        keys.add(\"fk_user_ip_address__vlan_db_id\");\n        keys.add(\"i_user_ip_address__vlan_db_id\");\n\n        keys.add(\"fk_user_ip_address__data_center_id\");\n        keys.add(\"i_user_ip_address__data_center_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__account_id` FOREIGN KEY (`account_id`) REFERENCES `account`(`id`)\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__vlan_db_id` FOREIGN KEY (`vlan_db_id`) REFERENCES `vlan`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__data_center_id`\" +\n                    \" FOREIGN KEY (`data_center_id`) REFERENCES `data_center`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade2213to2214.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected void updateRouters(Connection conn) {\n        PreparedStatement pstmt = null;\n        try {\n            s_logger.debug(\"Updating domain_router table\");\n            pstmt =\n                conn.prepareStatement(\"UPDATE domain_router, virtual_router_providers vrp LEFT JOIN (physical_network_service_providers pnsp INNER JOIN physical_network pntwk INNER JOIN vm_instance vm INNER JOIN domain_router vr) ON (vrp.nsp_id = pnsp.id AND pnsp.physical_network_id = pntwk.id AND pntwk.data_center_id = vm.data_center_id AND vm.id=vr.id) SET vr.element_id=vrp.id;\");\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update router table. \", e);\n        } finally {\n            try {\n                if (pstmt != null) {\n                    pstmt.close();\n                }\n            } catch (SQLException e) {\n                throw new CloudRuntimeException(\"Unable to close statement for router table. \", e);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":775,"groupId":"6040","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"updateRouters","params":"(Connectionconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7d/e60bff8d4c9d319723bbfa9d2fe4ea3fb1af49.src","preCode":"    protected void updateRouters(Connection conn) {\n        PreparedStatement pstmt = null;\n        try {\n            s_logger.debug(\"Updating domain_router table\");\n            pstmt =\n                conn.prepareStatement(\"UPDATE domain_router, virtual_router_providers vrp LEFT JOIN (physical_network_service_providers pnsp INNER JOIN physical_network pntwk INNER JOIN vm_instance vm INNER JOIN domain_router vr) ON (vrp.nsp_id = pnsp.id AND pnsp.physical_network_id = pntwk.id AND pntwk.data_center_id = vm.data_center_id AND vm.id=vr.id) SET vr.element_id=vrp.id;\");\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update router table. \", e);\n        } finally {\n            try {\n                if (pstmt != null) {\n                    pstmt.close();\n                }\n            } catch (SQLException e) {\n                throw new CloudRuntimeException(\"Unable to close statement for router table. \", e);\n            }\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade2214to30.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":757,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-06-20 01:09:22","commitOrder":2,"curCode":"    private void fixIndexes(Connection conn) {\n        \r\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute usage_event table update\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud_usage.usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud_usage`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute cloud_usage usage_event table update\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_snapshots__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.snapshots\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`snapshots` ADD INDEX `i_snapshots__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in snapshots\", e);\n        }\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n\n        keys = new ArrayList<String>();\n        keys.add(\"u_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`op_vm_ruleset_log` ADD CONSTRAINT `u_op_vm_ruleset_log__instance_id` UNIQUE (`instance_id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute changes for op_vm_ruleset_log\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, true);\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, false);\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__account_id` FOREIGN KEY `fk_ssh_keypairs__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding account_id foreign key\", e);\n        }\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__domain_id` FOREIGN KEY `fk_ssh_keypairs__domain_id` (`domain_id`) REFERENCES `domain` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding domain_id foreign key\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_storage_pool__pool_id\");\n        keys.add(\"fk_storage_pool_details__pool_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`storage_pool_details` ADD CONSTRAINT `fk_storage_pool_details__pool_id` FOREIGN KEY `fk_storage_pool_details__pool_id`(`pool_id`) REFERENCES `storage_pool`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in storage_pool_details \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_security_group___account_id\");\n        keys.add(\"fk_security_group__account_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` ADD CONSTRAINT `fk_security_group__account_id` FOREIGN KEY `fk_security_group__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in security_group table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_vm_instance__host_id\");\n        keys.add(\"fk_vm_instance__host_id\");\n\n        keys.add(\"fk_vm_instance__last_host_id\");\n        keys.add(\"i_vm_instance__last_host_id\");\n\n        keys.add(\"fk_vm_instance__service_offering_id\");\n        keys.add(\"i_vm_instance__service_offering_id\");\n\n        keys.add(\"fk_vm_instance__account_id\");\n        keys.add(\"i_vm_instance__account_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__host_id` FOREIGN KEY (`host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__last_host_id` FOREIGN KEY (`last_host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__account_id` FOREIGN KEY (`account_id`) REFERENCES `account` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__service_offering_id` FOREIGN KEY (`service_offering_id`) REFERENCES `service_offering` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_user_ip_address__account_id\");\n        keys.add(\"i_user_ip_address__account_id\");\n\n        keys.add(\"fk_user_ip_address__vlan_db_id\");\n        keys.add(\"i_user_ip_address__vlan_db_id\");\n\n        keys.add(\"fk_user_ip_address__data_center_id\");\n        keys.add(\"i_user_ip_address__data_center_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__account_id` FOREIGN KEY (`account_id`) REFERENCES `account`(`id`)\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__vlan_db_id` FOREIGN KEY (`vlan_db_id`) REFERENCES `vlan`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__data_center_id`\" +\n                    \" FOREIGN KEY (`data_center_id`) REFERENCES `data_center`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n    }\n","date":"2018-06-20 01:09:22","endLine":275,"groupId":"10235","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"fixIndexes","params":"(Connectionconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/c3f5be2d8fba79af18426316290ce6b09c03d6.src","preCode":"    private void fixIndexes(Connection conn) {\n        \r\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute usage_event table update\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_usage_event__created\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud_usage.usage_event\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud_usage`.`usage_event` ADD INDEX `i_usage_event__created`(`created`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute cloud_usage usage_event table update\", e);\n        }\n\n        \r\n        DbUpgradeUtils.dropPrimaryKeyIfExists(conn, \"cloud.netapp_volume\");\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`netapp_volume` add PRIMARY KEY (`id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update primary key for netapp_volume\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_snapshots__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.snapshots\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`snapshots` ADD INDEX `i_snapshots__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in snapshots\", e);\n        }\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n\n        keys = new ArrayList<String>();\n        keys.add(\"u_op_vm_ruleset_log__instance_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.op_vm_ruleset_log\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`op_vm_ruleset_log` ADD CONSTRAINT `u_op_vm_ruleset_log__instance_id` UNIQUE (`instance_id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute changes for op_vm_ruleset_log\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, true);\n\n        keys = new ArrayList<String>();\n        keys.add(\"fk_ssh_keypair__account_id\");\n        keys.add(\"fk_ssh_keypair__domain_id\");\n        keys.add(\"fk_ssh_keypairs__account_id\");\n        keys.add(\"fk_ssh_keypairs__domain_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"ssh_keypairs\", keys, false);\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__account_id` FOREIGN KEY `fk_ssh_keypairs__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding account_id foreign key\", e);\n        }\n\n        try {\n            PreparedStatement pstmt;\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`ssh_keypairs` ADD CONSTRAINT `fk_ssh_keypairs__domain_id` FOREIGN KEY `fk_ssh_keypairs__domain_id` (`domain_id`) REFERENCES `domain` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to execute ssh_keypairs table update for adding domain_id foreign key\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_async__removed\");\n        keys.add(\"i_async_job__removed\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.async_job\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`async_job` ADD INDEX `i_async_job__removed`(`removed`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert index for removed column in async_job\", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_storage_pool__pool_id\");\n        keys.add(\"fk_storage_pool_details__pool_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.storage_pool_details\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`storage_pool_details` ADD CONSTRAINT `fk_storage_pool_details__pool_id` FOREIGN KEY `fk_storage_pool_details__pool_id`(`pool_id`) REFERENCES `storage_pool`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in storage_pool_details \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_security_group___account_id\");\n        keys.add(\"fk_security_group__account_id\");\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.security_group\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`security_group` ADD CONSTRAINT `fk_security_group__account_id` FOREIGN KEY `fk_security_group__account_id` (`account_id`) REFERENCES `account` (`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in security_group table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"i_vm_instance__host_id\");\n        keys.add(\"fk_vm_instance__host_id\");\n\n        keys.add(\"fk_vm_instance__last_host_id\");\n        keys.add(\"i_vm_instance__last_host_id\");\n\n        keys.add(\"fk_vm_instance__service_offering_id\");\n        keys.add(\"i_vm_instance__service_offering_id\");\n\n        keys.add(\"fk_vm_instance__account_id\");\n        keys.add(\"i_vm_instance__account_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.vm_instance\", keys, false);\n        try {\n            PreparedStatement pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__host_id` FOREIGN KEY (`host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__last_host_id` FOREIGN KEY (`last_host_id`) REFERENCES `host` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__account_id` FOREIGN KEY (`account_id`) REFERENCES `account` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt =\n                conn.prepareStatement(\"ALTER TABLE `cloud`.`vm_instance` ADD CONSTRAINT `fk_vm_instance__service_offering_id` FOREIGN KEY (`service_offering_id`) REFERENCES `service_offering` (`id`)\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n        \r\n        keys = new ArrayList<String>();\n        keys.add(\"fk_user_ip_address__account_id\");\n        keys.add(\"i_user_ip_address__account_id\");\n\n        keys.add(\"fk_user_ip_address__vlan_db_id\");\n        keys.add(\"i_user_ip_address__vlan_db_id\");\n\n        keys.add(\"fk_user_ip_address__data_center_id\");\n        keys.add(\"i_user_ip_address__data_center_id\");\n\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, true);\n        DbUpgradeUtils.dropKeysIfExist(conn, \"cloud.user_ip_address\", keys, false);\n        try {\n            PreparedStatement pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__account_id` FOREIGN KEY (`account_id`) REFERENCES `account`(`id`)\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__vlan_db_id` FOREIGN KEY (`vlan_db_id`) REFERENCES `vlan`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt = conn.prepareStatement(\n                \"ALTER TABLE `cloud`.`user_ip_address` ADD CONSTRAINT `fk_user_ip_address__data_center_id`\" +\n                    \" FOREIGN KEY (`data_center_id`) REFERENCES `data_center`(`id`) ON DELETE CASCADE\");\n            pstmt.executeUpdate();\n            pstmt.close();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to insert foreign key in vm_instance table \", e);\n        }\n\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade2213to2214.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected void updateRouters(Connection conn) {\n        PreparedStatement pstmt = null;\n        try {\n            s_logger.debug(\"Updating domain_router table\");\n            pstmt =\n                conn.prepareStatement(\"UPDATE domain_router, virtual_router_providers vrp LEFT JOIN (physical_network_service_providers pnsp INNER JOIN physical_network pntwk INNER JOIN vm_instance vm INNER JOIN domain_router vr) ON (vrp.nsp_id = pnsp.id AND pnsp.physical_network_id = pntwk.id AND pntwk.data_center_id = vm.data_center_id AND vm.id=vr.id) SET vr.element_id=vrp.id;\");\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update router table. \", e);\n        } finally {\n            try {\n                if (pstmt != null) {\n                    pstmt.close();\n                }\n            } catch (SQLException e) {\n                throw new CloudRuntimeException(\"Unable to close statement for router table. \", e);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":775,"groupId":"10235","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"updateRouters","params":"(Connectionconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7d/e60bff8d4c9d319723bbfa9d2fe4ea3fb1af49.src","preCode":"    protected void updateRouters(Connection conn) {\n        PreparedStatement pstmt = null;\n        try {\n            s_logger.debug(\"Updating domain_router table\");\n            pstmt =\n                conn.prepareStatement(\"UPDATE domain_router, virtual_router_providers vrp LEFT JOIN (physical_network_service_providers pnsp INNER JOIN physical_network pntwk INNER JOIN vm_instance vm INNER JOIN domain_router vr) ON (vrp.nsp_id = pnsp.id AND pnsp.physical_network_id = pntwk.id AND pntwk.data_center_id = vm.data_center_id AND vm.id=vr.id) SET vr.element_id=vrp.id;\");\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update router table. \", e);\n        } finally {\n            try {\n                if (pstmt != null) {\n                    pstmt.close();\n                }\n            } catch (SQLException e) {\n                throw new CloudRuntimeException(\"Unable to close statement for router table. \", e);\n            }\n        }\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade2214to30.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":757,"status":"N"}],"commitId":"9776157ea192f11dfcc2703589105df288767241","commitMessage":"@@@Merge pull request #2670 from mike-tutkowski/remove-old-netapp-plug-in\n\nRemoving an old.  unused NetApp plug-in","date":"2018-06-20 01:09:22","modifiedFileCount":"2","status":"M","submitter":"Mike Tutkowski"}]
