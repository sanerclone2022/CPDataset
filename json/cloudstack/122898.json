[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO) srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName,\n                        chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\"\n                            + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid,\n                            prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n\n                final String volumeUuid = snapshotTO.getVolume().getPath();\n\n                destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \"+physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Types.XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-01-20 05:49:27","endLine":589,"groupId":"9764","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ca/58e4a4154076b56881e85fdef5be58ca3aef24.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO) srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName,\n                        chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\"\n                            + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid,\n                            prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n\n                final String volumeUuid = snapshotTO.getVolume().getPath();\n\n                destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \"+physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Types.XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-01-20 05:49:27","endLine":1275,"groupId":"9464","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/7c6a23e41517d2d2e166e1fecd2d9f65dd26cc.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1095,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-02-09 18:53:02","commitOrder":2,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO) srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName,\n                        chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\"\n                            + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid,\n                            prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \"+physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-02-09 18:53:20","endLine":590,"groupId":"9764","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/a1752abd73db56172620e774bd277e44004dc5.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO) srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName,\n                        chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\"\n                            + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid,\n                            prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n\n                final String volumeUuid = snapshotTO.getVolume().getPath();\n\n                destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \"+physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Types.XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-01-20 05:49:27","endLine":1275,"groupId":"9464","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/7c6a23e41517d2d2e166e1fecd2d9f65dd26cc.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1095,"status":"N"}],"commitId":"1c26b2ec2ec5f3da88b4782c365cf898cd611193","commitMessage":"@@@Merge remote-tracking branch 'origin/4.11'\n\nCLOUDSTACK-10269: On deletion of role set name to null (#2444)\nCLOUDSTACK-10146 checksum in java instead of script (#2405)\nCLOUDSTACK-10222: Clean snaphosts from primary storage when taking (#2398)\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-02-09 18:53:20","modifiedFileCount":"4","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-03-30 02:55:42","commitOrder":3,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO)cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO)destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO)destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Failed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \" + physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-03-30 02:55:42","endLine":681,"groupId":"9764","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d8/09560ac22d7840f40009d8be4467fc6afe7d86.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO) srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName,\n                        chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\"\n                            + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid,\n                            prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \"+physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-01-20 05:49:27","endLine":1275,"groupId":"9464","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/7c6a23e41517d2d2e166e1fecd2d9f65dd26cc.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1095,"status":"N"}],"commitId":"060715e9f5f929804b7f515cfba0b4b130581876","commitMessage":"@@@[CLOUDSTACK-10241] Duplicated file SRs being created in XenServer pools (#2414)\n\n* [CLOUDSTACK-10241] Duplicated file SRs being created in XenServer pools\n\nDue to a race condition between multiple management servers.  in some rare cases.  CloudStack is creating multiple file SRs to the same secondary folder. This causes a problem when introducing the SR to the XenServer pools.  as ?there will be VDIs with duplicated UUIDs?. The VDIs are the same.  but they are seen in different SRs.  and therefore cause an error.\n\nThe solution to avoid race conditions between management servers is to use a deterministic srUuid for the file SR to be created (we are leaving XenServer with the burden of managing race conditions). The UUID is based on the SR file path and is generated using  UUID#nameUUIDFromBytes. Therefore.  if there is an SR with the generated UUID.  this means that some other management server has just created it. An exception will occur and it will contain a message saying 'Db_exn.Uniqueness_constraint_violation'. In these unlikely events.  we catch the exception and use the method retrieveAlreadyConfiguredSrWithoutException to get the SR that has already been created for the given mount point.\n","date":"2018-03-30 02:55:42","modifiedFileCount":"3","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-15 18:38:33","commitOrder":4,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO)cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO)destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO)destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Failed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \" + physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2020-01-15 18:38:33","endLine":681,"groupId":"6653","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/c8b708bf3ab0d71a1e86e80c4b04339107e3d3.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO)cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO)destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO)destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Failed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \" + physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-01-20 05:49:27","endLine":1275,"groupId":"9464","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/7c6a23e41517d2d2e166e1fecd2d9f65dd26cc.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1095,"status":"N"}],"commitId":"be97470d83a0c6e834d97c9860354176016f2c64","commitMessage":"@@@Get Diagnostics: Download logs and diagnostics data from SSVM.  CPVM.  Router (#3350)\n\n* * Complete API implementation\n* Complete UI integration\n* Complete marvin test\n* Complete Secondary storage GC background task\n\n* improve UI labels\n\n* slight reword and add another missing description\n\n* improve download message clarity\n\n* Address comments\n\n* multiple fixes and cleanups\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* fix more bugs.  let it return ip rule list in another log file\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* fix missing iprule bug\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* add support for ARCHIVE type of object to be linked/setup on secstorage\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* Fix retrieving files for Xenserver\n\n* Update get_diagnostics_files.py\n\n* Fix bug where executable scripts weren't handled\n\n* Fixed error on script cmd generation\n\n* Do not filter name for log files as it would override similar prefix script names\n\n* Addressed code review comments\n\n* log error instead of printstacktrace\n\n* Treat script as executable and shell script\n\n* Check missing script name case and write to output instead of catching exception\n\n* Use shell = true instead of shlex to support any executable\n\n* fix xenserver bug\n\n* don't set dir permission for vmware\n\n* Code review comments - refactoring\n\n* Add check for possible NPE\n\n* Remove unused imoprt after rebase\n\n* Add better description for configs\n\nCo-authored-by: Nicolas Vazquez <nicovazquez90@gmail.com>\nCo-authored-by: Rohit Yadav <rohit@apache.org>\nCo-authored-by: Anurag Awasthi <anurag.awasthi@shapeblue.com>\n","date":"2020-01-15 18:38:33","modifiedFileCount":"15","status":"M","submitter":"Paul Angus"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-13 18:25:16","commitOrder":5,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO)cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO)destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO)destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Failed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \" + toHumanReadableSize(physicalSize));\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2020-08-13 18:25:16","endLine":683,"groupId":"6653","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/18/4013e42a4bbf2bf59b49472864ed78d1dc40c6.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO)cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO)destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO)destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Failed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \" + physicalSize);\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2018-01-20 05:49:27","endLine":1275,"groupId":"9464","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/7c6a23e41517d2d2e166e1fecd2d9f65dd26cc.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1095,"status":"N"}],"commitId":"b586eb22f1b31f3cab2f2cb1aaeafca4f4646abd","commitMessage":"@@@Human readable sizes in logs (#4207)\n\nThis PR adds outputting human readable byte sizes in the management server logs.  agent logs.  and usage records. A non-dynamic global variable is added (display.human.readable.sizes) to control switching this feature on and off. This setting is sent to the agent on connection and is only read from the database when the management server is started up. The setting is kept in memory by the use of a static field on the NumbersUtil class and is available throughout the codebase.\n\nInstead of seeing things like:\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"106496\". \"bytesReceived\":\"0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nThe KB MB and GB values will be printed out:\n\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"(104.00 KB) 106496\". \"bytesReceived\":\"(0 bytes) 0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Human+Readable+Byte+sizes","date":"2020-08-13 18:25:16","modifiedFileCount":"55","status":"M","submitter":"Spaceman1984"},{"authorTime":"2021-04-05 17:29:15","codes":[{"authorDate":"2021-04-05 17:29:15","commitOrder":6,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = CitrixHelper.getSRNameLabel(primaryStore.getUuid(),\n                primaryStore.getPoolType(), primaryStore.getPath());\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO)cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO)destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO)destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Failed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \" + toHumanReadableSize(physicalSize));\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2021-04-05 17:29:15","endLine":685,"groupId":"122898","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/97/a4efa06d76ebf29378f9866f9a4054a82aefd8.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = primaryStore.getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO)cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO)destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO)destData;\n        String snapshotUuid = snapshotTO.getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n        final Map<String, String> options = cmd.getOptions();\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        Long physicalSize = null;\n        try {\n\n            SR primaryStorageSR = null;\n            if (primaryStore.isManaged()) {\n                fullbackup = true; \r\n\n                final Map<String, String> srcDetails = cmd.getOptions();\n\n                final String iScsiName = srcDetails.get(DiskTO.IQN);\n                final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n                final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n                final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n                final String srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n                primaryStorageSR = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n                final VDI srcVdi = primaryStorageSR.getVDIs(conn).iterator().next();\n                if (srcVdi == null) {\n                    throw new InternalErrorException(\"Could not Find a VDI on the SR: \" + primaryStorageSR.getNameLabel(conn));\n                }\n                snapshotUuid = srcVdi.getUuid(conn);\n\n            } else {\n                primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            }\n\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" + primaryStorageNameLabel);\n            }\n            \r\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            final String snapshotPaUuid = snapshotVdi.getUuid(conn);\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                SR snapshotSr = null;\n                Task task = null;\n                try {\n                    final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(secondaryStorageMountPath.getBytes());\n                    mountNfs(conn, secondaryStorageMountPath, localDir);\n                    final boolean result = makeDirectory(conn, localDir + \"/\" + folder);\n                    if (!result) {\n                        details = \" Failed to create folder \" + folder + \" in secondary storage\";\n                        s_logger.warn(details);\n                        return new CopyCmdAnswer(details);\n                    }\n\n                    snapshotSr = createFileSr(conn, secondaryStorageMountPath, folder);\n\n                    task = snapshotVdi.copyAsync(conn, snapshotSr, null, null);\n                    \r\n                    hypervisorResource.waitForTask(conn, task, 1000, wait * 1000);\n                    hypervisorResource.checkForSuccess(conn, task);\n                    final VDI backedVdi = Types.toVDI(task, conn);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    snapshotSr.scan(conn);\n                    physicalSize = backedVdi.getPhysicalUtilisation(conn);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO)destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO)destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                        \r\n                    } else {\n                        finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                    }\n\n                } finally {\n                    if (task != null) {\n                        try {\n                            task.destroy(conn);\n                        } catch (final Exception e) {\n                            s_logger.warn(\"unable to destroy task(\" + task.toWireString() + \") due to \" + e.toString());\n                        }\n                    }\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n\n                    if (primaryStore.isManaged()) {\n                        hypervisorResource.removeSR(conn, primaryStorageSR);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid = swiftBackupSnapshot(conn, (SwiftTO)destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(), isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO)destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String result = backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, prevSnapshotUuid, isISCSI, wait);\n                    final String[] tmp = result.split(\"#\");\n                    snapshotBackupUuid = tmp[0];\n                    physicalSize = Long.parseLong(tmp[1]);\n                    finalPath = folder + File.separator + snapshotBackupUuid + \".vhd\";\n                }\n            }\n\n            \r\n            final String volumeUuid = snapshotTO.getVolume().getPath();\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            s_logger.info(\"New snapshot details: \" + newSnapshot.toString());\n            s_logger.info(\"New snapshot physical utilization: \" + toHumanReadableSize(physicalSize));\n\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final Exception e) {\n            final String reason = e instanceof Types.XenAPIException ? e.toString() : e.getMessage();\n            details = \"BackupSnapshot Failed due to \" + reason;\n            s_logger.warn(details, e);\n\n            \r\n            destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"M"},{"authorDate":"2021-04-05 17:29:15","commitOrder":6,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)srcData.getDataStore();\n        final String primaryStorageNameLabel = CitrixHelper.getSRNameLabel(primaryStore.getUuid(),\n                primaryStore.getPoolType(), primaryStore.getPath());\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","date":"2021-04-05 17:29:15","endLine":1336,"groupId":"122898","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b3/fce78af86f04f62993bf7dda8b9e3a6f9737d7.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO cacheData = cmd.getCacheTO();\n        final DataTO destData = cmd.getDestTO();\n        final int wait = cmd.getWait();\n        final String primaryStorageNameLabel = srcData.getDataStore().getUuid();\n        String secondaryStorageUrl = null;\n        NfsTO cacheStore = null;\n        String destPath = null;\n        if (cacheData != null) {\n            cacheStore = (NfsTO) cacheData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = cacheData.getPath();\n        } else {\n            cacheStore = (NfsTO) destData.getDataStore();\n            secondaryStorageUrl = cacheStore.getUrl();\n            destPath = destData.getPath();\n        }\n\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO) srcData;\n        final SnapshotObjectTO snapshotOnImage = (SnapshotObjectTO) destData;\n        final String snapshotUuid = snapshotTO.getPath();\n        final String volumeUuid = snapshotTO.getVolume().getPath();\n\n        final String prevBackupUuid = snapshotOnImage.getParentSnapshotPath();\n        final String prevSnapshotUuid = snapshotTO.getParentSnapshotPath();\n\n        \r\n        String details = null;\n        String snapshotBackupUuid = null;\n        Long physicalSize = null;\n        final Map<String, String> options = cmd.getOptions();\n        boolean fullbackup = Boolean.parseBoolean(options.get(\"fullSnapshot\"));\n        boolean result = false;\n        try {\n            final SR primaryStorageSR = hypervisorResource.getSRByNameLabelandHost(conn, primaryStorageNameLabel);\n            if (primaryStorageSR == null) {\n                throw new InternalErrorException(\"Could not backup snapshot because the primary Storage SR could not be created from the name label: \" +\n                        primaryStorageNameLabel);\n            }\n            final String psUuid = primaryStorageSR.getUuid(conn);\n            final Boolean isISCSI = IsISCSI(primaryStorageSR.getType(conn));\n\n            final VDI snapshotVdi = getVDIbyUuid(conn, snapshotUuid);\n            String snapshotPaUuid = null;\n\n            if (prevSnapshotUuid != null && !fullbackup) {\n                try {\n                    snapshotPaUuid = getVhdParent(conn, psUuid, snapshotUuid, isISCSI);\n                    if (snapshotPaUuid != null) {\n                        final String snashotPaPaPaUuid = getVhdParent(conn, psUuid, snapshotPaUuid, isISCSI);\n                        final String prevSnashotPaUuid = getVhdParent(conn, psUuid, prevSnapshotUuid, isISCSI);\n                        if (snashotPaPaPaUuid != null && prevSnashotPaUuid != null && prevSnashotPaUuid.equals(snashotPaPaPaUuid)) {\n                            fullbackup = false;\n                        } else {\n                            fullbackup = true;\n                        }\n                    }\n                } catch (final Exception e) {\n                    s_logger.debug(\"Failed to get parent snapshots, take full snapshot\", e);\n                    fullbackup = true;\n                }\n            }\n\n            final URI uri = new URI(secondaryStorageUrl);\n            final String secondaryStorageMountPath = uri.getHost() + \":\" + uri.getPath();\n            final DataStoreTO destStore = destData.getDataStore();\n            final String folder = destPath;\n            String finalPath = null;\n\n            final String localMountPoint = BaseMountPointOnHost + File.separator + UUID.nameUUIDFromBytes(secondaryStorageUrl.getBytes()).toString();\n            if (fullbackup) {\n                \r\n\n                if (!hypervisorResource.createSecondaryStorageFolder(conn, secondaryStorageMountPath, folder)) {\n                    details = \" Filed to create folder \" + folder + \" in secondary storage\";\n                    s_logger.warn(details);\n                    return new CopyCmdAnswer(details);\n                }\n                final String snapshotMountpoint = secondaryStorageUrl + \"/\" + folder;\n                SR snapshotSr = null;\n                try {\n                    snapshotSr = hypervisorResource.createNfsSRbyURI(conn, new URI(snapshotMountpoint), false);\n                    final VDI backedVdi = hypervisorResource.cloudVDIcopy(conn, snapshotVdi, snapshotSr, wait);\n                    snapshotBackupUuid = backedVdi.getUuid(conn);\n                    final String primarySRuuid = snapshotSr.getUuid(conn);\n                    physicalSize = getSnapshotSize(conn, primarySRuuid, snapshotBackupUuid, isISCSI, wait);\n\n                    if (destStore instanceof SwiftTO) {\n                        try {\n                            final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                            final String destSnapshotName = swiftBackupSnapshot(conn, (SwiftTO) destStore, snapshotSr.getUuid(conn), snapshotBackupUuid, container, false, wait);\n                            final String swiftPath = container + File.separator + destSnapshotName;\n                            finalPath = swiftPath;\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n\n                    } else if (destStore instanceof S3TO) {\n                        try {\n                            finalPath = backupSnapshotToS3(conn, (S3TO) destStore, snapshotSr.getUuid(conn), folder, snapshotBackupUuid, isISCSI, wait);\n                            if (finalPath == null) {\n                                throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotBackupUuid + \" failed\");\n                            }\n                        } finally {\n                            try {\n                                deleteSnapshotBackup(conn, localMountPoint, folder, secondaryStorageMountPath, snapshotBackupUuid);\n                            } catch (final Exception e) {\n                                s_logger.debug(\"Failed to delete snapshot on cache storages\", e);\n                            }\n                        }\n                        \r\n                    } else {\n                        finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                    }\n\n                } finally {\n                    if (snapshotSr != null) {\n                        hypervisorResource.removeSR(conn, snapshotSr);\n                    }\n                }\n            } else {\n                final String primaryStorageSRUuid = primaryStorageSR.getUuid(conn);\n                if (destStore instanceof SwiftTO) {\n                    final String container = \"S-\" + snapshotTO.getVolume().getVolumeId().toString();\n                    snapshotBackupUuid =\n                            swiftBackupSnapshot(conn, (SwiftTO) destStore, primaryStorageSRUuid, snapshotPaUuid, \"S-\" + snapshotTO.getVolume().getVolumeId().toString(),\n                                    isISCSI, wait);\n                    finalPath = container + File.separator + snapshotBackupUuid;\n                } else if (destStore instanceof S3TO) {\n                    finalPath = backupSnapshotToS3(conn, (S3TO) destStore, primaryStorageSRUuid, folder, snapshotPaUuid, isISCSI, wait);\n                    if (finalPath == null) {\n                        throw new CloudRuntimeException(\"S3 upload of snapshots \" + snapshotPaUuid + \" failed\");\n                    }\n                } else {\n                    final String results =\n                            backupSnapshot(conn, primaryStorageSRUuid, localMountPoint, folder, secondaryStorageMountPath, snapshotUuid, prevBackupUuid, isISCSI, wait);\n\n                    final String[] tmp = results.split(\"#\");\n                    snapshotBackupUuid = tmp[1];\n                    physicalSize = Long.parseLong(tmp[2]);\n                    finalPath = folder + cacheStore.getPathSeparator() + snapshotBackupUuid;\n                }\n            }\n            \r\n            destroySnapshotOnPrimaryStorageExceptThis(conn, volumeUuid, snapshotUuid);\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(finalPath);\n            newSnapshot.setPhysicalSize(physicalSize);\n            if (fullbackup) {\n                newSnapshot.setParentSnapshotPath(null);\n            } else {\n                newSnapshot.setParentSnapshotPath(prevBackupUuid);\n            }\n            result = true;\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final XenAPIException e) {\n            details = \"BackupSnapshot Failed due to \" + e.toString();\n            s_logger.warn(details, e);\n        } catch (final Exception e) {\n            details = \"BackupSnapshot Failed due to \" + e.getMessage();\n            s_logger.warn(details, e);\n        } finally {\n            if (!result) {\n                \r\n                try {\n                    destroySnapshotOnPrimaryStorage(conn, snapshotUuid);\n                } catch (final Exception e) {\n                    s_logger.debug(\"clean up snapshot failed\", e);\n                }\n            }\n        }\n\n        return new CopyCmdAnswer(details);\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1154,"status":"M"}],"commitId":"3066c955482cd6e4436e70b76cc740ba08ba33f8","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-04-05 17:29:15","modifiedFileCount":"9","status":"M","submitter":"Rohit Yadav"}]
