[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<Long> orderClusters(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n        Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n        Account account = vmProfile.getOwner();\n\n        if (clusterList == null || clusterList.isEmpty()) {\n            return clusterList;\n        }\n\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        List<Long> allHosts = new ArrayList<Long>();\n        for (Long cluster : clusterList) {\n            List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n            for (HostVO hostVO : hostsInCluster) {\n                allHosts.add(hostVO.getId());\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Set<Long> emptyHosts = new HashSet<Long>();\n        Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n        Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n        Set<Long> allOtherHosts = new HashSet<Long>();\n        for (Long host : allHosts) {\n            List<VMInstanceVO> vms = getVmsOnHost(host);\n            if (vms == null || vms.isEmpty()) {\n                emptyHosts.add(host);\n            } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                hostRunningVmsOfAccount.add(host);\n            } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n            } else {\n                allOtherHosts.add(host);\n            }\n        }\n\n        \r\n        avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n        if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n            \r\n            \r\n            avoid.addHostList(emptyHosts);\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n            \r\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!preferred) {\n            \r\n            clusterList = null;\n        } else {\n            \r\n            if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n            } else {\n                clusterList = null;\n            }\n        }\n\n        return clusterList;\n    }\n","date":"2018-01-20 05:49:27","endLine":135,"groupId":"1424","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"orderClusters","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@ExcludeListavoid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/ad9226eed13d37215d45d430bdf589deb10c79.src","preCode":"    public List<Long> orderClusters(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n        Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n        Account account = vmProfile.getOwner();\n\n        if (clusterList == null || clusterList.isEmpty()) {\n            return clusterList;\n        }\n\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        List<Long> allHosts = new ArrayList<Long>();\n        for (Long cluster : clusterList) {\n            List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n            for (HostVO hostVO : hostsInCluster) {\n                allHosts.add(hostVO.getId());\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Set<Long> emptyHosts = new HashSet<Long>();\n        Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n        Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n        Set<Long> allOtherHosts = new HashSet<Long>();\n        for (Long host : allHosts) {\n            List<VMInstanceVO> vms = getVmsOnHost(host);\n            if (vms == null || vms.isEmpty()) {\n                emptyHosts.add(host);\n            } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                hostRunningVmsOfAccount.add(host);\n            } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n            } else {\n                allOtherHosts.add(host);\n            }\n        }\n\n        \r\n        avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n        if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n            \r\n            \r\n            avoid.addHostList(emptyHosts);\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n            \r\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!preferred) {\n            \r\n            clusterList = null;\n        } else {\n            \r\n            if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n            } else {\n                clusterList = null;\n            }\n        }\n\n        return clusterList;\n    }\n","realPath":"plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public PlannerResourceUsage getResourceUsage(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        if (!preferred) {\n            return PlannerResourceUsage.Dedicated;\n        } else {\n            \r\n            \r\n            \r\n            List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n            Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n            Account account = vmProfile.getOwner();\n\n            \r\n            List<Long> allHosts = new ArrayList<Long>();\n            for (Long cluster : clusterList) {\n                List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n                for (HostVO hostVO : hostsInCluster) {\n\n                    allHosts.add(hostVO.getId());\n                }\n            }\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            Set<Long> emptyHosts = new HashSet<Long>();\n            Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n            Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n            Set<Long> allOtherHosts = new HashSet<Long>();\n            for (Long host : allHosts) {\n                List<VMInstanceVO> vms = getVmsOnHost(host);\n                \r\n                if (vms == null || vms.isEmpty()) {\n                    emptyHosts.add(host);\n                } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                    hostRunningVmsOfAccount.add(host);\n                } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                    hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n                } else {\n                    allOtherHosts.add(host);\n                }\n            }\n\n            \r\n            \r\n            avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n            if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n                \r\n                \r\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else {\n                if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                    return PlannerResourceUsage.Shared;\n                }\n            }\n            return PlannerResourceUsage.Shared;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":316,"groupId":"1430","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getResourceUsage","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@ExcludeListavoid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/ad9226eed13d37215d45d430bdf589deb10c79.src","preCode":"    public PlannerResourceUsage getResourceUsage(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        if (!preferred) {\n            return PlannerResourceUsage.Dedicated;\n        } else {\n            \r\n            \r\n            \r\n            List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n            Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n            Account account = vmProfile.getOwner();\n\n            \r\n            List<Long> allHosts = new ArrayList<Long>();\n            for (Long cluster : clusterList) {\n                List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n                for (HostVO hostVO : hostsInCluster) {\n\n                    allHosts.add(hostVO.getId());\n                }\n            }\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            Set<Long> emptyHosts = new HashSet<Long>();\n            Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n            Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n            Set<Long> allOtherHosts = new HashSet<Long>();\n            for (Long host : allHosts) {\n                List<VMInstanceVO> vms = getVmsOnHost(host);\n                \r\n                if (vms == null || vms.isEmpty()) {\n                    emptyHosts.add(host);\n                } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                    hostRunningVmsOfAccount.add(host);\n                } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                    hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n                } else {\n                    allOtherHosts.add(host);\n                }\n            }\n\n            \r\n            \r\n            avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n            if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n                \r\n                \r\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else {\n                if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                    return PlannerResourceUsage.Shared;\n                }\n            }\n            return PlannerResourceUsage.Shared;\n        }\n    }\n","realPath":"plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-04-26 21:03:46","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public List<Long> orderClusters(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n        Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n        Account account = vmProfile.getOwner();\n\n        if (clusterList == null || clusterList.isEmpty()) {\n            return clusterList;\n        }\n\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        List<Long> allHosts = new ArrayList<Long>();\n        for (Long cluster : clusterList) {\n            List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n            for (HostVO hostVO : hostsInCluster) {\n                allHosts.add(hostVO.getId());\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Set<Long> emptyHosts = new HashSet<Long>();\n        Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n        Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n        Set<Long> allOtherHosts = new HashSet<Long>();\n        for (Long host : allHosts) {\n            List<VMInstanceVO> vms = getVmsOnHost(host);\n            if (vms == null || vms.isEmpty()) {\n                emptyHosts.add(host);\n            } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                hostRunningVmsOfAccount.add(host);\n            } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n            } else {\n                allOtherHosts.add(host);\n            }\n        }\n\n        \r\n        avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n        if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n            \r\n            \r\n            avoid.addHostList(emptyHosts);\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n            \r\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!preferred) {\n            \r\n            clusterList = null;\n        } else {\n            \r\n            if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n            } else {\n                clusterList = null;\n            }\n        }\n\n        return clusterList;\n    }\n","date":"2018-01-20 05:49:27","endLine":135,"groupId":"102728","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"orderClusters","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@ExcludeListavoid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/ad9226eed13d37215d45d430bdf589deb10c79.src","preCode":"    public List<Long> orderClusters(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n        Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n        Account account = vmProfile.getOwner();\n\n        if (clusterList == null || clusterList.isEmpty()) {\n            return clusterList;\n        }\n\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        List<Long> allHosts = new ArrayList<Long>();\n        for (Long cluster : clusterList) {\n            List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n            for (HostVO hostVO : hostsInCluster) {\n                allHosts.add(hostVO.getId());\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        Set<Long> emptyHosts = new HashSet<Long>();\n        Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n        Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n        Set<Long> allOtherHosts = new HashSet<Long>();\n        for (Long host : allHosts) {\n            List<VMInstanceVO> vms = getVmsOnHost(host);\n            if (vms == null || vms.isEmpty()) {\n                emptyHosts.add(host);\n            } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                hostRunningVmsOfAccount.add(host);\n            } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n            } else {\n                allOtherHosts.add(host);\n            }\n        }\n\n        \r\n        avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n        if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n            \r\n            \r\n            avoid.addHostList(emptyHosts);\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n            \r\n            avoid.addHostList(allOtherHosts);\n            clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n        } else if (!preferred) {\n            \r\n            clusterList = null;\n        } else {\n            \r\n            if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                clusterList = getUpdatedClusterList(clusterList, avoid.getHostsToAvoid());\n            } else {\n                clusterList = null;\n            }\n        }\n\n        return clusterList;\n    }\n","realPath":"plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2018-04-26 21:03:46","commitOrder":2,"curCode":"    public PlannerResourceUsage getResourceUsage(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        if (!preferred) {\n            return PlannerResourceUsage.Dedicated;\n        } else {\n            \r\n            \r\n            \r\n            List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n            Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n            Account account = vmProfile.getOwner();\n\n            \r\n            List<Long> allHosts = new ArrayList<Long>();\n            if (!CollectionUtils.isEmpty(clusterList)) {\n                for (Long cluster : clusterList) {\n                    List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n                    for (HostVO hostVO : hostsInCluster) {\n\n                        allHosts.add(hostVO.getId());\n                    }\n                }\n            }\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            Set<Long> emptyHosts = new HashSet<Long>();\n            Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n            Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n            Set<Long> allOtherHosts = new HashSet<Long>();\n            for (Long host : allHosts) {\n                List<VMInstanceVO> vms = getVmsOnHost(host);\n                \r\n                if (vms == null || vms.isEmpty()) {\n                    emptyHosts.add(host);\n                } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                    hostRunningVmsOfAccount.add(host);\n                } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                    hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n                } else {\n                    allOtherHosts.add(host);\n                }\n            }\n\n            \r\n            \r\n            avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n            if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n                \r\n                \r\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else {\n                if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                    return PlannerResourceUsage.Shared;\n                }\n            }\n            return PlannerResourceUsage.Shared;\n        }\n    }\n","date":"2018-04-26 21:03:46","endLine":318,"groupId":"102728","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getResourceUsage","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@ExcludeListavoid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/45/f16abd2af678266ec011300a582afde0b4b7c3.src","preCode":"    public PlannerResourceUsage getResourceUsage(VirtualMachineProfile vmProfile, DeploymentPlan plan, ExcludeList avoid) throws InsufficientServerCapacityException {\n        \r\n        boolean preferred = isServiceOfferingUsingPlannerInPreferredMode(vmProfile.getServiceOfferingId());\n\n        \r\n        if (!preferred) {\n            return PlannerResourceUsage.Dedicated;\n        } else {\n            \r\n            \r\n            \r\n            List<Long> clusterList = super.orderClusters(vmProfile, plan, avoid);\n            Set<Long> hostsToAvoid = avoid.getHostsToAvoid();\n            Account account = vmProfile.getOwner();\n\n            \r\n            List<Long> allHosts = new ArrayList<Long>();\n            for (Long cluster : clusterList) {\n                List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n                for (HostVO hostVO : hostsInCluster) {\n\n                    allHosts.add(hostVO.getId());\n                }\n            }\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            Set<Long> emptyHosts = new HashSet<Long>();\n            Set<Long> hostRunningVmsOfAccount = new HashSet<Long>();\n            Set<Long> hostRunningStrictImplicitVmsOfOtherAccounts = new HashSet<Long>();\n            Set<Long> allOtherHosts = new HashSet<Long>();\n            for (Long host : allHosts) {\n                List<VMInstanceVO> vms = getVmsOnHost(host);\n                \r\n                if (vms == null || vms.isEmpty()) {\n                    emptyHosts.add(host);\n                } else if (checkHostSuitabilityForImplicitDedication(account.getAccountId(), vms)) {\n                    hostRunningVmsOfAccount.add(host);\n                } else if (checkIfAllVmsCreatedInStrictMode(account.getAccountId(), vms)) {\n                    hostRunningStrictImplicitVmsOfOtherAccounts.add(host);\n                } else {\n                    allOtherHosts.add(host);\n                }\n            }\n\n            \r\n            \r\n            avoid.addHostList(hostRunningStrictImplicitVmsOfOtherAccounts);\n\n            if (!hostRunningVmsOfAccount.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(hostRunningVmsOfAccount))) {\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else if (!emptyHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(emptyHosts))) {\n                \r\n                \r\n                \r\n                \r\n                return PlannerResourceUsage.Dedicated;\n            } else {\n                if (!allOtherHosts.isEmpty() && (hostsToAvoid == null || !hostsToAvoid.containsAll(allOtherHosts))) {\n                    return PlannerResourceUsage.Shared;\n                }\n            }\n            return PlannerResourceUsage.Shared;\n        }\n    }\n","realPath":"plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"4c42aafae0d3286a38d796a7c69a6aec6810cf79","commitMessage":"@@@[CLOUDSTACK-10356] Fix NPE in Cloudstack found with NPEDetector  (#2573)\n\n* fix https://issues.apache.org/jira/browse/CLOUDSTACK-10356\n\n* del patch file\n\n* Update ResourceCountDaoImpl.java\n\n* fix some format\n\n* fix code\n\n* fix error message in VolumeOrchestrator\n\n* add check null stmt\n\n* del import unuse class\n\n* use BooleanUtils to check Boolean\n\n* fix error message\n\n* delete unuse function\n\n* delete the deprecated function  updateDomainCount\n\n* add error log and throw exception in ProjectManagerImpl.java\n","date":"2018-04-26 21:03:46","modifiedFileCount":"11","status":"M","submitter":"brett"}]
