[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void deallocate(final Network network, final NicProfile nic, VirtualMachineProfile vm) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n        }\n\n        if (nic.getIPv4Address() != null) {\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                        \r\n                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n                        if (placeholderNic != null && placeholderNic.getIPv4Address().equalsIgnoreCase(ip.getAddress().addr())) {\n                            s_logger.debug(\"Not releasing direct ip \" + ip.getId() + \" yet as its ip is saved in the placeholder\");\n                        } else {\n                            _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n\n                        \r\n                        s_logger.debug(\"remove nic \" + nic.getId() + \" secondary ip \");\n                        List<String> nicSecIps = null;\n                        nicSecIps = _nicSecondaryIpDao.getSecondaryIpAddressesForNic(nic.getId());\n                        for (String secIp : nicSecIps) {\n                            IPAddressVO pubIp = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), secIp);\n                            _ipAddrMgr.markIpAsUnavailable(pubIp.getId());\n                            _ipAddressDao.unassignIpAddress(pubIp.getId());\n                        }\n                    }\n                });\n            }\n        }\n\n        if (nic.getIPv6Address() != null) {\n            _ipv6Mgr.revokeDirectIpv6Address(nic.getNetworkId(), nic.getIPv6Address());\n        }\n        nic.deallocate();\n    }\n","date":"2018-01-20 05:49:27","endLine":343,"groupId":"8483","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deallocate","params":"(finalNetworknetwork@finalNicProfilenic@VirtualMachineProfilevm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/2bb45dfef3b282d376de40c3c375c611670cb3.src","preCode":"    public void deallocate(final Network network, final NicProfile nic, VirtualMachineProfile vm) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n        }\n\n        if (nic.getIPv4Address() != null) {\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                        \r\n                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n                        if (placeholderNic != null && placeholderNic.getIPv4Address().equalsIgnoreCase(ip.getAddress().addr())) {\n                            s_logger.debug(\"Not releasing direct ip \" + ip.getId() + \" yet as its ip is saved in the placeholder\");\n                        } else {\n                            _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n\n                        \r\n                        s_logger.debug(\"remove nic \" + nic.getId() + \" secondary ip \");\n                        List<String> nicSecIps = null;\n                        nicSecIps = _nicSecondaryIpDao.getSecondaryIpAddressesForNic(nic.getId());\n                        for (String secIp : nicSecIps) {\n                            IPAddressVO pubIp = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), secIp);\n                            _ipAddrMgr.markIpAsUnavailable(pubIp.getId());\n                            _ipAddressDao.unassignIpAddress(pubIp.getId());\n                        }\n                    }\n                });\n            }\n        }\n\n        if (nic.getIPv6Address() != null) {\n            _ipv6Mgr.revokeDirectIpv6Address(nic.getNetworkId(), nic.getIPv6Address());\n        }\n        nic.deallocate();\n    }\n","realPath":"server/src/main/java/com/cloud/network/guru/DirectNetworkGuru.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void deallocate(final Network network, final NicProfile nic, final VirtualMachineProfile vm) {\n        if (network.getSpecifyIpRanges()) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n            }\n\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(final TransactionStatus status) {\n                        _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                        _ipAddressDao.unassignIpAddress(ip.getId());\n                    }\n                });\n            }\n            nic.deallocate();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":251,"groupId":"6473","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deallocate","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c7/e6aca22b8f666038e039aa31de007670066e4b.src","preCode":"    public void deallocate(final Network network, final NicProfile nic, final VirtualMachineProfile vm) {\n        if (network.getSpecifyIpRanges()) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n            }\n\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(final TransactionStatus status) {\n                        _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                        _ipAddressDao.unassignIpAddress(ip.getId());\n                    }\n                });\n            }\n            nic.deallocate();\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/guru/GuestNetworkGuru.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-09-11 23:03:19","commitOrder":2,"curCode":"    public void deallocate(final Network network, final NicProfile nic, VirtualMachineProfile vm) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n        }\n\n        if (nic.getIPv4Address() != null) {\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                        \r\n                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n                        if (placeholderNic != null && placeholderNic.getIPv4Address().equalsIgnoreCase(ip.getAddress().addr())) {\n                            s_logger.debug(\"Not releasing direct ip \" + ip.getId() + \" yet as its ip is saved in the placeholder\");\n                        } else {\n                            _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n\n                        \r\n                        s_logger.debug(\"remove nic \" + nic.getId() + \" secondary ip \");\n                        List<String> nicSecIps = null;\n                        nicSecIps = _nicSecondaryIpDao.getSecondaryIpAddressesForNic(nic.getId());\n                        for (String secIp : nicSecIps) {\n                            if (NetUtils.isValidIp4(secIp)) {\n                                IPAddressVO pubIp = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), secIp);\n                                _ipAddrMgr.markIpAsUnavailable(pubIp.getId());\n                                _ipAddressDao.unassignIpAddress(pubIp.getId());\n                            } else {\n                                NicSecondaryIpVO nicSecIp = nicSecondaryIpDao.findByIp6AddressAndNetworkId(secIp, nic.getNetworkId());\n                                if (nicSecIp != null) {\n                                    networkService.releaseSecondaryIpFromNic(nicSecIp.getId());\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n\n        if (nic.getIPv6Address() != null) {\n            _ipv6Mgr.revokeDirectIpv6Address(nic.getNetworkId(), nic.getIPv6Address());\n        }\n        nic.deallocate();\n    }\n","date":"2018-09-11 23:03:19","endLine":368,"groupId":"8483","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deallocate","params":"(finalNetworknetwork@finalNicProfilenic@VirtualMachineProfilevm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/51/50ad79e92a157a3da723f9c9cba542c1d66aac.src","preCode":"    public void deallocate(final Network network, final NicProfile nic, VirtualMachineProfile vm) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n        }\n\n        if (nic.getIPv4Address() != null) {\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                        \r\n                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n                        if (placeholderNic != null && placeholderNic.getIPv4Address().equalsIgnoreCase(ip.getAddress().addr())) {\n                            s_logger.debug(\"Not releasing direct ip \" + ip.getId() + \" yet as its ip is saved in the placeholder\");\n                        } else {\n                            _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n\n                        \r\n                        s_logger.debug(\"remove nic \" + nic.getId() + \" secondary ip \");\n                        List<String> nicSecIps = null;\n                        nicSecIps = _nicSecondaryIpDao.getSecondaryIpAddressesForNic(nic.getId());\n                        for (String secIp : nicSecIps) {\n                            IPAddressVO pubIp = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), secIp);\n                            _ipAddrMgr.markIpAsUnavailable(pubIp.getId());\n                            _ipAddressDao.unassignIpAddress(pubIp.getId());\n                        }\n                    }\n                });\n            }\n        }\n\n        if (nic.getIPv6Address() != null) {\n            _ipv6Mgr.revokeDirectIpv6Address(nic.getNetworkId(), nic.getIPv6Address());\n        }\n        nic.deallocate();\n    }\n","realPath":"server/src/main/java/com/cloud/network/guru/DirectNetworkGuru.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void deallocate(final Network network, final NicProfile nic, final VirtualMachineProfile vm) {\n        if (network.getSpecifyIpRanges()) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n            }\n\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(final TransactionStatus status) {\n                        _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                        _ipAddressDao.unassignIpAddress(ip.getId());\n                    }\n                });\n            }\n            nic.deallocate();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":251,"groupId":"6473","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deallocate","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c7/e6aca22b8f666038e039aa31de007670066e4b.src","preCode":"    public void deallocate(final Network network, final NicProfile nic, final VirtualMachineProfile vm) {\n        if (network.getSpecifyIpRanges()) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n            }\n\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(final TransactionStatus status) {\n                        _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                        _ipAddressDao.unassignIpAddress(ip.getId());\n                    }\n                });\n            }\n            nic.deallocate();\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/guru/GuestNetworkGuru.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"}],"commitId":"fbf488497fb863c13fc0908281e3f4f86906df43","commitMessage":"@@@Support IPv6 address in addIpToNic (#2773)\n\nThe admin will manually need to add the address to the Instance.  but the\nSecurity Grouping should allow it.","date":"2018-09-11 23:03:19","modifiedFileCount":"24","status":"M","submitter":"Gabriel Beims Br?scher"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-01-17 02:49:02","commitOrder":3,"curCode":"    public void deallocate(final Network network, final NicProfile nic, VirtualMachineProfile vm) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n        }\n\n        if (nic.getIPv4Address() != null) {\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                        \r\n                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n                        if (placeholderNic != null && placeholderNic.getIPv4Address().equalsIgnoreCase(ip.getAddress().addr())) {\n                            s_logger.debug(\"Not releasing direct ip \" + ip.getId() + \" yet as its ip is saved in the placeholder\");\n                        } else {\n                            _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n\n                        \r\n                        s_logger.debug(\"remove nic \" + nic.getId() + \" secondary ip \");\n                        List<String> nicSecIps = null;\n                        nicSecIps = _nicSecondaryIpDao.getSecondaryIpAddressesForNic(nic.getId());\n                        for (String secIp : nicSecIps) {\n                            if (NetUtils.isValidIp4(secIp)) {\n                                IPAddressVO pubIp = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), secIp);\n                                _ipAddrMgr.markIpAsUnavailable(pubIp.getId());\n                                _ipAddressDao.unassignIpAddress(pubIp.getId());\n                            } else {\n                                NicSecondaryIpVO nicSecIp = nicSecondaryIpDao.findByIp6AddressAndNetworkId(secIp, nic.getNetworkId());\n                                if (nicSecIp != null) {\n                                    networkService.releaseSecondaryIpFromNic(nicSecIp.getId());\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n\n        nic.deallocate();\n    }\n","date":"2019-01-17 02:49:02","endLine":362,"groupId":"101610","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"deallocate","params":"(finalNetworknetwork@finalNicProfilenic@VirtualMachineProfilevm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f6/279bfc6366911a264e50ed1d7071cafbb0e4c0.src","preCode":"    public void deallocate(final Network network, final NicProfile nic, VirtualMachineProfile vm) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n        }\n\n        if (nic.getIPv4Address() != null) {\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                        \r\n                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n                        if (placeholderNic != null && placeholderNic.getIPv4Address().equalsIgnoreCase(ip.getAddress().addr())) {\n                            s_logger.debug(\"Not releasing direct ip \" + ip.getId() + \" yet as its ip is saved in the placeholder\");\n                        } else {\n                            _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n\n                        \r\n                        s_logger.debug(\"remove nic \" + nic.getId() + \" secondary ip \");\n                        List<String> nicSecIps = null;\n                        nicSecIps = _nicSecondaryIpDao.getSecondaryIpAddressesForNic(nic.getId());\n                        for (String secIp : nicSecIps) {\n                            if (NetUtils.isValidIp4(secIp)) {\n                                IPAddressVO pubIp = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), secIp);\n                                _ipAddrMgr.markIpAsUnavailable(pubIp.getId());\n                                _ipAddressDao.unassignIpAddress(pubIp.getId());\n                            } else {\n                                NicSecondaryIpVO nicSecIp = nicSecondaryIpDao.findByIp6AddressAndNetworkId(secIp, nic.getNetworkId());\n                                if (nicSecIp != null) {\n                                    networkService.releaseSecondaryIpFromNic(nicSecIp.getId());\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n\n        if (nic.getIPv6Address() != null) {\n            _ipv6Mgr.revokeDirectIpv6Address(nic.getNetworkId(), nic.getIPv6Address());\n        }\n        nic.deallocate();\n    }\n","realPath":"server/src/main/java/com/cloud/network/guru/DirectNetworkGuru.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void deallocate(final Network network, final NicProfile nic, final VirtualMachineProfile vm) {\n        if (network.getSpecifyIpRanges()) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n            }\n\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(final TransactionStatus status) {\n                        _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                        _ipAddressDao.unassignIpAddress(ip.getId());\n                    }\n                });\n            }\n            nic.deallocate();\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":251,"groupId":"101610","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deallocate","params":"(finalNetworknetwork@finalNicProfilenic@finalVirtualMachineProfilevm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c7/e6aca22b8f666038e039aa31de007670066e4b.src","preCode":"    public void deallocate(final Network network, final NicProfile nic, final VirtualMachineProfile vm) {\n        if (network.getSpecifyIpRanges()) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Deallocate network: networkId: \" + nic.getNetworkId() + \", ip: \" + nic.getIPv4Address());\n            }\n\n            final IPAddressVO ip = _ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(), nic.getIPv4Address());\n            if (ip != null) {\n                Transaction.execute(new TransactionCallbackNoReturn() {\n                    @Override\n                    public void doInTransactionWithoutResult(final TransactionStatus status) {\n                        _ipAddrMgr.markIpAsUnavailable(ip.getId());\n                        _ipAddressDao.unassignIpAddress(ip.getId());\n                    }\n                });\n            }\n            nic.deallocate();\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/guru/GuestNetworkGuru.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"}],"commitId":"af9fefc6b40d1bbd25d6fe306a9b30a8b92d0c94","commitMessage":"@@@ipv6: Calculate IPv6 address instead of fetching one from a pool (#3077)\n\nWith IPv6 we are not using DHCP to allocate addresses.  but using\nStateLess Address Auto Configuration (SLAAC) a Instance will calculate\nit's own address based on the Router Advertisements send out by the\nrouters in the network.\n\nThis Advertisement contains the IPv6 Subnet in use in that subnet and\nallows to calculate the stable Address the Instance will obtain based\non it's MAC Address.\n\nThe existing code is 'dead code' as it has been written.  but was never\nused by any production code.\n\nSLAAC only works properly with subnets of exactly 64-bits large.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2019-01-17 02:49:02","modifiedFileCount":"6","status":"M","submitter":"Wido den Hollander"}]
