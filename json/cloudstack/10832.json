[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean createChildDataDiskTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO template, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException {\n        \r\n        Storage.ImageFormat format = dataDiskTemplate.isIso() ? Storage.ImageFormat.ISO : template.getFormat();\n        String suffix = dataDiskTemplate.isIso() ? \"-IsoDiskTemplate-\" : \"-DataDiskTemplate-\";\n        TemplateType ttype = dataDiskTemplate.isIso() ? TemplateType.ISODISK : TemplateType.DATADISK;\n        final long templateId = _templateDao.getNextInSequence(Long.class, \"id\");\n        long guestOsId = dataDiskTemplate.isIso() ? 1 : 0;\n        String templateName = dataDiskTemplate.isIso() ? dataDiskTemplate.getPath().substring(dataDiskTemplate.getPath().lastIndexOf(File.separator) + 1) : template.getName() + suffix + diskCount;\n        VMTemplateVO templateVO = new VMTemplateVO(templateId, templateName, format, false, false, false, ttype, template.getUrl(),\n                template.requiresHvm(), template.getBits(), template.getAccountId(), null, templateName, false, guestOsId, false, template.getHypervisorType(), null,\n                null, false, false, false);\n        if (dataDiskTemplate.isIso()){\n            templateVO.setUniqueName(templateName);\n        }\n        templateVO.setParentTemplateId(template.getId());\n        templateVO.setSize(dataDiskTemplate.getVirtualSize());\n        templateVO = _templateDao.persist(templateVO);\n        \r\n        TemplateApiResult result = null;\n        TemplateInfo dataDiskTemplateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> future = createDatadiskTemplateAsync(parentTemplate, dataDiskTemplateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        result = future.get();\n        if (result.isSuccess()) {\n            \r\n            if (imageStore.getScope().getScopeType() == ScopeType.REGION) {\n                associateTemplateToZone(templateId, null);\n            } else if (imageStore.getScope().getScopeType() == ScopeType.ZONE) {\n                Long zoneId = ((ImageStoreEntity)imageStore).getDataCenterId();\n                VMTemplateZoneVO templateZone = new VMTemplateZoneVO(zoneId, templateId, new Date());\n                _vmTemplateZoneDao.persist(templateZone);\n            }\n            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), ResourceType.secondary_storage, templateVO.getSize());\n        } else {\n            \r\n            s_logger.debug(\"Since creation of Datadisk template: \" + templateVO.getId() + \" failed, delete other Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            TemplateInfo parentTemplateInfo = imageFactory.getTemplate(templateVO.getParentTemplateId(), imageStore);\n            cleanupDatadiskTemplates(parentTemplateInfo);\n        }\n        return result.isSuccess();\n    }\n","date":"2018-01-20 05:49:27","endLine":816,"groupId":"15692","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createChildDataDiskTemplate","params":"(DatadiskTOdataDiskTemplate@VMTemplateVOtemplate@TemplateInfoparentTemplate@DataStoreimageStore@intdiskCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/45/e3941a5ec36a27b19c33e68cc8727bbaa7be12.src","preCode":"    private boolean createChildDataDiskTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO template, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException {\n        \r\n        Storage.ImageFormat format = dataDiskTemplate.isIso() ? Storage.ImageFormat.ISO : template.getFormat();\n        String suffix = dataDiskTemplate.isIso() ? \"-IsoDiskTemplate-\" : \"-DataDiskTemplate-\";\n        TemplateType ttype = dataDiskTemplate.isIso() ? TemplateType.ISODISK : TemplateType.DATADISK;\n        final long templateId = _templateDao.getNextInSequence(Long.class, \"id\");\n        long guestOsId = dataDiskTemplate.isIso() ? 1 : 0;\n        String templateName = dataDiskTemplate.isIso() ? dataDiskTemplate.getPath().substring(dataDiskTemplate.getPath().lastIndexOf(File.separator) + 1) : template.getName() + suffix + diskCount;\n        VMTemplateVO templateVO = new VMTemplateVO(templateId, templateName, format, false, false, false, ttype, template.getUrl(),\n                template.requiresHvm(), template.getBits(), template.getAccountId(), null, templateName, false, guestOsId, false, template.getHypervisorType(), null,\n                null, false, false, false);\n        if (dataDiskTemplate.isIso()){\n            templateVO.setUniqueName(templateName);\n        }\n        templateVO.setParentTemplateId(template.getId());\n        templateVO.setSize(dataDiskTemplate.getVirtualSize());\n        templateVO = _templateDao.persist(templateVO);\n        \r\n        TemplateApiResult result = null;\n        TemplateInfo dataDiskTemplateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> future = createDatadiskTemplateAsync(parentTemplate, dataDiskTemplateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        result = future.get();\n        if (result.isSuccess()) {\n            \r\n            if (imageStore.getScope().getScopeType() == ScopeType.REGION) {\n                associateTemplateToZone(templateId, null);\n            } else if (imageStore.getScope().getScopeType() == ScopeType.ZONE) {\n                Long zoneId = ((ImageStoreEntity)imageStore).getDataCenterId();\n                VMTemplateZoneVO templateZone = new VMTemplateZoneVO(zoneId, templateId, new Date());\n                _vmTemplateZoneDao.persist(templateZone);\n            }\n            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), ResourceType.secondary_storage, templateVO.getSize());\n        } else {\n            \r\n            s_logger.debug(\"Since creation of Datadisk template: \" + templateVO.getId() + \" failed, delete other Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            TemplateInfo parentTemplateInfo = imageFactory.getTemplate(templateVO.getParentTemplateId(), imageStore);\n            cleanupDatadiskTemplates(parentTemplateInfo);\n        }\n        return result.isSuccess();\n    }\n","realPath":"engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean finalizeParentTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO templateVO, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException, CloudRuntimeException {\n        TemplateInfo templateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> templateFuture = createDatadiskTemplateAsync(parentTemplate, templateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        TemplateApiResult result = null;\n        result = templateFuture.get();\n        if (!result.isSuccess()) {\n            s_logger.debug(\"Since creation of parent template: \" + templateInfo.getId() + \" failed, delete Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            cleanupDatadiskTemplates(templateInfo);\n        }\n        return result.isSuccess();\n    }\n","date":"2018-01-20 05:49:27","endLine":830,"groupId":"15694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeParentTemplate","params":"(DatadiskTOdataDiskTemplate@VMTemplateVOtemplateVO@TemplateInfoparentTemplate@DataStoreimageStore@intdiskCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/45/e3941a5ec36a27b19c33e68cc8727bbaa7be12.src","preCode":"    private boolean finalizeParentTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO templateVO, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException, CloudRuntimeException {\n        TemplateInfo templateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> templateFuture = createDatadiskTemplateAsync(parentTemplate, templateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        TemplateApiResult result = null;\n        result = templateFuture.get();\n        if (!result.isSuccess()) {\n            s_logger.debug(\"Since creation of parent template: \" + templateInfo.getId() + \" failed, delete Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            cleanupDatadiskTemplates(templateInfo);\n        }\n        return result.isSuccess();\n    }\n","realPath":"engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    private boolean createChildDataDiskTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO template, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException {\n        \r\n        Storage.ImageFormat format = dataDiskTemplate.isIso() ? Storage.ImageFormat.ISO : template.getFormat();\n        String suffix = dataDiskTemplate.isIso() ? \"-IsoDiskTemplate-\" : \"-DataDiskTemplate-\";\n        TemplateType ttype = dataDiskTemplate.isIso() ? TemplateType.ISODISK : TemplateType.DATADISK;\n        final long templateId = _templateDao.getNextInSequence(Long.class, \"id\");\n        long guestOsId = dataDiskTemplate.isIso() ? 1 : 0;\n        String templateName = dataDiskTemplate.isIso() ? dataDiskTemplate.getPath().substring(dataDiskTemplate.getPath().lastIndexOf(File.separator) + 1) : template.getName() + suffix + diskCount;\n        VMTemplateVO templateVO = new VMTemplateVO(templateId, templateName, format, false, false, false, ttype, template.getUrl(),\n                template.requiresHvm(), template.getBits(), template.getAccountId(), null, templateName, false, guestOsId, false, template.getHypervisorType(), null,\n                null, false, false, false, false);\n        if (dataDiskTemplate.isIso()){\n            templateVO.setUniqueName(templateName);\n        }\n        templateVO.setParentTemplateId(template.getId());\n        templateVO.setSize(dataDiskTemplate.getVirtualSize());\n        templateVO = _templateDao.persist(templateVO);\n        \r\n        TemplateApiResult result = null;\n        TemplateInfo dataDiskTemplateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> future = createDatadiskTemplateAsync(parentTemplate, dataDiskTemplateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        result = future.get();\n        if (result.isSuccess()) {\n            \r\n            if (imageStore.getScope().getScopeType() == ScopeType.REGION) {\n                associateTemplateToZone(templateId, null);\n            } else if (imageStore.getScope().getScopeType() == ScopeType.ZONE) {\n                Long zoneId = ((ImageStoreEntity)imageStore).getDataCenterId();\n                VMTemplateZoneVO templateZone = new VMTemplateZoneVO(zoneId, templateId, new Date());\n                _vmTemplateZoneDao.persist(templateZone);\n            }\n            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), ResourceType.secondary_storage, templateVO.getSize());\n        } else {\n            \r\n            s_logger.debug(\"Since creation of Datadisk template: \" + templateVO.getId() + \" failed, delete other Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            TemplateInfo parentTemplateInfo = imageFactory.getTemplate(templateVO.getParentTemplateId(), imageStore);\n            cleanupDatadiskTemplates(parentTemplateInfo);\n        }\n        return result.isSuccess();\n    }\n","date":"2020-10-26 21:24:14","endLine":833,"groupId":"10832","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createChildDataDiskTemplate","params":"(DatadiskTOdataDiskTemplate@VMTemplateVOtemplate@TemplateInfoparentTemplate@DataStoreimageStore@intdiskCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ed/9359d952af15eab4734a93d11d5274e9999dc1.src","preCode":"    private boolean createChildDataDiskTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO template, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException {\n        \r\n        Storage.ImageFormat format = dataDiskTemplate.isIso() ? Storage.ImageFormat.ISO : template.getFormat();\n        String suffix = dataDiskTemplate.isIso() ? \"-IsoDiskTemplate-\" : \"-DataDiskTemplate-\";\n        TemplateType ttype = dataDiskTemplate.isIso() ? TemplateType.ISODISK : TemplateType.DATADISK;\n        final long templateId = _templateDao.getNextInSequence(Long.class, \"id\");\n        long guestOsId = dataDiskTemplate.isIso() ? 1 : 0;\n        String templateName = dataDiskTemplate.isIso() ? dataDiskTemplate.getPath().substring(dataDiskTemplate.getPath().lastIndexOf(File.separator) + 1) : template.getName() + suffix + diskCount;\n        VMTemplateVO templateVO = new VMTemplateVO(templateId, templateName, format, false, false, false, ttype, template.getUrl(),\n                template.requiresHvm(), template.getBits(), template.getAccountId(), null, templateName, false, guestOsId, false, template.getHypervisorType(), null,\n                null, false, false, false);\n        if (dataDiskTemplate.isIso()){\n            templateVO.setUniqueName(templateName);\n        }\n        templateVO.setParentTemplateId(template.getId());\n        templateVO.setSize(dataDiskTemplate.getVirtualSize());\n        templateVO = _templateDao.persist(templateVO);\n        \r\n        TemplateApiResult result = null;\n        TemplateInfo dataDiskTemplateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> future = createDatadiskTemplateAsync(parentTemplate, dataDiskTemplateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        result = future.get();\n        if (result.isSuccess()) {\n            \r\n            if (imageStore.getScope().getScopeType() == ScopeType.REGION) {\n                associateTemplateToZone(templateId, null);\n            } else if (imageStore.getScope().getScopeType() == ScopeType.ZONE) {\n                Long zoneId = ((ImageStoreEntity)imageStore).getDataCenterId();\n                VMTemplateZoneVO templateZone = new VMTemplateZoneVO(zoneId, templateId, new Date());\n                _vmTemplateZoneDao.persist(templateZone);\n            }\n            _resourceLimitMgr.incrementResourceCount(template.getAccountId(), ResourceType.secondary_storage, templateVO.getSize());\n        } else {\n            \r\n            s_logger.debug(\"Since creation of Datadisk template: \" + templateVO.getId() + \" failed, delete other Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            TemplateInfo parentTemplateInfo = imageFactory.getTemplate(templateVO.getParentTemplateId(), imageStore);\n            cleanupDatadiskTemplates(parentTemplateInfo);\n        }\n        return result.isSuccess();\n    }\n","realPath":"engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":792,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private boolean finalizeParentTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO templateVO, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException, CloudRuntimeException {\n        TemplateInfo templateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> templateFuture = createDatadiskTemplateAsync(parentTemplate, templateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        TemplateApiResult result = null;\n        result = templateFuture.get();\n        if (!result.isSuccess()) {\n            s_logger.debug(\"Since creation of parent template: \" + templateInfo.getId() + \" failed, delete Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            cleanupDatadiskTemplates(templateInfo);\n        }\n        return result.isSuccess();\n    }\n","date":"2018-01-20 05:49:27","endLine":830,"groupId":"10832","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeParentTemplate","params":"(DatadiskTOdataDiskTemplate@VMTemplateVOtemplateVO@TemplateInfoparentTemplate@DataStoreimageStore@intdiskCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/45/e3941a5ec36a27b19c33e68cc8727bbaa7be12.src","preCode":"    private boolean finalizeParentTemplate(DatadiskTO dataDiskTemplate, VMTemplateVO templateVO, TemplateInfo parentTemplate, DataStore imageStore, int diskCount) throws ExecutionException, InterruptedException, CloudRuntimeException {\n        TemplateInfo templateInfo = imageFactory.getTemplate(templateVO.getId(), imageStore);\n        AsyncCallFuture<TemplateApiResult> templateFuture = createDatadiskTemplateAsync(parentTemplate, templateInfo, dataDiskTemplate.getPath(), dataDiskTemplate.getDiskId(),\n                dataDiskTemplate.getFileSize(), dataDiskTemplate.isBootable());\n        TemplateApiResult result = null;\n        result = templateFuture.get();\n        if (!result.isSuccess()) {\n            s_logger.debug(\"Since creation of parent template: \" + templateInfo.getId() + \" failed, delete Datadisk templates that were created as part of parent\"\n                    + \" template download\");\n            cleanupDatadiskTemplates(templateInfo);\n        }\n        return result.isSuccess();\n    }\n","realPath":"engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"N"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"}]
