[{"authorTime":"2020-02-07 22:43:01","codes":[{"authorDate":"2020-08-20 18:16:34","commitOrder":2,"curCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!searchUri.getScheme().equalsIgnoreCase(\"vlan\")) {\n            throw new CloudRuntimeException(\"VLAN requested but URI is not in the expected format: \" + searchUri.toString());\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandVlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            \r\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), searchVlans.get(0))) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","date":"2020-08-20 18:16:34","endLine":810,"groupId":"20767","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listByPhysicalNetworkPvlan","params":"(longphysicalNetworkId@StringbroadcastUri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/78a14fc70a6c181f3843f80fb2c7b3fb7cfaf6.src","preCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!searchUri.getScheme().equalsIgnoreCase(\"vlan\")) {\n            throw new CloudRuntimeException(\"VLAN requested but URI is not in the expected format: \" + searchUri.toString());\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandVlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            \r\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), searchVlans.get(0))) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":781,"status":"B"},{"authorDate":"2020-02-07 22:43:01","commitOrder":2,"curCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri, Network.PVlanType pVlanType) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!searchUri.getScheme().equalsIgnoreCase(\"pvlan\")) {\n            throw new CloudRuntimeException(\"PVLAN requested but URI is not in the expected format: \" + searchUri.toString());\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandPvlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            Network.PVlanType existingPvlanType = getNetworkPvlanType(network.getId(), existingPvlan);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), existingPvlanType,\n                    searchVlans.get(0), searchVlans.get(1), pVlanType)) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","date":"2020-02-07 22:43:01","endLine":781,"groupId":"20767","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listByPhysicalNetworkPvlan","params":"(longphysicalNetworkId@StringbroadcastUri@Network.PVlanTypepVlanType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/34/76908fb9eb25ea52a9b332783eff3792556c1f.src","preCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri, Network.PVlanType pVlanType) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!searchUri.getScheme().equalsIgnoreCase(\"pvlan\")) {\n            throw new CloudRuntimeException(\"PVLAN requested but URI is not in the expected format: \" + searchUri.toString());\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandPvlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            Network.PVlanType existingPvlanType = getNetworkPvlanType(network.getId(), existingPvlan);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), existingPvlanType,\n                    searchVlans.get(0), searchVlans.get(1), pVlanType)) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":751,"status":"NB"}],"commitId":"3872bf1ff94659fb234a7dd938ccdf6254fad3e7","commitMessage":"@@@kvm: Enable PVLAN support on L2 networks (#4040)\n\nThis is an extention of #3732 for kvm.\nThis is restricted to ovs > 2.9.2\nSince Xen uses ovs 2.6.  pvlan is unsupported.\nThis also fixes issues of vms on the same pvlan unable to communicate if they're on the same host","date":"2020-08-20 18:16:34","modifiedFileCount":"14","status":"M","submitter":"davidjumani"},{"authorTime":"2020-02-07 22:43:01","codes":[{"authorDate":"2021-06-07 18:04:52","commitOrder":3,"curCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!VLAN_OR_VXLAN.contains(searchUri.getScheme().toLowerCase())) {\n            throw new CloudRuntimeException(\n                    String.format(\"Requested URI '%s' is not in the expected format. Expected URI Scheme as 'vlan://VID' or 'vxlan://VID'.\", searchUri.toString()));\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandVlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            \r\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), searchVlans.get(0))) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","date":"2021-06-07 18:04:52","endLine":840,"groupId":"11345","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"listByPhysicalNetworkPvlan","params":"(longphysicalNetworkId@StringbroadcastUri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/98/439434082a0162f0468536a74663c580c65e75.src","preCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!searchUri.getScheme().equalsIgnoreCase(\"vlan\")) {\n            throw new CloudRuntimeException(\"VLAN requested but URI is not in the expected format: \" + searchUri.toString());\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandVlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            \r\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), searchVlans.get(0))) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"M"},{"authorDate":"2020-02-07 22:43:01","commitOrder":3,"curCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri, Network.PVlanType pVlanType) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!searchUri.getScheme().equalsIgnoreCase(\"pvlan\")) {\n            throw new CloudRuntimeException(\"PVLAN requested but URI is not in the expected format: \" + searchUri.toString());\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandPvlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            Network.PVlanType existingPvlanType = getNetworkPvlanType(network.getId(), existingPvlan);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), existingPvlanType,\n                    searchVlans.get(0), searchVlans.get(1), pVlanType)) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","date":"2020-02-07 22:43:01","endLine":781,"groupId":"11345","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listByPhysicalNetworkPvlan","params":"(longphysicalNetworkId@StringbroadcastUri@Network.PVlanTypepVlanType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/34/76908fb9eb25ea52a9b332783eff3792556c1f.src","preCode":"    public List<NetworkVO> listByPhysicalNetworkPvlan(long physicalNetworkId, String broadcastUri, Network.PVlanType pVlanType) {\n        final URI searchUri = BroadcastDomainType.fromString(broadcastUri);\n        if (!searchUri.getScheme().equalsIgnoreCase(\"pvlan\")) {\n            throw new CloudRuntimeException(\"PVLAN requested but URI is not in the expected format: \" + searchUri.toString());\n        }\n        final String searchRange = BroadcastDomainType.getValue(searchUri);\n        final List<Integer> searchVlans = UriUtils.expandPvlanUri(searchRange);\n        final List<NetworkVO> overlappingNetworks = new ArrayList<>();\n\n        final SearchCriteria<NetworkVO> sc = PhysicalNetworkSearch.create();\n        sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n\n        for (final NetworkVO network : listBy(sc)) {\n            if (network.getBroadcastUri() == null || !network.getBroadcastUri().getScheme().equalsIgnoreCase(\"pvlan\")) {\n                continue;\n            }\n            final String networkVlanRange = BroadcastDomainType.getValue(network.getBroadcastUri());\n            if (networkVlanRange == null || networkVlanRange.isEmpty()) {\n                continue;\n            }\n            List<Integer> existingPvlan = UriUtils.expandPvlanUri(networkVlanRange);\n            Network.PVlanType existingPvlanType = getNetworkPvlanType(network.getId(), existingPvlan);\n            if (isNetworkOverlappingRequestedPvlan(existingPvlan.get(0), existingPvlan.get(1), existingPvlanType,\n                    searchVlans.get(0), searchVlans.get(1), pVlanType)) {\n                overlappingNetworks.add(network);\n                break;\n            }\n        }\n\n        return overlappingNetworks;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":751,"status":"N"}],"commitId":"d10cdb495ff7a051498cbbde5e2f917386bcd78b","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-06-07 18:04:52","modifiedFileCount":"1","status":"M","submitter":"Rohit Yadav"}]
