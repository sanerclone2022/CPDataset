[{"authorTime":"2021-02-24 17:28:33","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":6,"curCode":"    protected Answer copyVolumeBetweenPools(DataObject srcData, DataObject destData) {\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int _copyvolumewait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        Scope destScope = getZoneScope(destData.getDataStore().getScope());\n        DataStore cacheStore = cacheMgr.getCacheStorage(destScope);\n        boolean bypassSecondaryStorage = false;\n        if (srcData instanceof VolumeInfo && ((VolumeInfo)srcData).isDirectDownload()) {\n            bypassSecondaryStorage = true;\n        }\n\n        if (cacheStore == null) {\n            if (bypassSecondaryStorage) {\n                CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(srcData, destData);\n                Answer answer = null;\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n                return answer;\n            }\n            \r\n            \r\n            ImageStoreEntity imageStore = (ImageStoreEntity)dataStoreMgr.getImageStoreWithFreeCapacity(destScope.getScopeId());\n            if (imageStore == null || !imageStore.getProtocol().equalsIgnoreCase(\"nfs\") && !imageStore.getProtocol().equalsIgnoreCase(\"cifs\")) {\n                String errMsg = \"can't find a nfs (or cifs) image store to satisfy the need for a staging store\";\n                Answer answer = new Answer(null, false, errMsg);\n                return answer;\n            }\n\n            DataObject objOnImageStore = imageStore.create(srcData);\n            objOnImageStore.processEvent(Event.CreateOnlyRequested);\n\n            Answer answer = null;\n            try {\n                answer = copyObject(srcData, objOnImageStore);\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to image store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n\n                objOnImageStore.processEvent(Event.OperationSuccessed, answer);\n\n                objOnImageStore.processEvent(Event.CopyingRequested);\n\n                CopyCommand cmd = new CopyCommand(objOnImageStore.getTO(), addFullCloneFlagOnVMwareDest(destData.getTO()), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(objOnImageStore, destData);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to primary store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n            } catch (Exception e) {\n                if (imageStore.exists(objOnImageStore)) {\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                }\n                throw e;\n            }\n\n            objOnImageStore.processEvent(Event.OperationSuccessed);\n            imageStore.delete(objOnImageStore);\n            return answer;\n        } else {\n            DataObject cacheData = cacheMgr.createCacheObject(srcData, destScope);\n            CopyCommand cmd = new CopyCommand(cacheData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n            EndPoint ep = selector.select(cacheData, destData);\n            Answer answer = null;\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                answer = new Answer(cmd, false, errMsg);\n            } else {\n                answer = ep.sendMessage(cmd);\n            }\n            \r\n            if (cacheData != null) {\n                cacheMgr.deleteCacheObject(cacheData);\n            }\n            return answer;\n        }\n\n    }\n","date":"2020-10-26 21:24:14","endLine":424,"groupId":"8199","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeBetweenPools","params":"(DataObjectsrcData@DataObjectdestData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c4/9ffba0b82bf3ba06351fcd6183c3687e54569a.src","preCode":"    protected Answer copyVolumeBetweenPools(DataObject srcData, DataObject destData) {\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int _copyvolumewait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        Scope destScope = getZoneScope(destData.getDataStore().getScope());\n        DataStore cacheStore = cacheMgr.getCacheStorage(destScope);\n        boolean bypassSecondaryStorage = false;\n        if (srcData instanceof VolumeInfo && ((VolumeInfo)srcData).isDirectDownload()) {\n            bypassSecondaryStorage = true;\n        }\n\n        if (cacheStore == null) {\n            if (bypassSecondaryStorage) {\n                CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(srcData, destData);\n                Answer answer = null;\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n                return answer;\n            }\n            \r\n            \r\n            ImageStoreEntity imageStore = (ImageStoreEntity)dataStoreMgr.getImageStoreWithFreeCapacity(destScope.getScopeId());\n            if (imageStore == null || !imageStore.getProtocol().equalsIgnoreCase(\"nfs\") && !imageStore.getProtocol().equalsIgnoreCase(\"cifs\")) {\n                String errMsg = \"can't find a nfs (or cifs) image store to satisfy the need for a staging store\";\n                Answer answer = new Answer(null, false, errMsg);\n                return answer;\n            }\n\n            DataObject objOnImageStore = imageStore.create(srcData);\n            objOnImageStore.processEvent(Event.CreateOnlyRequested);\n\n            Answer answer = null;\n            try {\n                answer = copyObject(srcData, objOnImageStore);\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to image store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n\n                objOnImageStore.processEvent(Event.OperationSuccessed, answer);\n\n                objOnImageStore.processEvent(Event.CopyingRequested);\n\n                CopyCommand cmd = new CopyCommand(objOnImageStore.getTO(), addFullCloneFlagOnVMwareDest(destData.getTO()), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(objOnImageStore, destData);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to primary store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n            } catch (Exception e) {\n                if (imageStore.exists(objOnImageStore)) {\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                }\n                throw e;\n            }\n\n            objOnImageStore.processEvent(Event.OperationSuccessed);\n            imageStore.delete(objOnImageStore);\n            return answer;\n        } else {\n            DataObject cacheData = cacheMgr.createCacheObject(srcData, destScope);\n            CopyCommand cmd = new CopyCommand(cacheData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n            EndPoint ep = selector.select(cacheData, destData);\n            Answer answer = null;\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                answer = new Answer(cmd, false, errMsg);\n            } else {\n                answer = ep.sendMessage(cmd);\n            }\n            \r\n            if (cacheData != null) {\n                cacheMgr.deleteCacheObject(cacheData);\n            }\n            return answer;\n        }\n\n    }\n","realPath":"engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"NB"},{"authorDate":"2021-02-24 17:28:33","commitOrder":6,"curCode":"    private Answer copyVolume(DataObject srcData, DataObject destData, Host destHost) {\n        \r\n        LOGGER.debug(\"Initiating copy from PowerFlex volume on host \" + destHost != null ? destHost.getId() : \"\");\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int copyVolumeWait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), copyVolumeWait, VirtualMachineManager.ExecuteInSequence.value());\n\n        Answer answer = null;\n        EndPoint ep = destHost != null ? RemoteHostEndPoint.getHypervisorHostEndPoint(destHost) : selector.select(srcData.getDataStore());\n        if (ep == null) {\n            String errorMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            LOGGER.error(errorMsg);\n            answer = new Answer(cmd, false, errorMsg);\n        } else {\n            answer = ep.sendMessage(cmd);\n        }\n\n        return answer;\n    }\n","date":"2021-02-24 17:28:33","endLine":668,"groupId":"17602","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"copyVolume","params":"(DataObjectsrcData@DataObjectdestData@HostdestHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f8/40bae016835803e7ac0c17fd2cc15b4490dd9d.src","preCode":"    private Answer copyVolume(DataObject srcData, DataObject destData, Host destHost) {\n        \r\n        LOGGER.debug(\"Initiating copy from PowerFlex volume on host \" + destHost != null ? destHost.getId() : \"\");\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int copyVolumeWait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), copyVolumeWait, VirtualMachineManager.ExecuteInSequence.value());\n\n        Answer answer = null;\n        EndPoint ep = destHost != null ? RemoteHostEndPoint.getHypervisorHostEndPoint(destHost) : selector.select(srcData.getDataStore());\n        if (ep == null) {\n            String errorMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            LOGGER.error(errorMsg);\n            answer = new Answer(cmd, false, errorMsg);\n        } else {\n            answer = ep.sendMessage(cmd);\n        }\n\n        return answer;\n    }\n","realPath":"plugins/storage/volume/scaleio/src/main/java/org/apache/cloudstack/storage/datastore/driver/ScaleIOPrimaryDataStoreDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":649,"status":"B"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"},{"authorTime":"2021-02-24 17:28:33","codes":[{"authorDate":"2021-07-17 09:37:42","commitOrder":7,"curCode":"    protected Answer copyVolumeBetweenPools(DataObject srcData, DataObject destData) {\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int _copyvolumewait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        Scope destScope = getZoneScope(destData.getDataStore().getScope());\n        DataStore cacheStore = cacheMgr.getCacheStorage(destScope);\n        boolean bypassSecondaryStorage = false;\n        if (srcData instanceof VolumeInfo && ((VolumeInfo)srcData).isDirectDownload()) {\n            bypassSecondaryStorage = true;\n        }\n\n        if (cacheStore == null) {\n            if (bypassSecondaryStorage) {\n                CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(srcData, destData);\n                Answer answer = null;\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n                return answer;\n            }\n            \r\n            \r\n            ImageStoreEntity imageStore = (ImageStoreEntity)dataStoreMgr.getImageStoreWithFreeCapacity(destScope.getScopeId());\n            if (imageStore == null || !imageStore.getProtocol().equalsIgnoreCase(\"nfs\") && !imageStore.getProtocol().equalsIgnoreCase(\"cifs\")) {\n                String errMsg = \"can't find a nfs (or cifs) image store to satisfy the need for a staging store\";\n                Answer answer = new Answer(null, false, errMsg);\n                return answer;\n            }\n\n            DataObject objOnImageStore = imageStore.create(srcData);\n            objOnImageStore.processEvent(Event.CreateOnlyRequested);\n\n            Answer answer = null;\n            try {\n                answer = copyObject(srcData, objOnImageStore);\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to image store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n\n                objOnImageStore.processEvent(Event.OperationSuccessed, answer);\n\n                objOnImageStore.processEvent(Event.CopyingRequested);\n\n                CopyCommand cmd = new CopyCommand(objOnImageStore.getTO(), addFullCloneAndDiskprovisiongStrictnessFlagOnVMwareDest(destData.getTO()), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(objOnImageStore, destData);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to primary store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n            } catch (Exception e) {\n                if (imageStore.exists(objOnImageStore)) {\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                }\n                throw e;\n            }\n\n            objOnImageStore.processEvent(Event.OperationSuccessed);\n            imageStore.delete(objOnImageStore);\n            return answer;\n        } else {\n            DataObject cacheData = cacheMgr.createCacheObject(srcData, destScope);\n            CopyCommand cmd = new CopyCommand(cacheData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n            EndPoint ep = selector.select(cacheData, destData);\n            Answer answer = null;\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                answer = new Answer(cmd, false, errMsg);\n            } else {\n                answer = ep.sendMessage(cmd);\n            }\n            \r\n            if (cacheData != null) {\n                cacheMgr.deleteCacheObject(cacheData);\n            }\n            return answer;\n        }\n\n    }\n","date":"2021-07-17 09:37:42","endLine":429,"groupId":"8199","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeBetweenPools","params":"(DataObjectsrcData@DataObjectdestData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e9/c6fc1117259a7bc3a12f6daeaa655a8d234790.src","preCode":"    protected Answer copyVolumeBetweenPools(DataObject srcData, DataObject destData) {\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int _copyvolumewait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        Scope destScope = getZoneScope(destData.getDataStore().getScope());\n        DataStore cacheStore = cacheMgr.getCacheStorage(destScope);\n        boolean bypassSecondaryStorage = false;\n        if (srcData instanceof VolumeInfo && ((VolumeInfo)srcData).isDirectDownload()) {\n            bypassSecondaryStorage = true;\n        }\n\n        if (cacheStore == null) {\n            if (bypassSecondaryStorage) {\n                CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(srcData, destData);\n                Answer answer = null;\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n                return answer;\n            }\n            \r\n            \r\n            ImageStoreEntity imageStore = (ImageStoreEntity)dataStoreMgr.getImageStoreWithFreeCapacity(destScope.getScopeId());\n            if (imageStore == null || !imageStore.getProtocol().equalsIgnoreCase(\"nfs\") && !imageStore.getProtocol().equalsIgnoreCase(\"cifs\")) {\n                String errMsg = \"can't find a nfs (or cifs) image store to satisfy the need for a staging store\";\n                Answer answer = new Answer(null, false, errMsg);\n                return answer;\n            }\n\n            DataObject objOnImageStore = imageStore.create(srcData);\n            objOnImageStore.processEvent(Event.CreateOnlyRequested);\n\n            Answer answer = null;\n            try {\n                answer = copyObject(srcData, objOnImageStore);\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to image store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n\n                objOnImageStore.processEvent(Event.OperationSuccessed, answer);\n\n                objOnImageStore.processEvent(Event.CopyingRequested);\n\n                CopyCommand cmd = new CopyCommand(objOnImageStore.getTO(), addFullCloneFlagOnVMwareDest(destData.getTO()), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(objOnImageStore, destData);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to primary store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n            } catch (Exception e) {\n                if (imageStore.exists(objOnImageStore)) {\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                }\n                throw e;\n            }\n\n            objOnImageStore.processEvent(Event.OperationSuccessed);\n            imageStore.delete(objOnImageStore);\n            return answer;\n        } else {\n            DataObject cacheData = cacheMgr.createCacheObject(srcData, destScope);\n            CopyCommand cmd = new CopyCommand(cacheData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n            EndPoint ep = selector.select(cacheData, destData);\n            Answer answer = null;\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                answer = new Answer(cmd, false, errMsg);\n            } else {\n                answer = ep.sendMessage(cmd);\n            }\n            \r\n            if (cacheData != null) {\n                cacheMgr.deleteCacheObject(cacheData);\n            }\n            return answer;\n        }\n\n    }\n","realPath":"engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"},{"authorDate":"2021-02-24 17:28:33","commitOrder":7,"curCode":"    private Answer copyVolume(DataObject srcData, DataObject destData, Host destHost) {\n        \r\n        LOGGER.debug(\"Initiating copy from PowerFlex volume on host \" + destHost != null ? destHost.getId() : \"\");\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int copyVolumeWait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), copyVolumeWait, VirtualMachineManager.ExecuteInSequence.value());\n\n        Answer answer = null;\n        EndPoint ep = destHost != null ? RemoteHostEndPoint.getHypervisorHostEndPoint(destHost) : selector.select(srcData.getDataStore());\n        if (ep == null) {\n            String errorMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            LOGGER.error(errorMsg);\n            answer = new Answer(cmd, false, errorMsg);\n        } else {\n            answer = ep.sendMessage(cmd);\n        }\n\n        return answer;\n    }\n","date":"2021-02-24 17:28:33","endLine":668,"groupId":"17602","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"copyVolume","params":"(DataObjectsrcData@DataObjectdestData@HostdestHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f8/40bae016835803e7ac0c17fd2cc15b4490dd9d.src","preCode":"    private Answer copyVolume(DataObject srcData, DataObject destData, Host destHost) {\n        \r\n        LOGGER.debug(\"Initiating copy from PowerFlex volume on host \" + destHost != null ? destHost.getId() : \"\");\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int copyVolumeWait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), copyVolumeWait, VirtualMachineManager.ExecuteInSequence.value());\n\n        Answer answer = null;\n        EndPoint ep = destHost != null ? RemoteHostEndPoint.getHypervisorHostEndPoint(destHost) : selector.select(srcData.getDataStore());\n        if (ep == null) {\n            String errorMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            LOGGER.error(errorMsg);\n            answer = new Answer(cmd, false, errorMsg);\n        } else {\n            answer = ep.sendMessage(cmd);\n        }\n\n        return answer;\n    }\n","realPath":"plugins/storage/volume/scaleio/src/main/java/org/apache/cloudstack/storage/datastore/driver/ScaleIOPrimaryDataStoreDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":649,"status":"N"}],"commitId":"96c9c5a5e2251174da7da881ab1d0f8e1f323aac","commitMessage":"@@@Added disk provisioning type support for VMWare (#4640)\n\n* Added disk provisioning type support for VMWare\n\n* Review changes\n\n* Fixed unit test\n\n* Review changes\n\n* Added missing licenses\n\n* Review changes\n\n* Update StoragePoolInfo.java\n\nRemoved white space\n\n* Review change - Getting disk provisioning strictness setting using the zone id and not the pool id\n\n* Delete __init__.py\n\n* Merge fix\n\n* Fixed failing test\n\n* Added comment about parameters\n\n* Added error log when update fails\n\n* Added exception when using API\n\n* Ordering storage pool selection to prefer thick disk capable pools if available\n\n* Removed unused parameter\n\n* Reordering changes\n\n* Returning storage pool details after update\n\n* Removed multiple pool update.  updated marvin test.  removed duplicate enum\n\n* Removed comment\n\n* Removed unused import\n\n* Removed for loop\n\n* Added missing return statements for failed checks\n\n* Class name change\n\n* Null pointer\n\n* Added more info when a deployment fails\n\n* Null pointer\n\n* Update api/src/main/java/org/apache/cloudstack/api/BaseListCmd.java\n\nCo-authored-by: dahn <daan.hoogland@gmail.com>\n\n* Small bug fix on API response and added missing bracket\n\n* Removed datastore cluster code\n\n* Removed unused imports.  added missing signature\n\n* Removed duplicate config key\n\n* Revert \"Added more info when a deployment fails\"\n\nThis reverts commit 2486db78dca8e034d8ad2386174dfb11004ce654.\n\nCo-authored-by: dahn <daan.hoogland@gmail.com>","date":"2021-07-17 09:37:42","modifiedFileCount":"23","status":"M","submitter":"Spaceman1984"},{"authorTime":"2021-02-24 17:28:33","codes":[{"authorDate":"2021-08-09 16:51:07","commitOrder":8,"curCode":"    protected Answer copyVolumeBetweenPools(DataObject srcData, DataObject destData) {\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int _copyvolumewait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        Scope destScope = getZoneScope(destData.getDataStore().getScope());\n        DataStore cacheStore = cacheMgr.getCacheStorage(destScope);\n        boolean bypassSecondaryStorage = false;\n        if (srcData instanceof VolumeInfo && ((VolumeInfo)srcData).isDirectDownload()) {\n            bypassSecondaryStorage = true;\n        }\n\n        if (cacheStore == null) {\n            if (bypassSecondaryStorage) {\n                CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(srcData, destData);\n                Answer answer = null;\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n                return answer;\n            }\n            \r\n            \r\n            ImageStoreEntity imageStore = (ImageStoreEntity)dataStoreMgr.getImageStoreWithFreeCapacity(destScope.getScopeId());\n            if (imageStore == null || !imageStore.getProtocol().equalsIgnoreCase(\"nfs\") && !imageStore.getProtocol().equalsIgnoreCase(\"cifs\")) {\n                String errMsg = \"can't find a nfs (or cifs) image store to satisfy the need for a staging store\";\n                Answer answer = new Answer(null, false, errMsg);\n                return answer;\n            }\n\n            DataObject objOnImageStore = imageStore.create(srcData);\n            Answer answer = null;\n            try {\n                objOnImageStore.processEvent(Event.CreateOnlyRequested);\n                answer = copyObject(srcData, objOnImageStore);\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to image store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n\n                objOnImageStore.processEvent(Event.OperationSuccessed, answer);\n\n                objOnImageStore.processEvent(Event.CopyingRequested);\n\n                CopyCommand cmd = new CopyCommand(objOnImageStore.getTO(), addFullCloneAndDiskprovisiongStrictnessFlagOnVMwareDest(destData.getTO()), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(objOnImageStore, destData);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to primary store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n            } catch (Exception e) {\n                if (imageStore.exists(objOnImageStore)) {\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                }\n                s_logger.error(\"Failed to perform operation: \"+ e.getLocalizedMessage());\n                throw e;\n            }\n\n            objOnImageStore.processEvent(Event.OperationSuccessed);\n            deleteVolumeOnSecondaryStore(objOnImageStore);\n            return answer;\n        } else {\n            DataObject cacheData = cacheMgr.createCacheObject(srcData, destScope);\n            CopyCommand cmd = new CopyCommand(cacheData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n            EndPoint ep = selector.select(cacheData, destData);\n            Answer answer = null;\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                answer = new Answer(cmd, false, errMsg);\n            } else {\n                answer = ep.sendMessage(cmd);\n            }\n            \r\n            if (cacheData != null) {\n                cacheMgr.deleteCacheObject(cacheData);\n            }\n            return answer;\n        }\n\n    }\n","date":"2021-08-09 16:51:07","endLine":443,"groupId":"10702","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"copyVolumeBetweenPools","params":"(DataObjectsrcData@DataObjectdestData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/51/e0c97a21e582c14112c817e3d4b9451d67273b.src","preCode":"    protected Answer copyVolumeBetweenPools(DataObject srcData, DataObject destData) {\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int _copyvolumewait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        Scope destScope = getZoneScope(destData.getDataStore().getScope());\n        DataStore cacheStore = cacheMgr.getCacheStorage(destScope);\n        boolean bypassSecondaryStorage = false;\n        if (srcData instanceof VolumeInfo && ((VolumeInfo)srcData).isDirectDownload()) {\n            bypassSecondaryStorage = true;\n        }\n\n        if (cacheStore == null) {\n            if (bypassSecondaryStorage) {\n                CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(srcData, destData);\n                Answer answer = null;\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n                return answer;\n            }\n            \r\n            \r\n            ImageStoreEntity imageStore = (ImageStoreEntity)dataStoreMgr.getImageStoreWithFreeCapacity(destScope.getScopeId());\n            if (imageStore == null || !imageStore.getProtocol().equalsIgnoreCase(\"nfs\") && !imageStore.getProtocol().equalsIgnoreCase(\"cifs\")) {\n                String errMsg = \"can't find a nfs (or cifs) image store to satisfy the need for a staging store\";\n                Answer answer = new Answer(null, false, errMsg);\n                return answer;\n            }\n\n            DataObject objOnImageStore = imageStore.create(srcData);\n            objOnImageStore.processEvent(Event.CreateOnlyRequested);\n\n            Answer answer = null;\n            try {\n                answer = copyObject(srcData, objOnImageStore);\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to image store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n\n                objOnImageStore.processEvent(Event.OperationSuccessed, answer);\n\n                objOnImageStore.processEvent(Event.CopyingRequested);\n\n                CopyCommand cmd = new CopyCommand(objOnImageStore.getTO(), addFullCloneAndDiskprovisiongStrictnessFlagOnVMwareDest(destData.getTO()), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n                EndPoint ep = selector.select(objOnImageStore, destData);\n                if (ep == null) {\n                    String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                    s_logger.error(errMsg);\n                    answer = new Answer(cmd, false, errMsg);\n                } else {\n                    answer = ep.sendMessage(cmd);\n                }\n\n                if (answer == null || !answer.getResult()) {\n                    if (answer != null) {\n                        s_logger.debug(\"copy to primary store failed: \" + answer.getDetails());\n                    }\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                    return answer;\n                }\n            } catch (Exception e) {\n                if (imageStore.exists(objOnImageStore)) {\n                    objOnImageStore.processEvent(Event.OperationFailed);\n                    imageStore.delete(objOnImageStore);\n                }\n                throw e;\n            }\n\n            objOnImageStore.processEvent(Event.OperationSuccessed);\n            imageStore.delete(objOnImageStore);\n            return answer;\n        } else {\n            DataObject cacheData = cacheMgr.createCacheObject(srcData, destScope);\n            CopyCommand cmd = new CopyCommand(cacheData.getTO(), destData.getTO(), _copyvolumewait, VirtualMachineManager.ExecuteInSequence.value());\n            EndPoint ep = selector.select(cacheData, destData);\n            Answer answer = null;\n            if (ep == null) {\n                String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                answer = new Answer(cmd, false, errMsg);\n            } else {\n                answer = ep.sendMessage(cmd);\n            }\n            \r\n            if (cacheData != null) {\n                cacheMgr.deleteCacheObject(cacheData);\n            }\n            return answer;\n        }\n\n    }\n","realPath":"engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"},{"authorDate":"2021-02-24 17:28:33","commitOrder":8,"curCode":"    private Answer copyVolume(DataObject srcData, DataObject destData, Host destHost) {\n        \r\n        LOGGER.debug(\"Initiating copy from PowerFlex volume on host \" + destHost != null ? destHost.getId() : \"\");\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int copyVolumeWait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), copyVolumeWait, VirtualMachineManager.ExecuteInSequence.value());\n\n        Answer answer = null;\n        EndPoint ep = destHost != null ? RemoteHostEndPoint.getHypervisorHostEndPoint(destHost) : selector.select(srcData.getDataStore());\n        if (ep == null) {\n            String errorMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            LOGGER.error(errorMsg);\n            answer = new Answer(cmd, false, errorMsg);\n        } else {\n            answer = ep.sendMessage(cmd);\n        }\n\n        return answer;\n    }\n","date":"2021-02-24 17:28:33","endLine":668,"groupId":"10702","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"copyVolume","params":"(DataObjectsrcData@DataObjectdestData@HostdestHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f8/40bae016835803e7ac0c17fd2cc15b4490dd9d.src","preCode":"    private Answer copyVolume(DataObject srcData, DataObject destData, Host destHost) {\n        \r\n        LOGGER.debug(\"Initiating copy from PowerFlex volume on host \" + destHost != null ? destHost.getId() : \"\");\n        String value = configDao.getValue(Config.CopyVolumeWait.key());\n        int copyVolumeWait = NumbersUtil.parseInt(value, Integer.parseInt(Config.CopyVolumeWait.getDefaultValue()));\n\n        CopyCommand cmd = new CopyCommand(srcData.getTO(), destData.getTO(), copyVolumeWait, VirtualMachineManager.ExecuteInSequence.value());\n\n        Answer answer = null;\n        EndPoint ep = destHost != null ? RemoteHostEndPoint.getHypervisorHostEndPoint(destHost) : selector.select(srcData.getDataStore());\n        if (ep == null) {\n            String errorMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            LOGGER.error(errorMsg);\n            answer = new Answer(cmd, false, errorMsg);\n        } else {\n            answer = ep.sendMessage(cmd);\n        }\n\n        return answer;\n    }\n","realPath":"plugins/storage/volume/scaleio/src/main/java/org/apache/cloudstack/storage/datastore/driver/ScaleIOPrimaryDataStoreDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":649,"status":"N"}],"commitId":"ea7d3b34d12f636659386cb0e8a58d7272c5fa91","commitMessage":"@@@Cleanup volume information from db when deleted (#4551)\n\n* Cleanup volume information from db when deleted\n\n* reuse search builder\n\n* revert change\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2021-08-09 16:51:07","modifiedFileCount":"4","status":"M","submitter":"Pearl Dsilva"}]
