[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected void checkAndCreateTunnel(Network nw, Host host) {\n\n        s_logger.debug(\"Creating tunnels with OVS tunnel manager\");\n\n        long hostId = host.getId();\n        int key = getGreKey(nw);\n        String bridgeName = generateBridgeName(nw, key);\n        List<Long> toHostIds = new ArrayList<Long>();\n        List<Long> fromHostIds = new ArrayList<Long>();\n        List<Long> networkSpannedHosts = _ovsNetworkToplogyGuru.getNetworkSpanedHosts(nw.getId());\n        for (Long rh : networkSpannedHosts) {\n            if (rh == hostId) {\n                continue;\n            }\n            OvsTunnelNetworkVO ta = _tunnelNetworkDao.getByFromToNetwork(hostId, rh.longValue(), nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                if (ta == null) {\n                    createTunnelRecord(hostId, rh.longValue(), nw.getId(), key);\n                }\n                if (!toHostIds.contains(rh)) {\n                    toHostIds.add(rh);\n                }\n            }\n\n            ta = _tunnelNetworkDao.getByFromToNetwork(rh.longValue(),\n                    hostId, nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" +\n                        rh.longValue() + \" to:\" + hostId);\n                if (ta == null) {\n                    createTunnelRecord(rh.longValue(), hostId,\n                            nw.getId(), key);\n                }\n                if (!fromHostIds.contains(rh)) {\n                    fromHostIds.add(rh);\n                }\n            }\n        }\n        \r\n        try {\n            String myIp = getGreEndpointIP(host, nw);\n            if (myIp == null)\n                throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\" + \"Failure is on host:\" + host.getId());\n            boolean noHost = true;\n            for (Long i : toHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                if (otherIp == null)\n                    throw new GreTunnelException(\n                            \"Unable to retrieve the remote \"\n                                    + \"endpoint for the GRE tunnel.\"\n                                    + \"Failure is on host:\" + rHost.getId());\n                Commands cmds = new Commands(\n                        new OvsCreateTunnelCommand(otherIp, key,\n                                Long.valueOf(hostId), i, nw.getId(), myIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \" + nw.getId());\n                s_logger.debug(\"Ask host \" + hostId\n                        + \" to create gre tunnel to \" + i);\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            for (Long i : fromHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                        key, i, Long.valueOf(hostId), nw.getId(), otherIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                        + hostId);\n                Answer[] answers = _agentMgr.send(i, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            \r\n            \r\n            if (noHost) {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, nw.getId()));\n                s_logger.debug(\"Ask host \" + hostId + \" to configure bridge for network:\" + nw.getId());\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            }\n        } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n            \r\n            s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":400,"groupId":"8085","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAndCreateTunnel","params":"(Networknw@Hosthost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cd/e4ee8a797c9bcc42e6404324b02f5c8374610b.src","preCode":"    protected void checkAndCreateTunnel(Network nw, Host host) {\n\n        s_logger.debug(\"Creating tunnels with OVS tunnel manager\");\n\n        long hostId = host.getId();\n        int key = getGreKey(nw);\n        String bridgeName = generateBridgeName(nw, key);\n        List<Long> toHostIds = new ArrayList<Long>();\n        List<Long> fromHostIds = new ArrayList<Long>();\n        List<Long> networkSpannedHosts = _ovsNetworkToplogyGuru.getNetworkSpanedHosts(nw.getId());\n        for (Long rh : networkSpannedHosts) {\n            if (rh == hostId) {\n                continue;\n            }\n            OvsTunnelNetworkVO ta = _tunnelNetworkDao.getByFromToNetwork(hostId, rh.longValue(), nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                if (ta == null) {\n                    createTunnelRecord(hostId, rh.longValue(), nw.getId(), key);\n                }\n                if (!toHostIds.contains(rh)) {\n                    toHostIds.add(rh);\n                }\n            }\n\n            ta = _tunnelNetworkDao.getByFromToNetwork(rh.longValue(),\n                    hostId, nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" +\n                        rh.longValue() + \" to:\" + hostId);\n                if (ta == null) {\n                    createTunnelRecord(rh.longValue(), hostId,\n                            nw.getId(), key);\n                }\n                if (!fromHostIds.contains(rh)) {\n                    fromHostIds.add(rh);\n                }\n            }\n        }\n        \r\n        try {\n            String myIp = getGreEndpointIP(host, nw);\n            if (myIp == null)\n                throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\" + \"Failure is on host:\" + host.getId());\n            boolean noHost = true;\n            for (Long i : toHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                if (otherIp == null)\n                    throw new GreTunnelException(\n                            \"Unable to retrieve the remote \"\n                                    + \"endpoint for the GRE tunnel.\"\n                                    + \"Failure is on host:\" + rHost.getId());\n                Commands cmds = new Commands(\n                        new OvsCreateTunnelCommand(otherIp, key,\n                                Long.valueOf(hostId), i, nw.getId(), myIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \" + nw.getId());\n                s_logger.debug(\"Ask host \" + hostId\n                        + \" to create gre tunnel to \" + i);\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            for (Long i : fromHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                        key, i, Long.valueOf(hostId), nw.getId(), otherIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                        + hostId);\n                Answer[] answers = _agentMgr.send(i, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            \r\n            \r\n            if (noHost) {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, nw.getId()));\n                s_logger.debug(\"Ask host \" + hostId + \" to configure bridge for network:\" + nw.getId());\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            }\n        } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n            \r\n            s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n        }\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/ovs/OvsTunnelManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected void checkAndCreateVpcTunnelNetworks(Host host, long vpcId) {\n\n        long hostId = host.getId();\n        String bridgeName=generateBridgeNameForVpc(vpcId);\n\n        List<Long> vmIds = _ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(vpcId, hostId);\n\n        if (vmIds == null || vmIds.isEmpty()) {\n\n            \r\n            try {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, null));\n                s_logger.debug(\"Ask host \" + hostId + \" to create bridge for vpc \" + vpcId + \" and configure the \"\n                        + \" bridge for distributed routing.\");\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            } catch (OperationTimedoutException | AgentUnavailableException e) {\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n\n            \r\n            OvsVpcRoutingPolicyConfigCommand cmd = prepareVpcRoutingPolicyUpdate(vpcId);\n            cmd.setSequenceNumber(getNextRoutingPolicyUpdateSequenceNumber(vpcId));\n\n            if (!sendVpcRoutingPolicyChangeUpdate(cmd, hostId, bridgeName)) {\n                s_logger.debug(\"Failed to send VPC routing policy change update to host : \" + hostId +\n                        \". But moving on with sending the updates to the rest of the hosts.\");\n            }\n        }\n\n        List<? extends Network> vpcNetworks =  _vpcMgr.getVpcNetworks(vpcId);\n        List<Long> vpcSpannedHostIds = _ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);\n        for (Network vpcNetwork: vpcNetworks) {\n            if (vpcNetwork.getState() != Network.State.Implemented &&\n                    vpcNetwork.getState() != Network.State.Implementing && vpcNetwork.getState() != Network.State.Setup)\n                continue;\n\n            int key = getGreKey(vpcNetwork);\n            List<Long> toHostIds = new ArrayList<Long>();\n            List<Long> fromHostIds = new ArrayList<Long>();\n            OvsTunnelNetworkVO tunnelRecord = null;\n\n            for (Long rh : vpcSpannedHostIds) {\n                if (rh == hostId) {\n                    continue;\n                }\n                tunnelRecord = _tunnelNetworkDao.getByFromToNetwork(hostId, rh.longValue(), vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(hostId, rh.longValue(), vpcNetwork.getId(), key);\n                    }\n                    if (!toHostIds.contains(rh)) {\n                        toHostIds.add(rh);\n                    }\n                }\n                tunnelRecord = _tunnelNetworkDao.getByFromToNetwork(rh.longValue(), hostId, vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + rh.longValue() + \" to:\" + hostId);\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(rh.longValue(), hostId, vpcNetwork.getId(), key);\n                    }\n                    if (!fromHostIds.contains(rh)) {\n                        fromHostIds.add(rh);\n                    }\n                }\n            }\n\n            try {\n                String myIp = getGreEndpointIP(host, vpcNetwork);\n                if (myIp == null)\n                    throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\"\n                            + \"Failure is on host:\" + host.getId());\n                boolean noHost = true;\n\n                for (Long i : toHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    if (otherIp == null)\n                        throw new GreTunnelException(\n                                \"Unable to retrieve the remote endpoint for the GRE tunnel.\"\n                                        + \"Failure is on host:\" + rHost.getId());\n                    Commands cmds = new Commands( new OvsCreateTunnelCommand(otherIp, key, Long.valueOf(hostId),\n                                     i, vpcNetwork.getId(), myIp, bridgeName, vpcNetwork.getUuid()));\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \"\n                            + vpcNetwork.getId());\n                    s_logger.debug(\"Ask host \" + hostId\n                            + \" to create gre tunnel to \" + i);\n                    Answer[] answers = _agentMgr.send(hostId, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n\n                for (Long i : fromHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                            key, i, Long.valueOf(hostId), vpcNetwork.getId(), otherIp, bridgeName,\n                            vpcNetwork.getUuid()));\n                    s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                            + hostId);\n                    Answer[] answers = _agentMgr.send(i, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n            } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n                \r\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":672,"groupId":"15106","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAndCreateVpcTunnelNetworks","params":"(Hosthost@longvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cd/e4ee8a797c9bcc42e6404324b02f5c8374610b.src","preCode":"    protected void checkAndCreateVpcTunnelNetworks(Host host, long vpcId) {\n\n        long hostId = host.getId();\n        String bridgeName=generateBridgeNameForVpc(vpcId);\n\n        List<Long> vmIds = _ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(vpcId, hostId);\n\n        if (vmIds == null || vmIds.isEmpty()) {\n\n            \r\n            try {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, null));\n                s_logger.debug(\"Ask host \" + hostId + \" to create bridge for vpc \" + vpcId + \" and configure the \"\n                        + \" bridge for distributed routing.\");\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            } catch (OperationTimedoutException | AgentUnavailableException e) {\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n\n            \r\n            OvsVpcRoutingPolicyConfigCommand cmd = prepareVpcRoutingPolicyUpdate(vpcId);\n            cmd.setSequenceNumber(getNextRoutingPolicyUpdateSequenceNumber(vpcId));\n\n            if (!sendVpcRoutingPolicyChangeUpdate(cmd, hostId, bridgeName)) {\n                s_logger.debug(\"Failed to send VPC routing policy change update to host : \" + hostId +\n                        \". But moving on with sending the updates to the rest of the hosts.\");\n            }\n        }\n\n        List<? extends Network> vpcNetworks =  _vpcMgr.getVpcNetworks(vpcId);\n        List<Long> vpcSpannedHostIds = _ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);\n        for (Network vpcNetwork: vpcNetworks) {\n            if (vpcNetwork.getState() != Network.State.Implemented &&\n                    vpcNetwork.getState() != Network.State.Implementing && vpcNetwork.getState() != Network.State.Setup)\n                continue;\n\n            int key = getGreKey(vpcNetwork);\n            List<Long> toHostIds = new ArrayList<Long>();\n            List<Long> fromHostIds = new ArrayList<Long>();\n            OvsTunnelNetworkVO tunnelRecord = null;\n\n            for (Long rh : vpcSpannedHostIds) {\n                if (rh == hostId) {\n                    continue;\n                }\n                tunnelRecord = _tunnelNetworkDao.getByFromToNetwork(hostId, rh.longValue(), vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(hostId, rh.longValue(), vpcNetwork.getId(), key);\n                    }\n                    if (!toHostIds.contains(rh)) {\n                        toHostIds.add(rh);\n                    }\n                }\n                tunnelRecord = _tunnelNetworkDao.getByFromToNetwork(rh.longValue(), hostId, vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + rh.longValue() + \" to:\" + hostId);\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(rh.longValue(), hostId, vpcNetwork.getId(), key);\n                    }\n                    if (!fromHostIds.contains(rh)) {\n                        fromHostIds.add(rh);\n                    }\n                }\n            }\n\n            try {\n                String myIp = getGreEndpointIP(host, vpcNetwork);\n                if (myIp == null)\n                    throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\"\n                            + \"Failure is on host:\" + host.getId());\n                boolean noHost = true;\n\n                for (Long i : toHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    if (otherIp == null)\n                        throw new GreTunnelException(\n                                \"Unable to retrieve the remote endpoint for the GRE tunnel.\"\n                                        + \"Failure is on host:\" + rHost.getId());\n                    Commands cmds = new Commands( new OvsCreateTunnelCommand(otherIp, key, Long.valueOf(hostId),\n                                     i, vpcNetwork.getId(), myIp, bridgeName, vpcNetwork.getUuid()));\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \"\n                            + vpcNetwork.getId());\n                    s_logger.debug(\"Ask host \" + hostId\n                            + \" to create gre tunnel to \" + i);\n                    Answer[] answers = _agentMgr.send(hostId, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n\n                for (Long i : fromHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                            key, i, Long.valueOf(hostId), vpcNetwork.getId(), otherIp, bridgeName,\n                            vpcNetwork.getUuid()));\n                    s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                            + hostId);\n                    Answer[] answers = _agentMgr.send(i, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n            } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n                \r\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n        }\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/ovs/OvsTunnelManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-05-01 23:14:43","codes":[{"authorDate":"2018-05-01 23:14:43","commitOrder":2,"curCode":"    protected void checkAndCreateTunnel(Network nw, Host host) {\n\n        s_logger.debug(\"Creating tunnels with OVS tunnel manager\");\n\n        long hostId = host.getId();\n        int key = getGreKey(nw);\n        String bridgeName = generateBridgeName(nw, key);\n        List<Long> toHostIds = new ArrayList<Long>();\n        List<Long> fromHostIds = new ArrayList<Long>();\n        List<Long> networkSpannedHosts = _ovsNetworkToplogyGuru.getNetworkSpanedHosts(nw.getId());\n        for (Long rh : networkSpannedHosts) {\n            if (rh == hostId) {\n                continue;\n            }\n            OvsTunnelNetworkVO ta = _tunnelNetworkDao.findByFromToNetwork(hostId, rh.longValue(), nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                if (ta == null) {\n                    createTunnelRecord(hostId, rh.longValue(), nw.getId(), key);\n                }\n                if (!toHostIds.contains(rh)) {\n                    toHostIds.add(rh);\n                }\n            }\n\n            ta = _tunnelNetworkDao.findByFromToNetwork(rh.longValue(),\n                    hostId, nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" +\n                        rh.longValue() + \" to:\" + hostId);\n                if (ta == null) {\n                    createTunnelRecord(rh.longValue(), hostId,\n                            nw.getId(), key);\n                }\n                if (!fromHostIds.contains(rh)) {\n                    fromHostIds.add(rh);\n                }\n            }\n        }\n        \r\n        try {\n            String myIp = getGreEndpointIP(host, nw);\n            if (myIp == null)\n                throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\" + \"Failure is on host:\" + host.getId());\n            boolean noHost = true;\n            for (Long i : toHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                if (otherIp == null)\n                    throw new GreTunnelException(\n                            \"Unable to retrieve the remote \"\n                                    + \"endpoint for the GRE tunnel.\"\n                                    + \"Failure is on host:\" + rHost.getId());\n                Commands cmds = new Commands(\n                        new OvsCreateTunnelCommand(otherIp, key,\n                                Long.valueOf(hostId), i, nw.getId(), myIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \" + nw.getId());\n                s_logger.debug(\"Ask host \" + hostId\n                        + \" to create gre tunnel to \" + i);\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            for (Long i : fromHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                        key, i, Long.valueOf(hostId), nw.getId(), otherIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                        + hostId);\n                Answer[] answers = _agentMgr.send(i, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            \r\n            \r\n            if (noHost) {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, nw.getId()));\n                s_logger.debug(\"Ask host \" + hostId + \" to configure bridge for network:\" + nw.getId());\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            }\n        } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n            \r\n            s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n        }\n    }\n","date":"2018-05-01 23:14:43","endLine":400,"groupId":"8085","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAndCreateTunnel","params":"(Networknw@Hosthost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/aa/7c0f6d1b2610231d23488e1a0b8721275e10a8.src","preCode":"    protected void checkAndCreateTunnel(Network nw, Host host) {\n\n        s_logger.debug(\"Creating tunnels with OVS tunnel manager\");\n\n        long hostId = host.getId();\n        int key = getGreKey(nw);\n        String bridgeName = generateBridgeName(nw, key);\n        List<Long> toHostIds = new ArrayList<Long>();\n        List<Long> fromHostIds = new ArrayList<Long>();\n        List<Long> networkSpannedHosts = _ovsNetworkToplogyGuru.getNetworkSpanedHosts(nw.getId());\n        for (Long rh : networkSpannedHosts) {\n            if (rh == hostId) {\n                continue;\n            }\n            OvsTunnelNetworkVO ta = _tunnelNetworkDao.getByFromToNetwork(hostId, rh.longValue(), nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                if (ta == null) {\n                    createTunnelRecord(hostId, rh.longValue(), nw.getId(), key);\n                }\n                if (!toHostIds.contains(rh)) {\n                    toHostIds.add(rh);\n                }\n            }\n\n            ta = _tunnelNetworkDao.getByFromToNetwork(rh.longValue(),\n                    hostId, nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" +\n                        rh.longValue() + \" to:\" + hostId);\n                if (ta == null) {\n                    createTunnelRecord(rh.longValue(), hostId,\n                            nw.getId(), key);\n                }\n                if (!fromHostIds.contains(rh)) {\n                    fromHostIds.add(rh);\n                }\n            }\n        }\n        \r\n        try {\n            String myIp = getGreEndpointIP(host, nw);\n            if (myIp == null)\n                throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\" + \"Failure is on host:\" + host.getId());\n            boolean noHost = true;\n            for (Long i : toHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                if (otherIp == null)\n                    throw new GreTunnelException(\n                            \"Unable to retrieve the remote \"\n                                    + \"endpoint for the GRE tunnel.\"\n                                    + \"Failure is on host:\" + rHost.getId());\n                Commands cmds = new Commands(\n                        new OvsCreateTunnelCommand(otherIp, key,\n                                Long.valueOf(hostId), i, nw.getId(), myIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \" + nw.getId());\n                s_logger.debug(\"Ask host \" + hostId\n                        + \" to create gre tunnel to \" + i);\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            for (Long i : fromHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                        key, i, Long.valueOf(hostId), nw.getId(), otherIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                        + hostId);\n                Answer[] answers = _agentMgr.send(i, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            \r\n            \r\n            if (noHost) {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, nw.getId()));\n                s_logger.debug(\"Ask host \" + hostId + \" to configure bridge for network:\" + nw.getId());\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            }\n        } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n            \r\n            s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n        }\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/ovs/OvsTunnelManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2018-05-01 23:14:43","commitOrder":2,"curCode":"    protected void checkAndCreateVpcTunnelNetworks(Host host, long vpcId) {\n\n        long hostId = host.getId();\n        String bridgeName=generateBridgeNameForVpc(vpcId);\n\n        List<Long> vmIds = _ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(vpcId, hostId);\n\n        if (vmIds == null || vmIds.isEmpty()) {\n\n            \r\n            try {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, null));\n                s_logger.debug(\"Ask host \" + hostId + \" to create bridge for vpc \" + vpcId + \" and configure the \"\n                        + \" bridge for distributed routing.\");\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            } catch (OperationTimedoutException | AgentUnavailableException e) {\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n\n            \r\n            OvsVpcRoutingPolicyConfigCommand cmd = prepareVpcRoutingPolicyUpdate(vpcId);\n            cmd.setSequenceNumber(getNextRoutingPolicyUpdateSequenceNumber(vpcId));\n\n            if (!sendVpcRoutingPolicyChangeUpdate(cmd, hostId, bridgeName)) {\n                s_logger.debug(\"Failed to send VPC routing policy change update to host : \" + hostId +\n                        \". But moving on with sending the updates to the rest of the hosts.\");\n            }\n        }\n\n        List<? extends Network> vpcNetworks =  _vpcMgr.getVpcNetworks(vpcId);\n        List<Long> vpcSpannedHostIds = _ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);\n        for (Network vpcNetwork: vpcNetworks) {\n            if (vpcNetwork.getState() != Network.State.Implemented &&\n                    vpcNetwork.getState() != Network.State.Implementing && vpcNetwork.getState() != Network.State.Setup)\n                continue;\n\n            int key = getGreKey(vpcNetwork);\n            List<Long> toHostIds = new ArrayList<Long>();\n            List<Long> fromHostIds = new ArrayList<Long>();\n            OvsTunnelNetworkVO tunnelRecord = null;\n\n            for (Long rh : vpcSpannedHostIds) {\n                if (rh == hostId) {\n                    continue;\n                }\n                tunnelRecord = _tunnelNetworkDao.findByFromToNetwork(hostId, rh.longValue(), vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(hostId, rh.longValue(), vpcNetwork.getId(), key);\n                    }\n                    if (!toHostIds.contains(rh)) {\n                        toHostIds.add(rh);\n                    }\n                }\n                tunnelRecord = _tunnelNetworkDao.findByFromToNetwork(rh.longValue(), hostId, vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + rh.longValue() + \" to:\" + hostId);\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(rh.longValue(), hostId, vpcNetwork.getId(), key);\n                    }\n                    if (!fromHostIds.contains(rh)) {\n                        fromHostIds.add(rh);\n                    }\n                }\n            }\n\n            try {\n                String myIp = getGreEndpointIP(host, vpcNetwork);\n                if (myIp == null)\n                    throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\"\n                            + \"Failure is on host:\" + host.getId());\n                boolean noHost = true;\n\n                for (Long i : toHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    if (otherIp == null)\n                        throw new GreTunnelException(\n                                \"Unable to retrieve the remote endpoint for the GRE tunnel.\"\n                                        + \"Failure is on host:\" + rHost.getId());\n                    Commands cmds = new Commands( new OvsCreateTunnelCommand(otherIp, key, Long.valueOf(hostId),\n                                     i, vpcNetwork.getId(), myIp, bridgeName, vpcNetwork.getUuid()));\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \"\n                            + vpcNetwork.getId());\n                    s_logger.debug(\"Ask host \" + hostId\n                            + \" to create gre tunnel to \" + i);\n                    Answer[] answers = _agentMgr.send(hostId, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n\n                for (Long i : fromHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                            key, i, Long.valueOf(hostId), vpcNetwork.getId(), otherIp, bridgeName,\n                            vpcNetwork.getUuid()));\n                    s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                            + hostId);\n                    Answer[] answers = _agentMgr.send(i, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n            } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n                \r\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n        }\n    }\n","date":"2018-05-01 23:14:43","endLine":672,"groupId":"15106","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAndCreateVpcTunnelNetworks","params":"(Hosthost@longvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/aa/7c0f6d1b2610231d23488e1a0b8721275e10a8.src","preCode":"    protected void checkAndCreateVpcTunnelNetworks(Host host, long vpcId) {\n\n        long hostId = host.getId();\n        String bridgeName=generateBridgeNameForVpc(vpcId);\n\n        List<Long> vmIds = _ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(vpcId, hostId);\n\n        if (vmIds == null || vmIds.isEmpty()) {\n\n            \r\n            try {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, null));\n                s_logger.debug(\"Ask host \" + hostId + \" to create bridge for vpc \" + vpcId + \" and configure the \"\n                        + \" bridge for distributed routing.\");\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            } catch (OperationTimedoutException | AgentUnavailableException e) {\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n\n            \r\n            OvsVpcRoutingPolicyConfigCommand cmd = prepareVpcRoutingPolicyUpdate(vpcId);\n            cmd.setSequenceNumber(getNextRoutingPolicyUpdateSequenceNumber(vpcId));\n\n            if (!sendVpcRoutingPolicyChangeUpdate(cmd, hostId, bridgeName)) {\n                s_logger.debug(\"Failed to send VPC routing policy change update to host : \" + hostId +\n                        \". But moving on with sending the updates to the rest of the hosts.\");\n            }\n        }\n\n        List<? extends Network> vpcNetworks =  _vpcMgr.getVpcNetworks(vpcId);\n        List<Long> vpcSpannedHostIds = _ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);\n        for (Network vpcNetwork: vpcNetworks) {\n            if (vpcNetwork.getState() != Network.State.Implemented &&\n                    vpcNetwork.getState() != Network.State.Implementing && vpcNetwork.getState() != Network.State.Setup)\n                continue;\n\n            int key = getGreKey(vpcNetwork);\n            List<Long> toHostIds = new ArrayList<Long>();\n            List<Long> fromHostIds = new ArrayList<Long>();\n            OvsTunnelNetworkVO tunnelRecord = null;\n\n            for (Long rh : vpcSpannedHostIds) {\n                if (rh == hostId) {\n                    continue;\n                }\n                tunnelRecord = _tunnelNetworkDao.getByFromToNetwork(hostId, rh.longValue(), vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(hostId, rh.longValue(), vpcNetwork.getId(), key);\n                    }\n                    if (!toHostIds.contains(rh)) {\n                        toHostIds.add(rh);\n                    }\n                }\n                tunnelRecord = _tunnelNetworkDao.getByFromToNetwork(rh.longValue(), hostId, vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + rh.longValue() + \" to:\" + hostId);\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(rh.longValue(), hostId, vpcNetwork.getId(), key);\n                    }\n                    if (!fromHostIds.contains(rh)) {\n                        fromHostIds.add(rh);\n                    }\n                }\n            }\n\n            try {\n                String myIp = getGreEndpointIP(host, vpcNetwork);\n                if (myIp == null)\n                    throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\"\n                            + \"Failure is on host:\" + host.getId());\n                boolean noHost = true;\n\n                for (Long i : toHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    if (otherIp == null)\n                        throw new GreTunnelException(\n                                \"Unable to retrieve the remote endpoint for the GRE tunnel.\"\n                                        + \"Failure is on host:\" + rHost.getId());\n                    Commands cmds = new Commands( new OvsCreateTunnelCommand(otherIp, key, Long.valueOf(hostId),\n                                     i, vpcNetwork.getId(), myIp, bridgeName, vpcNetwork.getUuid()));\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \"\n                            + vpcNetwork.getId());\n                    s_logger.debug(\"Ask host \" + hostId\n                            + \" to create gre tunnel to \" + i);\n                    Answer[] answers = _agentMgr.send(hostId, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n\n                for (Long i : fromHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                            key, i, Long.valueOf(hostId), vpcNetwork.getId(), otherIp, bridgeName,\n                            vpcNetwork.getUuid()));\n                    s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                            + hostId);\n                    Answer[] answers = _agentMgr.send(i, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n            } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n                \r\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n        }\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/ovs/OvsTunnelManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"}],"commitId":"2c681b8c5f253ae6e78314ac6f5bc3b1863bec4c","commitMessage":"@@@CLOUDSTACK-10363: refactor the \"getXXX\" and \"listXXX\" method names to \"findXXX\" (#2599)\n\nThese three methods are not direct getter or list.\nThey try to find the target objects with the related arguments.\nSo that.  renaming them as \"findXXX\" should be more intuitive.","date":"2018-05-01 23:14:43","modifiedFileCount":"5","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-08-16 15:49:43","codes":[{"authorDate":"2018-05-01 23:14:43","commitOrder":3,"curCode":"    protected void checkAndCreateTunnel(Network nw, Host host) {\n\n        s_logger.debug(\"Creating tunnels with OVS tunnel manager\");\n\n        long hostId = host.getId();\n        int key = getGreKey(nw);\n        String bridgeName = generateBridgeName(nw, key);\n        List<Long> toHostIds = new ArrayList<Long>();\n        List<Long> fromHostIds = new ArrayList<Long>();\n        List<Long> networkSpannedHosts = _ovsNetworkToplogyGuru.getNetworkSpanedHosts(nw.getId());\n        for (Long rh : networkSpannedHosts) {\n            if (rh == hostId) {\n                continue;\n            }\n            OvsTunnelNetworkVO ta = _tunnelNetworkDao.findByFromToNetwork(hostId, rh.longValue(), nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                if (ta == null) {\n                    createTunnelRecord(hostId, rh.longValue(), nw.getId(), key);\n                }\n                if (!toHostIds.contains(rh)) {\n                    toHostIds.add(rh);\n                }\n            }\n\n            ta = _tunnelNetworkDao.findByFromToNetwork(rh.longValue(),\n                    hostId, nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" +\n                        rh.longValue() + \" to:\" + hostId);\n                if (ta == null) {\n                    createTunnelRecord(rh.longValue(), hostId,\n                            nw.getId(), key);\n                }\n                if (!fromHostIds.contains(rh)) {\n                    fromHostIds.add(rh);\n                }\n            }\n        }\n        \r\n        try {\n            String myIp = getGreEndpointIP(host, nw);\n            if (myIp == null)\n                throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\" + \"Failure is on host:\" + host.getId());\n            boolean noHost = true;\n            for (Long i : toHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                if (otherIp == null)\n                    throw new GreTunnelException(\n                            \"Unable to retrieve the remote \"\n                                    + \"endpoint for the GRE tunnel.\"\n                                    + \"Failure is on host:\" + rHost.getId());\n                Commands cmds = new Commands(\n                        new OvsCreateTunnelCommand(otherIp, key,\n                                Long.valueOf(hostId), i, nw.getId(), myIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \" + nw.getId());\n                s_logger.debug(\"Ask host \" + hostId\n                        + \" to create gre tunnel to \" + i);\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            for (Long i : fromHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                        key, i, Long.valueOf(hostId), nw.getId(), otherIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                        + hostId);\n                Answer[] answers = _agentMgr.send(i, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            \r\n            \r\n            if (noHost) {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, nw.getId()));\n                s_logger.debug(\"Ask host \" + hostId + \" to configure bridge for network:\" + nw.getId());\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            }\n        } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n            \r\n            s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n        }\n    }\n","date":"2018-05-01 23:14:43","endLine":400,"groupId":"104172","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAndCreateTunnel","params":"(Networknw@Hosthost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/aa/7c0f6d1b2610231d23488e1a0b8721275e10a8.src","preCode":"    protected void checkAndCreateTunnel(Network nw, Host host) {\n\n        s_logger.debug(\"Creating tunnels with OVS tunnel manager\");\n\n        long hostId = host.getId();\n        int key = getGreKey(nw);\n        String bridgeName = generateBridgeName(nw, key);\n        List<Long> toHostIds = new ArrayList<Long>();\n        List<Long> fromHostIds = new ArrayList<Long>();\n        List<Long> networkSpannedHosts = _ovsNetworkToplogyGuru.getNetworkSpanedHosts(nw.getId());\n        for (Long rh : networkSpannedHosts) {\n            if (rh == hostId) {\n                continue;\n            }\n            OvsTunnelNetworkVO ta = _tunnelNetworkDao.findByFromToNetwork(hostId, rh.longValue(), nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                if (ta == null) {\n                    createTunnelRecord(hostId, rh.longValue(), nw.getId(), key);\n                }\n                if (!toHostIds.contains(rh)) {\n                    toHostIds.add(rh);\n                }\n            }\n\n            ta = _tunnelNetworkDao.findByFromToNetwork(rh.longValue(),\n                    hostId, nw.getId());\n            \r\n            if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {\n                s_logger.debug(\"Attempting to create tunnel from:\" +\n                        rh.longValue() + \" to:\" + hostId);\n                if (ta == null) {\n                    createTunnelRecord(rh.longValue(), hostId,\n                            nw.getId(), key);\n                }\n                if (!fromHostIds.contains(rh)) {\n                    fromHostIds.add(rh);\n                }\n            }\n        }\n        \r\n        try {\n            String myIp = getGreEndpointIP(host, nw);\n            if (myIp == null)\n                throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\" + \"Failure is on host:\" + host.getId());\n            boolean noHost = true;\n            for (Long i : toHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                if (otherIp == null)\n                    throw new GreTunnelException(\n                            \"Unable to retrieve the remote \"\n                                    + \"endpoint for the GRE tunnel.\"\n                                    + \"Failure is on host:\" + rHost.getId());\n                Commands cmds = new Commands(\n                        new OvsCreateTunnelCommand(otherIp, key,\n                                Long.valueOf(hostId), i, nw.getId(), myIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \" + nw.getId());\n                s_logger.debug(\"Ask host \" + hostId\n                        + \" to create gre tunnel to \" + i);\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            for (Long i : fromHostIds) {\n                HostVO rHost = _hostDao.findById(i);\n                String otherIp = getGreEndpointIP(rHost, nw);\n                Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                        key, i, Long.valueOf(hostId), nw.getId(), otherIp, bridgeName, nw.getUuid()));\n                s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                        + hostId);\n                Answer[] answers = _agentMgr.send(i, cmds);\n                handleCreateTunnelAnswer(answers);\n                noHost = false;\n            }\n\n            \r\n            \r\n            if (noHost) {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, nw.getId()));\n                s_logger.debug(\"Ask host \" + hostId + \" to configure bridge for network:\" + nw.getId());\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            }\n        } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n            \r\n            s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n        }\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/ovs/OvsTunnelManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"N"},{"authorDate":"2018-08-16 15:49:43","commitOrder":3,"curCode":"    protected void checkAndCreateVpcTunnelNetworks(Host host, long vpcId) {\n\n        long hostId = host.getId();\n        String bridgeName=generateBridgeNameForVpc(vpcId);\n\n        List<Long> vmIds = _ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(vpcId, hostId);\n\n        if (vmIds == null || vmIds.isEmpty()) {\n\n            \r\n            try {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, null));\n                s_logger.debug(\"Ask host \" + hostId + \" to create bridge for vpc \" + vpcId + \" and configure the \"\n                        + \" bridge for distributed routing.\");\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            } catch (OperationTimedoutException | AgentUnavailableException e) {\n                s_logger.warn(\"Ovs Tunnel network created bridge failed\", e);\n            }\n\n            \r\n            OvsVpcRoutingPolicyConfigCommand cmd = prepareVpcRoutingPolicyUpdate(vpcId);\n            cmd.setSequenceNumber(getNextRoutingPolicyUpdateSequenceNumber(vpcId));\n\n            if (!sendVpcRoutingPolicyChangeUpdate(cmd, hostId, bridgeName)) {\n                s_logger.debug(\"Failed to send VPC routing policy change update to host : \" + hostId +\n                        \". But moving on with sending the updates to the rest of the hosts.\");\n            }\n        }\n\n        List<? extends Network> vpcNetworks =  _vpcMgr.getVpcNetworks(vpcId);\n        List<Long> vpcSpannedHostIds = _ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);\n        for (Network vpcNetwork: vpcNetworks) {\n            if (vpcNetwork.getState() != Network.State.Implemented &&\n                    vpcNetwork.getState() != Network.State.Implementing && vpcNetwork.getState() != Network.State.Setup)\n                continue;\n\n            int key = getGreKey(vpcNetwork);\n            List<Long> toHostIds = new ArrayList<Long>();\n            List<Long> fromHostIds = new ArrayList<Long>();\n            OvsTunnelNetworkVO tunnelRecord = null;\n\n            for (Long rh : vpcSpannedHostIds) {\n                if (rh == hostId) {\n                    continue;\n                }\n                tunnelRecord = _tunnelNetworkDao.findByFromToNetwork(hostId, rh.longValue(), vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(hostId, rh.longValue(), vpcNetwork.getId(), key);\n                    }\n                    if (!toHostIds.contains(rh)) {\n                        toHostIds.add(rh);\n                    }\n                }\n                tunnelRecord = _tunnelNetworkDao.findByFromToNetwork(rh.longValue(), hostId, vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + rh.longValue() + \" to:\" + hostId);\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(rh.longValue(), hostId, vpcNetwork.getId(), key);\n                    }\n                    if (!fromHostIds.contains(rh)) {\n                        fromHostIds.add(rh);\n                    }\n                }\n            }\n\n            try {\n                String myIp = getGreEndpointIP(host, vpcNetwork);\n                if (myIp == null)\n                    throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\"\n                            + \"Failure is on host:\" + host.getId());\n                boolean noHost = true;\n\n                for (Long i : toHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    if (otherIp == null)\n                        throw new GreTunnelException(\n                                \"Unable to retrieve the remote endpoint for the GRE tunnel.\"\n                                        + \"Failure is on host:\" + rHost.getId());\n                    Commands cmds = new Commands( new OvsCreateTunnelCommand(otherIp, key, Long.valueOf(hostId),\n                                     i, vpcNetwork.getId(), myIp, bridgeName, vpcNetwork.getUuid()));\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \"\n                            + vpcNetwork.getId());\n                    s_logger.debug(\"Ask host \" + hostId\n                            + \" to create gre tunnel to \" + i);\n                    Answer[] answers = _agentMgr.send(hostId, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n\n                for (Long i : fromHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                            key, i, Long.valueOf(hostId), vpcNetwork.getId(), otherIp, bridgeName,\n                            vpcNetwork.getUuid()));\n                    s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                            + hostId);\n                    Answer[] answers = _agentMgr.send(i, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n            } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n                \r\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n        }\n    }\n","date":"2018-08-16 15:49:43","endLine":672,"groupId":"104172","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"checkAndCreateVpcTunnelNetworks","params":"(Hosthost@longvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ac/a36092feae8d6993a69beaad25f1722bc77e53.src","preCode":"    protected void checkAndCreateVpcTunnelNetworks(Host host, long vpcId) {\n\n        long hostId = host.getId();\n        String bridgeName=generateBridgeNameForVpc(vpcId);\n\n        List<Long> vmIds = _ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(vpcId, hostId);\n\n        if (vmIds == null || vmIds.isEmpty()) {\n\n            \r\n            try {\n                Commands cmds = new Commands(new OvsSetupBridgeCommand(bridgeName, hostId, null));\n                s_logger.debug(\"Ask host \" + hostId + \" to create bridge for vpc \" + vpcId + \" and configure the \"\n                        + \" bridge for distributed routing.\");\n                Answer[] answers = _agentMgr.send(hostId, cmds);\n                handleSetupBridgeAnswer(answers);\n            } catch (OperationTimedoutException | AgentUnavailableException e) {\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n\n            \r\n            OvsVpcRoutingPolicyConfigCommand cmd = prepareVpcRoutingPolicyUpdate(vpcId);\n            cmd.setSequenceNumber(getNextRoutingPolicyUpdateSequenceNumber(vpcId));\n\n            if (!sendVpcRoutingPolicyChangeUpdate(cmd, hostId, bridgeName)) {\n                s_logger.debug(\"Failed to send VPC routing policy change update to host : \" + hostId +\n                        \". But moving on with sending the updates to the rest of the hosts.\");\n            }\n        }\n\n        List<? extends Network> vpcNetworks =  _vpcMgr.getVpcNetworks(vpcId);\n        List<Long> vpcSpannedHostIds = _ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);\n        for (Network vpcNetwork: vpcNetworks) {\n            if (vpcNetwork.getState() != Network.State.Implemented &&\n                    vpcNetwork.getState() != Network.State.Implementing && vpcNetwork.getState() != Network.State.Setup)\n                continue;\n\n            int key = getGreKey(vpcNetwork);\n            List<Long> toHostIds = new ArrayList<Long>();\n            List<Long> fromHostIds = new ArrayList<Long>();\n            OvsTunnelNetworkVO tunnelRecord = null;\n\n            for (Long rh : vpcSpannedHostIds) {\n                if (rh == hostId) {\n                    continue;\n                }\n                tunnelRecord = _tunnelNetworkDao.findByFromToNetwork(hostId, rh.longValue(), vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + rh.longValue());\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(hostId, rh.longValue(), vpcNetwork.getId(), key);\n                    }\n                    if (!toHostIds.contains(rh)) {\n                        toHostIds.add(rh);\n                    }\n                }\n                tunnelRecord = _tunnelNetworkDao.findByFromToNetwork(rh.longValue(), hostId, vpcNetwork.getId());\n                \r\n                if (tunnelRecord == null || tunnelRecord.getState().equals(OvsTunnel.State.Failed.name())) {\n                    s_logger.debug(\"Attempting to create tunnel from:\" + rh.longValue() + \" to:\" + hostId);\n                    if (tunnelRecord == null) {\n                        createTunnelRecord(rh.longValue(), hostId, vpcNetwork.getId(), key);\n                    }\n                    if (!fromHostIds.contains(rh)) {\n                        fromHostIds.add(rh);\n                    }\n                }\n            }\n\n            try {\n                String myIp = getGreEndpointIP(host, vpcNetwork);\n                if (myIp == null)\n                    throw new GreTunnelException(\"Unable to retrieve the source \" + \"endpoint for the GRE tunnel.\"\n                            + \"Failure is on host:\" + host.getId());\n                boolean noHost = true;\n\n                for (Long i : toHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    if (otherIp == null)\n                        throw new GreTunnelException(\n                                \"Unable to retrieve the remote endpoint for the GRE tunnel.\"\n                                        + \"Failure is on host:\" + rHost.getId());\n                    Commands cmds = new Commands( new OvsCreateTunnelCommand(otherIp, key, Long.valueOf(hostId),\n                                     i, vpcNetwork.getId(), myIp, bridgeName, vpcNetwork.getUuid()));\n                    s_logger.debug(\"Attempting to create tunnel from:\" + hostId + \" to:\" + i + \" for the network \"\n                            + vpcNetwork.getId());\n                    s_logger.debug(\"Ask host \" + hostId\n                            + \" to create gre tunnel to \" + i);\n                    Answer[] answers = _agentMgr.send(hostId, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n\n                for (Long i : fromHostIds) {\n                    HostVO rHost = _hostDao.findById(i);\n                    String otherIp = getGreEndpointIP(rHost, vpcNetwork);\n                    Commands cmds = new Commands(new OvsCreateTunnelCommand(myIp,\n                            key, i, Long.valueOf(hostId), vpcNetwork.getId(), otherIp, bridgeName,\n                            vpcNetwork.getUuid()));\n                    s_logger.debug(\"Ask host \" + i + \" to create gre tunnel to \"\n                            + hostId);\n                    Answer[] answers = _agentMgr.send(i, cmds);\n                    handleCreateTunnelAnswer(answers);\n                }\n            } catch (GreTunnelException | OperationTimedoutException | AgentUnavailableException e) {\n                \r\n                s_logger.warn(\"Ovs Tunnel network created tunnel failed\", e);\n            }\n        }\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/ovs/OvsTunnelManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"}],"commitId":"e57003f93f2067b876864b26071e1ef9952a9be1","commitMessage":"@@@Fix some log messages that do not match with their function (#2796)\n\n\n","date":"2018-08-16 15:49:43","modifiedFileCount":"13","status":"M","submitter":"lzh3636"}]
