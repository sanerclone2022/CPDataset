[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(GetUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":367,"groupId":"16268","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getUsageRecords","params":"(GetUsageRecordsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ef/d8ef4b8ad5c838768e72b0991cdd3420997f30.src","preCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(GetUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","realPath":"server/src/main/java/com/cloud/usage/UsageServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(getUsageRecordsCmd)).thenReturn(usageRecords);\n\n        getUsageRecordsCmd._usageService = usageService;\n        getUsageRecordsCmd.execute();\n\n    }\n","date":"2018-01-20 05:49:27","endLine":72,"groupId":"976","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecuteEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/f3e27aa5615de7497091d5e29ef64093055d8a.src","preCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(getUsageRecordsCmd)).thenReturn(usageRecords);\n\n        getUsageRecordsCmd._usageService = usageService;\n        getUsageRecordsCmd.execute();\n\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/UsageCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-03-25 15:40:53","codes":[{"authorDate":"2019-03-25 15:40:53","commitOrder":2,"curCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(ListUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","date":"2019-03-25 15:40:53","endLine":367,"groupId":"16268","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getUsageRecords","params":"(ListUsageRecordsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/53/1b291704381deb2ef8107ab5cfc8a47c7e128b.src","preCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(GetUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","realPath":"server/src/main/java/com/cloud/usage/UsageServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2019-03-25 15:40:53","commitOrder":2,"curCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(listUsageRecordsCmd)).thenReturn(usageRecords);\n\n        listUsageRecordsCmd._usageService = usageService;\n        listUsageRecordsCmd.execute();\n\n    }\n","date":"2019-03-25 15:40:53","endLine":72,"groupId":"976","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testExecuteEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/7b0f7dd7db445813251f7b988e0ac6c7704aac.src","preCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(getUsageRecordsCmd)).thenReturn(usageRecords);\n\n        getUsageRecordsCmd._usageService = usageService;\n        getUsageRecordsCmd.execute();\n\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/UsageCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"0d21f0c1e797f89513824c99ee48cdf42e4c6116","commitMessage":"@@@api: rename ListUsageRecords file name to ListUsageRecordsCmd (#3151)\n\n* Rename ListUsageRecords API command file name to ListUsageRecordsCmd\n\n* Refactor to use APINAME variable and remove unused s_logger field\n\n* Remove unused import\n","date":"2019-03-25 15:40:53","modifiedFileCount":"5","status":"M","submitter":"Dingane Hlaluku"},{"authorTime":"2019-03-25 15:40:53","codes":[{"authorDate":"2020-03-03 20:27:58","commitOrder":3,"curCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(ListUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                case UsageTypes.BACKUP:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","date":"2020-03-03 20:27:58","endLine":370,"groupId":"16268","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getUsageRecords","params":"(ListUsageRecordsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4f/09d13f3ccb2320b44b271efc3051b27f52eb56.src","preCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(ListUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","realPath":"server/src/main/java/com/cloud/usage/UsageServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2019-03-25 15:40:53","commitOrder":3,"curCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(listUsageRecordsCmd)).thenReturn(usageRecords);\n\n        listUsageRecordsCmd._usageService = usageService;\n        listUsageRecordsCmd.execute();\n\n    }\n","date":"2019-03-25 15:40:53","endLine":72,"groupId":"976","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testExecuteEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/7b0f7dd7db445813251f7b988e0ac6c7704aac.src","preCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(listUsageRecordsCmd)).thenReturn(usageRecords);\n\n        listUsageRecordsCmd._usageService = usageService;\n        listUsageRecordsCmd.execute();\n\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/UsageCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"318924d801a6bb0f7d3f77e1a5a432267a3db359","commitMessage":"@@@CloudStack Backup & Recovery Framework (#3553)\n\n","date":"2020-03-03 20:27:58","modifiedFileCount":"47","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-03-25 15:40:53","codes":[{"authorDate":"2020-11-07 17:42:44","commitOrder":4,"curCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(ListUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                case UsageTypes.BACKUP:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        \r\n        sc.addAnd(\"isHidden\", SearchCriteria.Op.EQ, false);\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","date":"2020-11-07 17:42:44","endLine":373,"groupId":"16268","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getUsageRecords","params":"(ListUsageRecordsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2d/8d9370b9ff556e5d4ec89199e50e02e195f8f3.src","preCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(ListUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                case UsageTypes.BACKUP:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","realPath":"server/src/main/java/com/cloud/usage/UsageServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2019-03-25 15:40:53","commitOrder":4,"curCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(listUsageRecordsCmd)).thenReturn(usageRecords);\n\n        listUsageRecordsCmd._usageService = usageService;\n        listUsageRecordsCmd.execute();\n\n    }\n","date":"2019-03-25 15:40:53","endLine":72,"groupId":"976","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testExecuteEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/7b0f7dd7db445813251f7b988e0ac6c7704aac.src","preCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(listUsageRecordsCmd)).thenReturn(usageRecords);\n\n        listUsageRecordsCmd._usageService = usageService;\n        listUsageRecordsCmd.execute();\n\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/UsageCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"5f8289ffe90fd829493bf4e0d23c64ef50313627","commitMessage":"@@@Re-enable IP address usage hiding (#4327)\n\n","date":"2020-11-07 17:42:44","modifiedFileCount":"11","status":"M","submitter":"Olivier Lemasle"},{"authorTime":"2019-03-25 15:40:53","codes":[{"authorDate":"2021-04-12 14:13:57","commitOrder":5,"curCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(ListUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean ignoreAccountId = false;\n        boolean isDomainAdmin = _accountService.isDomainAdmin(caller.getId());\n        boolean isNormalUser = _accountService.isNormalUser(caller.getId());\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            ignoreAccountId = _accountService.isRootAdmin(caller.getId());\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        \r\n        if (isDomainAdmin) {\n            if (domainId != null) {\n                Account callerAccount = _accountService.getAccount(caller.getId());\n                Domain domain = _domainDao.findById(domainId);\n                _accountService.checkAccess(callerAccount, domain);\n            } else {\n                \r\n                \r\n                domainId = caller.getDomainId();\n            }\n\n            if (cmd.getAccountId() != null) {\n                \r\n                checkDomainAdminAccountAccess(accountId, domainId);\n            }\n        }\n\n        \r\n        \r\n        checkUserAccess(cmd, accountId, caller, isNormalUser);\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !ignoreAccountId) {\n            \r\n            \r\n            if ((accountId == caller.getId() && !cmd.isRecursive()) || cmd.getAccountId() != null){\n                sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n            }\n        }\n\n        if (domainId != null) {\n            if (cmd.isRecursive()) {\n                SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n                sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(domainId).getPath() + \"%\");\n                List<DomainVO> domains = _domainDao.search(sdc, null);\n                List<Long> domainIds = new ArrayList<Long>();\n                for (DomainVO domain : domains) {\n                    domainIds.add(domain.getId());\n                }\n                sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n            } else {\n                sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n            }\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                case UsageTypes.BACKUP:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        \r\n        sc.addAnd(\"isHidden\", SearchCriteria.Op.EQ, false);\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","date":"2021-04-12 14:13:57","endLine":398,"groupId":"101307","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"getUsageRecords","params":"(ListUsageRecordsCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/3daadb10cfbb2df02f6bd5b4af7550d703f6ca.src","preCode":"    public Pair<List<? extends Usage>, Integer> getUsageRecords(ListUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        \r\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n\n        \r\n        if (accountId == null) {\n            accountId = caller.getId();\n            \r\n            \r\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n\n            Long usageDbId = null;\n\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                case UsageTypes.BACKUP:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:\n                    PortForwardingRuleVO pf = _pfDao.findByUuidIncludingRemoved(usageId);\n                    if (pf != null) {\n                        usageDbId = pf.getId();\n                    }\n                    break;\n                case UsageTypes.VOLUME:\n                case UsageTypes.VM_DISK_IO_READ:\n                case UsageTypes.VM_DISK_IO_WRITE:\n                case UsageTypes.VM_DISK_BYTES_READ:\n                case UsageTypes.VM_DISK_BYTES_WRITE:\n                    VolumeVO volume = _volumeDao.findByUuidIncludingRemoved(usageId);\n                    if (volume != null) {\n                        usageDbId = volume.getId();\n                    }\n                    break;\n                case UsageTypes.VPN_USERS:\n                    VpnUserVO vpnUser = _vpnUserDao.findByUuidIncludingRemoved(usageId);\n                    if (vpnUser != null) {\n                        usageDbId = vpnUser.getId();\n                    }\n                    break;\n                case UsageTypes.SECURITY_GROUP:\n                    SecurityGroupVO sg = _sgDao.findByUuidIncludingRemoved(usageId);\n                    if (sg != null) {\n                        usageDbId = sg.getId();\n                    }\n                    break;\n                case UsageTypes.IP_ADDRESS:\n                    IPAddressVO ip = _ipDao.findByUuidIncludingRemoved(usageId);\n                    if (ip != null) {\n                        usageDbId = ip.getId();\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            if (usageDbId != null) {\n                sc.addAnd(\"usageId\", SearchCriteria.Op.EQ, usageDbId);\n            } else {\n                \r\n                return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n            }\n        }\n\n        \r\n        sc.addAnd(\"isHidden\", SearchCriteria.Op.EQ, false);\n\n        if ((adjustedStartDate != null) && (adjustedEndDate != null) && adjustedStartDate.before(adjustedEndDate)) {\n            sc.addAnd(\"startDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n            sc.addAnd(\"endDate\", SearchCriteria.Op.BETWEEN, adjustedStartDate, adjustedEndDate);\n        } else {\n            return new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0)); \r\n        }\n\n        Pair<List<UsageVO>, Integer> usageRecords = null;\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            usageRecords = _usageDao.searchAndCountAllRecords(sc, usageFilter);\n        } finally {\n            txn.close();\n\n            \r\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n\n        return new Pair<List<? extends Usage>, Integer>(usageRecords.first(), usageRecords.second());\n    }\n","realPath":"server/src/main/java/com/cloud/usage/UsageServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-03-25 15:40:53","commitOrder":5,"curCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(listUsageRecordsCmd)).thenReturn(usageRecords);\n\n        listUsageRecordsCmd._usageService = usageService;\n        listUsageRecordsCmd.execute();\n\n    }\n","date":"2019-03-25 15:40:53","endLine":72,"groupId":"101307","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testExecuteEmptyResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/7b0f7dd7db445813251f7b988e0ac6c7704aac.src","preCode":"    public void testExecuteEmptyResult() {\n\n        UsageService usageService = Mockito.mock(UsageService.class);\n\n        Pair<List<? extends Usage>, Integer> usageRecords = new Pair<List<? extends Usage>, Integer>(new ArrayList<Usage>(), new Integer(0));\n\n        Mockito.when(usageService.getUsageRecords(listUsageRecordsCmd)).thenReturn(usageRecords);\n\n        listUsageRecordsCmd._usageService = usageService;\n        listUsageRecordsCmd.execute();\n\n    }\n","realPath":"api/src/test/java/org/apache/cloudstack/api/command/test/UsageCmdTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"cce736709e0ef13f23584fc32e68b26833a75743","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15'\n","date":"2021-04-12 14:13:57","modifiedFileCount":"15","status":"M","submitter":"Abhishek Kumar"}]
