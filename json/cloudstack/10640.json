[{"authorTime":"2020-02-03 22:43:52","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public DiskProfile allocateRawVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops, VirtualMachine vm, VirtualMachineTemplate template, Account owner, Long deviceId) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type,\n                name,\n                vm.getDataCenterId(),\n                owner.getDomainId(),\n                owner.getId(),\n                offering.getId(),\n                offering.getProvisioningType(),\n                size,\n                minIops,\n                maxIops,\n                null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n        if (template.getFormat() == ImageFormat.ISO) {\n            vol.setIsoId(template.getId());\n        } else if (template.getTemplateType().equals(Storage.TemplateType.DATADISK)) {\n            vol.setTemplateId(template.getId());\n        }\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol = _volsDao.persist(vol);\n\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, vol.getAccountId(), vol.getDataCenterId(), vol.getId(), vol.getName(), offering.getId(), null, size,\n                    Volume.class.getName(), vol.getUuid(), vol.isDisplayVolume());\n\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.volume, vol.isDisplayVolume());\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, vol.isDisplayVolume(), new Long(vol.getSize()));\n        }\n        return toDiskProfile(vol, offering);\n    }\n","date":"2018-01-20 05:49:27","endLine":719,"groupId":"16914","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"allocateRawVolume","params":"(Typetype@Stringname@DiskOfferingoffering@Longsize@LongminIops@LongmaxIops@VirtualMachinevm@VirtualMachineTemplatetemplate@Accountowner@LongdeviceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/2fdc495f9b5b891e53b7718e224d5f4b8d28d3.src","preCode":"    public DiskProfile allocateRawVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops, VirtualMachine vm, VirtualMachineTemplate template, Account owner, Long deviceId) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type,\n                name,\n                vm.getDataCenterId(),\n                owner.getDomainId(),\n                owner.getId(),\n                offering.getId(),\n                offering.getProvisioningType(),\n                size,\n                minIops,\n                maxIops,\n                null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n        if (template.getFormat() == ImageFormat.ISO) {\n            vol.setIsoId(template.getId());\n        } else if (template.getTemplateType().equals(Storage.TemplateType.DATADISK)) {\n            vol.setTemplateId(template.getId());\n        }\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol = _volsDao.persist(vol);\n\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, vol.getAccountId(), vol.getDataCenterId(), vol.getId(), vol.getName(), offering.getId(), null, size,\n                    Volume.class.getName(), vol.getUuid(), vol.isDisplayVolume());\n\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.volume, vol.isDisplayVolume());\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, vol.isDisplayVolume(), new Long(vol.getSize()));\n        }\n        return toDiskProfile(vol, offering);\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"NB"},{"authorDate":"2020-02-03 22:43:52","commitOrder":2,"curCode":"    public DiskProfile importVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops,\n                                    VirtualMachine vm, VirtualMachineTemplate template, Account owner,\n                                    Long deviceId, Long poolId, String path, String chainInfo) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type, name, vm.getDataCenterId(), owner.getDomainId(), owner.getId(), offering.getId(), offering.getProvisioningType(), size, minIops, maxIops, null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n\n        if (template != null) {\n            if (ImageFormat.ISO.equals(template.getFormat())) {\n                vol.setIsoId(template.getId());\n            } else if (Storage.TemplateType.DATADISK.equals(template.getTemplateType())) {\n                vol.setTemplateId(template.getId());\n            }\n            if (type == Type.ROOT) {\n                vol.setTemplateId(template.getId());\n            }\n        }\n\n        \r\n        if (VirtualMachine.Type.User.equals(vm.getType())) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol.setPoolId(poolId);\n        vol.setPath(path);\n        vol.setChainInfo(chainInfo);\n        vol.setState(Volume.State.Ready);\n        vol = _volsDao.persist(vol);\n        return toDiskProfile(vol, offering);\n    }\n","date":"2020-02-03 22:43:52","endLine":1682,"groupId":"8905","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"importVolume","params":"(Typetype@Stringname@DiskOfferingoffering@Longsize@LongminIops@LongmaxIops@VirtualMachinevm@VirtualMachineTemplatetemplate@Accountowner@LongdeviceId@LongpoolId@Stringpath@StringchainInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/95/538c2047f3b30831dff78064519bcb422e85e6.src","preCode":"    public DiskProfile importVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops,\n                                    VirtualMachine vm, VirtualMachineTemplate template, Account owner,\n                                    Long deviceId, Long poolId, String path, String chainInfo) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type, name, vm.getDataCenterId(), owner.getDomainId(), owner.getId(), offering.getId(), offering.getProvisioningType(), size, minIops, maxIops, null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n\n        if (template != null) {\n            if (ImageFormat.ISO.equals(template.getFormat())) {\n                vol.setIsoId(template.getId());\n            } else if (Storage.TemplateType.DATADISK.equals(template.getTemplateType())) {\n                vol.setTemplateId(template.getId());\n            }\n            if (type == Type.ROOT) {\n                vol.setTemplateId(template.getId());\n            }\n        }\n\n        \r\n        if (VirtualMachine.Type.User.equals(vm.getType())) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol.setPoolId(poolId);\n        vol.setPath(path);\n        vol.setChainInfo(chainInfo);\n        vol.setState(Volume.State.Ready);\n        vol = _volsDao.persist(vol);\n        return toDiskProfile(vol, offering);\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"B"}],"commitId":"0f5b0e67f86731b7bfe6fb4728f3c675f54e89da","commitMessage":"@@@VM ingestion (#3606)\n\nThe VM ingestion feature allows CloudStack to discover.  on-board.  import existing VMs in an infra. The feature currently works only for VMware.  with a hypervisor agnostic framework which may be extended for KVM and XenServer in future.\n","date":"2020-02-03 22:43:52","modifiedFileCount":"27","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2020-02-03 22:43:52","codes":[{"authorDate":"2021-02-24 17:28:33","commitOrder":3,"curCode":"    public DiskProfile allocateRawVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops, VirtualMachine vm, VirtualMachineTemplate template, Account owner,\n                                         Long deviceId) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type, name, vm.getDataCenterId(), owner.getDomainId(), owner.getId(), offering.getId(), offering.getProvisioningType(), size, minIops, maxIops, null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n        if (template.getFormat() == ImageFormat.ISO) {\n            vol.setIsoId(template.getId());\n        } else if (template.getTemplateType().equals(Storage.TemplateType.DATADISK)) {\n            vol.setTemplateId(template.getId());\n        }\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol = _volsDao.persist(vol);\n\n        List<VolumeDetailVO> volumeDetailsVO = new ArrayList<VolumeDetailVO>();\n        DiskOfferingDetailVO bandwidthLimitDetail = _diskOfferingDetailDao.findDetail(offering.getId(), Volume.BANDWIDTH_LIMIT_IN_MBPS);\n        if (bandwidthLimitDetail != null) {\n            volumeDetailsVO.add(new VolumeDetailVO(vol.getId(), Volume.BANDWIDTH_LIMIT_IN_MBPS, bandwidthLimitDetail.getValue(), false));\n        }\n        DiskOfferingDetailVO iopsLimitDetail = _diskOfferingDetailDao.findDetail(offering.getId(), Volume.IOPS_LIMIT);\n        if (iopsLimitDetail != null) {\n            volumeDetailsVO.add(new VolumeDetailVO(vol.getId(), Volume.IOPS_LIMIT, iopsLimitDetail.getValue(), false));\n        }\n        if (!volumeDetailsVO.isEmpty()) {\n            _volDetailDao.saveDetails(volumeDetailsVO);\n        }\n\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, vol.getAccountId(), vol.getDataCenterId(), vol.getId(), vol.getName(), offering.getId(), null, size,\n                    Volume.class.getName(), vol.getUuid(), vol.isDisplayVolume());\n\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.volume, vol.isDisplayVolume());\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, vol.isDisplayVolume(), new Long(vol.getSize()));\n        }\n        return toDiskProfile(vol, offering);\n    }\n","date":"2021-02-24 17:28:33","endLine":778,"groupId":"10640","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"allocateRawVolume","params":"(Typetype@Stringname@DiskOfferingoffering@Longsize@LongminIops@LongmaxIops@VirtualMachinevm@VirtualMachineTemplatetemplate@Accountowner@LongdeviceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e6/260b851ecc1508cb4f1a51d66bbd1fd4036703.src","preCode":"    public DiskProfile allocateRawVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops, VirtualMachine vm, VirtualMachineTemplate template, Account owner,\n                                         Long deviceId) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type, name, vm.getDataCenterId(), owner.getDomainId(), owner.getId(), offering.getId(), offering.getProvisioningType(), size, minIops, maxIops, null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n        if (template.getFormat() == ImageFormat.ISO) {\n            vol.setIsoId(template.getId());\n        } else if (template.getTemplateType().equals(Storage.TemplateType.DATADISK)) {\n            vol.setTemplateId(template.getId());\n        }\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol = _volsDao.persist(vol);\n\n        \r\n        if (vm.getType() == VirtualMachine.Type.User) {\n            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE, vol.getAccountId(), vol.getDataCenterId(), vol.getId(), vol.getName(), offering.getId(), null, size,\n                    Volume.class.getName(), vol.getUuid(), vol.isDisplayVolume());\n\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.volume, vol.isDisplayVolume());\n            _resourceLimitMgr.incrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, vol.isDisplayVolume(), new Long(vol.getSize()));\n        }\n        return toDiskProfile(vol, offering);\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":719,"status":"M"},{"authorDate":"2020-02-03 22:43:52","commitOrder":3,"curCode":"    public DiskProfile importVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops,\n                                    VirtualMachine vm, VirtualMachineTemplate template, Account owner,\n                                    Long deviceId, Long poolId, String path, String chainInfo) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type, name, vm.getDataCenterId(), owner.getDomainId(), owner.getId(), offering.getId(), offering.getProvisioningType(), size, minIops, maxIops, null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n\n        if (template != null) {\n            if (ImageFormat.ISO.equals(template.getFormat())) {\n                vol.setIsoId(template.getId());\n            } else if (Storage.TemplateType.DATADISK.equals(template.getTemplateType())) {\n                vol.setTemplateId(template.getId());\n            }\n            if (type == Type.ROOT) {\n                vol.setTemplateId(template.getId());\n            }\n        }\n\n        \r\n        if (VirtualMachine.Type.User.equals(vm.getType())) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol.setPoolId(poolId);\n        vol.setPath(path);\n        vol.setChainInfo(chainInfo);\n        vol.setState(Volume.State.Ready);\n        vol = _volsDao.persist(vol);\n        return toDiskProfile(vol, offering);\n    }\n","date":"2020-02-03 22:43:52","endLine":1682,"groupId":"10640","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"importVolume","params":"(Typetype@Stringname@DiskOfferingoffering@Longsize@LongminIops@LongmaxIops@VirtualMachinevm@VirtualMachineTemplatetemplate@Accountowner@LongdeviceId@LongpoolId@Stringpath@StringchainInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/95/538c2047f3b30831dff78064519bcb422e85e6.src","preCode":"    public DiskProfile importVolume(Type type, String name, DiskOffering offering, Long size, Long minIops, Long maxIops,\n                                    VirtualMachine vm, VirtualMachineTemplate template, Account owner,\n                                    Long deviceId, Long poolId, String path, String chainInfo) {\n        if (size == null) {\n            size = offering.getDiskSize();\n        } else {\n            size = (size * 1024 * 1024 * 1024);\n        }\n\n        minIops = minIops != null ? minIops : offering.getMinIops();\n        maxIops = maxIops != null ? maxIops : offering.getMaxIops();\n\n        VolumeVO vol = new VolumeVO(type, name, vm.getDataCenterId(), owner.getDomainId(), owner.getId(), offering.getId(), offering.getProvisioningType(), size, minIops, maxIops, null);\n        if (vm != null) {\n            vol.setInstanceId(vm.getId());\n        }\n\n        if (deviceId != null) {\n            vol.setDeviceId(deviceId);\n        } else if (type.equals(Type.ROOT)) {\n            vol.setDeviceId(0l);\n        } else {\n            vol.setDeviceId(1l);\n        }\n\n        if (template != null) {\n            if (ImageFormat.ISO.equals(template.getFormat())) {\n                vol.setIsoId(template.getId());\n            } else if (Storage.TemplateType.DATADISK.equals(template.getTemplateType())) {\n                vol.setTemplateId(template.getId());\n            }\n            if (type == Type.ROOT) {\n                vol.setTemplateId(template.getId());\n            }\n        }\n\n        \r\n        if (VirtualMachine.Type.User.equals(vm.getType())) {\n            UserVmVO userVm = _userVmDao.findById(vm.getId());\n            vol.setDisplayVolume(userVm.isDisplayVm());\n        }\n\n        vol.setFormat(getSupportedImageFormatForCluster(vm.getHypervisorType()));\n        vol.setPoolId(poolId);\n        vol.setPath(path);\n        vol.setChainInfo(chainInfo);\n        vol.setState(Volume.State.Ready);\n        vol = _volsDao.persist(vol);\n        return toDiskProfile(vol, offering);\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"N"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"}]
