[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean start() {\n        for (NetworkElement element : _networkElements) {\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start MapNetworkManager: Provider <-> NetworkElement must be a one-to-one map, \" +\n                        \"multiple NetworkElements found for Provider: \" + implementedProvider.getName());\n                    return false;\n                }\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":119,"groupId":"2875","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d6/8b7c9e96df9177fee16b3a56dd6308c540d214.src","preCode":"    public boolean start() {\n        for (NetworkElement element : _networkElements) {\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start MapNetworkManager: Provider <-> NetworkElement must be a one-to-one map, \" +\n                        \"multiple NetworkElements found for Provider: \" + implementedProvider.getName());\n                    return false;\n                }\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n        }\n        return true;\n    }\n","realPath":"server/src/test/java/com/cloud/vpc/MockNetworkManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean start() {\n        \r\n        \r\n        for (NetworkElement element : networkElements) {\n            Map<Service, Map<Capability, String>> capabilities = element.getCapabilities();\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start NetworkModel: Provider <-> NetworkElement must be a one-to-one map, \" + \"multiple NetworkElements found for Provider: \" +\n                        implementedProvider.getName());\n                    continue;\n                }\n                s_logger.info(\"Add provider <-> element map entry. \" + implementedProvider.getName() + \"-\" + element.getName() + \"-\" + element.getClass().getSimpleName());\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n            if (capabilities != null && implementedProvider != null) {\n                for (Service service : capabilities.keySet()) {\n                    if (s_serviceToImplementedProvidersMap.containsKey(service)) {\n                        List<Provider> providers = s_serviceToImplementedProvidersMap.get(service);\n                        providers.add(implementedProvider);\n                    } else {\n                        List<Provider> providers = new ArrayList<Provider>();\n                        providers.add(implementedProvider);\n                        s_serviceToImplementedProvidersMap.put(service, providers);\n                    }\n                }\n            }\n        }\n        s_logger.info(\"Started Network Model\");\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":2116,"groupId":"10791","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/83b717a16bf390eb5f1aa96040374fb64b9c94.src","preCode":"    public boolean start() {\n        \r\n        \r\n        for (NetworkElement element : networkElements) {\n            Map<Service, Map<Capability, String>> capabilities = element.getCapabilities();\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start NetworkModel: Provider <-> NetworkElement must be a one-to-one map, \" + \"multiple NetworkElements found for Provider: \" +\n                        implementedProvider.getName());\n                    continue;\n                }\n                s_logger.info(\"Add provider <-> element map entry. \" + implementedProvider.getName() + \"-\" + element.getName() + \"-\" + element.getClass().getSimpleName());\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n            if (capabilities != null && implementedProvider != null) {\n                for (Service service : capabilities.keySet()) {\n                    if (s_serviceToImplementedProvidersMap.containsKey(service)) {\n                        List<Provider> providers = s_serviceToImplementedProvidersMap.get(service);\n                        providers.add(implementedProvider);\n                    } else {\n                        List<Provider> providers = new ArrayList<Provider>();\n                        providers.add(implementedProvider);\n                        s_serviceToImplementedProvidersMap.put(service, providers);\n                    }\n                }\n            }\n        }\n        s_logger.info(\"Started Network Model\");\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkModelImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2086,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-11-12 14:40:26","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean start() {\n        for (NetworkElement element : _networkElements) {\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start MapNetworkManager: Provider <-> NetworkElement must be a one-to-one map, \" +\n                        \"multiple NetworkElements found for Provider: \" + implementedProvider.getName());\n                    return false;\n                }\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":119,"groupId":"101091","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d6/8b7c9e96df9177fee16b3a56dd6308c540d214.src","preCode":"    public boolean start() {\n        for (NetworkElement element : _networkElements) {\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start MapNetworkManager: Provider <-> NetworkElement must be a one-to-one map, \" +\n                        \"multiple NetworkElements found for Provider: \" + implementedProvider.getName());\n                    return false;\n                }\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n        }\n        return true;\n    }\n","realPath":"server/src/test/java/com/cloud/vpc/MockNetworkManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2018-11-12 14:40:26","commitOrder":2,"curCode":"    public boolean start() {\n        \r\n        \r\n        for (NetworkElement element : networkElements) {\n            Map<Service, Map<Capability, String>> capabilities = element.getCapabilities();\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start NetworkModel: Provider <-> NetworkElement must be a one-to-one map, \" + \"multiple NetworkElements found for Provider: \" +\n                        implementedProvider.getName());\n                    continue;\n                }\n                s_logger.info(\"Add provider <-> element map entry. \" + implementedProvider.getName() + \"-\" + element.getName() + \"-\" + element.getClass().getSimpleName());\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n            if (capabilities != null && implementedProvider != null) {\n                for (Service service : capabilities.keySet()) {\n                    if (s_serviceToImplementedProvidersMap.containsKey(service)) {\n                        List<Provider> providers = s_serviceToImplementedProvidersMap.get(service);\n                        providers.add(implementedProvider);\n                    } else {\n                        List<Provider> providers = new ArrayList<Provider>();\n                        providers.add(implementedProvider);\n                        s_serviceToImplementedProvidersMap.put(service, providers);\n                    }\n                }\n            }\n        }\n\n        \r\n        verifyDisabledConfigDriveEntriesOnEnabledZones();\n\n        s_logger.info(\"Started Network Model\");\n        return true;\n    }\n","date":"2018-11-12 14:42:08","endLine":2125,"groupId":"101091","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/03/629cd99c574a630d6f614aa40684df8dece78d.src","preCode":"    public boolean start() {\n        \r\n        \r\n        for (NetworkElement element : networkElements) {\n            Map<Service, Map<Capability, String>> capabilities = element.getCapabilities();\n            Provider implementedProvider = element.getProvider();\n            if (implementedProvider != null) {\n                if (s_providerToNetworkElementMap.containsKey(implementedProvider.getName())) {\n                    s_logger.error(\"Cannot start NetworkModel: Provider <-> NetworkElement must be a one-to-one map, \" + \"multiple NetworkElements found for Provider: \" +\n                        implementedProvider.getName());\n                    continue;\n                }\n                s_logger.info(\"Add provider <-> element map entry. \" + implementedProvider.getName() + \"-\" + element.getName() + \"-\" + element.getClass().getSimpleName());\n                s_providerToNetworkElementMap.put(implementedProvider.getName(), element.getName());\n            }\n            if (capabilities != null && implementedProvider != null) {\n                for (Service service : capabilities.keySet()) {\n                    if (s_serviceToImplementedProvidersMap.containsKey(service)) {\n                        List<Provider> providers = s_serviceToImplementedProvidersMap.get(service);\n                        providers.add(implementedProvider);\n                    } else {\n                        List<Provider> providers = new ArrayList<Provider>();\n                        providers.add(implementedProvider);\n                        s_serviceToImplementedProvidersMap.put(service, providers);\n                    }\n                }\n            }\n        }\n        s_logger.info(\"Started Network Model\");\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkModelImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2091,"status":"M"}],"commitId":"375264aaa41d9d30558c65f510833513cff938bb","commitMessage":"@@@Merge remote-tracking branch 'origin/4.11'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-11-12 14:42:08","modifiedFileCount":"2","status":"M","submitter":"Rohit Yadav"}]
