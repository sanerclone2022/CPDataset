[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        final Rados r = new Rados(primaryPool.getAuthUserName());\n                        r.confSet(\"mon_host\", primaryPool.getSourceHost() + \":\" + primaryPool.getSourcePort());\n                        r.confSet(\"key\", primaryPool.getAuthSecret());\n                        r.confSet(\"client_mount_timeout\", \"30\");\n                        r.connect();\n                        s_logger.debug(\"Succesfully connected to Ceph cluster at \" + r.confGet(\"mon_host\"));\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(\"-c\", disk.getPath());\n                    command.add(\"-n\", snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1441,"groupId":"4661","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        final Rados r = new Rados(primaryPool.getAuthUserName());\n                        r.confSet(\"mon_host\", primaryPool.getSourceHost() + \":\" + primaryPool.getSourcePort());\n                        r.confSet(\"key\", primaryPool.getAuthSecret());\n                        r.confSet(\"client_mount_timeout\", \"30\");\n                        r.connect();\n                        s_logger.debug(\"Succesfully connected to Ceph cluster at \" + r.confGet(\"mon_host\"));\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(\"-c\", disk.getPath());\n                    command.add(\"-n\", snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer backupSnapshot(CopyCommand cmd) {\n        DataTO srcData = cmd.getSrcTO();\n        DataTO destData = cmd.getDestTO();\n        SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        DataStoreTO imageStore = destData.getDataStore();\n        if (!(imageStore instanceof NfsTO)) {\n            return new CopyCmdAnswer(\"unsupported protocol\");\n        }\n\n        int index = snapshot.getPath().lastIndexOf(\"/\");\n\n        String snapshotName = snapshot.getPath().substring(index + 1);\n        String snapshotRelPath = \"snapshots\";\n        SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n        newSnapshot.setPath(snapshotRelPath + File.separator + snapshotName);\n        return new CopyCmdAnswer(newSnapshot);\n    }\n","date":"2018-01-20 05:49:27","endLine":182,"groupId":"165","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(CopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/30/cad8f0a666650f0ee5b4d54033b1e1ba74fe87.src","preCode":"    public Answer backupSnapshot(CopyCommand cmd) {\n        DataTO srcData = cmd.getSrcTO();\n        DataTO destData = cmd.getDestTO();\n        SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        DataStoreTO imageStore = destData.getDataStore();\n        if (!(imageStore instanceof NfsTO)) {\n            return new CopyCmdAnswer(\"unsupported protocol\");\n        }\n\n        int index = snapshot.getPath().lastIndexOf(\"/\");\n\n        String snapshotName = snapshot.getPath().substring(index + 1);\n        String snapshotRelPath = \"snapshots\";\n        SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n        newSnapshot.setPath(snapshotRelPath + File.separator + snapshotName);\n        return new CopyCmdAnswer(newSnapshot);\n    }\n","realPath":"plugins/hypervisors/simulator/src/main/java/com/cloud/resource/SimulatorStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-04-11 22:45:00","commitOrder":2,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2020-04-11 22:45:00","endLine":1543,"groupId":"103370","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/1ff7172ee603dd02b9f16b63a12597ce603ff5.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        final Rados r = new Rados(primaryPool.getAuthUserName());\n                        r.confSet(\"mon_host\", primaryPool.getSourceHost() + \":\" + primaryPool.getSourcePort());\n                        r.confSet(\"key\", primaryPool.getAuthSecret());\n                        r.confSet(\"client_mount_timeout\", \"30\");\n                        r.connect();\n                        s_logger.debug(\"Succesfully connected to Ceph cluster at \" + r.confGet(\"mon_host\"));\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(\"-c\", disk.getPath());\n                    command.add(\"-n\", snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1451,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Answer backupSnapshot(CopyCommand cmd) {\n        DataTO srcData = cmd.getSrcTO();\n        DataTO destData = cmd.getDestTO();\n        SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        DataStoreTO imageStore = destData.getDataStore();\n        if (!(imageStore instanceof NfsTO)) {\n            return new CopyCmdAnswer(\"unsupported protocol\");\n        }\n\n        int index = snapshot.getPath().lastIndexOf(\"/\");\n\n        String snapshotName = snapshot.getPath().substring(index + 1);\n        String snapshotRelPath = \"snapshots\";\n        SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n        newSnapshot.setPath(snapshotRelPath + File.separator + snapshotName);\n        return new CopyCmdAnswer(newSnapshot);\n    }\n","date":"2018-01-20 05:49:27","endLine":182,"groupId":"103370","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"backupSnapshot","params":"(CopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/30/cad8f0a666650f0ee5b4d54033b1e1ba74fe87.src","preCode":"    public Answer backupSnapshot(CopyCommand cmd) {\n        DataTO srcData = cmd.getSrcTO();\n        DataTO destData = cmd.getDestTO();\n        SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        DataStoreTO imageStore = destData.getDataStore();\n        if (!(imageStore instanceof NfsTO)) {\n            return new CopyCmdAnswer(\"unsupported protocol\");\n        }\n\n        int index = snapshot.getPath().lastIndexOf(\"/\");\n\n        String snapshotName = snapshot.getPath().substring(index + 1);\n        String snapshotRelPath = \"snapshots\";\n        SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n        newSnapshot.setPath(snapshotRelPath + File.separator + snapshotName);\n        return new CopyCmdAnswer(newSnapshot);\n    }\n","realPath":"plugins/hypervisors/simulator/src/main/java/com/cloud/resource/SimulatorStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"N"}],"commitId":"b984184b7acbe4b8295dec8681acc5c81c8b096b","commitMessage":"@@@Merge release branch 4.13 to master\n\n* 4.13:\n  Snapshot deletion issues (#3969)\n  server: Cannot list affinity group if there are hosts dedicated? (#4025)\n  server: Search zone-wide storage pool when allocation algothrim is firstfitleastconsumed (#4002)\n","date":"2020-04-11 22:45:00","modifiedFileCount":"7","status":"M","submitter":"Daan Hoogland"}]
