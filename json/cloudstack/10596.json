[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"        protected void processRequest(final Link link, final Request request) {\n            final AgentAttache attache = (AgentAttache) link.attachment();\n            final Command[] cmds = request.getCommands();\n            Command cmd = cmds[0];\n            boolean logD = true;\n\n            if (attache == null) {\n                if (!(cmd instanceof StartupCommand)) {\n                    s_logger.warn(\"Throwing away a request because it came through as the first command on a connect: \" + request);\n                } else {\n                    \r\n                    request.logD(\"Scheduling the first command \");\n                    connectAgent(link, cmds, request);\n                }\n                return;\n            }\n\n            final long hostId = attache.getId();\n            final String hostName = attache.getName();\n\n            if (s_logger.isDebugEnabled()) {\n                if (cmd instanceof PingRoutingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else if (cmd instanceof PingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else {\n                    s_logger.debug(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                }\n            }\n\n            final Answer[] answers = new Answer[cmds.length];\n            for (int i = 0; i < cmds.length; i++) {\n                cmd = cmds[i];\n                Answer answer = null;\n                try {\n                    if (cmd instanceof StartupRoutingCommand) {\n                        final StartupRoutingCommand startup = (StartupRoutingCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupProxyCommand) {\n                        final StartupProxyCommand startup = (StartupProxyCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupSecondaryStorageCommand) {\n                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupStorageCommand) {\n                        final StartupStorageCommand startup = (StartupStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof ShutdownCommand) {\n                        final ShutdownCommand shutdown = (ShutdownCommand) cmd;\n                        final String reason = shutdown.getReason();\n                        s_logger.info(\"Host \" + attache.getId() + \" has informed us that it is shutting down with reason \" + reason + \" and detail \" +\n                                        shutdown.getDetail());\n                        if (reason.equals(ShutdownCommand.Update)) {\n                            \r\n                            throw new CloudRuntimeException(\"Agent update not implemented\");\n                        } else if (reason.equals(ShutdownCommand.Requested)) {\n                            disconnectWithoutInvestigation(attache, Event.ShutdownRequested);\n                        }\n                        return;\n                    } else if (cmd instanceof AgentControlCommand) {\n                        answer = handleControlCommand(attache, (AgentControlCommand) cmd);\n                    } else {\n                        handleCommands(attache, request.getSequence(), new Command[] { cmd });\n                        if (cmd instanceof PingCommand) {\n                            final long cmdHostId = ((PingCommand) cmd).getHostId();\n\n                            \r\n                            \r\n                            if (cmd instanceof PingRoutingCommand) {\n                                final boolean gatewayAccessible = ((PingRoutingCommand) cmd).isGatewayAccessible();\n                                final HostVO host = _hostDao.findById(Long.valueOf(cmdHostId));\n\n                                if (host != null) {\n                                    if (!gatewayAccessible) {\n                                        \r\n                                        \r\n                                        final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                                        final HostPodVO podVO = _podDao.findById(host.getPodId());\n                                        final String hostDesc =\n                                                        \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \"\n                                                                        + podVO.getName();\n\n                                        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId(),\n                                                        \"Host lost connection to gateway, \" + hostDesc, \"Host [\" + hostDesc +\n                                                                        \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n                                    } else {\n                                        _alertMgr.clearAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId());\n                                    }\n                                } else {\n                                    s_logger.debug(\"Not processing \" + PingRoutingCommand.class.getSimpleName() + \" for agent id=\" + cmdHostId +\n                                                    \"; can't find the host in the DB\");\n                                }\n                            }\n                            answer = new PingAnswer((PingCommand) cmd);\n                        } else if (cmd instanceof ReadyAnswer) {\n                            final HostVO host = _hostDao.findById(attache.getId());\n                            if (host == null) {\n                                if (s_logger.isDebugEnabled()) {\n                                    s_logger.debug(\"Cant not find host \" + attache.getId());\n                                }\n                            }\n                            answer = new Answer(cmd);\n                        } else {\n                            answer = new Answer(cmd);\n                        }\n                    }\n                } catch (final Throwable th) {\n                    s_logger.warn(\"Caught: \", th);\n                    answer = new Answer(cmd, false, th.getMessage());\n                }\n                answers[i] = answer;\n            }\n\n            final Response response = new Response(request, answers, _nodeId, attache.getId());\n            if (s_logger.isDebugEnabled()) {\n                if (logD) {\n                    s_logger.debug(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                } else {\n                    s_logger.trace(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                }\n            }\n            try {\n                link.send(response.toBytes());\n            } catch (final ClosedChannelException e) {\n                s_logger.warn(\"Unable to send response because connection is closed: \" + response);\n            }\n        }\n","date":"2018-01-20 05:49:27","endLine":1337,"groupId":"16497","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(finalLinklink@finalRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/357756c4c6dcd2fab802c6e71025264a42e5a6.src","preCode":"        protected void processRequest(final Link link, final Request request) {\n            final AgentAttache attache = (AgentAttache) link.attachment();\n            final Command[] cmds = request.getCommands();\n            Command cmd = cmds[0];\n            boolean logD = true;\n\n            if (attache == null) {\n                if (!(cmd instanceof StartupCommand)) {\n                    s_logger.warn(\"Throwing away a request because it came through as the first command on a connect: \" + request);\n                } else {\n                    \r\n                    request.logD(\"Scheduling the first command \");\n                    connectAgent(link, cmds, request);\n                }\n                return;\n            }\n\n            final long hostId = attache.getId();\n            final String hostName = attache.getName();\n\n            if (s_logger.isDebugEnabled()) {\n                if (cmd instanceof PingRoutingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else if (cmd instanceof PingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else {\n                    s_logger.debug(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                }\n            }\n\n            final Answer[] answers = new Answer[cmds.length];\n            for (int i = 0; i < cmds.length; i++) {\n                cmd = cmds[i];\n                Answer answer = null;\n                try {\n                    if (cmd instanceof StartupRoutingCommand) {\n                        final StartupRoutingCommand startup = (StartupRoutingCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupProxyCommand) {\n                        final StartupProxyCommand startup = (StartupProxyCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupSecondaryStorageCommand) {\n                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupStorageCommand) {\n                        final StartupStorageCommand startup = (StartupStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof ShutdownCommand) {\n                        final ShutdownCommand shutdown = (ShutdownCommand) cmd;\n                        final String reason = shutdown.getReason();\n                        s_logger.info(\"Host \" + attache.getId() + \" has informed us that it is shutting down with reason \" + reason + \" and detail \" +\n                                        shutdown.getDetail());\n                        if (reason.equals(ShutdownCommand.Update)) {\n                            \r\n                            throw new CloudRuntimeException(\"Agent update not implemented\");\n                        } else if (reason.equals(ShutdownCommand.Requested)) {\n                            disconnectWithoutInvestigation(attache, Event.ShutdownRequested);\n                        }\n                        return;\n                    } else if (cmd instanceof AgentControlCommand) {\n                        answer = handleControlCommand(attache, (AgentControlCommand) cmd);\n                    } else {\n                        handleCommands(attache, request.getSequence(), new Command[] { cmd });\n                        if (cmd instanceof PingCommand) {\n                            final long cmdHostId = ((PingCommand) cmd).getHostId();\n\n                            \r\n                            \r\n                            if (cmd instanceof PingRoutingCommand) {\n                                final boolean gatewayAccessible = ((PingRoutingCommand) cmd).isGatewayAccessible();\n                                final HostVO host = _hostDao.findById(Long.valueOf(cmdHostId));\n\n                                if (host != null) {\n                                    if (!gatewayAccessible) {\n                                        \r\n                                        \r\n                                        final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                                        final HostPodVO podVO = _podDao.findById(host.getPodId());\n                                        final String hostDesc =\n                                                        \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \"\n                                                                        + podVO.getName();\n\n                                        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId(),\n                                                        \"Host lost connection to gateway, \" + hostDesc, \"Host [\" + hostDesc +\n                                                                        \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n                                    } else {\n                                        _alertMgr.clearAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId());\n                                    }\n                                } else {\n                                    s_logger.debug(\"Not processing \" + PingRoutingCommand.class.getSimpleName() + \" for agent id=\" + cmdHostId +\n                                                    \"; can't find the host in the DB\");\n                                }\n                            }\n                            answer = new PingAnswer((PingCommand) cmd);\n                        } else if (cmd instanceof ReadyAnswer) {\n                            final HostVO host = _hostDao.findById(attache.getId());\n                            if (host == null) {\n                                if (s_logger.isDebugEnabled()) {\n                                    s_logger.debug(\"Cant not find host \" + attache.getId());\n                                }\n                            }\n                            answer = new Answer(cmd);\n                        } else {\n                            answer = new Answer(cmd);\n                        }\n                    }\n                } catch (final Throwable th) {\n                    s_logger.warn(\"Caught: \", th);\n                    answer = new Answer(cmd, false, th.getMessage());\n                }\n                answers[i] = answer;\n            }\n\n            final Response response = new Response(request, answers, _nodeId, attache.getId());\n            if (s_logger.isDebugEnabled()) {\n                if (logD) {\n                    s_logger.debug(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                } else {\n                    s_logger.trace(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                }\n            }\n            try {\n                link.send(response.toBytes());\n            } catch (final ClosedChannelException e) {\n                s_logger.warn(\"Unable to send response because connection is closed: \" + response);\n            }\n        }\n","realPath":"engine/orchestration/src/main/java/com/cloud/agent/manager/AgentManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1207,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"        protected void processResponse(final Link link, final Response response) {\n            final AgentAttache attache = (AgentAttache) link.attachment();\n            if (attache == null) {\n                s_logger.warn(\"Unable to process: \" + response);\n            } else if (!attache.processAnswers(response.getSequence(), response)) {\n                s_logger.info(\"Host \" + attache.getId() + \" - Seq \" + response.getSequence() + \": Response is not processed: \" + response);\n            }\n        }\n","date":"2018-01-20 05:49:27","endLine":1346,"groupId":"4508","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"processResponse","params":"(finalLinklink@finalResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/357756c4c6dcd2fab802c6e71025264a42e5a6.src","preCode":"        protected void processResponse(final Link link, final Response response) {\n            final AgentAttache attache = (AgentAttache) link.attachment();\n            if (attache == null) {\n                s_logger.warn(\"Unable to process: \" + response);\n            } else if (!attache.processAnswers(response.getSequence(), response)) {\n                s_logger.info(\"Host \" + attache.getId() + \" - Seq \" + response.getSequence() + \": Response is not processed: \" + response);\n            }\n        }\n","realPath":"engine/orchestration/src/main/java/com/cloud/agent/manager/AgentManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1339,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-07 16:15:00","commitOrder":2,"curCode":"        protected void processRequest(final Link link, final Request request) {\n            final AgentAttache attache = (AgentAttache)link.attachment();\n            final Command[] cmds = request.getCommands();\n            Command cmd = cmds[0];\n            boolean logD = true;\n\n            if (attache == null) {\n                if (!(cmd instanceof StartupCommand)) {\n                    s_logger.warn(\"Throwing away a request because it came through as the first command on a connect: \" + request);\n                } else {\n                    \r\n                    request.logD(\"Scheduling the first command \");\n                    connectAgent(link, cmds, request);\n                }\n                return;\n            }\n\n            final long hostId = attache.getId();\n            final String hostName = attache.getName();\n\n            if (s_logger.isDebugEnabled()) {\n                if (cmd instanceof PingRoutingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from Routing host \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else if (cmd instanceof PingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else {\n                    s_logger.debug(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                }\n            }\n\n            final Answer[] answers = new Answer[cmds.length];\n            for (int i = 0; i < cmds.length; i++) {\n                cmd = cmds[i];\n                Answer answer = null;\n                try {\n                    if (cmd instanceof StartupRoutingCommand) {\n                        final StartupRoutingCommand startup = (StartupRoutingCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupProxyCommand) {\n                        final StartupProxyCommand startup = (StartupProxyCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupSecondaryStorageCommand) {\n                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupStorageCommand) {\n                        final StartupStorageCommand startup = (StartupStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof ShutdownCommand) {\n                        final ShutdownCommand shutdown = (ShutdownCommand)cmd;\n                        final String reason = shutdown.getReason();\n                        s_logger.info(\"Host \" + attache.getId() + \" has informed us that it is shutting down with reason \" + reason + \" and detail \" + shutdown.getDetail());\n                        if (reason.equals(ShutdownCommand.Update)) {\n                            \r\n                            throw new CloudRuntimeException(\"Agent update not implemented\");\n                        } else if (reason.equals(ShutdownCommand.Requested)) {\n                            disconnectWithoutInvestigation(attache, Event.ShutdownRequested);\n                        }\n                        return;\n                    } else if (cmd instanceof AgentControlCommand) {\n                        answer = handleControlCommand(attache, (AgentControlCommand)cmd);\n                    } else {\n                        handleCommands(attache, request.getSequence(), new Command[] {cmd});\n                        if (cmd instanceof PingCommand) {\n                            final long cmdHostId = ((PingCommand)cmd).getHostId();\n\n                            \r\n                            \r\n                            if (cmd instanceof PingRoutingCommand) {\n                                final boolean gatewayAccessible = ((PingRoutingCommand)cmd).isGatewayAccessible();\n                                final HostVO host = _hostDao.findById(Long.valueOf(cmdHostId));\n\n                                if (host != null) {\n                                    if (!gatewayAccessible) {\n                                        \r\n                                        \r\n                                        final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                                        final HostPodVO podVO = _podDao.findById(host.getPodId());\n                                        final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n\n                                        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId(), \"Host lost connection to gateway, \" + hostDesc,\n                                                \"Host [\" + hostDesc + \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n                                    } else {\n                                        _alertMgr.clearAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId());\n                                    }\n                                } else {\n                                    s_logger.debug(\"Not processing \" + PingRoutingCommand.class.getSimpleName() + \" for agent id=\" + cmdHostId + \"; can't find the host in the DB\");\n                                }\n                            }\n                            answer = new PingAnswer((PingCommand)cmd);\n                        } else if (cmd instanceof ReadyAnswer) {\n                            final HostVO host = _hostDao.findById(attache.getId());\n                            if (host == null) {\n                                if (s_logger.isDebugEnabled()) {\n                                    s_logger.debug(\"Cant not find host \" + attache.getId());\n                                }\n                            }\n                            answer = new Answer(cmd);\n                        } else {\n                            answer = new Answer(cmd);\n                        }\n                    }\n                } catch (final Throwable th) {\n                    s_logger.warn(\"Caught: \", th);\n                    answer = new Answer(cmd, false, th.getMessage());\n                }\n                answers[i] = answer;\n            }\n\n            final Response response = new Response(request, answers, _nodeId, attache.getId());\n            if (s_logger.isDebugEnabled()) {\n                if (logD) {\n                    s_logger.debug(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                } else {\n                    s_logger.trace(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                }\n            }\n            try {\n                link.send(response.toBytes());\n            } catch (final ClosedChannelException e) {\n                s_logger.warn(\"Unable to send response because connection is closed: \" + response);\n            }\n        }\n","date":"2020-01-07 16:15:00","endLine":1347,"groupId":"10596","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(finalLinklink@finalRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2b/80ec963c1034c04a8b4bd368b9a500e08b216c.src","preCode":"        protected void processRequest(final Link link, final Request request) {\n            final AgentAttache attache = (AgentAttache)link.attachment();\n            final Command[] cmds = request.getCommands();\n            Command cmd = cmds[0];\n            boolean logD = true;\n\n            if (attache == null) {\n                if (!(cmd instanceof StartupCommand)) {\n                    s_logger.warn(\"Throwing away a request because it came through as the first command on a connect: \" + request);\n                } else {\n                    \r\n                    request.logD(\"Scheduling the first command \");\n                    connectAgent(link, cmds, request);\n                }\n                return;\n            }\n\n            final long hostId = attache.getId();\n            final String hostName = attache.getName();\n\n            if (s_logger.isDebugEnabled()) {\n                if (cmd instanceof PingRoutingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else if (cmd instanceof PingCommand) {\n                    logD = false;\n                    s_logger.debug(\"Ping from \" + hostId + \"(\" + hostName + \")\");\n                    s_logger.trace(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                } else {\n                    s_logger.debug(\"SeqA \" + hostId + \"-\" + request.getSequence() + \": Processing \" + request);\n                }\n            }\n\n            final Answer[] answers = new Answer[cmds.length];\n            for (int i = 0; i < cmds.length; i++) {\n                cmd = cmds[i];\n                Answer answer = null;\n                try {\n                    if (cmd instanceof StartupRoutingCommand) {\n                        final StartupRoutingCommand startup = (StartupRoutingCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupProxyCommand) {\n                        final StartupProxyCommand startup = (StartupProxyCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupSecondaryStorageCommand) {\n                        final StartupSecondaryStorageCommand startup = (StartupSecondaryStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof StartupStorageCommand) {\n                        final StartupStorageCommand startup = (StartupStorageCommand) cmd;\n                        answer = new StartupAnswer(startup, attache.getId(), mgmtServiceConf.getPingInterval());\n                    } else if (cmd instanceof ShutdownCommand) {\n                        final ShutdownCommand shutdown = (ShutdownCommand)cmd;\n                        final String reason = shutdown.getReason();\n                        s_logger.info(\"Host \" + attache.getId() + \" has informed us that it is shutting down with reason \" + reason + \" and detail \" + shutdown.getDetail());\n                        if (reason.equals(ShutdownCommand.Update)) {\n                            \r\n                            throw new CloudRuntimeException(\"Agent update not implemented\");\n                        } else if (reason.equals(ShutdownCommand.Requested)) {\n                            disconnectWithoutInvestigation(attache, Event.ShutdownRequested);\n                        }\n                        return;\n                    } else if (cmd instanceof AgentControlCommand) {\n                        answer = handleControlCommand(attache, (AgentControlCommand)cmd);\n                    } else {\n                        handleCommands(attache, request.getSequence(), new Command[] {cmd});\n                        if (cmd instanceof PingCommand) {\n                            final long cmdHostId = ((PingCommand)cmd).getHostId();\n\n                            \r\n                            \r\n                            if (cmd instanceof PingRoutingCommand) {\n                                final boolean gatewayAccessible = ((PingRoutingCommand)cmd).isGatewayAccessible();\n                                final HostVO host = _hostDao.findById(Long.valueOf(cmdHostId));\n\n                                if (host != null) {\n                                    if (!gatewayAccessible) {\n                                        \r\n                                        \r\n                                        final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n                                        final HostPodVO podVO = _podDao.findById(host.getPodId());\n                                        final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n\n                                        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId(), \"Host lost connection to gateway, \" + hostDesc,\n                                                \"Host [\" + hostDesc + \"] lost connection to gateway (default route) and is possibly having network connection issues.\");\n                                    } else {\n                                        _alertMgr.clearAlert(AlertManager.AlertType.ALERT_TYPE_ROUTING, host.getDataCenterId(), host.getPodId());\n                                    }\n                                } else {\n                                    s_logger.debug(\"Not processing \" + PingRoutingCommand.class.getSimpleName() + \" for agent id=\" + cmdHostId + \"; can't find the host in the DB\");\n                                }\n                            }\n                            answer = new PingAnswer((PingCommand)cmd);\n                        } else if (cmd instanceof ReadyAnswer) {\n                            final HostVO host = _hostDao.findById(attache.getId());\n                            if (host == null) {\n                                if (s_logger.isDebugEnabled()) {\n                                    s_logger.debug(\"Cant not find host \" + attache.getId());\n                                }\n                            }\n                            answer = new Answer(cmd);\n                        } else {\n                            answer = new Answer(cmd);\n                        }\n                    }\n                } catch (final Throwable th) {\n                    s_logger.warn(\"Caught: \", th);\n                    answer = new Answer(cmd, false, th.getMessage());\n                }\n                answers[i] = answer;\n            }\n\n            final Response response = new Response(request, answers, _nodeId, attache.getId());\n            if (s_logger.isDebugEnabled()) {\n                if (logD) {\n                    s_logger.debug(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                } else {\n                    s_logger.trace(\"SeqA \" + attache.getId() + \"-\" + response.getSequence() + \": Sending \" + response);\n                }\n            }\n            try {\n                link.send(response.toBytes());\n            } catch (final ClosedChannelException e) {\n                s_logger.warn(\"Unable to send response because connection is closed: \" + response);\n            }\n        }\n","realPath":"engine/orchestration/src/main/java/com/cloud/agent/manager/AgentManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1222,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"        protected void processResponse(final Link link, final Response response) {\n            final AgentAttache attache = (AgentAttache) link.attachment();\n            if (attache == null) {\n                s_logger.warn(\"Unable to process: \" + response);\n            } else if (!attache.processAnswers(response.getSequence(), response)) {\n                s_logger.info(\"Host \" + attache.getId() + \" - Seq \" + response.getSequence() + \": Response is not processed: \" + response);\n            }\n        }\n","date":"2018-01-20 05:49:27","endLine":1346,"groupId":"10596","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"processResponse","params":"(finalLinklink@finalResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/357756c4c6dcd2fab802c6e71025264a42e5a6.src","preCode":"        protected void processResponse(final Link link, final Response response) {\n            final AgentAttache attache = (AgentAttache) link.attachment();\n            if (attache == null) {\n                s_logger.warn(\"Unable to process: \" + response);\n            } else if (!attache.processAnswers(response.getSequence(), response)) {\n                s_logger.info(\"Host \" + attache.getId() + \" - Seq \" + response.getSequence() + \": Response is not processed: \" + response);\n            }\n        }\n","realPath":"engine/orchestration/src/main/java/com/cloud/agent/manager/AgentManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1339,"status":"N"}],"commitId":"6e19c17652edb272b954d546e5ce3ebdc765a942","commitMessage":"@@@Merge release branch 4.13 to master\n\n* 4.13:\n  only update powerstate if sure it is the latest (#3743)\n  ui: fix migrate host form no host popup (#3682)\n  client: jetty session timeout set after server is started (#3658)\n  Increase DHCP lease time to infinite (#3662)\n","date":"2020-01-07 16:15:00","modifiedFileCount":"6","status":"M","submitter":"Daan Hoogland"}]
