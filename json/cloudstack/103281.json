[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, \"private\", protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","date":"2018-01-20 05:49:27","endLine":284,"groupId":"7830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/b22c494f46f1276bb7fddf6e98ed95a4b36882.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, \"private\", protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","date":"2018-01-20 05:49:27","endLine":140,"groupId":"4217","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8e/73d859039f7866e09fc6a6528c1798db29a119.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/IvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-11-07 20:29:01","codes":[{"authorDate":"2018-11-07 20:29:01","commitOrder":2,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, \"private\", protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":284,"groupId":"7830","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f6/ca0a8a4d521de3b43b19f3d3807d0657b2d93e.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, \"private\", protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2018-11-07 20:29:01","commitOrder":2,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":140,"groupId":"4217","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/a01147df81d461c5c54f3f078a1f0e9446fae0.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/IvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"4de4eabd18386fdb5d4242f371ec780f6d9097a5","commitMessage":"@@@Enable DPDK support on KVM (#2839)\n\n* Enable DPDK support on KVM\n\n* Allow DPDK deployments on user VMs only\n\n* Fix port name ordering\n","date":"2018-11-07 20:29:01","modifiedFileCount":"21","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-11-07 20:29:01","codes":[{"authorDate":"2018-11-29 17:36:06","commitOrder":3,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (isBroadcastTypeVlanOrVxlan(nic)) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if (isBroadcastTypeVlanOrVxlan(nic) && isValidProtocolAndVnetId(vNetId, protocol)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, \"private\", protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if (isBroadcastTypeVlanOrVxlan(nic) && isValidProtocolAndVnetId(vNetId, protocol)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable()) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","date":"2018-11-29 17:36:06","endLine":291,"groupId":"23907","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/39/b92c3a35238ffd26a45a38c5c33d7aa3fa9097.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, \"private\", protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2018-11-07 20:29:01","commitOrder":3,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":140,"groupId":"4217","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/a01147df81d461c5c54f3f078a1f0e9446fae0.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/IvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"ac9562a4a13692aeb5d309bbffb278c836bb55e3","commitMessage":"@@@Merge remote-tracking branch 'origin/4.11'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-11-29 17:36:06","modifiedFileCount":"1","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-11-07 20:29:01","codes":[{"authorDate":"2021-06-17 02:38:18","commitOrder":4,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (isBroadcastTypeVlanOrVxlan(nic)) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if (isBroadcastTypeVlanOrVxlan(nic) && isValidProtocolAndVnetId(vNetId, protocol)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, _bridges.get(\"private\"), protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if (isBroadcastTypeVlanOrVxlan(nic) && isValidProtocolAndVnetId(vNetId, protocol)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable()) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","date":"2021-06-17 02:38:18","endLine":267,"groupId":"103281","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/a8c762e0eb2aa3a00c3a043e30b52ae18ba2a9.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"nic=\" + nic);\n            if (nicAdapter != null && !nicAdapter.isEmpty()) {\n                s_logger.debug(\"custom nic adapter=\" + nicAdapter);\n            }\n        }\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (isBroadcastTypeVlanOrVxlan(nic)) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            throw new InternalErrorException(\"Nicira NVP Logicalswitches are not supported by the BridgeVifDriver\");\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = 0;\n        if (libvirtVersion > ((10 * 1000 + 10))) {\n            networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        }\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if (isBroadcastTypeVlanOrVxlan(nic) && isValidProtocolAndVnetId(vNetId, protocol)) {\n                    if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                        s_logger.debug(\"creating a vNet dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    } else {\n                        String brName = createVnetBr(vNetId, \"private\", protocol);\n                        intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    }\n            } else {\n                String brname = \"\";\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    brname = trafficLabel;\n                } else {\n                    brname = _bridges.get(\"guest\");\n                }\n                intf.defBridgeNet(brname, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if (isBroadcastTypeVlanOrVxlan(nic) && isValidProtocolAndVnetId(vNetId, protocol)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable()) {\n            intf.setPxeDisable(true);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2018-11-07 20:29:01","commitOrder":4,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":140,"groupId":"103281","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/a01147df81d461c5c54f3f078a1f0e9446fae0.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        String vNetId = null;\n        String protocol = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {\n            vNetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n            protocol = Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defEthernet(\"ivsnet-\" + nic.getUuid().substring(0, 5), nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), _ivsIfUpPath, networkRateKBps);\n                } else {\n                    throw new InternalErrorException(\"no traffic label \");\n                }\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork();\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null) && (!vNetId.equalsIgnoreCase(\"untagged\")) ||\n                    (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vNet dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    String brName = createVnetBr(vNetId, trafficLabel, protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                } else {\n                    String brName = createVnetBr(vNetId, \"public\", protocol);\n                    intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        if (nic.getPxeDisable() == true) {\n            intf.setPxeDisable(true);\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/IvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"d2ab350a40cffe4eacf625e1648db7c12341f2cb","commitMessage":"@@@Merge branch '4.15' into main\n","date":"2021-06-17 02:38:18","modifiedFileCount":"9","status":"M","submitter":"nicolas"}]
