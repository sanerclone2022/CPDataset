[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public UploadVO createEntityDownloadURL(VMTemplateVO template, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId) {\n\n        String errorString = \"\";\n        boolean success = false;\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        \r\n        DataStore store = storeMgr.getDataStore(vmTemplateHost.getDataStoreId(), DataStoreRole.Image);\n        EndPoint ep = _epSelector.select(store);\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            return null;\n        }\n\n        \r\n        List<UploadVO> extractURLList = _uploadDao.listByTypeUploadStatus(template.getId(), type, UploadVO.Status.DOWNLOAD_URL_CREATED);\n        if (extractURLList.size() > 0) {\n            \r\n            UploadVO upload = extractURLList.get(0);\n            String uploadUrl = extractURLList.get(0).getUploadUrl();\n            String[] token = uploadUrl.split(\"/\");\n            \r\n            \r\n            String hostname = ep.getPublicAddr().replace(\".\", \"-\") + \".\";\n            if ((token != null) && (token.length == 5) && (token[2].equals(hostname + _ssvmUrlDomain))) \r\n                return extractURLList.get(0);\n            else if ((token != null) && (token.length == 5) && (token[2].startsWith(hostname))) { \r\n                String uuid = token[4];\n                uploadUrl = generateCopyUrl(ep.getPublicAddr(), uuid);\n                UploadVO vo = _uploadDao.createForUpdate();\n                vo.setLastUpdated(new Date());\n                vo.setUploadUrl(uploadUrl);\n                _uploadDao.update(upload.getId(), vo);\n                return _uploadDao.findById(upload.getId(), true);\n            } else { \r\n                return null;\n            }\n        }\n\n        \r\n        UploadVO uploadTemplateObj =\n            new UploadVO(vmTemplateHost.getDataStoreId(), template.getId(), new Date(), Status.DOWNLOAD_URL_NOT_CREATED, 0, type, Mode.HTTP_DOWNLOAD);\n        uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());\n        _uploadDao.persist(uploadTemplateObj);\n\n        try {\n            \r\n            String path = vmTemplateHost.getInstallPath();\n            String uuid = UUID.randomUUID().toString() + \".\" + template.getFormat().getFileExtension(); \r\n            CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(), path, uuid, null);\n            Answer ans = ep.sendMessage(cmd);\n            if (ans == null || !ans.getResult()) {\n                errorString = \"Unable to create a link for \" + type + \" id:\" + template.getId() + \",\" + (ans == null ? \"\" : ans.getDetails());\n                s_logger.error(errorString);\n                throw new CloudRuntimeException(errorString);\n            }\n\n            \r\n            String extractURL = generateCopyUrl(ep.getPublicAddr(), uuid);\n            UploadVO vo = _uploadDao.createForUpdate();\n            vo.setLastUpdated(new Date());\n            vo.setUploadUrl(extractURL);\n            vo.setUploadState(Status.DOWNLOAD_URL_CREATED);\n            _uploadDao.update(uploadTemplateObj.getId(), vo);\n            success = true;\n            return _uploadDao.findById(uploadTemplateObj.getId(), true);\n        } finally {\n            if (!success) {\n                UploadVO uploadJob = _uploadDao.createForUpdate(uploadTemplateObj.getId());\n                uploadJob.setLastUpdated(new Date());\n                uploadJob.setErrorString(errorString);\n                uploadJob.setUploadState(Status.ERROR);\n                _uploadDao.update(uploadTemplateObj.getId(), uploadJob);\n            }\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":287,"groupId":"11730","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createEntityDownloadURL","params":"(VMTemplateVOtemplate@TemplateDataStoreVOvmTemplateHost@LongdataCenterId@longeventId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e8/f2980a082c5eaa9f4a4c2e214fc7686e5de87f.src","preCode":"    public UploadVO createEntityDownloadURL(VMTemplateVO template, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId) {\n\n        String errorString = \"\";\n        boolean success = false;\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        \r\n        DataStore store = storeMgr.getDataStore(vmTemplateHost.getDataStoreId(), DataStoreRole.Image);\n        EndPoint ep = _epSelector.select(store);\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            return null;\n        }\n\n        \r\n        List<UploadVO> extractURLList = _uploadDao.listByTypeUploadStatus(template.getId(), type, UploadVO.Status.DOWNLOAD_URL_CREATED);\n        if (extractURLList.size() > 0) {\n            \r\n            UploadVO upload = extractURLList.get(0);\n            String uploadUrl = extractURLList.get(0).getUploadUrl();\n            String[] token = uploadUrl.split(\"/\");\n            \r\n            \r\n            String hostname = ep.getPublicAddr().replace(\".\", \"-\") + \".\";\n            if ((token != null) && (token.length == 5) && (token[2].equals(hostname + _ssvmUrlDomain))) \r\n                return extractURLList.get(0);\n            else if ((token != null) && (token.length == 5) && (token[2].startsWith(hostname))) { \r\n                String uuid = token[4];\n                uploadUrl = generateCopyUrl(ep.getPublicAddr(), uuid);\n                UploadVO vo = _uploadDao.createForUpdate();\n                vo.setLastUpdated(new Date());\n                vo.setUploadUrl(uploadUrl);\n                _uploadDao.update(upload.getId(), vo);\n                return _uploadDao.findById(upload.getId(), true);\n            } else { \r\n                return null;\n            }\n        }\n\n        \r\n        UploadVO uploadTemplateObj =\n            new UploadVO(vmTemplateHost.getDataStoreId(), template.getId(), new Date(), Status.DOWNLOAD_URL_NOT_CREATED, 0, type, Mode.HTTP_DOWNLOAD);\n        uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());\n        _uploadDao.persist(uploadTemplateObj);\n\n        try {\n            \r\n            String path = vmTemplateHost.getInstallPath();\n            String uuid = UUID.randomUUID().toString() + \".\" + template.getFormat().getFileExtension(); \r\n            CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(), path, uuid, null);\n            Answer ans = ep.sendMessage(cmd);\n            if (ans == null || !ans.getResult()) {\n                errorString = \"Unable to create a link for \" + type + \" id:\" + template.getId() + \",\" + (ans == null ? \"\" : ans.getDetails());\n                s_logger.error(errorString);\n                throw new CloudRuntimeException(errorString);\n            }\n\n            \r\n            String extractURL = generateCopyUrl(ep.getPublicAddr(), uuid);\n            UploadVO vo = _uploadDao.createForUpdate();\n            vo.setLastUpdated(new Date());\n            vo.setUploadUrl(extractURL);\n            vo.setUploadState(Status.DOWNLOAD_URL_CREATED);\n            _uploadDao.update(uploadTemplateObj.getId(), vo);\n            success = true;\n            return _uploadDao.findById(uploadTemplateObj.getId(), true);\n        } finally {\n            if (!success) {\n                UploadVO uploadJob = _uploadDao.createForUpdate(uploadTemplateObj.getId());\n                uploadJob.setLastUpdated(new Date());\n                uploadJob.setErrorString(errorString);\n                uploadJob.setUploadState(Status.ERROR);\n                _uploadDao.update(uploadTemplateObj.getId(), uploadJob);\n            }\n        }\n\n    }\n","realPath":"server/src/main/java/com/cloud/storage/upload/UploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public String createEntityExtractUrl(DataStore store, String installPath, ImageFormat format, DataObject dataObject) {\n        \r\n        EndPoint ep = _epSelector.select(store);\n        \r\n        String path = installPath;\n        String uuid = UUID.randomUUID().toString() + \".\" + format.getFileExtension();\n        CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(), path, uuid, dataObject.getTO());\n        Answer ans = null;\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            ans = new Answer(cmd, false, errMsg);\n        } else {\n            ans = ep.sendMessage(cmd);\n        }\n        if (ans == null || !ans.getResult()) {\n            String errorString = \"Unable to create a link for entity at \" + installPath + \" on ssvm,\" + ans.getDetails();\n            s_logger.error(errorString);\n            throw new CloudRuntimeException(errorString);\n        }\n        \r\n        return generateCopyUrl(ep.getPublicAddr(), uuid);\n    }\n","date":"2018-01-20 05:49:27","endLine":90,"groupId":"14498","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createEntityExtractUrl","params":"(DataStorestore@StringinstallPath@ImageFormatformat@DataObjectdataObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b8/b522626175839dd9d0d5db6e396237f1dcc760.src","preCode":"    public String createEntityExtractUrl(DataStore store, String installPath, ImageFormat format, DataObject dataObject) {\n        \r\n        EndPoint ep = _epSelector.select(store);\n        \r\n        String path = installPath;\n        String uuid = UUID.randomUUID().toString() + \".\" + format.getFileExtension();\n        CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(), path, uuid, dataObject.getTO());\n        Answer ans = null;\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            ans = new Answer(cmd, false, errMsg);\n        } else {\n            ans = ep.sendMessage(cmd);\n        }\n        if (ans == null || !ans.getResult()) {\n            String errorString = \"Unable to create a link for entity at \" + installPath + \" on ssvm,\" + ans.getDetails();\n            s_logger.error(errorString);\n            throw new CloudRuntimeException(errorString);\n        }\n        \r\n        return generateCopyUrl(ep.getPublicAddr(), uuid);\n    }\n","realPath":"plugins/storage/image/default/src/main/java/org/apache/cloudstack/storage/datastore/driver/CloudStackImageStoreDriverImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-11-18 21:01:31","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public UploadVO createEntityDownloadURL(VMTemplateVO template, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId) {\n\n        String errorString = \"\";\n        boolean success = false;\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        \r\n        DataStore store = storeMgr.getDataStore(vmTemplateHost.getDataStoreId(), DataStoreRole.Image);\n        EndPoint ep = _epSelector.select(store);\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            return null;\n        }\n\n        \r\n        List<UploadVO> extractURLList = _uploadDao.listByTypeUploadStatus(template.getId(), type, UploadVO.Status.DOWNLOAD_URL_CREATED);\n        if (extractURLList.size() > 0) {\n            \r\n            UploadVO upload = extractURLList.get(0);\n            String uploadUrl = extractURLList.get(0).getUploadUrl();\n            String[] token = uploadUrl.split(\"/\");\n            \r\n            \r\n            String hostname = ep.getPublicAddr().replace(\".\", \"-\") + \".\";\n            if ((token != null) && (token.length == 5) && (token[2].equals(hostname + _ssvmUrlDomain))) \r\n                return extractURLList.get(0);\n            else if ((token != null) && (token.length == 5) && (token[2].startsWith(hostname))) { \r\n                String uuid = token[4];\n                uploadUrl = generateCopyUrl(ep.getPublicAddr(), uuid);\n                UploadVO vo = _uploadDao.createForUpdate();\n                vo.setLastUpdated(new Date());\n                vo.setUploadUrl(uploadUrl);\n                _uploadDao.update(upload.getId(), vo);\n                return _uploadDao.findById(upload.getId(), true);\n            } else { \r\n                return null;\n            }\n        }\n\n        \r\n        UploadVO uploadTemplateObj =\n            new UploadVO(vmTemplateHost.getDataStoreId(), template.getId(), new Date(), Status.DOWNLOAD_URL_NOT_CREATED, 0, type, Mode.HTTP_DOWNLOAD);\n        uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());\n        _uploadDao.persist(uploadTemplateObj);\n\n        try {\n            \r\n            String path = vmTemplateHost.getInstallPath();\n            String uuid = UUID.randomUUID().toString() + \".\" + template.getFormat().getFileExtension(); \r\n            CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(), path, uuid, null);\n            Answer ans = ep.sendMessage(cmd);\n            if (ans == null || !ans.getResult()) {\n                errorString = \"Unable to create a link for \" + type + \" id:\" + template.getId() + \",\" + (ans == null ? \"\" : ans.getDetails());\n                s_logger.error(errorString);\n                throw new CloudRuntimeException(errorString);\n            }\n\n            \r\n            String extractURL = generateCopyUrl(ep.getPublicAddr(), uuid);\n            UploadVO vo = _uploadDao.createForUpdate();\n            vo.setLastUpdated(new Date());\n            vo.setUploadUrl(extractURL);\n            vo.setUploadState(Status.DOWNLOAD_URL_CREATED);\n            _uploadDao.update(uploadTemplateObj.getId(), vo);\n            success = true;\n            return _uploadDao.findById(uploadTemplateObj.getId(), true);\n        } finally {\n            if (!success) {\n                UploadVO uploadJob = _uploadDao.createForUpdate(uploadTemplateObj.getId());\n                uploadJob.setLastUpdated(new Date());\n                uploadJob.setErrorString(errorString);\n                uploadJob.setUploadState(Status.ERROR);\n                _uploadDao.update(uploadTemplateObj.getId(), uploadJob);\n            }\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":287,"groupId":"101975","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createEntityDownloadURL","params":"(VMTemplateVOtemplate@TemplateDataStoreVOvmTemplateHost@LongdataCenterId@longeventId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e8/f2980a082c5eaa9f4a4c2e214fc7686e5de87f.src","preCode":"    public UploadVO createEntityDownloadURL(VMTemplateVO template, TemplateDataStoreVO vmTemplateHost, Long dataCenterId, long eventId) {\n\n        String errorString = \"\";\n        boolean success = false;\n        Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;\n\n        \r\n        DataStore store = storeMgr.getDataStore(vmTemplateHost.getDataStoreId(), DataStoreRole.Image);\n        EndPoint ep = _epSelector.select(store);\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            return null;\n        }\n\n        \r\n        List<UploadVO> extractURLList = _uploadDao.listByTypeUploadStatus(template.getId(), type, UploadVO.Status.DOWNLOAD_URL_CREATED);\n        if (extractURLList.size() > 0) {\n            \r\n            UploadVO upload = extractURLList.get(0);\n            String uploadUrl = extractURLList.get(0).getUploadUrl();\n            String[] token = uploadUrl.split(\"/\");\n            \r\n            \r\n            String hostname = ep.getPublicAddr().replace(\".\", \"-\") + \".\";\n            if ((token != null) && (token.length == 5) && (token[2].equals(hostname + _ssvmUrlDomain))) \r\n                return extractURLList.get(0);\n            else if ((token != null) && (token.length == 5) && (token[2].startsWith(hostname))) { \r\n                String uuid = token[4];\n                uploadUrl = generateCopyUrl(ep.getPublicAddr(), uuid);\n                UploadVO vo = _uploadDao.createForUpdate();\n                vo.setLastUpdated(new Date());\n                vo.setUploadUrl(uploadUrl);\n                _uploadDao.update(upload.getId(), vo);\n                return _uploadDao.findById(upload.getId(), true);\n            } else { \r\n                return null;\n            }\n        }\n\n        \r\n        UploadVO uploadTemplateObj =\n            new UploadVO(vmTemplateHost.getDataStoreId(), template.getId(), new Date(), Status.DOWNLOAD_URL_NOT_CREATED, 0, type, Mode.HTTP_DOWNLOAD);\n        uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());\n        _uploadDao.persist(uploadTemplateObj);\n\n        try {\n            \r\n            String path = vmTemplateHost.getInstallPath();\n            String uuid = UUID.randomUUID().toString() + \".\" + template.getFormat().getFileExtension(); \r\n            CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(), path, uuid, null);\n            Answer ans = ep.sendMessage(cmd);\n            if (ans == null || !ans.getResult()) {\n                errorString = \"Unable to create a link for \" + type + \" id:\" + template.getId() + \",\" + (ans == null ? \"\" : ans.getDetails());\n                s_logger.error(errorString);\n                throw new CloudRuntimeException(errorString);\n            }\n\n            \r\n            String extractURL = generateCopyUrl(ep.getPublicAddr(), uuid);\n            UploadVO vo = _uploadDao.createForUpdate();\n            vo.setLastUpdated(new Date());\n            vo.setUploadUrl(extractURL);\n            vo.setUploadState(Status.DOWNLOAD_URL_CREATED);\n            _uploadDao.update(uploadTemplateObj.getId(), vo);\n            success = true;\n            return _uploadDao.findById(uploadTemplateObj.getId(), true);\n        } finally {\n            if (!success) {\n                UploadVO uploadJob = _uploadDao.createForUpdate(uploadTemplateObj.getId());\n                uploadJob.setLastUpdated(new Date());\n                uploadJob.setErrorString(errorString);\n                uploadJob.setUploadState(Status.ERROR);\n                _uploadDao.update(uploadTemplateObj.getId(), uploadJob);\n            }\n        }\n\n    }\n","realPath":"server/src/main/java/com/cloud/storage/upload/UploadMonitorImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"},{"authorDate":"2020-11-18 21:01:31","commitOrder":2,"curCode":"    public String createEntityExtractUrl(DataStore store, String installPath, ImageFormat format, DataObject dataObject) {\n        \r\n        EndPoint ep = _epSelector.select(store);\n        \r\n        String path = installPath;\n        String uuid = UUID.randomUUID().toString() + \".\" + format.getFileExtension();\n        CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(),\n                                                                path, uuid, dataObject == null ? null: dataObject.getTO());\n        Answer ans = null;\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            ans = new Answer(cmd, false, errMsg);\n        } else {\n            ans = ep.sendMessage(cmd);\n        }\n        if (ans == null || !ans.getResult()) {\n            String errorString = \"Unable to create a link for entity at \" + installPath + \" on ssvm,\" + ans.getDetails();\n            s_logger.error(errorString);\n            throw new CloudRuntimeException(errorString);\n        }\n        \r\n        return generateCopyUrl(ep.getPublicAddr(), uuid);\n    }\n","date":"2020-11-18 21:01:31","endLine":91,"groupId":"101975","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createEntityExtractUrl","params":"(DataStorestore@StringinstallPath@ImageFormatformat@DataObjectdataObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8a/bf802d9de6d2207c4efcb62fd7389acec880a3.src","preCode":"    public String createEntityExtractUrl(DataStore store, String installPath, ImageFormat format, DataObject dataObject) {\n        \r\n        EndPoint ep = _epSelector.select(store);\n        \r\n        String path = installPath;\n        String uuid = UUID.randomUUID().toString() + \".\" + format.getFileExtension();\n        CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(((ImageStoreEntity)store).getMountPoint(), path, uuid, dataObject.getTO());\n        Answer ans = null;\n        if (ep == null) {\n            String errMsg = \"No remote endpoint to send command, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            ans = new Answer(cmd, false, errMsg);\n        } else {\n            ans = ep.sendMessage(cmd);\n        }\n        if (ans == null || !ans.getResult()) {\n            String errorString = \"Unable to create a link for entity at \" + installPath + \" on ssvm,\" + ans.getDetails();\n            s_logger.error(errorString);\n            throw new CloudRuntimeException(errorString);\n        }\n        \r\n        return generateCopyUrl(ep.getPublicAddr(), uuid);\n    }\n","realPath":"plugins/storage/image/default/src/main/java/org/apache/cloudstack/storage/datastore/driver/CloudStackImageStoreDriverImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"735b6de296e07eb5def98f8e1c3a9b73960c506f","commitMessage":"@@@Cleanup download urls when SSVM destroyed (#4078)\n\nCo-authored-by: Rakesh Venkatesh <r.venkatesh@global.leaseweb.com>","date":"2020-11-18 21:01:31","modifiedFileCount":"12","status":"M","submitter":"Rakesh"}]
