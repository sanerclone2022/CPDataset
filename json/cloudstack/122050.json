[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public AccountVO enableAccount(String accountName, Long domainId, Long accountId) {\n\n        \r\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findActiveAccount(accountName, domainId);\n        }\n\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new PermissionDeniedException(\"Account id : \" + accountId + \" is a system account, enable is not allowed\");\n        }\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        checkAccess(caller, AccessType.OperateEntry, true, account);\n\n        boolean success = enableAccount(account.getId());\n        if (success) {\n\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to enable account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1543,"groupId":"15858","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"enableAccount","params":"(StringaccountName@LongdomainId@LongaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dc/9fdc0a9e5ceb84c525bebd7b3cf2e1c8004aaa.src","preCode":"    public AccountVO enableAccount(String accountName, Long domainId, Long accountId) {\n\n        \r\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findActiveAccount(accountName, domainId);\n        }\n\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new PermissionDeniedException(\"Account id : \" + accountId + \" is a system account, enable is not allowed\");\n        }\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        checkAccess(caller, AccessType.OperateEntry, true, account);\n\n        boolean success = enableAccount(account.getId());\n        if (success) {\n\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to enable account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/user/AccountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1512,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public AccountVO updateAccount(UpdateAccountCmd cmd) {\n        Long accountId = cmd.getId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        String newAccountName = cmd.getNewName();\n        String networkDomain = cmd.getNetworkDomain();\n        final Map<String, String> details = cmd.getDetails();\n\n        boolean success = false;\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findEnabledAccount(accountName, domainId);\n        }\n\n        \r\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            s_logger.error(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        \r\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new InvalidParameterValueException(\"Can not modify system account\");\n        }\n\n        \r\n        checkAccess(CallContext.current().getCallingAccount(), _domainMgr.getDomain(account.getDomainId()));\n\n        \r\n        Account duplicateAcccount = _accountDao.findActiveAccount(newAccountName, domainId);\n        if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {\r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n            throw new InvalidParameterValueException(\n                    \"There already exists an account with the name:\" + newAccountName + \" in the domain:\" + domainId + \" with existing account id:\" + duplicateAcccount.getId());\n        }\n\n        if (networkDomain != null && !networkDomain.isEmpty()) {\n            if (!NetUtils.verifyDomainName(networkDomain)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n        }\n\n        final AccountVO acctForUpdate = _accountDao.findById(account.getId());\n        acctForUpdate.setAccountName(newAccountName);\n\n        if (networkDomain != null) {\n            if (networkDomain.isEmpty()) {\n                acctForUpdate.setNetworkDomain(null);\n            } else {\n                acctForUpdate.setNetworkDomain(networkDomain);\n            }\n        }\n\n        final Account accountFinal = account;\n        success = Transaction.execute(new TransactionCallback<Boolean>() {\n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                boolean success = _accountDao.update(accountFinal.getId(), acctForUpdate);\n\n                if (details != null && success) {\n                    _accountDetailsDao.update(accountFinal.getId(), details);\n                }\n\n                return success;\n            }\n        });\n\n        if (success) {\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to update account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1689,"groupId":"8182","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAccount","params":"(UpdateAccountCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dc/9fdc0a9e5ceb84c525bebd7b3cf2e1c8004aaa.src","preCode":"    public AccountVO updateAccount(UpdateAccountCmd cmd) {\n        Long accountId = cmd.getId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        String newAccountName = cmd.getNewName();\n        String networkDomain = cmd.getNetworkDomain();\n        final Map<String, String> details = cmd.getDetails();\n\n        boolean success = false;\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findEnabledAccount(accountName, domainId);\n        }\n\n        \r\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            s_logger.error(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        \r\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new InvalidParameterValueException(\"Can not modify system account\");\n        }\n\n        \r\n        checkAccess(CallContext.current().getCallingAccount(), _domainMgr.getDomain(account.getDomainId()));\n\n        \r\n        Account duplicateAcccount = _accountDao.findActiveAccount(newAccountName, domainId);\n        if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {\r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n            throw new InvalidParameterValueException(\n                    \"There already exists an account with the name:\" + newAccountName + \" in the domain:\" + domainId + \" with existing account id:\" + duplicateAcccount.getId());\n        }\n\n        if (networkDomain != null && !networkDomain.isEmpty()) {\n            if (!NetUtils.verifyDomainName(networkDomain)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n        }\n\n        final AccountVO acctForUpdate = _accountDao.findById(account.getId());\n        acctForUpdate.setAccountName(newAccountName);\n\n        if (networkDomain != null) {\n            if (networkDomain.isEmpty()) {\n                acctForUpdate.setNetworkDomain(null);\n            } else {\n                acctForUpdate.setNetworkDomain(networkDomain);\n            }\n        }\n\n        final Account accountFinal = account;\n        success = Transaction.execute(new TransactionCallback<Boolean>() {\n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                boolean success = _accountDao.update(accountFinal.getId(), acctForUpdate);\n\n                if (details != null && success) {\n                    _accountDetailsDao.update(accountFinal.getId(), details);\n                }\n\n                return success;\n            }\n        });\n\n        if (success) {\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to update account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/user/AccountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1608,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-05-02 20:19:06","codes":[{"authorDate":"2018-05-02 20:19:06","commitOrder":2,"curCode":"    public AccountVO enableAccount(String accountName, Long domainId, Long accountId) {\n\n        \r\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findActiveAccount(accountName, domainId);\n        }\n\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new PermissionDeniedException(\"Account id : \" + accountId + \" is a system account, enable is not allowed\");\n        }\n\n        \r\n        Account caller = getCurrentCallingAccount();\n        checkAccess(caller, AccessType.OperateEntry, true, account);\n\n        boolean success = enableAccount(account.getId());\n        if (success) {\n\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to enable account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","date":"2018-05-02 20:19:06","endLine":1630,"groupId":"7969","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"enableAccount","params":"(StringaccountName@LongdomainId@LongaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b4/4e2803df637044ec277825515b969210de4054.src","preCode":"    public AccountVO enableAccount(String accountName, Long domainId, Long accountId) {\n\n        \r\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findActiveAccount(accountName, domainId);\n        }\n\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new PermissionDeniedException(\"Account id : \" + accountId + \" is a system account, enable is not allowed\");\n        }\n\n        \r\n        Account caller = CallContext.current().getCallingAccount();\n        checkAccess(caller, AccessType.OperateEntry, true, account);\n\n        boolean success = enableAccount(account.getId());\n        if (success) {\n\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to enable account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/user/AccountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1599,"status":"M"},{"authorDate":"2018-05-02 20:19:06","commitOrder":2,"curCode":"    public AccountVO updateAccount(UpdateAccountCmd cmd) {\n        Long accountId = cmd.getId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        String newAccountName = cmd.getNewName();\n        String networkDomain = cmd.getNetworkDomain();\n        final Map<String, String> details = cmd.getDetails();\n\n        boolean success = false;\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findEnabledAccount(accountName, domainId);\n        }\n\n        \r\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            s_logger.error(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        \r\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new InvalidParameterValueException(\"Can not modify system account\");\n        }\n\n        \r\n        checkAccess(getCurrentCallingAccount(), _domainMgr.getDomain(account.getDomainId()));\n\n        \r\n        Account duplicateAcccount = _accountDao.findActiveAccount(newAccountName, domainId);\n        if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {\n            throw new InvalidParameterValueException(\n                    \"There already exists an account with the name:\" + newAccountName + \" in the domain:\" + domainId + \" with existing account id:\" + duplicateAcccount.getId());\n        }\n\n        if (networkDomain != null && !networkDomain.isEmpty()) {\n            if (!NetUtils.verifyDomainName(networkDomain)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n        }\n\n        final AccountVO acctForUpdate = _accountDao.findById(account.getId());\n        acctForUpdate.setAccountName(newAccountName);\n\n        if (networkDomain != null) {\n            if (networkDomain.isEmpty()) {\n                acctForUpdate.setNetworkDomain(null);\n            } else {\n                acctForUpdate.setNetworkDomain(networkDomain);\n            }\n        }\n\n        final Account accountFinal = account;\n        success = Transaction.execute(new TransactionCallback<Boolean>() {\n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                boolean success = _accountDao.update(accountFinal.getId(), acctForUpdate);\n\n                if (details != null && success) {\n                    _accountDetailsDao.update(accountFinal.getId(), details);\n                }\n\n                return success;\n            }\n        });\n\n        if (success) {\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to update account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","date":"2018-05-02 20:19:06","endLine":1771,"groupId":"7974","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAccount","params":"(UpdateAccountCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b4/4e2803df637044ec277825515b969210de4054.src","preCode":"    public AccountVO updateAccount(UpdateAccountCmd cmd) {\n        Long accountId = cmd.getId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        String newAccountName = cmd.getNewName();\n        String networkDomain = cmd.getNetworkDomain();\n        final Map<String, String> details = cmd.getDetails();\n\n        boolean success = false;\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findEnabledAccount(accountName, domainId);\n        }\n\n        \r\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            s_logger.error(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        \r\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new InvalidParameterValueException(\"Can not modify system account\");\n        }\n\n        \r\n        checkAccess(CallContext.current().getCallingAccount(), _domainMgr.getDomain(account.getDomainId()));\n\n        \r\n        Account duplicateAcccount = _accountDao.findActiveAccount(newAccountName, domainId);\n        if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {\r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n                                                                                        \r\n            throw new InvalidParameterValueException(\n                    \"There already exists an account with the name:\" + newAccountName + \" in the domain:\" + domainId + \" with existing account id:\" + duplicateAcccount.getId());\n        }\n\n        if (networkDomain != null && !networkDomain.isEmpty()) {\n            if (!NetUtils.verifyDomainName(networkDomain)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n        }\n\n        final AccountVO acctForUpdate = _accountDao.findById(account.getId());\n        acctForUpdate.setAccountName(newAccountName);\n\n        if (networkDomain != null) {\n            if (networkDomain.isEmpty()) {\n                acctForUpdate.setNetworkDomain(null);\n            } else {\n                acctForUpdate.setNetworkDomain(networkDomain);\n            }\n        }\n\n        final Account accountFinal = account;\n        success = Transaction.execute(new TransactionCallback<Boolean>() {\n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                boolean success = _accountDao.update(accountFinal.getId(), acctForUpdate);\n\n                if (details != null && success) {\n                    _accountDetailsDao.update(accountFinal.getId(), details);\n                }\n\n                return success;\n            }\n        });\n\n        if (success) {\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to update account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/user/AccountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1695,"status":"M"}],"commitId":"3adc2b8485d8a56634a3d4c54074321431bf2fda","commitMessage":"@@@[CLOUDSTACK-5235] ask users current password when they are executing a password update (#2574)\n\n* [CLOUDSTACK-5235] Force users to enter old password when updating password\n\n* Formatting for checkstyle\n\n* Remove an unused import in AccountManagerImpl\n\n* Apply Nitin's suggestions\n\n* Change 'oldPassword' to 'currentPassword'\n\n* Second review of Resmo\n\n* Fix typos found by Nitin\n","date":"2018-05-02 20:19:06","modifiedFileCount":"11","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2019-01-25 20:02:56","codes":[{"authorDate":"2018-05-02 20:19:06","commitOrder":3,"curCode":"    public AccountVO enableAccount(String accountName, Long domainId, Long accountId) {\n\n        \r\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findActiveAccount(accountName, domainId);\n        }\n\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new PermissionDeniedException(\"Account id : \" + accountId + \" is a system account, enable is not allowed\");\n        }\n\n        \r\n        Account caller = getCurrentCallingAccount();\n        checkAccess(caller, AccessType.OperateEntry, true, account);\n\n        boolean success = enableAccount(account.getId());\n        if (success) {\n\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to enable account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","date":"2018-05-02 20:19:06","endLine":1630,"groupId":"122050","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"enableAccount","params":"(StringaccountName@LongdomainId@LongaccountId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b4/4e2803df637044ec277825515b969210de4054.src","preCode":"    public AccountVO enableAccount(String accountName, Long domainId, Long accountId) {\n\n        \r\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findActiveAccount(accountName, domainId);\n        }\n\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new PermissionDeniedException(\"Account id : \" + accountId + \" is a system account, enable is not allowed\");\n        }\n\n        \r\n        Account caller = getCurrentCallingAccount();\n        checkAccess(caller, AccessType.OperateEntry, true, account);\n\n        boolean success = enableAccount(account.getId());\n        if (success) {\n\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to enable account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/user/AccountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1599,"status":"N"},{"authorDate":"2019-01-25 20:02:56","commitOrder":3,"curCode":"    public AccountVO updateAccount(UpdateAccountCmd cmd) {\n        Long accountId = cmd.getId();\n        Long domainId = cmd.getDomainId();\n        Long roleId = cmd.getRoleId();\n        String accountName = cmd.getAccountName();\n        String newAccountName = cmd.getNewName();\n        String networkDomain = cmd.getNetworkDomain();\n        final Map<String, String> details = cmd.getDetails();\n\n        boolean success = false;\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findEnabledAccount(accountName, domainId);\n        }\n\n        final AccountVO acctForUpdate = _accountDao.findById(account.getId());\n\n        \r\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            s_logger.error(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        \r\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new InvalidParameterValueException(\"Can not modify system account\");\n        }\n\n        \r\n        Account caller = getCurrentCallingAccount();\n        checkAccess(caller, _domainMgr.getDomain(account.getDomainId()));\n\n        if(newAccountName != null) {\n\n            if (newAccountName.isEmpty()) {\n                throw new InvalidParameterValueException(\"The new account name for account '\" + account.getUuid() + \"' \" +\n                        \"within domain '\" + domainId + \"'  is empty string. Account will be not renamed.\");\n            }\n\n            \r\n            Account existingAccount = _accountDao.findActiveAccount(newAccountName, domainId);\n            if (existingAccount != null && existingAccount.getId() != account.getId()) {\n                throw new InvalidParameterValueException(\"The account with the proposed name '\" +\n                        newAccountName + \"' exists in the domain '\" +\n                        domainId + \"' with existing account id '\" + existingAccount.getId() + \"'\");\n            }\n\n            acctForUpdate.setAccountName(newAccountName);\n        }\n\n        if (networkDomain != null && !networkDomain.isEmpty()) {\n            if (!NetUtils.verifyDomainName(networkDomain)) {\n                throw new InvalidParameterValueException(\"Invalid network domain or format. \" +\n                        \"Total length shouldn't exceed 190 chars. Every domain part must be between 1 and 63 \" +\n                        \"characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n        }\n\n\n        if (roleId != null) {\n            final List<Role> roles = cmd.roleService.listRoles();\n            final boolean roleNotFound = roles.stream().filter(r -> r.getId() == roleId).count() == 0;\n            if (roleNotFound) {\n                throw new InvalidParameterValueException(\"Role with ID '\" + roleId.toString() + \"' \" +\n                        \"is not found or not available for the account '\" + account.getUuid() + \"' \" +\n                        \"in the domain '\" + domainId + \"'.\");\n            }\n\n            acctForUpdate.setRoleId(roleId);\n        }\n\n        if (networkDomain != null) {\n            if (networkDomain.isEmpty()) {\n                acctForUpdate.setNetworkDomain(null);\n            } else {\n                acctForUpdate.setNetworkDomain(networkDomain);\n            }\n        }\n\n        final Account accountFinal = account;\n        success = Transaction.execute((TransactionCallback<Boolean>) status -> {\n            boolean success1 = _accountDao.update(accountFinal.getId(), acctForUpdate);\n\n            if (details != null && success1) {\n                _accountDetailsDao.update(accountFinal.getId(), details);\n            }\n\n            return success1;\n        });\n\n        if (success) {\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to update account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","date":"2019-01-25 20:02:56","endLine":1791,"groupId":"122050","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAccount","params":"(UpdateAccountCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/a4ccab4680d5c207452b567fdebc8582c010a2.src","preCode":"    public AccountVO updateAccount(UpdateAccountCmd cmd) {\n        Long accountId = cmd.getId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        String newAccountName = cmd.getNewName();\n        String networkDomain = cmd.getNetworkDomain();\n        final Map<String, String> details = cmd.getDetails();\n\n        boolean success = false;\n        Account account = null;\n        if (accountId != null) {\n            account = _accountDao.findById(accountId);\n        } else {\n            account = _accountDao.findEnabledAccount(accountName, domainId);\n        }\n\n        \r\n        if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n            s_logger.error(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n            throw new InvalidParameterValueException(\"Unable to find account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n\n        \r\n        if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n            throw new InvalidParameterValueException(\"Can not modify system account\");\n        }\n\n        \r\n        checkAccess(getCurrentCallingAccount(), _domainMgr.getDomain(account.getDomainId()));\n\n        \r\n        Account duplicateAcccount = _accountDao.findActiveAccount(newAccountName, domainId);\n        if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {\n            throw new InvalidParameterValueException(\n                    \"There already exists an account with the name:\" + newAccountName + \" in the domain:\" + domainId + \" with existing account id:\" + duplicateAcccount.getId());\n        }\n\n        if (networkDomain != null && !networkDomain.isEmpty()) {\n            if (!NetUtils.verifyDomainName(networkDomain)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n        }\n\n        final AccountVO acctForUpdate = _accountDao.findById(account.getId());\n        acctForUpdate.setAccountName(newAccountName);\n\n        if (networkDomain != null) {\n            if (networkDomain.isEmpty()) {\n                acctForUpdate.setNetworkDomain(null);\n            } else {\n                acctForUpdate.setNetworkDomain(networkDomain);\n            }\n        }\n\n        final Account accountFinal = account;\n        success = Transaction.execute(new TransactionCallback<Boolean>() {\n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                boolean success = _accountDao.update(accountFinal.getId(), acctForUpdate);\n\n                if (details != null && success) {\n                    _accountDetailsDao.update(accountFinal.getId(), details);\n                }\n\n                return success;\n            }\n        });\n\n        if (success) {\n            CallContext.current().putContextParameter(Account.class, account.getUuid());\n            return _accountDao.findById(account.getId());\n        } else {\n            throw new CloudRuntimeException(\"Unable to update account by accountId: \" + accountId + \" OR by name: \" + accountName + \" in domain \" + domainId);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/user/AccountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1692,"status":"M"}],"commitId":"d68712eb7b0a53f6426f3bff157b14eee40c368e","commitMessage":"@@@CLOUDSTACK-3049: Implemented role update for account. (#3058)\n\n","date":"2019-01-25 20:02:56","modifiedFileCount":"3","status":"M","submitter":"Bitworks LLC"}]
