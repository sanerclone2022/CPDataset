[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public final Answer executeRequest(final Command cmd) {\n        \r\n        \r\n        \r\n        URI agentUri = null;\n        final Class<? extends Command> clazz = cmd.getClass();\n        Answer answer = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            \r\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        if (cmd instanceof NetworkElementCommand) {\n            return _vrResource.executeRequest((NetworkElementCommand)cmd);\n        }if (clazz == CheckSshCommand.class) {\n            answer = execute((CheckSshCommand)cmd);\n        } else if (clazz == GetDomRVersionCmd.class) {\n            answer = execute((GetDomRVersionCmd)cmd);\n        } else if (cmd instanceof NetworkUsageCommand) {\n            answer = execute((NetworkUsageCommand)cmd);\n        } else if (clazz == IpAssocCommand.class) {\n            answer = execute((IpAssocCommand)cmd);\n        } else if (clazz == DnsMasqConfigCommand.class) {\n            return execute((DnsMasqConfigCommand)cmd);\n        } else if (clazz == CreateIpAliasCommand.class) {\n            return execute((CreateIpAliasCommand)cmd);\n        } else if (clazz == DhcpEntryCommand.class) {\n            answer = execute((DhcpEntryCommand)cmd);\n        } else if (clazz == VmDataCommand.class) {\n            answer = execute((VmDataCommand)cmd);\n        } else if (clazz == SavePasswordCommand.class) {\n            answer = execute((SavePasswordCommand)cmd);\n        } else if (clazz == SetFirewallRulesCommand.class) {\n            answer = execute((SetFirewallRulesCommand)cmd);\n        } else if (clazz == LoadBalancerConfigCommand.class) {\n            answer = execute((LoadBalancerConfigCommand)cmd);\n        } else if (clazz == DeleteIpAliasCommand.class) {\n            return execute((DeleteIpAliasCommand)cmd);\n        } else if (clazz == PingTestCommand.class) {\n            answer = execute((PingTestCommand)cmd);\n        } else if (clazz == SetStaticNatRulesCommand.class) {\n            answer = execute((SetStaticNatRulesCommand)cmd);\n        } else if (clazz == CheckRouterCommand.class) {\n            answer = execute((CheckRouterCommand)cmd);\n        } else if (clazz == SetPortForwardingRulesCommand.class) {\n            answer = execute((SetPortForwardingRulesCommand)cmd);\n        } else if (clazz == SetSourceNatCommand.class) {\n            answer = execute((SetSourceNatCommand)cmd);\n        } else if (clazz == Site2SiteVpnCfgCommand.class) {\n            answer = execute((Site2SiteVpnCfgCommand)cmd);\n        } else if (clazz == CheckS2SVpnConnectionsCommand.class) {\n            answer = execute((CheckS2SVpnConnectionsCommand) cmd);\n        } else if (clazz == RemoteAccessVpnCfgCommand.class) {\n            answer = execute((RemoteAccessVpnCfgCommand) cmd);\n        } else if (clazz == VpnUsersCfgCommand.class) {\n            answer = execute((VpnUsersCfgCommand) cmd);\n        } else if (clazz == SetStaticRouteCommand.class) {\n            answer = execute((SetStaticRouteCommand) cmd);\n        } else if (clazz == SetMonitorServiceCommand.class) {\n            answer = execute((SetMonitorServiceCommand) cmd);\n        } else if (clazz == PlugNicCommand.class) {\n            answer = execute((PlugNicCommand)cmd);\n        } else if (clazz == UnPlugNicCommand.class) {\n            answer = execute((UnPlugNicCommand)cmd);\n        } else if (clazz == CopyCommand.class) {\n            answer = execute((CopyCommand)cmd);\n        }\n        else {\n            if (clazz == StartCommand.class) {\n                final VirtualMachineTO vmSpec = ((StartCommand)cmd).getVirtualMachine();\n                if (vmSpec.getType() != VirtualMachine.Type.User) {\n                    if (s_hypervMgr != null) {\n                        final String secondary = s_hypervMgr.prepareSecondaryStorageStore(Long.parseLong(_zoneId));\n                        if (secondary != null) {\n                            ((StartCommand)cmd).setSecondaryStorage(secondary);\n                        }\n                    } else {\n                        s_logger.error(\"Hyperv manager isn't available. Couldn't check and copy the systemvm iso.\");\n                    }\n                }\n            }\n\n            \r\n            final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n            if (ansStr == null) {\n                return Answer.createUnsupportedCommandAnswer(cmd);\n            }\n            \r\n            \r\n            final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n            final String logResult = cleanPassword(s_gson.toJson(result));\n            s_logger.debug(\"executeRequest received response \" + logResult);\n            if (result.length > 0) {\n                return result[0];\n            }\n        }\n        return answer;\n    }\n","date":"2018-01-20 05:49:27","endLine":523,"groupId":"729","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeRequest","params":"(finalCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/955c809b1c81bc1e476f77b2f489f020167e28.src","preCode":"    public final Answer executeRequest(final Command cmd) {\n        \r\n        \r\n        \r\n        URI agentUri = null;\n        final Class<? extends Command> clazz = cmd.getClass();\n        Answer answer = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            \r\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        if (cmd instanceof NetworkElementCommand) {\n            return _vrResource.executeRequest((NetworkElementCommand)cmd);\n        }if (clazz == CheckSshCommand.class) {\n            answer = execute((CheckSshCommand)cmd);\n        } else if (clazz == GetDomRVersionCmd.class) {\n            answer = execute((GetDomRVersionCmd)cmd);\n        } else if (cmd instanceof NetworkUsageCommand) {\n            answer = execute((NetworkUsageCommand)cmd);\n        } else if (clazz == IpAssocCommand.class) {\n            answer = execute((IpAssocCommand)cmd);\n        } else if (clazz == DnsMasqConfigCommand.class) {\n            return execute((DnsMasqConfigCommand)cmd);\n        } else if (clazz == CreateIpAliasCommand.class) {\n            return execute((CreateIpAliasCommand)cmd);\n        } else if (clazz == DhcpEntryCommand.class) {\n            answer = execute((DhcpEntryCommand)cmd);\n        } else if (clazz == VmDataCommand.class) {\n            answer = execute((VmDataCommand)cmd);\n        } else if (clazz == SavePasswordCommand.class) {\n            answer = execute((SavePasswordCommand)cmd);\n        } else if (clazz == SetFirewallRulesCommand.class) {\n            answer = execute((SetFirewallRulesCommand)cmd);\n        } else if (clazz == LoadBalancerConfigCommand.class) {\n            answer = execute((LoadBalancerConfigCommand)cmd);\n        } else if (clazz == DeleteIpAliasCommand.class) {\n            return execute((DeleteIpAliasCommand)cmd);\n        } else if (clazz == PingTestCommand.class) {\n            answer = execute((PingTestCommand)cmd);\n        } else if (clazz == SetStaticNatRulesCommand.class) {\n            answer = execute((SetStaticNatRulesCommand)cmd);\n        } else if (clazz == CheckRouterCommand.class) {\n            answer = execute((CheckRouterCommand)cmd);\n        } else if (clazz == SetPortForwardingRulesCommand.class) {\n            answer = execute((SetPortForwardingRulesCommand)cmd);\n        } else if (clazz == SetSourceNatCommand.class) {\n            answer = execute((SetSourceNatCommand)cmd);\n        } else if (clazz == Site2SiteVpnCfgCommand.class) {\n            answer = execute((Site2SiteVpnCfgCommand)cmd);\n        } else if (clazz == CheckS2SVpnConnectionsCommand.class) {\n            answer = execute((CheckS2SVpnConnectionsCommand) cmd);\n        } else if (clazz == RemoteAccessVpnCfgCommand.class) {\n            answer = execute((RemoteAccessVpnCfgCommand) cmd);\n        } else if (clazz == VpnUsersCfgCommand.class) {\n            answer = execute((VpnUsersCfgCommand) cmd);\n        } else if (clazz == SetStaticRouteCommand.class) {\n            answer = execute((SetStaticRouteCommand) cmd);\n        } else if (clazz == SetMonitorServiceCommand.class) {\n            answer = execute((SetMonitorServiceCommand) cmd);\n        } else if (clazz == PlugNicCommand.class) {\n            answer = execute((PlugNicCommand)cmd);\n        } else if (clazz == UnPlugNicCommand.class) {\n            answer = execute((UnPlugNicCommand)cmd);\n        } else if (clazz == CopyCommand.class) {\n            answer = execute((CopyCommand)cmd);\n        }\n        else {\n            if (clazz == StartCommand.class) {\n                final VirtualMachineTO vmSpec = ((StartCommand)cmd).getVirtualMachine();\n                if (vmSpec.getType() != VirtualMachine.Type.User) {\n                    if (s_hypervMgr != null) {\n                        final String secondary = s_hypervMgr.prepareSecondaryStorageStore(Long.parseLong(_zoneId));\n                        if (secondary != null) {\n                            ((StartCommand)cmd).setSecondaryStorage(secondary);\n                        }\n                    } else {\n                        s_logger.error(\"Hyperv manager isn't available. Couldn't check and copy the systemvm iso.\");\n                    }\n                }\n            }\n\n            \r\n            final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n            if (ansStr == null) {\n                return Answer.createUnsupportedCommandAnswer(cmd);\n            }\n            \r\n            \r\n            final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n            final String logResult = cleanPassword(s_gson.toJson(result));\n            s_logger.debug(\"executeRequest received response \" + logResult);\n            if (result.length > 0) {\n                return result[0];\n            }\n        }\n        return answer;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/resource/HypervDirectConnectResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Answer execute(final CopyCommand cmd) {\n        URI agentUri = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        cleanPassword(cmd.getSrcTO().getDataStore());\n        cleanPassword(cmd.getDestTO().getDataStore());\n\n        \r\n        final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n        if (ansStr == null) {\n            return Answer.createUnsupportedCommandAnswer(cmd);\n        }\n\n        final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n        final String logResult = cleanPassword(s_gson.toJson(result));\n        s_logger.debug(\"executeRequest received response \" + logResult);\n        if (result.length > 0) {\n            return result[0];\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":554,"groupId":"9600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/955c809b1c81bc1e476f77b2f489f020167e28.src","preCode":"    private Answer execute(final CopyCommand cmd) {\n        URI agentUri = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        cleanPassword(cmd.getSrcTO().getDataStore());\n        cleanPassword(cmd.getDestTO().getDataStore());\n\n        \r\n        final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n        if (ansStr == null) {\n            return Answer.createUnsupportedCommandAnswer(cmd);\n        }\n\n        final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n        final String logResult = cleanPassword(s_gson.toJson(result));\n        s_logger.debug(\"executeRequest received response \" + logResult);\n        if (result.length > 0) {\n            return result[0];\n        }\n\n        return null;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/resource/HypervDirectConnectResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-01-25 06:22:39","commitOrder":2,"curCode":"    public final Answer executeRequest(final Command cmd) {\n        \r\n        \r\n        \r\n        URI agentUri = null;\n        final Class<? extends Command> clazz = cmd.getClass();\n        Answer answer = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            \r\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        if (cmd instanceof NetworkElementCommand) {\n            return _vrResource.executeRequest((NetworkElementCommand)cmd);\n        }if (clazz == CheckSshCommand.class) {\n            answer = execute((CheckSshCommand)cmd);\n        } else if (cmd instanceof NetworkUsageCommand) {\n            answer = execute((NetworkUsageCommand)cmd);\n        } else if (clazz == PingTestCommand.class) {\n            answer = execute((PingTestCommand)cmd);\n        } else if (clazz == PlugNicCommand.class) {\n            answer = execute((PlugNicCommand)cmd);\n        } else if (clazz == UnPlugNicCommand.class) {\n            answer = execute((UnPlugNicCommand)cmd);\n        } else if (clazz == CopyCommand.class) {\n            answer = execute((CopyCommand)cmd);\n        }\n        else {\n            if (clazz == StartCommand.class) {\n                final VirtualMachineTO vmSpec = ((StartCommand)cmd).getVirtualMachine();\n                if (vmSpec.getType() != VirtualMachine.Type.User) {\n                    if (s_hypervMgr != null) {\n                        final String secondary = s_hypervMgr.prepareSecondaryStorageStore(Long.parseLong(_zoneId));\n                        if (secondary != null) {\n                            ((StartCommand)cmd).setSecondaryStorage(secondary);\n                        }\n                    } else {\n                        s_logger.error(\"Hyperv manager isn't available. Couldn't check and copy the systemvm iso.\");\n                    }\n                }\n            }\n\n            \r\n            final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n            if (ansStr == null) {\n                return Answer.createUnsupportedCommandAnswer(cmd);\n            }\n            \r\n            \r\n            final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n            final String logResult = cleanPassword(s_gson.toJson(result));\n            s_logger.debug(\"executeRequest received response \" + logResult);\n            if (result.length > 0) {\n                return result[0];\n            }\n        }\n        return answer;\n    }\n","date":"2019-01-25 06:22:39","endLine":483,"groupId":"122794","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeRequest","params":"(finalCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/97/9be732f2bbf2adf4ef5d7edb33a201b0c39ade.src","preCode":"    public final Answer executeRequest(final Command cmd) {\n        \r\n        \r\n        \r\n        URI agentUri = null;\n        final Class<? extends Command> clazz = cmd.getClass();\n        Answer answer = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            \r\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        if (cmd instanceof NetworkElementCommand) {\n            return _vrResource.executeRequest((NetworkElementCommand)cmd);\n        }if (clazz == CheckSshCommand.class) {\n            answer = execute((CheckSshCommand)cmd);\n        } else if (clazz == GetDomRVersionCmd.class) {\n            answer = execute((GetDomRVersionCmd)cmd);\n        } else if (cmd instanceof NetworkUsageCommand) {\n            answer = execute((NetworkUsageCommand)cmd);\n        } else if (clazz == IpAssocCommand.class) {\n            answer = execute((IpAssocCommand)cmd);\n        } else if (clazz == DnsMasqConfigCommand.class) {\n            return execute((DnsMasqConfigCommand)cmd);\n        } else if (clazz == CreateIpAliasCommand.class) {\n            return execute((CreateIpAliasCommand)cmd);\n        } else if (clazz == DhcpEntryCommand.class) {\n            answer = execute((DhcpEntryCommand)cmd);\n        } else if (clazz == VmDataCommand.class) {\n            answer = execute((VmDataCommand)cmd);\n        } else if (clazz == SavePasswordCommand.class) {\n            answer = execute((SavePasswordCommand)cmd);\n        } else if (clazz == SetFirewallRulesCommand.class) {\n            answer = execute((SetFirewallRulesCommand)cmd);\n        } else if (clazz == LoadBalancerConfigCommand.class) {\n            answer = execute((LoadBalancerConfigCommand)cmd);\n        } else if (clazz == DeleteIpAliasCommand.class) {\n            return execute((DeleteIpAliasCommand)cmd);\n        } else if (clazz == PingTestCommand.class) {\n            answer = execute((PingTestCommand)cmd);\n        } else if (clazz == SetStaticNatRulesCommand.class) {\n            answer = execute((SetStaticNatRulesCommand)cmd);\n        } else if (clazz == CheckRouterCommand.class) {\n            answer = execute((CheckRouterCommand)cmd);\n        } else if (clazz == SetPortForwardingRulesCommand.class) {\n            answer = execute((SetPortForwardingRulesCommand)cmd);\n        } else if (clazz == SetSourceNatCommand.class) {\n            answer = execute((SetSourceNatCommand)cmd);\n        } else if (clazz == Site2SiteVpnCfgCommand.class) {\n            answer = execute((Site2SiteVpnCfgCommand)cmd);\n        } else if (clazz == CheckS2SVpnConnectionsCommand.class) {\n            answer = execute((CheckS2SVpnConnectionsCommand) cmd);\n        } else if (clazz == RemoteAccessVpnCfgCommand.class) {\n            answer = execute((RemoteAccessVpnCfgCommand) cmd);\n        } else if (clazz == VpnUsersCfgCommand.class) {\n            answer = execute((VpnUsersCfgCommand) cmd);\n        } else if (clazz == SetStaticRouteCommand.class) {\n            answer = execute((SetStaticRouteCommand) cmd);\n        } else if (clazz == SetMonitorServiceCommand.class) {\n            answer = execute((SetMonitorServiceCommand) cmd);\n        } else if (clazz == PlugNicCommand.class) {\n            answer = execute((PlugNicCommand)cmd);\n        } else if (clazz == UnPlugNicCommand.class) {\n            answer = execute((UnPlugNicCommand)cmd);\n        } else if (clazz == CopyCommand.class) {\n            answer = execute((CopyCommand)cmd);\n        }\n        else {\n            if (clazz == StartCommand.class) {\n                final VirtualMachineTO vmSpec = ((StartCommand)cmd).getVirtualMachine();\n                if (vmSpec.getType() != VirtualMachine.Type.User) {\n                    if (s_hypervMgr != null) {\n                        final String secondary = s_hypervMgr.prepareSecondaryStorageStore(Long.parseLong(_zoneId));\n                        if (secondary != null) {\n                            ((StartCommand)cmd).setSecondaryStorage(secondary);\n                        }\n                    } else {\n                        s_logger.error(\"Hyperv manager isn't available. Couldn't check and copy the systemvm iso.\");\n                    }\n                }\n            }\n\n            \r\n            final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n            if (ansStr == null) {\n                return Answer.createUnsupportedCommandAnswer(cmd);\n            }\n            \r\n            \r\n            final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n            final String logResult = cleanPassword(s_gson.toJson(result));\n            s_logger.debug(\"executeRequest received response \" + logResult);\n            if (result.length > 0) {\n                return result[0];\n            }\n        }\n        return answer;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/resource/HypervDirectConnectResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private Answer execute(final CopyCommand cmd) {\n        URI agentUri = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        cleanPassword(cmd.getSrcTO().getDataStore());\n        cleanPassword(cmd.getDestTO().getDataStore());\n\n        \r\n        final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n        if (ansStr == null) {\n            return Answer.createUnsupportedCommandAnswer(cmd);\n        }\n\n        final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n        final String logResult = cleanPassword(s_gson.toJson(result));\n        s_logger.debug(\"executeRequest received response \" + logResult);\n        if (result.length > 0) {\n            return result[0];\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":554,"groupId":"122794","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/955c809b1c81bc1e476f77b2f489f020167e28.src","preCode":"    private Answer execute(final CopyCommand cmd) {\n        URI agentUri = null;\n        try {\n            final String cmdName = cmd.getClass().getName();\n            agentUri =\n                    new URI(\"https\", null, _agentIp, _port,\n                            \"/api/HypervResource/\" + cmdName, null, null);\n        } catch (final URISyntaxException e) {\n            final String errMsg = \"Could not generate URI for Hyper-V agent\";\n            s_logger.error(errMsg, e);\n            return null;\n        }\n        cleanPassword(cmd.getSrcTO().getDataStore());\n        cleanPassword(cmd.getDestTO().getDataStore());\n\n        \r\n        final String ansStr = postHttpRequest(s_gson.toJson(cmd), agentUri);\n        if (ansStr == null) {\n            return Answer.createUnsupportedCommandAnswer(cmd);\n        }\n\n        final Answer[] result = s_gson.fromJson(ansStr, Answer[].class);\n        final String logResult = cleanPassword(s_gson.toJson(result));\n        s_logger.debug(\"executeRequest received response \" + logResult);\n        if (result.length > 0) {\n            return result[0];\n        }\n\n        return null;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/resource/HypervDirectConnectResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"N"}],"commitId":"97ddd8dffd4d2c2892ae006ce05fb11271f477ed","commitMessage":"@@@Fix some LGTM alerts (#3143)\n\n* Fix some LGTM alerts\n\n* address review comments from Gabriel Brascher and Rafael Weingartner\n","date":"2019-01-25 06:22:39","modifiedFileCount":"6","status":"M","submitter":"Malcolm Taylor"}]
