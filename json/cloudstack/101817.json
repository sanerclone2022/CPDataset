[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                        if (startIp != null\n                                && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                            defaultNetworkStartIp = startIp;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                            defaultNetworkStartIpv6 = startIpv6;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                        }\n                    }\n                }\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork, null));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","date":"2018-01-20 05:49:27","endLine":761,"groupId":"16252","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configureGuestNic","params":"(finalRouterDeploymentDefinitionrouterDeploymentDefinition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fa/17e7bc315947670f7b3f615f4f7bc699034bda.src","preCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                        if (startIp != null\n                                && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                            defaultNetworkStartIp = startIp;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                            defaultNetworkStartIpv6 = startIpv6;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                        }\n                    }\n                }\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork, null));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork, null));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","date":"2018-01-20 05:49:27","endLine":132,"groupId":"16252","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createGuestNicProfileForVpcRouter","params":"(finalRouterDeploymentDefinitionvpcRouterDeploymentDefinition@finalNetworkguestNetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/09/059855319942d46748db0ef79efa68f81f514d.src","preCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork, null));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NicProfileHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-03-14 16:22:48","codes":[{"authorDate":"2020-03-14 16:22:48","commitOrder":2,"curCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                        if (startIp != null\n                                && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                            defaultNetworkStartIp = startIp;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                            defaultNetworkStartIpv6 = startIpv6;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                        }\n                    }\n                }\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","date":"2020-03-14 16:22:48","endLine":769,"groupId":"16252","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configureGuestNic","params":"(finalRouterDeploymentDefinitionrouterDeploymentDefinition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/39/d902ffdf448a362fa18a8cddc14cc2682f36ed.src","preCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                        if (startIp != null\n                                && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                            defaultNetworkStartIp = startIp;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                            defaultNetworkStartIpv6 = startIpv6;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                        }\n                    }\n                }\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork, null));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":702,"status":"M"},{"authorDate":"2020-03-14 16:22:48","commitOrder":2,"curCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","date":"2020-03-14 16:22:48","endLine":134,"groupId":"16252","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createGuestNicProfileForVpcRouter","params":"(finalRouterDeploymentDefinitionvpcRouterDeploymentDefinition@finalNetworkguestNetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/58/8e83271e98a3dae2263e06a7290e76d3659712.src","preCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(_ipAddrMgr.acquireGuestIpAddress(guestNetwork, null));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NicProfileHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"3575f5ed5214b95434d3f8ab795f0d33265f199f","commitMessage":"@@@vrouter in redundant mode acquire guest ips from first ip of th? (#3587)\n\n","date":"2020-03-14 16:22:48","modifiedFileCount":"5","status":"M","submitter":"Arthur Halet"},{"authorTime":"2020-03-14 16:22:48","codes":[{"authorDate":"2020-08-28 17:30:18","commitOrder":3,"curCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                        if (startIp != null\n                                && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                            defaultNetworkStartIp = startIp;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                            defaultNetworkStartIpv6 = startIpv6;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                        }\n                    }\n                }\n            } else if (placeholder != null) {\n                \r\n                _nicDao.remove(placeholder.getId());\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","date":"2020-08-28 17:30:18","endLine":772,"groupId":"16252","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configureGuestNic","params":"(finalRouterDeploymentDefinitionrouterDeploymentDefinition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/39/b3f0da0e73096f261432b77ad1ea394527baa5.src","preCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                        if (startIp != null\n                                && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                            defaultNetworkStartIp = startIp;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                            defaultNetworkStartIpv6 = startIpv6;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                        }\n                    }\n                }\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":702,"status":"M"},{"authorDate":"2020-03-14 16:22:48","commitOrder":3,"curCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","date":"2020-03-14 16:22:48","endLine":134,"groupId":"16252","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createGuestNicProfileForVpcRouter","params":"(finalRouterDeploymentDefinitionvpcRouterDeploymentDefinition@finalNetworkguestNetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/58/8e83271e98a3dae2263e06a7290e76d3659712.src","preCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NicProfileHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"}],"commitId":"749e302e0ebff084bae91f855a11c6558b32b213","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-08-28 17:30:18","modifiedFileCount":"5","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-03-14 16:22:48","codes":[{"authorDate":"2021-02-18 16:24:09","commitOrder":4,"curCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        NetworkDetailVO routerIpDetail = networkDetailsDao.findDetail(guestNetwork.getId(), ApiConstants.ROUTER_IP);\n                        String routerIp = routerIpDetail != null ? routerIpDetail.getValue() : null;\n                        if (routerIp != null) {\n                            defaultNetworkStartIp = routerIp;\n                        } else {\n                            final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                            if (startIp != null\n                                    && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                                defaultNetworkStartIp = startIp;\n                            } else if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                        + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                            }\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        NetworkDetailVO routerIpDetail = networkDetailsDao.findDetail(guestNetwork.getId(), ApiConstants.ROUTER_IPV6);\n                        String routerIpv6 = routerIpDetail != null ? routerIpDetail.getValue() : null;\n                        if (routerIpv6 != null) {\n                            defaultNetworkStartIpv6 = routerIpv6;\n                        } else {\n                            final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                            if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                                defaultNetworkStartIpv6 = startIpv6;\n                            } else if (s_logger.isDebugEnabled()) {\n                                s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                        + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                            }\n                        }\n                    }\n                }\n            } else if (placeholder != null) {\n                \r\n                _nicDao.remove(placeholder.getId());\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","date":"2021-02-18 16:24:09","endLine":789,"groupId":"101817","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"configureGuestNic","params":"(finalRouterDeploymentDefinitionrouterDeploymentDefinition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/f03c5eab31024e6045e3277a40cba7ced177da.src","preCode":"    public LinkedHashMap<Network, List<? extends NicProfile>> configureGuestNic(final RouterDeploymentDefinition routerDeploymentDefinition)\n            throws ConcurrentOperationException, InsufficientAddressCapacityException {\n\n        \r\n        final LinkedHashMap<Network, List<? extends NicProfile>> networks = new LinkedHashMap<Network, List<? extends NicProfile>>(3);\n        \r\n        final Network guestNetwork = routerDeploymentDefinition.getGuestNetwork();\n\n        if (guestNetwork != null) {\n            s_logger.debug(\"Adding nic for Virtual Router in Guest network \" + guestNetwork);\n            String defaultNetworkStartIp = null, defaultNetworkStartIpv6 = null;\n            final Nic placeholder = _networkModel.getPlaceholderNicForRouter(guestNetwork, routerDeploymentDefinition.getPodId());\n            if (!routerDeploymentDefinition.isPublicNetwork()) {\n                if (guestNetwork.getCidr() != null) {\n                    if (placeholder != null && placeholder.getIPv4Address() != null) {\n                        s_logger.debug(\"Requesting ipv4 address \" + placeholder.getIPv4Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIp = placeholder.getIPv4Address();\n                    } else {\n                        final String startIp = _networkModel.getStartIpAddress(guestNetwork.getId());\n                        if (startIp != null\n                                && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(), startIp).getAllocatedTime() == null) {\n                            defaultNetworkStartIp = startIp;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv4 \" + startIp + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ip address from the range\");\n                        }\n                    }\n                }\n\n                if (guestNetwork.getIp6Cidr() != null) {\n                    if (placeholder != null && placeholder.getIPv6Address() != null) {\n                        s_logger.debug(\"Requesting ipv6 address \" + placeholder.getIPv6Address() + \" stored in placeholder nic for the network \"\n                                + guestNetwork);\n                        defaultNetworkStartIpv6 = placeholder.getIPv6Address();\n                    } else {\n                        final String startIpv6 = _networkModel.getStartIpv6Address(guestNetwork.getId());\n                        if (startIpv6 != null && _ipv6Dao.findByNetworkIdAndIp(guestNetwork.getId(), startIpv6) == null) {\n                            defaultNetworkStartIpv6 = startIpv6;\n                        } else if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"First ipv6 \" + startIpv6 + \" in network id=\" + guestNetwork.getId()\n                                    + \" is already allocated, can't use it for domain router; will get random ipv6 address from the range\");\n                        }\n                    }\n                }\n            } else if (placeholder != null) {\n                \r\n                _nicDao.remove(placeholder.getId());\n            }\n\n            final NicProfile gatewayNic = new NicProfile(defaultNetworkStartIp, defaultNetworkStartIpv6);\n            if (routerDeploymentDefinition.isPublicNetwork()) {\n                if (routerDeploymentDefinition.isRedundant()) {\n                    gatewayNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n                } else {\n                    gatewayNic.setIPv4Address(guestNetwork.getGateway());\n                }\n                gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n                gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());\n                gatewayNic.setMode(guestNetwork.getMode());\n                final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n                gatewayNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n            } else {\n                gatewayNic.setDefaultNic(true);\n            }\n\n            networks.put(guestNetwork, new ArrayList<NicProfile>(Arrays.asList(gatewayNic)));\n        }\n        return networks;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"M"},{"authorDate":"2020-03-14 16:22:48","commitOrder":4,"curCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","date":"2020-03-14 16:22:48","endLine":134,"groupId":"101817","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createGuestNicProfileForVpcRouter","params":"(finalRouterDeploymentDefinitionvpcRouterDeploymentDefinition@finalNetworkguestNetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/58/8e83271e98a3dae2263e06a7290e76d3659712.src","preCode":"    public NicProfile createGuestNicProfileForVpcRouter(final RouterDeploymentDefinition vpcRouterDeploymentDefinition, final Network guestNetwork) {\n        final NicProfile guestNic = new NicProfile();\n\n        if (vpcRouterDeploymentDefinition.isRedundant()) {\n            guestNic.setIPv4Address(this.acquireGuestIpAddressForVrouterRedundant(guestNetwork));\n        } else {\n            guestNic.setIPv4Address(guestNetwork.getGateway());\n        }\n\n        guestNic.setBroadcastUri(guestNetwork.getBroadcastUri());\n        guestNic.setBroadcastType(guestNetwork.getBroadcastDomainType());\n        guestNic.setIsolationUri(guestNetwork.getBroadcastUri());\n        guestNic.setMode(guestNetwork.getMode());\n        final String gatewayCidr = _networkModel.getValidNetworkCidr(guestNetwork);\n        guestNic.setIPv4Netmask(NetUtils.getCidrNetmask(gatewayCidr));\n\n        return guestNic;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NicProfileHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"}],"commitId":"aa01580381c931512d62edbc658865f776ce2efa","commitMessage":"@@@network: Specify IP for VR in shared networks (#4503)\n\nThis PR enables admins to specify IP for a VR in a shared network.","date":"2021-02-18 16:24:09","modifiedFileCount":"16","status":"M","submitter":"Pearl Dsilva"}]
